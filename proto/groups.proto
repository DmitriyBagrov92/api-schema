syntax = "proto3";

package dialog;

import "timestamp.proto";
import "wrappers.proto";
import "empty.proto";
import "annotations.proto";
import "definitions.proto";
import "peers.proto";
import "media_and_files.proto";
import "scalapb.proto";

option go_package = "dialog";
option java_package = "im.dlg.grpc.services";

// Member information
message Member {
    string user_id = 1;
    int64 invited_at = 2;
    repeated GroupAdminPermission permissions = 3; // List of member permissions
    int64 clock = 4;
    google.protobuf.Timestamp deleted_at = 5;
}

enum GroupType {
    GROUP_TYPE_UNKNOWN = 0;
    GROUP_TYPE_GROUP = 1;
    GROUP_TYPE_CHANNEL = 2;
    reserved 3;
    GROUP_TYPE_IMPORTANT_TOPIC = 4;
}

// Group information
message Group {
    string id = 1; /// group id
    int64 access_hash = 2 [(dlg).log=log_confidential]; /// Access hash of group
    GroupData data = 29;
    Member self_member = 30;
}

message GroupData {
    reserved 1, 9, 13;
    string title = 2 [(dlg).log=log_sensitive]; /// Title of group
    Avatar avatar = 3; /// Avatar of group
    /// Number of members
    int32 members_amount = 4;
    /// Group Type. Used only for displaying information. Default is GROUP.
    GroupType group_type = 5;
    string owner_user_id = 6; /// Group creator
    google.protobuf.Timestamp created_at = 7; /// Date of creation
    /// About of group
    google.protobuf.StringValue about = 8 [(dlg).log=log_sensitive];
    repeated GroupAdminPermission base_permissions = 10;
    int64 clock = 11;
    google.protobuf.Int64Value pinned_at = 12;
    google.protobuf.Int32Value members_count_limit = 14;
    google.protobuf.Int64Value deleted_at = 15;
    bool is_public = 16;
    bool is_closed = 17; // closure of group is more like freezing -- everything (including history) becomes immutable
    Peer source = 18; // source peer&message for this group (will be first message in history after service message about group creation)
    repeated string linked_group_ids = 19; // linked groups
    google.protobuf.Timestamp due_date = 20; // if set this group will be "closed" after specified date
}

message GroupPartialInfo {
    reserved 6;
    string group_id = 1;
    int64 access_hash = 2 [(dlg).log=log_confidential];
    int64 clock = 3;
    GroupType type = 4;
    string title = 5;
    Avatar avatar = 7;
    Member self_member = 8;
    google.protobuf.Int64Value pinned_at = 9;
    bool is_public = 10;
}

// Update about group data changed
message UpdateGroup {
    string group_id = 1;
    GroupData data = 2;
}

// Loading group members
message RequestLoadMembers {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    reserved 1;
    string group_id = 4;
    int32 limit = 2;
    google.protobuf.BytesValue next = 3; /// cursor
}

message ResponseLoadMembers {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    google.protobuf.BytesValue cursor = 1;
    repeated Member members = 2;
}

// Update about title changed
message UpdateGroupTitleChanged {
    string group_id = 1;
    string title = 2 [(dlg).log=log_sensitive];
}

// Update about avatar changed
message UpdateGroupAvatarChanged {
    string group_id = 1;
    Avatar avatar = 2;
}

// Update about about changed
message UpdateGroupAboutChanged {
    string group_id = 1;
    google.protobuf.StringValue about = 2 [(dlg).log=log_sensitive];
}

// Update about owner changed
message UpdateGroupOwnerChanged {
    string group_id = 1;
    string user_id = 2; /// new owner
}

// Update about base group permissions changed
message UpdateGroupBasePermissionsChanged {
    string group_id = 1;
    /// new base permissions
    repeated GroupAdminPermission base_permissions = 2;
}

// Update about members updated
message UpdateGroupMembersUpdated {
    string group_id = 1;
    repeated Member members = 2;
}

// Update about members changed
message UpdateGroupMemberDiff {
    string group_id = 1;
    repeated string removed_users = 2;
    repeated Member added_members = 3;
    int32 members_count = 4;
}

// Update about members count changed
message UpdateGroupMembersCountChanged {
    string group_id = 1;
    int32 members_count = 2;
}

// Creating group chat
message RequestCreateGroup {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string rid = 1; /// Id for query deduplication
    reserved 2, 6;
    string title = 3 [(dlg).log=log_sensitive];
    repeated UserOutPeer users = 4; /// members
    GroupType group_type = 5; /// group or channel

    /// Base permissions for invited members
    repeated GroupAdminPermission base_permissions = 7;
    bool is_public = 8;
    Peer source = 9;
    google.protobuf.Timestamp due_date = 10;
}

message ResponseCreateGroup {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    Group group = 1; /// created group
    repeated UserOutPeer user_peers = 2; /// empty if dropped by optimizations
}

// Changing group title
message RequestEditGroupTitle {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    reserved 1;

    string group_id = 4;
    string rid = 2; /// Id for query deduplication
    string title = 3 [(dlg).log=log_sensitive];
}

// Changing group avatar
message RequestEditGroupAvatar {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    reserved 1;

    string group_id = 4;
    string rid = 2; /// Id for query deduplication
    FileLocation file_location = 3;
}

// Removing group avatar
message RequestRemoveGroupAvatar {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    reserved 1;

    string group_id = 3;
    string rid = 2; /// Id for query deduplication
}

// Edit Group About
message RequestEditGroupAbout {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    reserved 1;

    string group_id = 4;
    string rid = 2; /// Id for query deduplication
    google.protobuf.StringValue about = 3 [(dlg).log=log_sensitive];
}

message RequestEditGroupBasePermissions {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    reserved 1;

    string group_id = 5;
    string random_id = 2; /// Id for query deduplication
    repeated GroupAdminPermission granted_permissions = 3;
    repeated GroupAdminPermission revoked_permissions = 4;
}

message RequestEditMemberPermissions {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";

    string group_id = 5;
    string user_id = 6;
    repeated GroupAdminPermission granted_permissions = 3;
    repeated GroupAdminPermission revoked_permissions = 4;
}

message ResponseMember {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    Member member = 1;
}

// Inviting user to group
message RequestInviteUser {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    reserved 1;

    string group_id = 4;
    string rid = 2; /// Id for query deduplication
    UserOutPeer user = 3;
}

// Leaving group
message RequestLeaveGroup {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    reserved 1;

    string group_id = 3;
    string rid = 2; /// Id for query deduplication
}

message RequestCloseGroup {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string group_id = 1;
    string rid = 2; /// Id for query deduplication
    google.protobuf.StringValue reason = 3; // will be sent as text message on behalf of closing user right before the service message
}

message RequestOpenGroup {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string group_id = 1;
    string rid = 2; /// Id for query deduplication
    google.protobuf.StringValue reason = 3; // will be sent as text message on behaolf of opening user right after the service message
}

// Kicking user from group
message RequestKickUser {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    reserved 1, 3;

    string group_id = 4;
    string rid = 2; /// Id for query deduplication
    string user_id = 5;
}

/// Possible permissions on a group
enum GroupAdminPermission {
    GROUP_ADMIN_PERMISSION_UNKNOWN = 0;
    reserved 1;
    GROUP_ADMIN_PERMISSION_INVITE = 2;
    GROUP_ADMIN_PERMISSION_KICK = 3;
    GROUP_ADMIN_PERMISSION_UPDATEINFO = 4;
    GROUP_ADMIN_PERMISSION_SETPERMISSIONS = 5;
    GROUP_ADMIN_PERMISSION_EDITMESSAGE = 6;
    GROUP_ADMIN_PERMISSION_DELETEMESSAGE = 7;
    GROUP_ADMIN_PERMISSION_GETINTEGRATIONTOKEN = 8;
    GROUP_ADMIN_PERMISSION_SENDMESSAGE = 9;
    GROUP_ADMIN_PERMISSION_PINMESSAGE = 10;
    GROUP_ADMIN_PERMISSION_VIEWMEMBERS = 11;
    GROUP_ADMIN_PERMISSION_LEAVE = 12; /// read only permission
    GROUP_ADMIN_PERMISSION_TARGETING = 13;
    GROUP_ADMIN_PERMISSION_DELETE = 14;
    GROUP_ADMIN_PERMISSION_MANAGE_CONFERENCE = 15;
    GROUP_ADMIN_PERMISSION_OPEN_AND_CLOSE = 16; // _FROZEN ?
}

// Make user admin
message RequestMakeUserAdmin {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    reserved 1, 2;

    string group_id = 4;
    string user_id = 5;
    repeated GroupAdminPermission permissions = 3;
}

// A struct mapping a group member to their permissions
// userId the id of the group member
// permissions a list of permissions that user has
message GroupMemberPermission {
    string user_id = 1;
    repeated GroupAdminPermission permissions = 2;
}

// Fetches the group administration permissions for each of the users from the list
message RequestGetGroupMemberPermissions {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string group_id = 1;
    repeated string user_ids = 2;
}

message ResponseGetGroupMemberPermissions {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    repeated GroupMemberPermission permissions = 1;
}

// Update about the user's permissions
message UpdateGroupMemberPermissionsChanged {
    string group_id = 1;
    string user_id = 2;
    repeated GroupAdminPermission permissions = 3;
}

// Transfer ownership of group
message RequestTransferOwnership {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    reserved 1;

    string group_id = 3;
    string new_owner = 2;
}

// Response for invite url methods
message ResponseInviteUrl {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    string url = 1;
}

// Building invite url
message RequestGetGroupInviteUrl {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    reserved 1;

    string group_id = 2;
}

// Get group invite url base
message RequestGetGroupInviteUrlBase {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
}

message ResponseGetGroupInviteUrlBase {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    string url = 1;
}

// Revoking invite urls
message RequestRevokeInviteUrl {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    reserved 1;
    string group_id = 2;
}

// Join group method
message RequestJoinGroup {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string token = 1;
}

message ResponseJoinGroup {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";

    Group group = 1;
    repeated UserOutPeer user_peers = 2; /// empty if dropped by optimizations
}

// Join group by peer
message RequestJoinGroupByPeer {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    reserved 1;
    string group_id = 2;
}

message RequestDeleteGroup {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string group_id = 1;
}

// get group info by invite token
message RequestGetGroupPartialInfo {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string token = 1;
}

message RequestChangeGroupPublicity {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string group_id = 1;
    bool is_public = 2;
}

/**
 * Update notifies that some user got invited to the group
 */
 message UpdateGroupMemberInvited {
    string group_id = 1;
    Member member = 2;
}

service Groups {
    rpc LoadMembers (RequestLoadMembers) returns (ResponseLoadMembers) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/LoadMembers"
            body: "*"
        };
    }
    rpc CreateGroup (RequestCreateGroup) returns (ResponseCreateGroup) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/CreateGroup"
            body: "*"
        };
    }
    rpc EditGroupTitle (RequestEditGroupTitle) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/EditGroupTitle"
            body: "*"
        };
    }
    rpc EditGroupAvatar (RequestEditGroupAvatar) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/EditGroupAvatar"
            body: "*"
        };
    }
    rpc RemoveGroupAvatar (RequestRemoveGroupAvatar) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/RemoveGroupAvatar"
            body: "*"
        };
    }
    rpc EditGroupAbout (RequestEditGroupAbout) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/EditGroupAbout"
            body: "*"
        };
    }
    rpc EditGroupBasePermissions (RequestEditGroupBasePermissions) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/EditGroupBasePermissions"
            body: "*"
        };
    }
    rpc InviteUser (RequestInviteUser) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/InviteUser"
            body: "*"
        };
    }
    rpc LeaveGroup (RequestLeaveGroup) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/LeaveGroup"
            body: "*"
        };
    }
    rpc CloseGroup (RequestCloseGroup) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/CloseGroup"
            body: "*"
        };
    }
    rpc OpenGroup (RequestOpenGroup) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/OpenGroup"
            body: "*"
        };
    }
    rpc KickUser (RequestKickUser) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/KickUser"
            body: "*"
        };
    }
    rpc MakeUserAdmin (RequestMakeUserAdmin) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/MakeUserAdmin"
            body: "*"
        };
    }
    rpc GetGroupMemberPermissions (RequestGetGroupMemberPermissions) returns (ResponseGetGroupMemberPermissions) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/GetGroupMemberPermissions"
            body: "*"
        };
    }
    rpc EditMemberPermissions (RequestEditMemberPermissions) returns (ResponseMember) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/EditMemberPermissions"
            body: "*"
        };
    }
    rpc TransferOwnership (RequestTransferOwnership) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/TransferOwnership"
            body: "*"
        };
    }
    rpc GetGroupInviteUrl (RequestGetGroupInviteUrl) returns (ResponseInviteUrl) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/GetGroupInviteUrl"
            body: "*"
        };
    }
    rpc GetGroupInviteUrlBase (RequestGetGroupInviteUrlBase) returns (ResponseGetGroupInviteUrlBase) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/GetGroupInviteUrlBase"
            body: "*"
        };
    }
    rpc RevokeInviteUrl (RequestRevokeInviteUrl) returns (ResponseInviteUrl) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/RevokeInviteUrl"
            body: "*"
        };
    }
    rpc JoinGroup (RequestJoinGroup) returns (ResponseJoinGroup) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/JoinGroup"
            body: "*"
        };
    }
    rpc JoinGroupByPeer (RequestJoinGroupByPeer) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/JoinGroupByPeer"
            body: "*"
        };
    }
    rpc DeleteGroup (RequestDeleteGroup) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/DeleteGroup"
            body: "*"
        };
    }
    rpc GetGroupPartialInfo (RequestGetGroupPartialInfo) returns (GroupPartialInfo) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/GetGrpoupPartialInfo"
            body: "*"
        };
    }
    rpc ChangeGroupPublicity (RequestChangeGroupPublicity) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/ChangeGroupPublicity"
            body: "*"
        };
    }
}

service GroupsAsync {
    rpc CreateGroup (RequestCreateGroup) returns (google.protobuf.Empty);
    rpc EditGroupTitle (RequestEditGroupTitle) returns (google.protobuf.Empty);
    rpc EditGroupAvatar (RequestEditGroupAvatar) returns (google.protobuf.Empty);
    rpc RemoveGroupAvatar (RequestRemoveGroupAvatar) returns (google.protobuf.Empty);
    rpc EditGroupAbout (RequestEditGroupAbout) returns (google.protobuf.Empty);
    rpc EditGroupBasePermissions (RequestEditGroupBasePermissions) returns (google.protobuf.Empty);
    rpc InviteUser (RequestInviteUser) returns (google.protobuf.Empty);
    rpc LeaveGroup (RequestLeaveGroup) returns (google.protobuf.Empty);
    rpc KickUser (RequestKickUser) returns (google.protobuf.Empty);
    rpc MakeUserAdmin (RequestMakeUserAdmin) returns (google.protobuf.Empty);
    rpc EditMemberPermissions (RequestEditMemberPermissions) returns (google.protobuf.Empty);
    rpc TransferOwnership (RequestTransferOwnership) returns (google.protobuf.Empty);
    rpc JoinGroup (RequestJoinGroup) returns (google.protobuf.Empty);
    rpc JoinGroupByPeer (RequestJoinGroupByPeer) returns (google.protobuf.Empty);
    rpc DeleteGroup (RequestDeleteGroup) returns (google.protobuf.Empty);
}
