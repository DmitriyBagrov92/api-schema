syntax = "proto3";

package dialog;

import "timestamp.proto";
import "wrappers.proto";
import "empty.proto";
import "annotations.proto";
import "definitions.proto";
import "peers.proto";
import "media_and_files.proto";
import "scalapb.proto";

option go_package = "dialog";
option java_package = "im.dlg.grpc.services";

// Member information
message Member {
    string user_id = 1 [(dlg).log="visible"];
    int64 invited_at = 2 [(dlg).log="visible"];
    repeated GroupAdminPermission permissions = 3 [(dlg).log="visible"]; // List of member permissions
    int64 clock = 4 [(dlg).log="visible"];
    google.protobuf.Timestamp deleted_at = 5 [(dlg).log="visible"];
}

enum GroupType {
    GROUP_TYPE_UNKNOWN = 0;
    GROUP_TYPE_GROUP = 1;
    GROUP_TYPE_CHANNEL = 2;
    GROUP_TYPE_THREAD = 3;
}

// Group information
message Group {
    string id = 1 [(dlg).log="visible"]; /// group id
    int64 access_hash = 2 [(dlg).log="danger"]; /// Access hash of group
    GroupData data = 29;
    Member self_member = 30;
}

message GroupData {
    string space_id = 1;
    string title = 2 [(dlg).log="hidden"]; /// Title of group
    Avatar avatar = 3 [(dlg).log="compact"]; /// Avatar of group
    /// Number of members
    int32 members_amount = 4 [(dlg).log="visible"];
    /// Group Type. Used only for displaying information. Default is GROUP.
    GroupType group_type = 5 [(dlg).log="visible"];
    string owner_user_id = 6 [(dlg).log="visible"]; /// Group creator
    google.protobuf.Timestamp created_at = 7 [(dlg).log="visible"]; /// Date of creation
    /// About of group
    google.protobuf.StringValue about = 8 [(dlg).log="hidden"];
    /// Group short name
    google.protobuf.StringValue shortname = 9 [(dlg).log="visible"];
    repeated GroupAdminPermission base_permissions = 10 [(dlg).log="visible"];
    int64 clock = 11 [(dlg).log="visible"];
    google.protobuf.Int64Value pinned_at = 12;
    google.protobuf.StringValue conference_link = 13;
    google.protobuf.Int32Value members_count_limit = 14;
    google.protobuf.Int64Value deleted_at = 15;
}

message GroupPartialInfo {
    string id = 1 [(dlg).log = "visible"];
    int64 access_hash = 2 [(dlg).log="danger"];
    int64 clock = 3 [(dlg).log="visible"];
    GroupType type = 4 [(dlg).log="visible"];
    string title = 5 [(dlg).log="compact"];
    google.protobuf.StringValue shortname = 6 [(dlg).log="visible"];
    Avatar avatar = 7 [(dlg).log="compact"];
    Member self_member = 8;
    google.protobuf.Int64Value pinned_at = 9;
}

// Update about group data changed
message UpdateGroup {
    string id = 1;
    GroupData data = 2;
}

// Loading group members
message RequestLoadMembers {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    GroupOutPeer group = 1 [(dlg).log="visible"];
    int32 limit = 2 [(dlg).log="visible"];
    google.protobuf.BytesValue next = 3 [(dlg).log="visible"]; /// cursor
}

message ResponseLoadMembers {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    google.protobuf.BytesValue cursor = 1 [(dlg).log="compact"];
    repeated Member members = 2 [(dlg).log="visible"];
}

// Update about title changed
message UpdateGroupTitleChanged {
    string group_id = 1 [(dlg).log="visible"];
    string title = 2 [(dlg).log="hidden"];
}

// Update about avatar changed
message UpdateGroupAvatarChanged {
    string group_id = 1 [(dlg).log="visible"];
    Avatar avatar = 2 [(dlg).log="visible"];
}

// Update about about changed
message UpdateGroupAboutChanged {
    string group_id = 1 [(dlg).log="visible"];
    google.protobuf.StringValue about = 2 [(dlg).log="hidden"];
}

// Update about owner changed
message UpdateGroupOwnerChanged {
    string group_id = 1 [(dlg).log="visible"];
    string user_id = 2 [(dlg).log="visible"]; /// new owner
}

// Update about base group permissions changed
message UpdateGroupBasePermissionsChanged {
    string group_id = 1 [(dlg).log="visible"];
    /// new base permissions
    repeated GroupAdminPermission base_permissions = 2 [(dlg).log="visible"];
}

// Update about members updated
message UpdateGroupMembersUpdated {
    string group_id = 1 [(dlg).log="visible"];
    repeated Member members = 2 [(dlg).log="visible"];
}

// Update about members changed
message UpdateGroupMemberDiff {
    string group_id = 1 [(dlg).log="visible"];
    repeated string removed_users = 2 [(dlg).log="visible"];
    repeated Member added_members = 3 [(dlg).log="visible"];
    int32 members_count = 4 [(dlg).log="visible"];
}

// Update about members count changed
message UpdateGroupMembersCountChanged {
    string group_id = 1 [(dlg).log="visible"];
    int32 members_count = 2 [(dlg).log="visible"];
}

// Creating group chat
message RequestCreateGroup {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    int64 rid = 1 [(dlg).log="visible"]; /// Id for query deduplication
    google.protobuf.StringValue space_id = 2;
    string title = 3 [(dlg).log="hidden"];
    repeated UserOutPeer users = 4 [(dlg).log="visible"]; /// members
    GroupType group_type = 5 [(dlg).log="visible"]; /// group or channel

    /// optional shortname of a group, group will be public if set
    google.protobuf.StringValue username = 6 [(dlg).log="visible"];

    /// Base permissions for invited members
    repeated GroupAdminPermission base_permissions = 7 [(dlg).log="visible"];
}

message ResponseCreateGroup {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    Group group = 1; /// created group
    repeated UserOutPeer user_peers = 2; /// empty if dropped by optimizations
}

// Changing group title
message RequestEditGroupTitle {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    GroupOutPeer group_peer = 1 [(dlg).log="visible"];
    int64 rid = 2 [(dlg).log="visible"]; /// Id for query deduplication
    string title = 3 [(dlg).log="hidden"];
}

// Sets group short name
message RequestSetGroupShortname {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    GroupOutPeer peer = 1 [(dlg).log="visible"];
    /// if shortname was empty, then group will become public
    string shortname = 2 [(dlg).log="visible"];
}

// Changing group avatar
message RequestEditGroupAvatar {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    GroupOutPeer group_peer = 1 [(dlg).log="visible"];
    int64 rid = 2 [(dlg).log="visible"]; /// Id for query deduplication
    FileLocation file_location = 3 [(dlg).log="compact"];
}

// Removing group avatar
message RequestRemoveGroupAvatar {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    GroupOutPeer group_peer = 1 [(dlg).log="visible"];
    int64 rid = 2 [(dlg).log="visible"]; /// Id for query deduplication
}

// Edit Group About
message RequestEditGroupAbout {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    GroupOutPeer group_peer = 1 [(dlg).log="visible"];
    int64 rid = 2 [(dlg).log="visible"]; /// Id for query deduplication
    google.protobuf.StringValue about = 3 [(dlg).log="hidden"];
}

message RequestEditGroupBasePermissions {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    GroupOutPeer group_peer = 1 [(dlg).log="visible"];
    int64 random_id = 2 [(dlg).log="visible"]; /// Id for query deduplication
    repeated GroupAdminPermission granted_permissions = 3 [(dlg).log="visible"];
    repeated GroupAdminPermission revoked_permissions = 4 [(dlg).log="visible"];
}

message RequestEditMemberPermissions {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    GroupOutPeer group_peer = 1 [(dlg).log="visible"];
    UserOutPeer user_peer = 2 [(dlg).log="visible"];
    repeated GroupAdminPermission granted_permissions = 3 [(dlg).log="visible"];
    repeated GroupAdminPermission revoked_permissions = 4 [(dlg).log="visible"];
}

message ResponseMember {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    Member member = 1;
}

// Inviting user to group
message RequestInviteUser {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    GroupOutPeer group_peer = 1 [(dlg).log="visible"];
    int64 rid = 2 [(dlg).log="visible"]; /// Id for query deduplication
    UserOutPeer user = 3 [(dlg).log="visible"];
}

// Leaving group
message RequestLeaveGroup {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    GroupOutPeer group_peer = 1 [(dlg).log="visible"];
    int64 rid = 2 [(dlg).log="visible"]; /// Id for query deduplication
}

// Kicking user from group
message RequestKickUser {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    GroupOutPeer group_peer = 1 [(dlg).log="visible"];
    int64 rid = 2 [(dlg).log="visible"]; /// Id for query deduplication
    UserOutPeer user = 3 [(dlg).log="visible"];
}

/// Possible permissions on a group
enum GroupAdminPermission {
    GROUP_ADMIN_PERMISSION_UNKNOWN = 0;
    GROUP_ADMIN_PERMISSION_EDITSHORTNAME = 1;
    GROUP_ADMIN_PERMISSION_INVITE = 2;
    GROUP_ADMIN_PERMISSION_KICK = 3;
    GROUP_ADMIN_PERMISSION_UPDATEINFO = 4;
    GROUP_ADMIN_PERMISSION_SETPERMISSIONS = 5;
    GROUP_ADMIN_PERMISSION_EDITMESSAGE = 6;
    GROUP_ADMIN_PERMISSION_DELETEMESSAGE = 7;
    GROUP_ADMIN_PERMISSION_GETINTEGRATIONTOKEN = 8;
    GROUP_ADMIN_PERMISSION_SENDMESSAGE = 9;
    GROUP_ADMIN_PERMISSION_PINMESSAGE = 10;
    GROUP_ADMIN_PERMISSION_VIEWMEMBERS = 11;
    GROUP_ADMIN_PERMISSION_LEAVE = 12; /// read only permission
    GROUP_ADMIN_PERMISSION_TARGETING = 13;
    GROUP_ADMIN_PERMISSION_DELETE = 14;
    GROUP_ADMIN_PERMISSION_MANAGE_CONFERENCE = 15;
}

// Make user admin
message RequestMakeUserAdmin {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    GroupOutPeer group_peer = 1 [(dlg).log="visible"];
    UserOutPeer user_peer = 2 [(dlg).log="visible"];
    repeated GroupAdminPermission permissions = 3 [(dlg).log="visible"];
}

// A struct mapping a group member to their permissions
// userId the id of the group member
// permissions a list of permissions that user has
message GroupMemberPermission {
    string user_id = 1 [(dlg).log="visible"];
    repeated GroupAdminPermission permissions = 2 [(dlg).log="hidden"];
}

// Fetches the group administration permissions for each of the users from the list
message RequestGetGroupMemberPermissions {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string group_id = 1 [(dlg).log="visible"];
    repeated string user_ids = 2 [(dlg).log="visible"];
}

message ResponseGetGroupMemberPermissions {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    repeated GroupMemberPermission permissions = 1;
}

// Update about the user's permissions
message UpdateGroupMemberPermissionsChanged {
    string group_id = 1 [(dlg).log="visible"];
    string user_id = 2 [(dlg).log="visible"];
    repeated GroupAdminPermission permissions = 3 [(dlg).log="visible"];
}

// Transfer ownership of group
message RequestTransferOwnership {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    GroupOutPeer group_peer = 1 [(dlg).log="visible"];
    string new_owner = 2 [(dlg).log="visible"];
}

// Response for invite url methods
message ResponseInviteUrl {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    string url = 1;
}

// Building invite url
message RequestGetGroupInviteUrl {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    GroupOutPeer group_peer = 1 [(dlg).log="visible"];
}

// Get group invite url base
message RequestGetGroupInviteUrlBase {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
}

message ResponseGetGroupInviteUrlBase {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    string url = 1;
}

// Revoking invite urls
message RequestRevokeInviteUrl {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    GroupOutPeer group_peer = 1 [(dlg).log="visible"];
}

// Join group method
message RequestJoinGroup {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string token = 1 [(dlg).log="visible"];
}

message ResponseJoinGroup {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";

    Group group = 1;
    repeated UserOutPeer user_peers = 2; /// empty if dropped by optimizations
}

// Join group by peer
message RequestJoinGroupByPeer {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    GroupOutPeer peer = 1 [(dlg).log="visible"];
}

message RequestDeleteGroup {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string group_id = 1 [(dlg).log="visible"];
}

// get group info by invite token
message RequestGetGroupPartialInfo {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string token = 1 [(dlg).log="visible"];
}

/**
 * Update notifies that some user got invited to the group
 */
 message UpdateGroupMemberInvited {
    string group_id = 1 [(dlg).log="visible"];
    Member member = 2;
}

// Update group short name
message UpdateGroupShortnameChanged {
    string group_id = 1 [(dlg).log="visible"];
    string shortname = 2 [(dlg).log="visible"];
    string user_id = 3 [(dlg).log="visible"];
}

service Groups {
    rpc LoadMembers (RequestLoadMembers) returns (ResponseLoadMembers) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/LoadMembers"
            body: "*"
        };
    }
    rpc CreateGroup (RequestCreateGroup) returns (ResponseCreateGroup) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/CreateGroup"
            body: "*"
        };
    }
    rpc EditGroupTitle (RequestEditGroupTitle) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/EditGroupTitle"
            body: "*"
        };
    }
    rpc SetGroupShortname (RequestSetGroupShortname) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/SetGroupShortname"
            body: "*"
        };
    }
    rpc EditGroupAvatar (RequestEditGroupAvatar) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/EditGroupAvatar"
            body: "*"
        };
    }
    rpc RemoveGroupAvatar (RequestRemoveGroupAvatar) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/RemoveGroupAvatar"
            body: "*"
        };
    }
    rpc EditGroupAbout (RequestEditGroupAbout) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/EditGroupAbout"
            body: "*"
        };
    }
    rpc EditGroupBasePermissions (RequestEditGroupBasePermissions) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/EditGroupBasePermissions"
            body: "*"
        };
    }
    rpc InviteUser (RequestInviteUser) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/InviteUser"
            body: "*"
        };
    }
    rpc LeaveGroup (RequestLeaveGroup) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/LeaveGroup"
            body: "*"
        };
    }
    rpc KickUser (RequestKickUser) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/KickUser"
            body: "*"
        };
    }
    rpc MakeUserAdmin (RequestMakeUserAdmin) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/MakeUserAdmin"
            body: "*"
        };
    }
    rpc GetGroupMemberPermissions (RequestGetGroupMemberPermissions) returns (ResponseGetGroupMemberPermissions) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/GetGroupMemberPermissions"
            body: "*"
        };
    }
    rpc EditMemberPermissions (RequestEditMemberPermissions) returns (ResponseMember) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/EditMemberPermissions"
            body: "*"
        };
    }
    rpc TransferOwnership (RequestTransferOwnership) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/TransferOwnership"
            body: "*"
        };
    }
    rpc GetGroupInviteUrl (RequestGetGroupInviteUrl) returns (ResponseInviteUrl) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/GetGroupInviteUrl"
            body: "*"
        };
    }
    rpc GetGroupInviteUrlBase (RequestGetGroupInviteUrlBase) returns (ResponseGetGroupInviteUrlBase) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/GetGroupInviteUrlBase"
            body: "*"
        };
    }
    rpc RevokeInviteUrl (RequestRevokeInviteUrl) returns (ResponseInviteUrl) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/RevokeInviteUrl"
            body: "*"
        };
    }
    rpc JoinGroup (RequestJoinGroup) returns (ResponseJoinGroup) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/JoinGroup"
            body: "*"
        };
    }
    rpc JoinGroupByPeer (RequestJoinGroupByPeer) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/JoinGroupByPeer"
            body: "*"
        };
    }
    rpc DeleteGroup (RequestDeleteGroup) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/DeleteGroup"
            body: "*"
        };
    }

    rpc GetGroupPartialInfo (RequestGetGroupPartialInfo) returns (GroupPartialInfo) {
        option (google.api.http) = {
            post: "/v1/grpc/Groups/GetGrpoupPartialInfo"
            body: "*"
        };
    }
}
