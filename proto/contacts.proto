syntax = "proto3";

package dialog;

import "wrappers.proto";
import "empty.proto";
import "annotations.proto";
import "definitions.proto";
import "peers.proto";
import "scalapb.proto";

option go_package = "dialog";
option java_package = "im.dlg.grpc.services";

/// Структура задачи на импорт телефона контакта
message PhoneToImport {
    /// Номер телефона для импорта (в международном формате)
    int64 phone_number = 1 [(dlg).log=log_confidential];

    /// Имя контакта, связанного с этим телефонным номером
    google.protobuf.StringValue name = 2 [(dlg).log=log_confidential];
}

/// Структура задачи на импорт электронной почты контакта
message EmailToImport {
    /// Электронная почта для импорта
    string email = 1 [(dlg).log=log_sensitive];

    /// Имя контакта, связанного с этой электронной почтой
    google.protobuf.StringValue name = 2 [(dlg).log=log_sensitive];
}

/// Структура связи учетной записи пользователя с номером телефона
message UserPhoneHashContact {
    /// Идентификатор учетной записи пользователя
    string user_id = 1;

    /// Номер телефона пользвателя
    string phone_hash = 2 [(dlg).log=log_sensitive];

    /// Имя пользователя в рамках привязки по номеру телефона
    string name = 3 [(dlg).log=log_sensitive];
}

/// Запрос на импорт контактов
message RequestImportContacts {
    /// Список задач на импорт телефонных контактов
    repeated PhoneToImport phones = 1;

    /// Список задач на импорта контактов по электронной почте
    repeated EmailToImport emails = 2;
}


/// Ответ на запрос на импорт контактов
message ResponseImportContacts {
    /// Список внешних пиров пользователей, отвечающих импортированных контактам
    repeated UserOutPeer user_peers = 1;
}

/// Запрос на отложенный импорт контактов
message RequestDeferredImportContacts {
    /// Структура телефонного контакта
    message PhoneContact {
        /// Номер телефона контакта
        string phone_hash = 1 [(dlg).log=log_sensitive];
        /// Локальное имя контакта
        string contact_name = 2 [(dlg).log=log_sensitive];
    }

    /// Идентификатор устройства, с которого производится импорт
    string device_id = 1;

    /// Список телефонных контактов для импорта
    repeated PhoneContact phone_contacts = 2;
}

/// Ответ на запрос на отложенный импорт контактов
message ResponseDeferredImportContacts {
    /// Идентификатор задачи на импорт
    string task_id = 1;
}

/// Запрос на получение списка контактов пользователя
message RequestGetContacts {
    /// Хэш списка контактов, известных на устройстве
    string contacts_hash = 1;
}

/// Ответ на запрос на получение списка контактов пользователя
message ResponseGetContacts {
    /// Флаг о соответствии хэша списка контактов из запроса и хэша списка контактов на сервере
    bool is_not_changed = 1;

    /// Список внешних пиров пользователей для контактов на сервере
    repeated UserOutPeer user_peers = 2;

    /// Список телефонных контактов пользователя на сервере
    repeated UserPhoneHashContact phone_contacts = 3;
}

/// Запрос на удаление из контактов
message RequestRemoveContact {
    /// Идентификатор учетной записи пользователя, удаляемого из контактов
    string user_id = 1;

    /// Ключ доступа к учетной записи пользователя, удаляемого из контактов
    int64 access_hash = 2 [(dlg).log=log_confidential];
}

/// Запрос на добавление в контакты
message RequestAddContact {
    /// Идентификатор учетной записи пользователя, добавляемого в контакты
    string user_id = 1;

    /// Ключ доступа к учетной записи пользователя, добавляемого в контакты
    int64 access_hash = 2 [(dlg).log=log_confidential];
}

/// Запрос на поиск среди контактов на сервере
message RequestSearchContacts {
    /// Поисковый запрос (уточнить алгоритм поиска)
    string request = 1;
}

/// Ответ на запрос на поиск среди контактов на сервере
message ResponseSearchContacts {
    /// Список внешних пиров пользователей, найденных по поисковому запросу
    repeated UserOutPeer user_peers = 1;
}

/// Структура оповещения о регистрации контакта в системе
message UpdateContactRegistered {
    /// Идентификатор учетной записи пользователя, зарегистрировавшегося в системе
    string user_id = 1;
}

/// Структура оповещения о добавлении пользователей в контакты
message UpdateContactsAdded {
    /// Список идентификаторов учетных записей пользователей, добавленных в контакты
    repeated string user_ids = 1;

    /// Идентификатор задачи на импорт, в рамках которой было произведено добавление в контакты
    google.protobuf.StringValue task_id = 2;

    /// Спиок добавленных связок пользователей и телефонных контактов
    repeated UserPhoneHashContact phone_contacts = 3;
}

/// Структура уведомления о приостановке задачи на импорт контактов
message UpdateContactsAddTaskSuspended {
    /// Идентификатор задачи на импорт контактов
    string task_id = 1;
}

/// Структура уведомления об удалении пользователей из контактов
message UpdateContactsRemoved {
    /// Список идентификаторов учетных записей пользователей, удаленных из контактов
    repeated string user_ids = 1;
}

service Contacts {
    /// Метод синхронного импорта контактов
    rpc ImportContacts (RequestImportContacts) returns (ResponseImportContacts) {
        option (google.api.http) = {
            post: "/v1/grpc/Contacts/ImportContacts"
            body: "*"
        };
    }

    /// Метод асинхронного (отложенного) импорта контактов
    rpc DeferredImportContacts (RequestDeferredImportContacts) returns (ResponseDeferredImportContacts) {
        option (google.api.http) = {
            post: "/v1/grpc/Contacts/DeferredImportContacts"
            body: "*"
        };
    }

    /// Метод получения списка контактов
    rpc GetContacts (RequestGetContacts) returns (ResponseGetContacts) {
        option (google.api.http) = {
            post: "/v1/grpc/Contacts/GetContacts"
            body: "*"
        };
    }

    /// Метод удаления пользователя из контактов
    rpc RemoveContact (RequestRemoveContact) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Contacts/RemoveContact"
            body: "*"
        };
    }

    /// Метод добавления пользователя в контакты
    rpc AddContact (RequestAddContact) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Contacts/AddContact"
            body: "*"
        };
    }

    /// Метод поиска по контактам
    rpc SearchContacts (RequestSearchContacts) returns (ResponseSearchContacts) {
        option (google.api.http) = {
            post: "/v1/grpc/Contacts/SearchContacts"
            body: "*"
        };
    }
}
