syntax = "proto3";

package dialog;


import "wrappers.proto";
import "annotations.proto";
import "definitions.proto";
import "scalapb.proto";

option go_package = "dialog";
option java_package = "im.dlg.grpc.services";

/// Координаты файла
message FileLocation {
    /// Идентификатор файла
    string file_id = 1;

    /// Ключ доступа к файлу
    int64 access_hash = 2 [(dlg).log=log_confidential];
}

/// Координаты изображения
message ImageLocation {
    /// Координаты файла с изображением
    FileLocation file_location = 1;

    /// Ширина изображения в пикселях
    int32 width = 2;

    /// Высота изображения в пикселях
    int32 height = 3;

    /// Размер файла с изображением в байтах
    int32 file_size = 4;
}

/// Координаты аудио-файла
message AudioLocation {
    /// Координаты файла с аудио
    FileLocation file_location = 1;

    /// Длительность аудио-файла в секундах
    int32 duration_seconds = 2;

    /// MIME-тип аудио-файла
    string mime_type = 3;

    /// Размер аудио-файла в байтах
    int32 file_size_bytes = 4;
}

/// Структура изображения-аватара
message AvatarImage {
    /// Координаты файла с аватаром
    FileLocation file_location = 1;

    /// Ширина изображения в пикселях
    int32 width = 2;

    /// Высота изображения в пикселях
    int32 height = 3;

    /// Размер изображения в байтах
    int32 file_size_bytes = 4;
}

/// Структура автара
message Avatar {
    /// Изображение-аватар в размере 100x100
    AvatarImage small_image = 1;
    /// Изображение-аватар в размере 200x200
    AvatarImage large_image = 2;
    /// Оригинальное изображение-аватар
    AvatarImage full_image = 3;
}

/// Структура для быстрого предпросмотра изображений, должна содержать изображние размером не более 90x90 пикселей и быть сжатой в JPEG с минимальным качеством
message FastThumb {
    /// Ширина изображения-предпросмотра в пикселях
    int32 w = 1;

    /// Высота изображения-предпросмотра в пикселях
    int32 h = 2;

    /// Байты, представляющие собой изображение в формате JPEG
    bytes thumb = 3;
}

/// Набор вариантов цветов
enum Colors {
    COLORS_UNKNOWN = 0;

    // Красный
    COLORS_RED = 1;

    // Желтый
    COLORS_YELLOW = 2;

    // Зелёный
    COLORS_GREEN = 3;
}

/// Структура цвета
message Color {
    oneof body {
        RgbColor rgb = 1;
        PredefinedColor predefined = 2;
    }
}

/// Структура цвета в формате RGB
message RgbColor {
    /// Представление цвета в 8-битном формате RGBa (по 8 бит на цвет + альфа канал)
    int32 rgb = 1;
}

/// Структура предпоределенного цвета
message PredefinedColor {
    /// Цвет
    Colors color = 1;
}

/// HTTP-заголовок
message HTTPHeader {
    /// Наименование заголовка
    string key = 1;

    /// Значение заголовка
    string value = 2;
}

/// Структура URL файла
message FileUrlDescription {
    /// Идентификатор файла
    string file_id = 1;

    /// URL по котором файл доступен для скачивания
    string url = 2;

    /// Время жизни URL в секундах с момента получения этой структуры
    int32 timeout = 3;

    /// Неподписанный URL файла
    google.protobuf.StringValue unsigned_url = 4 [(dlg).log=log_sensitive];

    /// HTTP-заголовки, которые необходимо предоставить для скачивания файла по неподписанному URL
    repeated HTTPHeader unsigned_url_headers = 5;

    /// MD5-хэш содержимого файла
    bytes md5_hash = 6;
}

/// Набор ошибок при операциях с файловым URL
enum FileUrlErrorTag {
    FILE_URL_ERROR_TAG_UNKNOWN = 0;

    /// Ошибка хранилища
    FILE_URL_ERROR_TAG_STORAGE_ERROR = 1;

    /// Ошибка доступа в хранилище
    FILE_URL_ERROR_TAG_STORAGE_FORBIDDEN_ERROR = 2;
}

/// Ошибка операции с файлом по URL
message FileUrlError {
    /// Идентификатор файла
    int64 file_id = 1;

    /// Предпопределенная ошибка
    FileUrlErrorTag tag = 2;

    /// Расширенное описание ошибки
    string reason = 3;

    /// Флаг возможности повторение запроса приведшего к данной ошибке
    bool retryable = 4;
}

/// Запрос на получение URL файла
message RequestGetFileUrl {
    /// Координаты файла
    FileLocation file = 1;
}

/// Ответ на запрос на получение URL файла
message ResponseGetFileUrl {
    /// URL файла
    string url = 1;

    /// Время жизни URL в секундах с момента получения URL
    int32 timeout_seconds = 2;

    /// Неподписанный URL файла
    google.protobuf.StringValue unsigned_url = 3;

    /// HTTP-заголовки, которые необходимо предоставить для скачивания файла по неподписанному URL
    repeated HTTPHeader unsigned_url_headers = 4;

    /// MD5-хэш файла
    bytes md5_hash = 5;
}

/// Запрос на получение URL набора файлов
message RequestGetFileUrls {
    /// Список координат файлов
    repeated FileLocation files = 1;
}

/// Ответ на запрос на получение URL набора файлов
message ResponseGetFileUrls {
    /// Список структур с URL файлов
    repeated FileUrlDescription file_urls = 1;

    /// Список ошибок получения URL
    repeated FileUrlError errors = 2;
}

/// deprecated
message RequestGetFileUrlBuilder {
    repeated string supported_signature_algorithms = 1;
}

/// deprecated
message ResponseGetFileUrlBuilder {
    string base_url = 1;
    string algo = 2;
    string seed = 5;
    bytes signature_secret = 3;
    int32 timeout = 4;
}

/// Запрос на получение URL для загрузки файла
message RequestGetFileUploadUrl {
    /// Ожидаемый размер файла в байтах
    int32 expected_size = 1;
}

/// Ответ на запрос на получение URL для загрузки файла
message ResponseGetFileUploadUrl {
    /// Ключ загрузки
    bytes upload_key = 2;
}

/// Запрос на завершение загрузки файла
message RequestCommitFileUpload {
    /// Ключ загрузки
    bytes upload_key = 1;

    /// Имя файла
    string file_name = 2;

    /// MD5-хэш файла
    bytes md5_hash = 3;
}

/// Ответ на запрос на завершение загрузки файла
message ResponseCommitFileUpload {
    /// Координаты загруженного файла
    FileLocation uploaded_file_location = 1;
}

/// Запрос на загрузку части файла
message RequestGetFileUploadPartUrl {
    /// Порядковый номер части файла
    int32 part_number = 1;

    /// Размер части файла в байтах
    int32 part_size = 2;

    /// Ключ загрузки
    bytes upload_key = 3;
}

/// Ответ на запрос на загрузку части файла
message ResponseGetFileUploadPartUrl {
    /// URL для загрузки
    string url = 1;
}

service MediaAndFiles {
    /// Метод получения ссылки для скачивания файла
    rpc GetFileUrl (RequestGetFileUrl) returns (ResponseGetFileUrl) {
        option (google.api.http) = {
            post: "/v1/grpc/MediaAndFiles/GetFileUrl"
            body: "*"
        };
    }

    /// Метод получения ссылок для скачивания файлов
    rpc GetFileUrls (RequestGetFileUrls) returns (ResponseGetFileUrls) {
        option (google.api.http) = {
            post: "/v1/grpc/MediaAndFiles/GetFileUrls"
            body: "*"
        };
    }

    /// deprecated
    rpc GetFileUrlBuilder (RequestGetFileUrlBuilder) returns (ResponseGetFileUrlBuilder) {
        option (google.api.http) = {
            post: "/v1/grpc/MediaAndFiles/GetFileUrlBuilder"
            body: "*"
        };
    }

    /// Метод получения ссылки для загрузки файла
    rpc GetFileUploadUrl (RequestGetFileUploadUrl) returns (ResponseGetFileUploadUrl) {
        option (google.api.http) = {
            post: "/v1/grpc/MediaAndFiles/GetFileUploadUrl"
            body: "*"
        };
    }

    /// Метод завершения загрузки файла
    rpc CommitFileUpload (RequestCommitFileUpload) returns (ResponseCommitFileUpload) {
        option (google.api.http) = {
            post: "/v1/grpc/MediaAndFiles/CommitFileUpload"
            body: "*"
        };
    }

    /// Метод получения ссылки для загрузки части файла
    rpc GetFileUploadPartUrl (RequestGetFileUploadPartUrl) returns (ResponseGetFileUploadPartUrl) {
        option (google.api.http) = {
            post: "/v1/grpc/MediaAndFiles/GetFileUploadPartUrl"
            body: "*"
        };
    }
}
