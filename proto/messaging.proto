syntax = "proto3";

package dialog;

import "wrappers.proto";
import "empty.proto";
import "duration.proto";
import "annotations.proto";
import "definitions.proto";
import "miscellaneous.proto";
import "peers.proto";
import "media_and_files.proto";
import "reactions.proto";
import "scalapb.proto";

option go_package = "dialog";
option java_package = "im.dlg.grpc.services";

// Message Attributes
message MessageAttributes {
    /// Is mentioned. If set overrides built-in value.
    google.protobuf.BoolValue is_mentioned = 1;
    /// Is message highlighted. Default is false.
    google.protobuf.BoolValue is_highlighted = 2;
    /// Is notified. If set overrides built-in settings.
    google.protobuf.BoolValue is_notified = 3;
    /// If this message is only for you. Default is false
    google.protobuf.BoolValue is_only_for_you = 4;
    map<string, string> unclassified = 5;
}

// Message media
message MessageMedia {
    WebpageMedia webpage = 1;
    ImageMedia image = 2;
    AudioMedia audio = 3;
    repeated InteractiveMediaGroup actions = 6;
}

// Webpage media
message WebpageMedia {
    google.protobuf.StringValue url = 1 [(dlg).log=log_sensitive];
    google.protobuf.StringValue title = 2 [(dlg).log=log_sensitive];
    google.protobuf.StringValue description = 3 [(dlg).log=log_sensitive];
    ImageLocation image = 4;
}

// Image media
// image image
message ImageMedia {
    ImageLocation image = 1;
}

// Audio media
message AudioMedia {
    AudioLocation audio = 1;
}

enum InteractiveMediaStyle {
    INTERACTIVE_MEDIA_STYLE_UNKNOWN = 0;
    INTERACTIVE_MEDIA_STYLE_DEFAULT = 1;
    INTERACTIVE_MEDIA_STYLE_PRIMARY = 2;
    INTERACTIVE_MEDIA_STYLE_DANGER = 3;
}
/// Some interactive element inside a message
message InteractiveMediaWidget {
    oneof body {
        InteractiveMediaButton interactive_media_button = 1;
        InteractiveMediaSelect interactive_media_select = 2;
    }
}

// A 'Button' widget
message InteractiveMediaButton {
    string value = 1; /// A value for this button
    /// A user-visible description of this button
    google.protobuf.StringValue label = 2;
}

// A select from multiple values widget
message InteractiveMediaSelect {
    /// list of values to present to user
    repeated InteractiveMediaSelectOption options = 1;
    /// A user-visible descripton of this select
    google.protobuf.StringValue label = 2;
    /// A value that will be selected by default
    google.protobuf.StringValue default_value = 3;
}

// A row in the select widget
message InteractiveMediaSelectOption {
    string value = 1; /// id of the row
    string label = 2; /// a user visible text for this row
}

// A text message extension representing an interactive action.
// Can be used to add widgets (such as buttons, selects, etc) to messages.
message InteractiveMedia {
    string id = 1; /// identifier of the media action
    /// a widget to be shown to user
    InteractiveMediaWidget widget = 2;
    /// a style of the widget, which is interpreted by the client
    InteractiveMediaStyle style = 3;
    /**
     * A content of the alert dialog that will be show to user
     * when they perform the media action
     */
    InteractiveMediaConfirm confirm = 4;
}

message InteractiveMediaTranslation {
    string id = 1;
    string value = 2;
}

message InteractiveMediaTranslationGroup {
    /// a translation group language
    string language = 1;
    /// a list of translation mesages
    repeated InteractiveMediaTranslation messages = 2;
}

// A group of interactive media actions
message InteractiveMediaGroup {
    /// the list of actions
    repeated InteractiveMedia actions = 1;
    /// an optional title of the group
    google.protobuf.StringValue title = 2 [(dlg).log=log_sensitive];
    /// an optional description of the group
    google.protobuf.StringValue description = 3 [(dlg).log=log_sensitive];
    /// a media content translations
    repeated InteractiveMediaTranslationGroup translations = 4;
}

// An alert dialog content to show to user
message InteractiveMediaConfirm {
    /// the optional alert dialog prompt
    google.protobuf.StringValue text = 1;
    /// the optional alert dialog title
    google.protobuf.StringValue title = 2;
    /// the optional confirm button text
    google.protobuf.StringValue ok = 3;
    /// the optional cancel button text
    google.protobuf.StringValue dismiss = 4;
}

// The update which will be received when the action is performed. Duplicated on all clients.
message UpdateInteractiveMediaEvent {
    /// Message id of the message that contains interactive media
    UUIDValue mid = 1;
    /// identifier of the media action
    string id = 2;
    /// selected value of that action
    string value = 3;
    /// who interacted with that media
    string user_id = 4;
}

// Sends a request to do interactive media message
message RequestDoInteractiveMediaAction {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    /// Message id of the enclosed message
    UUIDValue mid = 1;
    string id = 2; /// Media id
    string value = 3; /// selected value
}

message MessageOverrides {
    google.protobuf.StringValue sender_name_override = 1;
    Avatar sender_photo_override = 2;
    google.protobuf.StringValue sender_photo_url_override = 3;
}

message MessageContent {
    oneof body {
        TextMessage text_message = 1;
        ServiceMessage service_message = 2;
        DocumentMessage document_message = 3;
        JsonMessage json_message = 4;
        UnsupportedMessage unsupported_message = 5;
        StickerMessage sticker_message = 6;
        BinaryMessage binary_message = 7;
        EmptyMessage empty_message = 8;
        DeletedMessage deleted_message = 9;
    }

    MessageOverrides overrides = 10;
    repeated Any extensions = 11;
    bool disable_notifications = 12;
}

// Text message
message TextMessage {
    string text = 1 [(dlg).log=log_confidential];
    /// Optional bytes of extension
    TextMessageEx ext = 2;
    repeated MessageMedia media = 3;
    repeated Any extensions = 4;
    /// Mentions in message
    repeated Mention mentions = 5;
}

message Mention {
    Peer peer = 1;
    bool all = 2;
}

message TextMessageEx {
    oneof body {
        TextExMarkdown text_ex_markdown = 1;
        TextModernMessage text_modern_message = 2;
        TextCommand text_command = 3;
    }
}

// Markdown extension
message TextExMarkdown {
    string markdown = 1 [(dlg).log=log_confidential]; /// Markdown text
}

// Modern text message
message TextModernMessage {
    google.protobuf.StringValue text = 1 [(dlg).log=log_confidential];
    ParagraphStyle style = 2;
    repeated TextModernAttach attaches = 3;
}

// Paragraph style
message ParagraphStyle {
    /// Show quote-like paragraph?
    google.protobuf.BoolValue show_paragraph = 1;
    /// Override paragraph color
    Color paragraph_color = 2;
    /// Override background color
    Color bg_color = 3;
}

// Attaches to message
message TextModernAttach {
    google.protobuf.StringValue title = 1 [(dlg).log=log_confidential];
    google.protobuf.StringValue title_url = 2;
    ImageLocation title_icon = 3;
    google.protobuf.StringValue text = 4 [(dlg).log=log_confidential];
    ParagraphStyle style = 5;
    repeated TextModernField fields = 6;
}

// Modern message fields
message TextModernField {
    string title = 1;
    string value = 2;
    /// Is field can be shown in compact way (default is TRUE)
    google.protobuf.BoolValue is_short = 3;
}

// Text Command Message for bots
message TextCommand {
    /// Slash-Command For execution
    string command = 1;
    string args = 2;
}

// Service message
message ServiceMessage {
    string text = 1 [(dlg).log=log_sensitive];
    ServiceEx ext = 2;
}

message ServiceEx {
    reserved 6;
    oneof body {
        ServiceExUserInvited user_invited = 1;
        ServiceExUserJoined user_joined = 2;
        ServiceExUserKicked user_kicked = 3;
        ServiceExUserLeft user_left = 4;
        ServiceExGroupCreated group_created = 5;
        ServiceExChangedTitle changed_title = 7;
        ServiceExChangedTopic changed_topic = 8;
        ServiceExChangedAbout changed_about = 9;
        ServiceExChangedAvatar changed_avatar = 10;
        ServiceExContactRegistered contact_registered = 11;
        ServiceExPhoneMissed phone_missed = 12;
        ServiceExPhoneCall phone_call = 13;
        ServiceExPhoneRejected phone_rejected = 14;
        ServiceExChatArchived chat_archived = 15;
        ServiceExChatRestored chat_restored = 16;
        ServiceExConferenceStatus conference_status = 17;
        ServiceExGroupPublicityChanged publicity_changed = 18;
    }
}

// Service message about adding user to group
message ServiceExUserInvited {
    repeated string invited_user_ids = 1; /// added user ids
}

// Service message about user join to group
message ServiceExUserJoined {
    repeated string joined_user_ids = 1;
}

// Service message about kicking user from group
message ServiceExUserKicked {
    repeated string kicked_user_ids = 1;
}

// Service message about user left group
message ServiceExUserLeft {
    repeated string left_user_ids = 1;
}

// Service message about group creating
message ServiceExGroupCreated {
}

// Service message about group title change
message ServiceExChangedTitle {
    string title = 1 [(dlg).log=log_sensitive]; /// New group title
}

// Service message on group topic change
message ServiceExChangedTopic {
    /// New group topic
    google.protobuf.StringValue topic = 1 [(dlg).log=log_sensitive];
}

// Service message on group about change
message ServiceExChangedAbout {
    /// New group about
    google.protobuf.StringValue about = 1 [(dlg).log=log_sensitive];
}

// Service message about avatar change
message ServiceExChangedAvatar {
    Avatar avatar = 1; /// Updated avatar
}

// Service message about user registration
message ServiceExContactRegistered {
    string user_id = 1; /// User Id
}

// Update about missing phone call
message ServiceExPhoneMissed {
}

// Update about phone call
message ServiceExPhoneCall {
    int32 duration_seconds = 1; /// Duration of a phone call
}

// Update about phone call rejected
message ServiceExPhoneRejected {
}

// Message about chat archived
message ServiceExChatArchived {
}

// Message about chat restored
message ServiceExChatRestored {
}

// Message about conference call state
message ServiceExConferenceStatus {
    string conference_id = 1;
    string conference_status = 2;
}

// Message about group becoming private or public
message ServiceExGroupPublicityChanged {
    bool previous_publicity = 1;
    bool current_publicity = 2;
}

// File message
message DocumentMessage {
    string file_id = 1;
    int64 access_hash = 2 [(dlg).log=log_confidential];
    int32 file_size = 3;
    string name = 4 [(dlg).log=log_confidential];
    string mime_type = 5;
    /// optional thumb of file. JPEG less that 90x90 with 60-70 quality.
    FastThumb thumb = 6;
    DocumentEx ext = 7;
    google.protobuf.StringValue caption = 8 [(dlg).log=log_confidential];
    repeated Mention mentions = 9;
}

message DocumentEx {
    oneof body {
        DocumentExPhoto photo = 1;
        DocumentExVideo video = 2;
        DocumentExVoice voice = 3;
    }
}

// File photo extension
message DocumentExPhoto {
    int32 w = 1; /// image width
    int32 h = 2; /// image height
}

// File video extension
message DocumentExVideo {
    int32 w = 1; /// video width
    int32 h = 2; /// video height
    int32 duration = 3;
}

// File voice extension
message DocumentExVoice {
    int32 duration = 1;
}

// Custom-data JsonMessage
message JsonMessage {
    string raw_json = 1 [(dlg).log=log_confidential];
}

// Explicit type for unsupported message
message UnsupportedMessage {
}

// Sticker message
message StickerMessage {
    /// Optional Unique ID of sticker
    google.protobuf.StringValue sticker_id = 1;
    /// Optional Fast preview of sticker in webp format
    google.protobuf.BytesValue fast_preview = 2;
    /// Optional 512x512 sticker image in webp format
    ImageLocation image_512 = 3;
    /// Optional 256x256 sticker image in webp format
    ImageLocation image_256 = 4;
    /// Optional Collection ID
    google.protobuf.StringValue sticker_collection_id = 5;
    /// Optional Collection Access Hash
    google.protobuf.Int64Value sticker_collection_access_hash = 6;
    /// Sticker emoji
    google.protobuf.StringValue emoji = 7 [(dlg).log=log_confidential];
    /// Animated sticker json payload
    google.protobuf.StringValue animated_sticker_json = 8 [(dlg).log=log_confidential];
}

// Binary Message. Useful for implementing your own content types
message BinaryMessage {
    string content_tag = 1;
    bytes msg = 2;
}

// Empty Message
message EmptyMessage {
}

// Deleted message
message DeletedMessage {
    /// Deleted locally message
    google.protobuf.BoolValue is_local = 1;
}

// Short Dialog from grouped conversation list
message DialogShort {
    Peer peer = 1; /// Peer of conversation
    int32 counter = 2; /// Conversation unread count
    int64 date = 3; /// Conversation top message date
}

// Grouped dialog list
message DialogGroup {
    string title = 1 [(dlg).log=log_sensitive];
    string key = 2;
    repeated DialogShort dialogs = 3;
}

// Predicate for searching in custom profile
message SearchPredicate {
    string key = 1;
    repeated string values = 2;
}

// Forwarding messages list item
message ForwardItem {
    string deduplication_id = 1; /// Id for message deduplication
    UUIDValue mid = 2; /// Original message id
}

// Sending plain message
message RequestSendMessage {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1;
    string deduplication_id = 2; /// Id for message deduplication
    MessageContent message = 3;
    /// if not empty, then message will be send to this user only
    google.protobuf.StringValue is_only_for_user = 4;
    /// If current message forwards some other
    repeated ForwardItem forwards = 5;
    /// If current message is a reply on some other
    ReferencedMessages reply = 6;
    repeated SearchPredicate predicates = 7;
    repeated string white_list = 8;
    repeated string black_list = 9;
}

message RequestSendMessageAsync {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1;
    string deduplication_id = 2; /// Id for message deduplication
    MessageContent message = 3;
    /// if not empty, then message will be send to this user only
    google.protobuf.StringValue is_only_for_user = 4;
    /// If current message forwards some other
    ReferencedMessages forward = 5;
    /// If current message is a reply on some other
    ReferencedMessages reply = 6;
    repeated SearchPredicate predicates = 7;
    repeated string white_list = 8;
    repeated string black_list = 9;
}

// Changing Message content
message RequestUpdateMessage {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    UUIDValue mid = 1; /// Message id
    MessageContent updated_message = 2;
    /// Date from this message when it was changed last time
    int64 last_edited_at = 3;
    Peer peer = 4;
}

// Confirmation of plain message receive by device
message RequestMessageReceived {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1;
    int64 date = 2;
}

// Marking plain messages as read
message RequestMessageRead {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1;
    int64 date = 2;
}

// Deleting message
message RequestDeleteMessage {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    Peer peer = 1;
    UUIDValue message_id = 2; /// Message id
    bool delete_for_user_only = 3;
}

// Clearing of conversation (without removing dialog from dialogs list)
message RequestClearChat {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1;
    int64 last_message_date = 2;
}

// Deleting of conversation (also leave group for group conversations)
message RequestDeleteChat {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1;
    int64 last_message_date = 2;
}

// Archiving chat
message RequestArchiveChat {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1;
}

message ResponseSendMessage {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    UUIDValue message_id = 1; /// Message id
    int64 message_date = 2; /// Message creation date from server
    UUIDValue previous_message_id = 3; /// Previous message id
    string creator_user_id = 4; // Message creator
    int64 clock = 5; // Clock of this message (initially equals the message_date field)
}

// Update about plain message
message UpdateMessage {
    Peer peer = 1;
    string sender_user_id = 2;
    int64 date = 3; // message creation date (interval end)
    UUIDValue mid = 4; /// Message id
    MessageContent message = 5;
    /// attributes to help reasoning about message
    MessageAttributes attributes = 6;
    reserved 7;
    oneof attach {
        ReferencedMessages reply = 8;
        ForwardSource forward_source = 17;
    }
    /// Message id of previos message from current conversation
    UUIDValue previous_mid = 9;
    google.protobuf.Int64Value prev_message_date = 10; // interval start
    /// counter clock of the unread messages
    int64 unread_counter_clock = 11;
    /// counter of the unread messages
    google.protobuf.Int32Value counter = 12;
    /// date of my own read
    google.protobuf.Int64Value my_read_date = 13;
    string random_id = 14;
    // when greater than date, then message is edited
    int64 modified_at = 15;
    // make sense for edited message only (modified_at > date)
    google.protobuf.Int64Value prev_edit_in_peer_at = 16;
}

// Update about message change
message UpdateMessageContentChanged {
    Peer peer = 1;
    UUIDValue mid = 2; /// Message id
    MessageContent message = 3;
    int64 edited_at = 4;
    int64 prev_edit_in_peer_at = 5;
    // Update on behalf of a system, should not be displayed as edited.
    google.protobuf.BoolValue is_silent = 6;
}

// Update about message sent
message UpdateMessageSent {
    Peer peer = 1;
    string rid = 2;
    int64 date = 3;
    /// Message id
    UUIDValue mid = 4;
    /// Previous message id in current conversation
    UUIDValue prev_mid = 5;
    /// counter of unread messages
    int64 unread_counter_clock = 6;
    google.protobuf.Int32Value unread_counter = 7;
    google.protobuf.Int64Value my_read_date = 8;
    
    reserved 9;
    oneof attach {
        ReferencedMessages reply = 10;
        ForwardSource forward_source = 11;
    }
}

// Update about message received
message UpdateMessageReceived {
    Peer peer = 1;
    /// when message was receive
    int64 start_date = 2;
    int64 received_date = 3; /// deprecated
}

// Update about message read
message UpdateMessageRead {
    Peer peer = 1;
    /// when message was read
    int64 start_date = 2;
    int64 read_date = 3; /// deprecated
}

// Update about message read by me
message UpdateMessageReadByMe {
    Peer peer = 1;
    /// date of the read message
    int64 start_date = 2;

    /// when message was read
    int64 unread_counter_clock = 3;
    /// counter of unread messages
    google.protobuf.Int32Value unread_counter = 4;
}

// Update about message delete
message UpdateMessageDelete {
    Peer peer = 1;
    repeated UUIDValue mids = 2; /// Deleted messages
    /// counter of unread messages
    google.protobuf.Int32Value counter = 3;
    /// date? related for this unread counter
    int64 action_date = 4;
}

// Update about chat clear
message UpdateChatClear {
    Peer peer = 1;
    int64 action_date = 2;
}

// Update about chat delete
message UpdateChatDelete {
    Peer peer = 1;
    int64 action_date = 2;
}

// Update about chat archive
message UpdateChatArchive {
    Peer peer = 1;
}

// Update about chat groups changed. Called only when adding, removing and reordering of grouped dialog.
message UpdateChatGroupsChanged {
    repeated DialogGroup dialogs = 1;
}

// Update about rejection of message send request
message UpdateSendMessageError {
    reserved 5;
    Peer peer = 1;
    string rid = 2;
    int64 date = 3;
    string hook_id = 4;
    UpdateErrorCause cause = 6;
}

// Update about rejection of message update request
message UpdateEditMessageError {
    reserved 5;
    Peer peer = 1;
    UUIDValue mid = 2; // related message id
    int64 date = 3;
    string hook_id = 4;
    UpdateErrorCause cause = 6;
}

message UpdateDeleteMessageError {
    Peer peer = 1;
    UUIDValue mid = 2; // related message id
    int64 date = 3;
    string hook_id = 4;
    UpdateErrorCause cause = 5;
}

message UpdateMessageReadError {
    Peer peer = 1;
    UUIDValue mid = 2; // related message id
    int64 date = 3;
    string hook_id = 4;
    UpdateErrorCause cause = 5;
}

message UpdateMessageReceivedError {
    Peer peer = 1;
    UUIDValue mid = 2; // related message id
    int64 date = 3;
    string hook_id = 4;
    UpdateErrorCause cause = 5;
}

message UpdateClearChatError {
    Peer peer = 1;
    int64 date = 2;
    string hook_id = 3;
    UpdateErrorCause cause = 4;
}

message UpdateDeleteChatError {
    Peer peer = 1;
    int64 date = 2;
    string hook_id = 3;
    UpdateErrorCause cause = 4;
}

message UpdateFavouriteDialogError {
    Peer peer = 1;
    int64 date = 2;
    string hook_id = 3;
    UpdateErrorCause cause = 4;
}

message UpdateUnfavouriteDialogError {
    Peer peer = 1;
    int64 date = 2;
    string hook_id = 3;
    UpdateErrorCause cause = 4;
}

message UpdateReadDialogLaterError {
    Peer peer = 1;
    int64 date = 2;
    string hook_id = 3;
    UpdateErrorCause cause = 4;
}

// Update about new thread inside group
message UpdateThreadCreated {
    GroupOutPeer peer = 1; // peer representing thread
    UUIDValue start_message = 2; // messageId from parent group where thread starts
}

// Update about thread converted to group
message UpdateThreadLifted {
    GroupOutPeer peer = 1;
}

// mids Referenced message ids
message ReferencedMessages {
    repeated UUIDValue mids = 1;
}

// pointer to source of forwarded message
message ForwardSource {
    OutPeer host_peer = 1; // empty if viewer has no access to this peer
    OutPeer sender_peer = 2; // empty if viewer has no access to this peer
    string host_peer_name = 3; // used to avoid host_peer/sender_peer resolution
    UUIDValue mid = 4;
}

// Message from history
message HistoryMessage {
    string sender_user_id = 1;
    OutPeer peer = 17;
    reserved 2;
    reserved 3;
    /// Message id generated by server
    UUIDValue mid = 4;
    UUIDValue prev_mid = 5;
    int64 created_at = 6;
    MessageContent message = 7;
    reserved 8, 9;
    MessageAttributes attribute = 10;
    reserved 11; 
    oneof attach {
        ReferencedMessages reply = 12;
        ForwardSource forward_source = 15;
    }
    google.protobuf.Int64Value edited_at = 13;
    string random_id = 14;
    repeated Reaction reactions = 16;
}

enum ListLoadMode {
    LIST_LOAD_MODE_UNKNOWN = 0;
    LIST_LOAD_MODE_FORWARD = 1;
    LIST_LOAD_MODE_BACKWARD = 2;
    LIST_LOAD_MODE_BOTH = 3;
}

// Loading history of chat
message RequestLoadMessageHistory {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1 [(dlg).required=true];
    UUIDValue from_mid = 2 [(dlg).required=true];
    /// forward, backward or both
    ListLoadMode load_mode = 3;
    int32 limit = 4;
}

message ResponseLoadHistory {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    repeated HistoryMessage history = 1;
    repeated UserOutPeer user_peers = 2;
    reserved 3, 4, 5, 7;
    /// counter of unread messages
    int32 unread_count = 8;

    /// last conversation message date
    google.protobuf.Int64Value last_conversation_message_date = 6;
}

// Conversation from history
// peer
// unreadCount
// sortDate date of conversation for sorting
// senderUid Sender of top message (may be zero)
// isFavourite Is dialog favourite
// rid Random ID of top message (may be zero)
// mid Message id
// date Date of top message (can't be zero)
// message Content of message
// firstUnreadDate Date of first unread message
// attributes Optional top message attributes
// pinnedMessages Optional pinned messages
// historyMessage Optional last messages
message Dialog {
    Peer peer = 1; /// Peer of conversation
    int32 unread_count = 2; /// counter of unread messages
    reserved 3, 4, 5, 6, 8, 9, 10, 11, 18;
    /// last dialog modification date
    int64 modified_at = 7;
    PinnedMessages pinned_messages = 12;
    /// last message in this dialog
    HistoryMessage history_message = 13;
    int64 last_receive = 14;
    int64 last_read = 15;
    int64 last_reaction_at = 16;
    bool read_later = 17;
    bool is_muted = 19;
    bool is_favourite = 20;
}

enum DialogsFilter {
    DIALOGS_FILTER_UNKNOWN = 0;
    DIALOGS_FILTER_EXCLUDEFAVOURITES = 1;
    DIALOGS_FILTER_EXCLUDEARCHIVED = 2;
}

// Loading conversation history
message RequestLoadDialogs {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    int64 from_date = 1;
    int32 limit = 2;
    repeated DialogsFilter filters = 3;
    repeated Peer peers_to_load = 4;
}

/// Contains dialogs and related peers and entities
message ResponseLoadDialogs {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    repeated Dialog dialogs = 1;
    repeated UserOutPeer user_peers = 2;
    repeated GroupOutPeer group_peers = 3;
    int32 total_dialogs_count = 4;
}

// Marking dialog as favourite
message RequestFavouriteDialog {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1;
}

// Making dialog as unfavourite
message RequestUnfavouriteDialog {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1;
}

// Update about dialog favourite changed
message UpdateDialogFavouriteChanged {
    Peer peer = 1;
    google.protobuf.BoolValue is_favourite = 2;
}

message UpdateDialogMuteChanged {
    Peer peer = 1;
    bool is_muted = 2;
}

// Pinned messages
message PinnedMessages {
    /// Messages ids
    repeated UUIDValue mids = 1;
}

// Pin message in conversation
message RequestPinMessage {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1;
    UUIDValue mid = 2; /// Message id
    int64 last_pin_date = 3;
}

// Unpin message in conversation
message RequestUnpinMessage {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1;
    UUIDValue mid = 2; /// Message id
    int64 last_pin_date = 3;
}

// Update about pinned messages changed in conversation
message UpdatePinnedMessagesChanged {
    Peer peer = 1;
    PinnedMessages pinned_messages = 2;
    int64 last_pin_date = 3;
}

// The model describing when a user received or read a message
message MessageStatus {
    int64 clock = 1; // time when message was read or received
    string user_id = 2;
}

// Load message statuses for every user in conversation reads
message RequestGetMessageReads {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    UUIDValue mid = 1; /// Message id
    int32 limit = 2; // limit of selection
    int64 timestamp_from = 3; // time selection starts from
    OutPeer peer = 4;
}

// Load message statuses for every user in conversation receives
message RequestGetMessageReceives {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    UUIDValue mid = 1; /// Message id
    int32 limit = 2; // limit of selection
    int64 timestamp_from = 3; // time selection starts from
    OutPeer peer = 4;
}

// Response with the list of message statuses reads
message ResponseGetMessageReads {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    repeated MessageStatus status = 1;
    int64 timestamp_till = 2; // max time of returned entries, or requested time if empty
}

// Response with the list of message statuses receives
message ResponseGetMessageReceives {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    repeated MessageStatus status = 1;
    int64 timestamp_till = 2; // max time of returned entries, or requested time if empty
}

message RequestReadDialogLater {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1;
    bool read_later = 2;
}

// Update about dialog read later changed
message UpdateDialogReadLaterChanged {
    Peer peer = 1;
    bool read_later = 2;
}

message RequestMuteChat {
    Peer peer = 1;
    google.protobuf.Duration duration = 2;
}

message RequestUnmuteChat {
    Peer peer = 1;
}

service Messaging {
    /// Interact with a message media (click on button for example)
    rpc DoInteractiveMediaAction (RequestDoInteractiveMediaAction) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/DoInteractiveMediaAction"
            body: "*"
        };
    }
    rpc SendMessage (RequestSendMessage) returns (ResponseSendMessage) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/SendMessage"
            body: "*"
        };
    }
    rpc SendMessageAsync (RequestSendMessageAsync) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/SendMessageAsync"
            body: "*"
        };
    }

    rpc UpdateMessage (RequestUpdateMessage) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/UpdateMessage"
            body: "*"
        };
    }
    /// Mark message as received by self
    rpc MessageReceived (RequestMessageReceived) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/MessageReceived"
            body: "*"
        };
    }
    /// Mark message as read by self
    rpc MessageRead (RequestMessageRead) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/MessageRead"
            body: "*"
        };
    }

    rpc DeleteMessage (RequestDeleteMessage) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/DeleteMessage"
            body: "*"
        };
    }
    /// Clear chat history
    rpc ClearChat (RequestClearChat) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/ClearChat"
            body: "*"
        };
    }
    rpc DeleteChat (RequestDeleteChat) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/DeleteChat"
            body: "*"
        };
    }
    /// Load conversation history
    rpc LoadMessageHistory (RequestLoadMessageHistory) returns (ResponseLoadHistory) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/LoadMessageHistory"
            body: "*"
        };
    }
    /// Load user's dialogs
    rpc LoadDialogs (RequestLoadDialogs) returns (ResponseLoadDialogs) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/LoadDialogs"
            body: "*"
        };
    }
    rpc FavouriteDialog (RequestFavouriteDialog) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/FavouriteDialog"
            body: "*"
        };
    }
    rpc UnfavouriteDialog (RequestUnfavouriteDialog) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/UnfavouriteDialog"
            body: "*"
        };
    }
    rpc PinMessage (RequestPinMessage) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/PinMessage"
            body: "*"
        };
    }
    rpc UnpinMessage (RequestUnpinMessage) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/UnpinMessage"
            body: "*"
        };
    }
    rpc MuteChat (RequestMuteChat) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/MuteChat"
            body: "*"
        };
    }
    rpc UnmuteChat (RequestUnmuteChat) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/UnmuteChat"
            body: "*"
        };
    }
    // Returns read status of the message per user
    rpc GetMessageReads (RequestGetMessageReads) returns (ResponseGetMessageReads) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/GetMessageReads"
            body: "*"
        };
    }

    // Returns receive status of the message per user
    rpc GetMessageReceives (RequestGetMessageReceives) returns (ResponseGetMessageReceives) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/GetMessageReceives"
            body: "*"
        };
    }
    rpc ReadDialogLater (RequestReadDialogLater) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/ReadDialogLater"
            body: "*"
        };
    }
}
