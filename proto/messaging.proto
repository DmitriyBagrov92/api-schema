syntax = "proto3";

package dialog;

import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "definitions.proto";
import "miscellaneous.proto";
import "peers.proto";
import "media_and_files.proto";
import "scalapb/scalapb.proto";

option go_package = "dialog";
option java_package = "im.dlg.grpc.services";

// Message Attributes
message MessageAttributes {
    /// Is mentioned. If set overrides built-in value.
    google.protobuf.BoolValue is_mentioned = 1 [(dlg).log="visible"];
    /// Is message highlighted. Default is false.
    google.protobuf.BoolValue is_highlighted = 2 [(dlg).log="visible"];
    /// Is notified. If set overrides built-in settings.
    google.protobuf.BoolValue is_notified = 3 [(dlg).log="visible"];
    /// If this message is only for you. Default is false
    google.protobuf.BoolValue is_only_for_you = 4 [(dlg).log="visible"];
    map<string, string> unclassified = 5 [(dlg).log="visible"];
}

// Message media
message MessageMedia {
    WebpageMedia webpage = 1 [(dlg).log="visible"];
    ImageMedia image = 2 [(dlg).log="visible"];
    AudioMedia audio = 3 [(dlg).log="visible"];
    repeated InteractiveMediaGroup actions = 6 [(dlg).log="visible"];
}

// Webpage media
message WebpageMedia {
    google.protobuf.StringValue url = 1 [(dlg).log="hidden"];
    google.protobuf.StringValue title = 2 [(dlg).log="hidden"];
    google.protobuf.StringValue description = 3 [(dlg).log="hidden"];
    ImageLocation image = 4 [(dlg).log="visible"];
}

// Image media
// image image
message ImageMedia {
    ImageLocation image = 1 [(dlg).log="visible"];
}

// Audio media
message AudioMedia {
    AudioLocation audio = 1 [(dlg).log="visible"];
}

enum InteractiveMediaStyle {
    INTERACTIVE_MEDIA_STYLE_UNKNOWN = 0;
    INTERACTIVE_MEDIA_STYLE_DEFAULT = 1;
    INTERACTIVE_MEDIA_STYLE_PRIMARY = 2;
    INTERACTIVE_MEDIA_STYLE_DANGER = 3;
}
/// Some interactive element inside a message
message InteractiveMediaWidget {
    oneof body {
        InteractiveMediaButton interactive_media_button = 1;
        InteractiveMediaSelect interactive_media_select = 2;
    }
}

// A 'Button' widget
message InteractiveMediaButton {
    string value = 1 [(dlg).log="visible"]; /// A value for this button
    /// A user-visible description of this button
    google.protobuf.StringValue label = 2 [(dlg).log="visible"];
}

// A select from multiple values widget
message InteractiveMediaSelect {
    /// list of values to present to user
    repeated InteractiveMediaSelectOption options = 1 [(dlg).log="visible"];
    /// A user-visible descripton of this select
    google.protobuf.StringValue label = 2 [(dlg).log="visible"];
    /// A value that will be selected by default
    google.protobuf.StringValue default_value = 3 [(dlg).log="visible"];
}

// A row in the select widget
message InteractiveMediaSelectOption {
    string value = 1 [(dlg).log="visible"]; /// id of the row
    string label = 2 [(dlg).log="visible"]; /// a user visible text for this row
}

// A text message extension representing an interactive action.
// Can be used to add widgets (such as buttons, selects, etc) to messages.
message InteractiveMedia {
    string id = 1 [(dlg).log="visible"]; /// identifier of the media action
    /// a widget to be shown to user
    InteractiveMediaWidget widget = 2 [(dlg).log="visible"];
    /// a style of the widget, which is interpreted by the client
    InteractiveMediaStyle style = 3 [(dlg).log="visible"];
    /**
     * A content of the alert dialog that will be show to user
     * when they perform the media action
     */
    InteractiveMediaConfirm confirm = 4 [(dlg).log="visible"];
}

message InteractiveMediaTranslation {
    string id = 1 [(dlg).log="visible"];
    string value = 2 [(dlg).log="visible"];
}

message InteractiveMediaTranslationGroup {
    /// a translation group language
    string language = 1 [(dlg).log="visible"];
    /// a list of translation mesages
    repeated InteractiveMediaTranslation messages = 2 [(dlg).log="visible"];
}

// A group of interactive media actions
message InteractiveMediaGroup {
    /// the list of actions
    repeated InteractiveMedia actions = 1 [(dlg).log="visible"];
    /// an optional title of the group
    google.protobuf.StringValue title = 2 [(dlg).log="hidden"];
    /// an optional description of the group
    google.protobuf.StringValue description = 3 [(dlg).log="hidden"];
    /// a media content translations
    repeated InteractiveMediaTranslationGroup translations = 4 [(dlg).log="visible"];
}

// An alert dialog content to show to user
message InteractiveMediaConfirm {
    /// the optional alert dialog prompt
    google.protobuf.StringValue text = 1 [(dlg).log="visible"];
    /// the optional alert dialog title
    google.protobuf.StringValue title = 2 [(dlg).log="visible"];
    /// the optional confirm button text
    google.protobuf.StringValue ok = 3 [(dlg).log="visible"];
    /// the optional cancel button text
    google.protobuf.StringValue dismiss = 4 [(dlg).log="visible"];
}

// The update which will be received when the action is performed. Duplicated on all clients.
message UpdateInteractiveMediaEvent {
    /// Message id of the message that contains interactive media
    UUIDValue mid = 1 [(dlg).log="visible"];
    /// identifier of the media action
    string id = 2 [(dlg).log="visible"];
    /// selected value of that action
    string value = 3 [(dlg).log="visible"];
    /// who interacted with that media
    string user_id = 4 [(dlg).log="visible"];
}

// Sends a request to do interactive media message
message RequestDoInteractiveMediaAction {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    /// Message id of the enclosed message
    UUIDValue mid = 1 [(dlg).log="visible"];
    string id = 2 [(dlg).log="visible"]; /// Media id
    string value = 3 [(dlg).log="visible"]; /// selected value
}

message MessageOverrides {
    google.protobuf.StringValue sender_name_override = 1 [(dlg).log="visible"];
    Avatar sender_photo_override = 2 [(dlg).log="visible"];
    google.protobuf.StringValue sender_photo_url_override = 3;
}

message MessageContent {
    oneof body {
        TextMessage text_message = 1;
        ServiceMessage service_message = 2;
        DocumentMessage document_message = 3;
        JsonMessage json_message = 4;
        UnsupportedMessage unsupported_message = 5;
        StickerMessage sticker_message = 6;
        BinaryMessage binary_message = 7;
        EmptyMessage empty_message = 8;
        DeletedMessage deleted_message = 9;
    }

    MessageOverrides overides = 10;
}

// Text message
message TextMessage {
    string text = 1 [(dlg).log="hidden"];
    /// Optional bytes of extension
    TextMessageEx ext = 2 [(dlg).log="visible"];
    repeated MessageMedia media = 3 [(dlg).log="visible"];
    repeated Any extensions = 4 [(dlg).log="visible"];
    /// Mentions in message
    repeated Mention mentions = 5 [(dlg).log="visible"];
}

message Mention {
    Peer peer = 1;
    bool all = 2;
}

message TextMessageEx {
    oneof body {
        TextExMarkdown text_ex_markdown = 1;
        TextModernMessage text_modern_message = 2;
        TextCommand text_command = 3;
    }
}

// Markdown extension
message TextExMarkdown {
    string markdown = 1 [(dlg).log="hidden"]; /// Markdown text
}

// Modern text message
message TextModernMessage {
    google.protobuf.StringValue text = 1 [(dlg).log="hidden"];
    ParagraphStyle style = 2 [(dlg).log="visible"];
    repeated TextModernAttach attaches = 3 [(dlg).log="visible"];
}

// Paragraph style
message ParagraphStyle {
    /// Show quote-like paragraph?
    google.protobuf.BoolValue show_paragraph = 1 [(dlg).log="visible"];
    /// Override paragraph color
    Color paragraph_color = 2 [(dlg).log="visible"];
    /// Override background color
    Color bg_color = 3 [(dlg).log="visible"];
}

// Attaches to message
message TextModernAttach {
    google.protobuf.StringValue title = 1 [(dlg).log="hidden"];
    google.protobuf.StringValue title_url = 2 [(dlg).log="visible"];
    ImageLocation title_icon = 3 [(dlg).log="visible"];
    google.protobuf.StringValue text = 4 [(dlg).log="hidden"];
    ParagraphStyle style = 5 [(dlg).log="visible"];
    repeated TextModernField fields = 6;
}

// Modern message fields
message TextModernField {
    string title = 1 [(dlg).log="visible"];
    string value = 2 [(dlg).log="visible"];
    /// Is field can be shown in compact way (default is TRUE)
    google.protobuf.BoolValue is_short = 3 [(dlg).log="visible"];
}

// Text Command Message for bots
message TextCommand {
    /// Slash-Command For execution
    string command = 1 [(dlg).log="visible"];
    string args = 2 [(dlg).log="visible"];
}

// Service message
message ServiceMessage {
    string text = 1 [(dlg).log="hidden"];
    ServiceEx ext = 2 [(dlg).log="compact"];
}

message ServiceEx {
    oneof body {
        ServiceExUserInvited user_invited = 1;
        ServiceExUserJoined user_joined = 2;
        ServiceExUserKicked user_kicked = 3;
        ServiceExUserLeft user_left = 4;
        ServiceExGroupCreated group_created = 5;
        ServiceExChangedShortname changed_shortname = 6;
        ServiceExChangedTitle changed_title = 7;
        ServiceExChangedTopic changed_topic = 8;
        ServiceExChangedAbout changed_about = 9;
        ServiceExChangedAvatar changed_avatar = 10;
        ServiceExContactRegistered contact_registered = 11;
        ServiceExPhoneMissed phone_missed = 12;
        ServiceExPhoneCall phone_call = 13;
        ServiceExPhoneRejected phone_rejected = 14;
        ServiceExChatArchived chat_archived = 15;
        ServiceExChatRestored chat_restored = 16;
        ServiceExConferenceStatus conference_status = 17;
    }
}

// Service message about adding user to group
message ServiceExUserInvited {
    string invited_user_id = 1 [(dlg).log="visible"]; /// added user id
}

// Service message about user join to group
message ServiceExUserJoined {
    string joined_user_id = 1;
}

// Service message about kicking user from group
message ServiceExUserKicked {
    string kicked_user_id = 1 [(dlg).log="visible"];
}

// Service message about user left group
message ServiceExUserLeft {
    string left_user_id = 1;
}

// Service message about group creating
message ServiceExGroupCreated {
}

// Service message about group shortname change
message ServiceExChangedShortname {
    string shortname = 1 [(dlg).log="hidden"]; /// New group shortname
}

// Service message about group title change
message ServiceExChangedTitle {
    string title = 1 [(dlg).log="hidden"]; /// New group title
}

// Service message on group topic change
message ServiceExChangedTopic {
    /// New group topic
    google.protobuf.StringValue topic = 1 [(dlg).log="hidden"];
}

// Service message on group about change
message ServiceExChangedAbout {
    /// New group about
    google.protobuf.StringValue about = 1 [(dlg).log="hidden"];
}

// Service message about avatar change
message ServiceExChangedAvatar {
    Avatar avatar = 1 [(dlg).log="compact"]; /// Updated avatar
}

// Service message about user registration
message ServiceExContactRegistered {
    string user_id = 1 [(dlg).log="visible"]; /// User Id
}

// Update about missing phone call
message ServiceExPhoneMissed {
}

// Update about phone call
message ServiceExPhoneCall {
    int32 duration_seconds = 1 [(dlg).log="visible"]; /// Duration of a phone call
}

// Update about phone call rejected
message ServiceExPhoneRejected {
}

// Message about chat archived
message ServiceExChatArchived {
}

// Message about chat restored
message ServiceExChatRestored {
}

// Message about conference call state
message ServiceExConferenceStatus {
    string conference_id = 1;
    string conference_status = 2;
}

// File message
message DocumentMessage {
    string file_id = 1 [(dlg).log="visible"];
    int64 access_hash = 2 [(dlg).log="danger"];
    int32 file_size = 3 [(dlg).log="visible"];
    string name = 4 [(dlg).log="hidden"];
    string mime_type = 5 [(dlg).log="visible"];
    /// optional thumb of file. JPEG less that 90x90 with 60-70 quality.
    FastThumb thumb = 6 [(dlg).log="compact"];
    DocumentEx ext = 7 [(dlg).log="compact"];
    google.protobuf.StringValue caption = 8 [(dlg).log="hidden"];
    repeated Mention mentions = 9 [(dlg).log="visible"];
}

message DocumentEx {
    oneof body {
        DocumentExPhoto photo = 1;
        DocumentExVideo video = 2;
        DocumentExVoice voice = 3;
    }
}

// File photo extension
message DocumentExPhoto {
    int32 w = 1 [(dlg).log="visible"]; /// image width
    int32 h = 2 [(dlg).log="visible"]; /// image height
}

// File video extension
message DocumentExVideo {
    int32 w = 1 [(dlg).log="visible"]; /// video width
    int32 h = 2 [(dlg).log="visible"]; /// video height
    int32 duration = 3 [(dlg).log="visible"];
}

// File voice extension
message DocumentExVoice {
    int32 duration = 1 [(dlg).log="visible"];
}

// Custom-data JsonMessage
message JsonMessage {
    string raw_json = 1 [(dlg).log="hidden"];
}

// Explicit type for unsupported message
message UnsupportedMessage {
}

// Sticker message
message StickerMessage {
    /// Optional Unique ID of sticker
    google.protobuf.StringValue sticker_id = 1 [(dlg).log="visible"];
    /// Optional Fast preview of sticker in webp format
    google.protobuf.BytesValue fast_preview = 2 [(dlg).log="visible"];
    /// Optional 512x512 sticker image in webp format
    ImageLocation image_512 = 3 [(dlg).log="visible"];
    /// Optional 256x256 sticker image in webp format
    ImageLocation image_256 = 4 [(dlg).log="visible"];
    /// Optional Collection ID
    google.protobuf.StringValue sticker_collection_id = 5 [(dlg).log="visible"];
    /// Optional Collection Access Hash
    google.protobuf.Int64Value sticker_collection_access_hash = 6 [(dlg).log="visible"];
    /// Sticker emoji
    google.protobuf.StringValue emoji = 7 [(dlg).log="hidden"];
    /// Animated sticker json payload
    google.protobuf.StringValue animated_sticker_json = 8 [(dlg).log="hidden"];
}

// Binary Message. Useful for implementing your own content types
message BinaryMessage {
    string content_tag = 1 [(dlg).log="visible"];
    bytes msg = 2 [(dlg).log="compact"];
}

// Empty Message
message EmptyMessage {
}

// Deleted message
message DeletedMessage {
    /// Deleted locally message
    google.protobuf.BoolValue is_local = 1 [(dlg).log="compact"];
}

// Short Dialog from grouped conversation list
message DialogShort {
    Peer peer = 1 [(dlg).log="visible"]; /// Peer of conversation
    int32 counter = 2 [(dlg).log="visible"]; /// Conversation unread count
    int64 date = 3 [(dlg).log="visible"]; /// Conversation top message date
}

// Grouped dialog list
message DialogGroup {
    string title = 1 [(dlg).log="hidden"];
    string key = 2 [(dlg).log="visible"];
    repeated DialogShort dialogs = 3 [(dlg).log="visible"];
}

// Reaction to message
message MessageReaction {
    repeated string users = 1 [(dlg).log="visible"]; /// User's reaction
    string code = 2 [(dlg).log="visible"]; /// Reaction EMOJI code
}

// Predicate for searching in custom profile
message SearchPredicate {
    string key = 1 [(dlg).log = "visible"];
    repeated string values = 2 [(dlg).log = "visible"];
}

// Sending plain message
message RequestSendMessage {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1 [(dlg).log="visible"];
    int64 deduplication_id = 2 [(dlg).log="visible"]; /// Id for message deduplication
    MessageContent message = 3 [(dlg).log="visible"];
    /// if not empty, then message will be send to this user only
    google.protobuf.StringValue is_only_for_user = 4 [(dlg).log="visible"];
    /// If current message forwards some other
    ReferencedMessages forward = 5 [(dlg).log="visible"];
    /// If current message is a reply on some other
    ReferencedMessages reply = 6 [(dlg).log="visible"];
    repeated SearchPredicate predicates = 7 [(dlg).log = "visible"];
    repeated string white_list = 8 [(dlg).log = "visible"];
    repeated string black_list = 9 [(dlg).log = "visible"];
}

// Changing Message content
message RequestUpdateMessage {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    UUIDValue mid = 1 [(dlg).log="visible"]; /// Message id
    MessageContent updated_message = 2 [(dlg).log="visible"];
    /// Date from this message when it was changed last time
    int64 last_edited_at = 3 [(dlg).log="visible"];
}

// Confirmation of plain message receive by device
message RequestMessageReceived {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1 [(dlg).log="visible"];
    int64 date = 2 [(dlg).log="visible"];
}

// Marking plain messages as read
message RequestMessageRead {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1 [(dlg).log="visible"];
    int64 date = 2 [(dlg).log="visible"];
}

// Deleting message
message RequestDeleteMessage {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    Peer peer = 1 [(dlg).log="visible"];
    UUIDValue message_id = 2 [(dlg).log="visible"]; /// Message id
    bool delete_for_user_only = 3;
}

// Clearing of conversation (without removing dialog from dialogs list)
message RequestClearChat {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1 [(dlg).log="visible"];
    int64 last_message_date = 2 [(dlg).log="visible"];
}

// Deleting of conversation (also leave group for group conversations)
message RequestDeleteChat {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1 [(dlg).log="visible"];
    int64 last_message_date = 2 [(dlg).log="visible"];
}

// Archiving chat
message RequestArchiveChat {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1 [(dlg).log="visible"];
}

// Setting Message reaction
message RequestMessageSetReaction {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1 [(dlg).log="visible"];
    UUIDValue mid = 2 [(dlg).log="visible"]; /// Message id
    string code = 3 [(dlg).log="visible"]; /// EMOJI code
}

// Removing Message reaction
message RequestMessageRemoveReaction {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1 [(dlg).log="visible"];
    UUIDValue mid = 2 [(dlg).log="visible"]; /// Message id
    string code = 3 [(dlg).log="visible"]; /// EMOJI code
}

// Response for reactions change
message ResponseReactionsResponse {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    repeated MessageReaction reactions = 1;
}

message ResponseSendMessage {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    UUIDValue message_id = 1 [(dlg).log="visible"]; /// Message id
    int64 message_date = 2 [(dlg).log="visible"]; /// Message creation date from server
    UUIDValue previous_message_id = 3 [(dlg).log="visible"]; /// Previous message id
    string creator_user_id = 4 [(dlg).log="visible"]; // Message creator
    int64 clock = 5 [(dlg).log="visible"]; // Clock of this message (initially equals the message_date field)
}

// Update about plain message
message UpdateMessage {
     Peer peer = 1 [(dlg).log="visible"];
     string sender_user_id = 2 [(dlg).log="visible"];
     int64 date = 3 [(dlg).log="visible"]; // message creation date (interval end)
     UUIDValue mid = 4 [(dlg).log="visible"]; /// Message id
     MessageContent message = 5 [(dlg).log="visible"];
     /// attributes to help reasoning about message
     MessageAttributes attributes = 6 [(dlg).log="visible"];
     oneof attach {
         ReferencedMessages forward = 7 [(dlg).log="visible"];
         ReferencedMessages reply = 8 [(dlg).log="visible"];
     }
     /// Message id of previos message from current conversation
     UUIDValue previous_mid = 9 [(dlg).log="visible"];
     google.protobuf.Int64Value prev_message_date = 10; // interval start
     /// counter clock of the unread messages
     int64 unread_counter_clock = 11 [(dlg).log="visible"];
     /// counter of the unread messages
     google.protobuf.Int32Value counter = 12 [(dlg).log="visible"];
     /// date of my own read
     google.protobuf.Int64Value my_read_date = 13 [(dlg).log="visible"];
     int64 random_id = 14 [(dlg).log="visible"];
     // when greater than date, then message is edited
     int64 modified_at = 15 [(dlg).log="visible"];
     // make sense for edited message only (modified_at > date)
     google.protobuf.Int64Value prev_edit_in_peer_at = 16 [(dlg).log="visible"];
}

// Update about message change
message UpdateMessageContentChanged {
    Peer peer = 1 [(dlg).log="visible"];
    UUIDValue mid = 2 [(dlg).log="visible"]; /// Message id
    MessageContent message = 3 [(dlg).log="visible"];
    int64 edited_at = 4 [(dlg).log="visible"];
    int64 prev_edit_in_peer_at = 5;
    // Update on behalf of a system, should not be displayed as edited.
    google.protobuf.BoolValue is_silent = 6;
}

// Update about message sent
message UpdateMessageSent {
    Peer peer = 1 [(dlg).log="visible"];
    int64 rid = 2 [(dlg).log="visible"];
    int64 date = 3 [(dlg).log="visible"];
    /// Message id
    UUIDValue mid = 4 [(dlg).log="visible"];
    /// Previous message id in current conversation
    UUIDValue prev_mid = 5 [(dlg).log="visible"];
    /// counter of unread messages
    int64 unread_counter_clock = 6 [(dlg).log="visible"];
    google.protobuf.Int32Value unread_counter = 7 [(dlg).log="visible"];
    google.protobuf.Int64Value my_read_date = 8 [(dlg).log="visible"];
    oneof attach {
        ReferencedMessages forward = 9 [(dlg).log="visible"];
        ReferencedMessages reply = 10 [(dlg).log="visible"];
    }
}

// Update about message received
message UpdateMessageReceived {
    Peer peer = 1 [(dlg).log="visible"];
    /// when message was receive
    int64 start_date = 2 [(dlg).log="visible"];
    int64 received_date = 3 [(dlg).log="visible"]; /// deprecated
}

// Update about message read
message UpdateMessageRead {
    Peer peer = 1 [(dlg).log="visible"];
    /// when message was read
    int64 start_date = 2 [(dlg).log="visible"];
    int64 read_date = 3 [(dlg).log="visible"]; /// deprecated
}

// Update about message read by me
message UpdateMessageReadByMe {
    Peer peer = 1 [(dlg).log="visible"];
    /// date of the read message
    int64 start_date = 2 [(dlg).log="visible"];

    /// when message was read
    int64 unread_counter_clock = 3 [(dlg).log="visible"];
    /// counter of unread messages
    google.protobuf.Int32Value unread_counter = 4 [(dlg).log="visible"];
}

// Update about message delete
message UpdateMessageDelete {
    Peer peer = 1 [(dlg).log="visible"];
    repeated UUIDValue mids = 2 [(dlg).log="visible"]; /// Deleted messages
    /// counter of unread messages
    google.protobuf.Int32Value counter = 3 [(dlg).log="visible"];
    /// date? related for this unread counter
    int64 action_date = 4 [(dlg).log="visible"];
}

// Update about chat clear
message UpdateChatClear {
    Peer peer = 1 [(dlg).log="visible"];
    int64 action_date = 2 [(dlg).log="visible"];
}

// Update about chat delete
message UpdateChatDelete {
    Peer peer = 1 [(dlg).log="visible"];
    int64 action_date = 2 [(dlg).log="visible"];
}

// Update about chat archive
message UpdateChatArchive {
    Peer peer = 1 [(dlg).log="visible"];
}

// Update about chat groups changed. Called only when adding, removing and reordering of grouped dialog.
message UpdateChatGroupsChanged {
    repeated DialogGroup dialogs = 1 [(dlg).log="visible"];
}

// Update about reactions change
message UpdateReactionsUpdate {
    Peer peer = 1 [(dlg).log="visible"];
    UUIDValue mid = 2 [(dlg).log="visible"]; /// related message id
    repeated MessageReaction reactions = 3 [(dlg).log="visible"];
}

// Update about rejection of message send request
message UpdateMessageRejectedByHook {
    Peer peer = 1 [(dlg).log="visible"];
    int64 rid = 2 [(dlg).log="visible"];
    int64 date = 3 [(dlg).log="visible"];
    string hook_id = 4 [(dlg).log="visible"];
    google.protobuf.StringValue reason = 5 [(dlg).log="visible"];
}

// Update about rejection of message update request
message UpdateMessageEditRejectedByHook {
    Peer peer = 1 [(dlg).log="visible"];
    UUIDValue mid = 2 [(dlg).log="visible"]; // related message id
    int64 date = 3 [(dlg).log="visible"];
    string hook_id = 4 [(dlg).log="visible"];
    google.protobuf.StringValue reason = 5 [(dlg).log="visible"];
}

// Update about new thread inside group
message UpdateThreadCreated {
    GroupOutPeer peer = 1 [(dlg).log="visible"];       // peer representing thread
    UUIDValue start_message = 2 [(dlg).log="visible"]; // messageId from parent group where thread starts
}

// Update about thread converted to group
message UpdateThreadLifted {
    GroupOutPeer peer = 1 [(dlg).log="visible"];
}

enum MessageState {
    MESSAGE_STATE_UNKNOWN = 0;
    MESSAGE_STATE_SENT = 1;
    MESSAGE_STATE_RECEIVED = 2;
    MESSAGE_STATE_READ = 3;
}

// mids Referenced message ids
message ReferencedMessages {
    repeated UUIDValue mids = 1 [(dlg).log="compact"];
}

// Message from history
message HistoryMessage {
    string sender_user_id = 1 [(dlg).log="visible"];
    OutPeer sender_peer = 2;
    OutPeer host_peer = 3 [(dlg).log="visible"];
    /// Message id generated by server
    UUIDValue mid = 4 [(dlg).log="visible"];
    UUIDValue prev_mid = 5;
    int64 date = 6 [(dlg).log="visible"];
    MessageContent message = 7 [(dlg).log="hidden"];
    MessageState state = 8 [(dlg).log="visible"];
    repeated MessageReaction reactions = 9 [(dlg).log="visible"];
    MessageAttributes attribute = 10 [(dlg).log="visible"];
    oneof attach {
        ReferencedMessages forward = 11;
        ReferencedMessages reply = 12;
    }
    google.protobuf.Int64Value edited_at = 13 [(dlg).log="visible"];
    int64 random_id = 14 [(dlg).log="visible"];
}

enum ListLoadMode {
    LIST_LOAD_MODE_UNKNOWN = 0;
    LIST_LOAD_MODE_FORWARD = 1;
    LIST_LOAD_MODE_BACKWARD = 2;
    LIST_LOAD_MODE_BOTH = 3;
}

// Loading history of chat
message RequestLoadHistory {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1 [(dlg).log="visible", (dlg).required=true];
    int64 date = 2 [(dlg).log="visible"];
    /// forward, backward or both
    ListLoadMode load_mode = 3 [(dlg).log="visible"];
    int32 limit = 4 [(dlg).log="visible"];
}

message ResponseLoadHistory {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    repeated HistoryMessage history = 1;
    repeated UserOutPeer user_peers = 2;
    repeated GroupOutPeer group_peers = 3;
    /// counter of unread messages
    google.protobuf.Int32Value counter = 4;
    /// date, related to this unread counter
    int64 counter_date = 5;

    /// last conversation message date
    google.protobuf.Int64Value last_conversation_message_date = 6;
    /// counter of the messages between last conversation message (including it) and last returned in this response
    int32 count_foreign_after_last_returned = 7;
}

message RequestHistoryDifference {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    int64 clock = 1;
}

message ResponseHistoryDifference {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    repeated HistoryMessage history = 1;
    int64 from_clock = 2;
    int64 clock = 3;
}

message HistoryMessageLight {
    string sender_user_id = 1 [(dlg).log="visible"];
    /// Message id generated by server
    UUIDValue message_id = 2 [(dlg).log="visible"];
    int64 date = 3 [(dlg).log="visible"];
    MessageContent message = 4 [(dlg).log="hidden"];
    oneof attach {
        ReferencedMessages forward = 5;
        ReferencedMessages reply = 6;
    }
    int64 edited_at = 7 [(dlg).log="visible"];
    int64 random_id = 8 [(dlg).log="visible"];
}

message RequestLoadHistoryLight {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    Peer peer = 1 [(dlg).log="visible", (dlg).required=true];
    int64 date = 2 [(dlg).log="visible"];
    /// forward, backward or both
    ListLoadMode load_mode = 3 [(dlg).log="visible"];
    int32 limit = 4 [(dlg).log="visible"];
}

message ResponseLoadHistoryLight {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";

    repeated HistoryMessageLight history = 1;
}

message RequestCountForeignMessages {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    Peer peer = 1 [(dlg).log="visible", (dlg).required=true];
    int64 from_date = 2;
}

message ResponseCountForeignMessages {
    /// last conversation message date
    int64 last_conversation_message_date = 1;
    /// counter of the messages between last conversation message (including it) and last returned in this response
    int32 count = 2;
}

// Conversation from history
// peer
// unreadCount
// sortDate date of conversation for sorting
// senderUid Sender of top message (may be zero)
// isFavourite Is dialog favourite
// rid Random ID of top message (may be zero)
// mid Message id
// date Date of top message (can't be zero)
// message Content of message
// firstUnreadDate Date of first unread message
// attributes Optional top message attributes
// pinnedMessages Optional pinned messages
// historyMessage Optional last messages
message Dialog {
    Peer peer = 1 [(dlg).log="visible"]; /// Peer of conversation
    int32 unread_count = 2 [(dlg).log="visible"]; /// counter of unread messages
    int64 sort_date = 3 [(dlg).log="visible"]; /// deprecated
    string sender_user_id = 4 [(dlg).log="visible"];
    google.protobuf.BoolValue is_favourite = 5 [(dlg).log="visible"];
    /// Message id
    UUIDValue mid = 6 [(dlg).log="visible"];
    /// last action date
    int64 date = 7 [(dlg).log="visible"];
    /// last message content
    MessageContent message = 8 [(dlg).log="visible"];
    MessageState state = 9;
    int64 first_unread_date = 10 [(dlg).log="visible"];
    MessageAttributes attributes = 11 [(dlg).log="visible"];
    PinnedMessages pinned_messages = 12 [(dlg).log="visible"];
    /// last message in this dialog
    HistoryMessage history_message = 13 [(dlg).log="visible"];
    int64 last_receive = 14 [(dlg).log="visible"];
    int64 last_read = 15 [(dlg).log="visible"];
    int64 last_reaction_at = 16;
    bool read_later = 17;
    string dialog_type = 18;
}

enum DialogsFilter {
    DIALOGS_FILTER_UNKNOWN = 0;
    DIALOGS_FILTER_EXCLUDEFAVOURITES = 1;
    DIALOGS_FILTER_EXCLUDEARCHIVED = 2;
}

// Loading conversation history
message RequestLoadDialogs {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    int64 min_date = 1 [(dlg).log="visible"];
    int32 limit = 2 [(dlg).log="visible"];
    repeated DialogsFilter filters = 3 [(dlg).log="visible"];
    repeated Peer peers_to_load = 4 [(dlg).log="visible"];
}

/// Contains dialogs and related peers and entities
message ResponseLoadDialogs {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    repeated Dialog dialogs = 1;
    repeated UserOutPeer user_peers = 2;
    repeated GroupOutPeer group_peers = 3;
}

// Data related to dialog entity
message DialogData {
    bool is_favourite = 1 [(dlg).log="visible"];
    int64 created_at = 2 [(dlg).log="visible"];
    /// When dialog was changed last time
    int64 clock = 3 [(dlg).log="visible"];
}

message DialogIndex {
    /// The peer for the conversation
    Peer peer = 1 [(dlg).log="visible"];
    /// Last message date of a dialog
    int64 last_message_date = 2 [(dlg).log="visible"];
    DialogData data = 3 [(dlg).log="visible"];
}

// Compound info of a one of the dialogs in dialog list SDK 2.0
//
// peer
// unread_count count of the unread messages in dialog
// my_read_date date of the last own read
// last_message_date date of the last message
// receive_date date of the last received message
// read_date date of the last read message
// entry_clock shared clock across all datas which required for making a dialog entry
// data data related to dialog itself
message DialogListEntry {
    Peer peer = 1 [(dlg).log="visible"]; /// Peer of conversation
    int64 unread_counter_clock = 2 [(dlg).log="visible"];
    int32 unread_count = 3 [(dlg).log="visible"];
    int64 my_read_date = 4 [(dlg).log="visible"];
    int64 last_message_date = 5 [(dlg).log="visible"];
    int64 receive_date = 6 [(dlg).log="visible"];
    int64 read_date = 7 [(dlg).log="visible"];
    int64 entry_clock = 8 [(dlg).log="visible"];
    int64 last_update_of_message_date = 9;
    int64 last_reaction_date = 10;
    bool read_later = 11;
    string dialog_type = 12;

    DialogData data = 13 [(dlg).log="visible"];
}

/**
 * Fetches dialog index (short info about all user's dialogs).
 * Used in client side pagination.
 */
message RequestFetchDialogIndex {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
}

message ResponseFetchDialogIndex {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    repeated DialogIndex dialog_indices = 1;
}

// Loading compound difference (all dialogs after from_clock) as DialogListEntries
// Use it to request difference in dialog list
message RequestDialogListDifference {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";

    /// Shared clock across all states which required for making a dialog entry (e.g. max clock among those dates)
    /// Conceptually you have to set this to sync all including datas after reconnect or authorization
    int64 from_clock = 1 [(dlg).log="visible"];
}

/// Contains dialogs that was change after from_clock
message ResponseDialogListDifference {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    repeated DialogListEntry entries = 1 [(dlg).log="visible"];

    /// Start and the end of the compound history data interval
    int64 clock = 2 [(dlg).log="visible"];
    int64 prev_clock = 3 [(dlg).log="visible"];
}

// Use it to receive messages for visible dialogs after FetchDialogsIndex
message RequestGetLastConversationMessages {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    repeated Peer peers = 1 [(dlg).log="visible"];
}

message ResponseGetLastConversationMessages {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    message Pair {
        Peer peer = 1 [(dlg).log="visible"];
        HistoryMessage message = 2 [(dlg).log="visible"];
    }

    repeated Pair messages = 1 [(dlg).log="visible"];
}


// Marking dialog as favourite
message RequestFavouriteDialog {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1 [(dlg).log="visible"];
}

// Making dialog as unfavourite
message RequestUnfavouriteDialog {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1 [(dlg).log="visible"];
}

// Update about dialog favourite changed
message UpdateDialogFavouriteChanged {
    Peer peer = 1 [(dlg).log="visible"];
    google.protobuf.BoolValue is_favourite = 2 [(dlg).log="visible"];
}

// Notifying about dialog open
message RequestNotifyDialogOpened {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1 [(dlg).log="visible"];
}

// Pinned messages
message PinnedMessages {
    /// Messages ids
    repeated UUIDValue mids = 1 [(dlg).log="visible"];
}

// Pin message in conversation
message RequestPinMessage {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1 [(dlg).log="visible"];
    UUIDValue mid = 2 [(dlg).log="visible"]; /// Message id
    int64 last_pin_date = 3 [(dlg).log="visible"];
}

// Unpin message in conversation
message RequestUnpinMessage {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1 [(dlg).log="visible"];
    UUIDValue mid = 2 [(dlg).log="visible"]; /// Message id
    int64 last_pin_date = 3 [(dlg).log="visible"];
}

// Update about pinned messages changed in conversation
message UpdatePinnedMessagesChanged {
    Peer peer = 1 [(dlg).log="visible"];
    PinnedMessages pinned_messages = 2 [(dlg).log="visible"];
    int64 action_date = 3 [(dlg).log="visible"];
}

message RequestGetUpdatedMessages {
    Peer peer = 1;
    int64 from_clock = 2;
}

message ResponseGetUpdatedMessages {
    message UpdatedMessage {
        UUIDValue mid = 1;
        MessageContent message = 2;
        int64 modified_at = 3;
    }

    repeated UpdatedMessage messages = 1;
    int64 peer_clock = 2;
    bool next_available = 3;
}

// The model describing when a user received or read a message
message MessageStatus {
    int64 clock = 1 [(dlg).log="visible"]; // time when message was read or received
    string user_id = 2 [(dlg).log="visible"];
}

// Load message statuses for every user in conversation reads
message RequestMessageReads {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    UUIDValue mid = 1 [(dlg).log="visible"]; /// Message id
    int32 limit = 2 [(dlg).log="visible"]; // limit of selection
    int64 timestamp_from = 3 [(dlg).log="visible"]; // time selection starts from
}

// Load message statuses for every user in conversation receives
message RequestMessageReceives {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    UUIDValue mid = 1 [(dlg).log="visible"]; /// Message id
    int32 limit = 2 [(dlg).log="visible"]; // limit of selection
    int64 timestamp_from = 3 [(dlg).log="visible"]; // time selection starts from
}

// Response with the list of message statuses reads
message ResponseMessageReads {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    repeated MessageStatus status = 1;
    int64 timestamp_till = 2 [(dlg).log="visible"]; // max time of returned entries, or requested time if empty
    int64 last_read_date = 3 [(dlg).log="visible"];
    int32 counter = 4 [(dlg).log="visible"];
}

// Response with the list of message statuses receives
message ResponseMessageReceives {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    repeated MessageStatus status = 1;
    int64 timestamp_till = 2 [(dlg).log="visible"]; // max time of returned entries, or requested time if empty
}

message RequestReadDialogLater {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    OutPeer peer = 1 [(dlg).log="visible"];
    bool read_later = 2 [(dlg).log="visible"];
}

// Update about dialog read later changed
message UpdateDialogReadLaterChanged {
    Peer peer = 1 [(dlg).log="visible"];
    bool read_later = 2 [(dlg).log="visible"];
}

service Messaging {
    /// Interact with a message media (click on button for example)
    rpc DoInteractiveMediaAction (RequestDoInteractiveMediaAction) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/DoInteractiveMediaAction"
            body: "*"
        };
    }
    rpc SendMessage (RequestSendMessage) returns (ResponseSendMessage) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/SendMessage"
            body: "*"
        };
    }
    rpc UpdateMessage (RequestUpdateMessage) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/UpdateMessage"
            body: "*"
        };
    }
    /// Mark message as received by self
    rpc MessageReceived (RequestMessageReceived) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/MessageReceived"
            body: "*"
        };
    }
    /// Mark message as read by self
    rpc MessageRead (RequestMessageRead) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/MessageRead"
            body: "*"
        };
    }

    rpc DeleteMessage (RequestDeleteMessage) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/DeleteMessage"
            body: "*"
        };
    }
    /// Clear chat history
    rpc ClearChat (RequestClearChat) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/ClearChat"
            body: "*"
        };
    }
    rpc DeleteChat (RequestDeleteChat) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/DeleteChat"
            body: "*"
        };
    }
    /// Add reaction on message (emoji)
    rpc MessageSetReaction (RequestMessageSetReaction) returns (ResponseReactionsResponse) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/MessageSetReaction"
            body: "*"
        };
    }
    rpc MessageRemoveReaction (RequestMessageRemoveReaction) returns (ResponseReactionsResponse) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/MessageRemoveReaction"
            body: "*"
        };
    }
    /// Load conversation history
    rpc LoadHistory (RequestLoadHistory) returns (ResponseLoadHistory) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/LoadHistory"
            body: "*"
        };
    }
    /// Load conversation history
    rpc LoadHistoryLight (RequestLoadHistoryLight) returns (ResponseLoadHistoryLight) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/LoadHistoryLight"
            body: "*"
        };
    }
    rpc CountForeignMessages (RequestCountForeignMessages) returns (ResponseCountForeignMessages) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/CountForeignMessages"
            body: "*"
        };
    }
    /// Load total history difference for all user's conversations
    rpc HistoryDifference (RequestHistoryDifference) returns (ResponseHistoryDifference) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/HistoryDifference"
            body: "*"
        };
    }
    /// Load user's dialogs
    rpc LoadDialogs (RequestLoadDialogs) returns (ResponseLoadDialogs) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/LoadDialogs"
            body: "*"
        };
    }
    /// Load short info about all user's dialogs
    rpc FetchDialogIndex (RequestFetchDialogIndex) returns (ResponseFetchDialogIndex) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/FetchDialogIndex"
            body: "*"
        };
    }
    /// Load dialogs by peers
    rpc DialogListDifference (RequestDialogListDifference) returns (ResponseDialogListDifference) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/DialogListDifference"
            body: "*"
        };
    }

    /// Load last messages of the given conversations
    rpc GetLastConversationMessages (RequestGetLastConversationMessages) returns (ResponseGetLastConversationMessages) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/GetLastConversationMessages"
            body: "*"
        };
    }
    rpc FavouriteDialog (RequestFavouriteDialog) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/FavouriteDialog"
            body: "*"
        };
    }
    rpc UnfavouriteDialog (RequestUnfavouriteDialog) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/UnfavouriteDialog"
            body: "*"
        };
    }
    rpc NotifyDialogOpened (RequestNotifyDialogOpened) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/NotifyDialogOpened"
            body: "*"
        };
    }
    rpc PinMessage (RequestPinMessage) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/PinMessage"
            body: "*"
        };
    }
    rpc UnpinMessage (RequestUnpinMessage) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/UnpinMessage"
            body: "*"
        };
    }
    rpc GetUpdatedMessages (RequestGetUpdatedMessages) returns (ResponseGetUpdatedMessages) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/GetUpdatedMessages"
            body: "*"
        };
    }

    // Returns read status of the message per user
    rpc GetMessageReads (RequestMessageReads) returns (ResponseMessageReads) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/GetMessageReads"
            body: "*"
        };
    }

    // Returns receive status of the message per user
    rpc GetMessageReceives (RequestMessageReceives) returns (ResponseMessageReceives) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/GetMessageReceives"
              body: "*"
        };
    }

    rpc ReadDialogLater (RequestReadDialogLater) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Messaging/ReadDialogLater"
            body: "*"
        };
    }
}
