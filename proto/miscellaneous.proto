syntax = "proto3";

package dialog;


import "wrappers.proto";
import "definitions.proto";
import "peers.proto";
import "scalapb.proto";

option go_package = "dialog";
option java_package = "im.dlg.grpc.services";

message ConversationLink {
    Peer peer = 1;
    UUIDValue mid = 2;
}

// Boolean response
message ResponseBool {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    bool value = 1;
}


enum SupportedServerMethodsType {
    SUPPORTED_SERVER_METHODS_TYPE_NONE = 0;
    SUPPORTED_SERVER_METHODS_TYPE_CHANGE_PASSWORD = 1;
}

// Configuration of system
// maxGroupSize Current maximum group size
// discover Discover configuration
// shareEndpoint Share endpoint
// callsConfig Calls configuration
// groupInviteConfig Group invite configuration
// serverMetaInfo Server meta information (version, etc.)
// customProfileSchema Custom profile JSON Schema
// servicePeers Service peers supported interpreted by the client
message Config {
    int32 max_group_size = 1;
    Discover discover = 2;
    google.protobuf.StringValue share_endpoint = 4;
    CallsConfig calls_config = 5;
    InvitesConfig group_invite_config = 6;
    ServerMetaInfo server_meta_info = 7;
    string custom_profile_schema = 8;
    ServicePeers service_peers = 9;
    repeated Any extensions = 3;
    int64 client_keep_alive = 10;
    repeated SupportedServerMethodsType supported_methods = 11;
    int32 max_channel_size = 12;
}

// Service peers
message ServicePeers {
    OutPeer security = 1;
    OutPeer support = 2;
    OutPeer stash = 3;
}

// Some info about the servr
// releaseDate Server release date in milliseconds
// apiVersion Server api version
message ServerMetaInfo {
    int64 release_date = 1;
    google.protobuf.Int64Value api_version = 2;
}

enum RtcpMuxPolicy {
    RTCP_MUX_POLICY_UNKNOWN = 0;
    RTCP_MUX_POLICY_NEGOTIATE = 1;
    RTCP_MUX_POLICY_REQUIRE = 2;
}

// Calls configuration
// callsEnabled If true then client should enable calls
// videoCallsEnabled If true then client should enable video calls
// groupCallsEnabled If true then client should enable group calls
// groupCallsMaxMembers Determines how many members may participate in call
// rtcpMuxPolicy The RTCP mux policy to use when gathering ICE candidates
// emojiSecurityEnabled If true then client should send and render emoji security
// screenSharingEnabled If true then client should enable screen sharing
message CallsConfig {
    google.protobuf.BoolValue calls_enabled = 1;
    google.protobuf.BoolValue video_calls_enabled = 2;
    google.protobuf.BoolValue group_calls_enabled = 3;
    google.protobuf.Int32Value group_calls_max_members = 4;
    RtcpMuxPolicy rtcp_mux_policy = 5;
    google.protobuf.BoolValue emoji_security_enabled = 6;
    google.protobuf.BoolValue screen_sharing_enabled = 7;
}

// Group invites configuration
// baseUrl Base URL part
// groupInviteUrlPrefix Prefix for private group invite detection
// resolveUrlPrefix Prefix for public groups and users link detection
// shareInviteUrl Independent URL for external app sharing
message InvitesConfig {
    google.protobuf.StringValue base_url = 1;
    google.protobuf.StringValue group_invite_url_prefix = 2;
    google.protobuf.StringValue resolve_url_prefix = 3;
    google.protobuf.StringValue share_invite_url = 4;
}

// Discover description
// peers peers
message Discover {
    repeated OutPeer peers = 1;
}

// Extention
// id Extension id
// data Extension data
message Extension {
    int32 id = 1;
    bytes data = 2;
}

// Any
// typeUrl type url
// data data
message Any {
    string type_url = 1;
    bytes data = 2;
}

// Update about config change
message UpdateConfig {
    Config config = 1;
    google.protobuf.Int64Value config_hash = 2;
}

message RecursiveMapValue {
    message Value {
        oneof value {
            google.protobuf.DoubleValue d = 2;
            google.protobuf.Int32Value i32 = 3;
            google.protobuf.Int64Value i64 = 4;
            google.protobuf.StringValue str = 5;
            RecursiveMapValue rec = 6;
            Array array_rec = 7;
        }
    }
    message Array {
        repeated Value values = 1;
    }
    message Item {
        string key = 1;
        Value value = 2;
    }
    repeated Item items = 1;
}