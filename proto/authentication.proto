syntax = "proto3";

package dialog;

// <p>Actor now support only one way for authentication - by SMS or phone call.</p>
// <p>Authorization steps:
// <ol>
// <li>Request SMS Code by calling RequestAuthCode</li>
// <li>If SMS arrives than send Authorization code in SignIn/SignUp</li>
// <li>If sms doesn't arrive for a long time - request phone activation by
// calling AuthCodeCall</li>
// </ol>
// </p>
// Some rules<br/>
// If RequestAuthCode return isRegistered = false than use SignUp method else SignIn.<br/>
// If on any step API return PHONE_CODE_EXPIRED than application MUST start
// authorization process from begining.<br/>

import "empty.proto";
import "wrappers.proto";
import "annotations.proto";
import "definitions.proto";
import "miscellaneous.proto";
import "peers.proto";
import "users.proto";
import "scalapb.proto";

option go_package = "dialog";
option java_package = "im.dlg.grpc.services";

enum PhoneActivationType {
    PHONE_ACTIVATION_TYPE_UNKNOWN = 0;
    PHONE_ACTIVATION_TYPE_CODE = 1;
    PHONE_ACTIVATION_TYPE_PASSWORD = 2;
}

enum EmailActivationType {
    EMAIL_ACTIVATION_TYPE_UNKNOWN = 0;
    EMAIL_ACTIVATION_TYPE_CODE = 1;
    EMAIL_ACTIVATION_TYPE_OAUTH2 = 2;
    EMAIL_ACTIVATION_TYPE_PASSWORD = 3;
}

// Start Phone Activation
message RequestStartPhoneAuth {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    int64 phone_number = 1 [(dlg).log="visible"];
    /** Your timezone **/
    google.protobuf.StringValue time_zone = 2 [(dlg).log="visible"];
    /** First language from this array will be used for some notifications from server **/
    repeated string preferred_languages = 3 [(dlg).log="visible"];
}

message ResponseStartPhoneAuth {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    /** Hash of authorization transaction **/
    string transaction_hash = 1;
    bool is_registered = 2;
    /** Code or password - call ValidateCode if code **/
    PhoneActivationType activation_type = 3;
}

// Dial phone and dictate auth code
message RequestSendCodeByPhoneCall {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    /// Hash from ResponseStartPhoneAuth
    string transaction_hash = 1 [(dlg).log="danger"];
}

// Start EMail Activation
message RequestStartEmailAuth {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string email = 1 [(dlg).log="visible"];
    /** Your timezone **/
    google.protobuf.StringValue time_zone = 2 [(dlg).log="visible"];
    /** First language from this array will be used for some notifications from server **/
    repeated string preferred_languages = 3 [(dlg).log="visible"];
}

message ResponseStartEmailAuth {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    /** Hash of authorization transaction **/
    string transaction_hash = 1;
    bool is_registered = 2;
    /** Code or password - call ValidateCode if code **/
    EmailActivationType activation_type = 3;
}

message RequestStartCertificateAuth {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string name = 1 [(dlg).log="visible"];
    google.protobuf.StringValue time_zone = 2 [(dlg).log="visible"];
    repeated string preferred_languages = 3 [(dlg).log="visible"];
}

// Starting token-based login - to authorize bot
message RequestStartTokenAuth {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    /** Token received from BotFather **/
    string token = 1 [(dlg).log="visible"];
    /** Your timezone **/
    google.protobuf.StringValue time_zone = 2 [(dlg).log="visible"];
    /** First language from this array will be used for some notifications from server **/
    repeated string preferred_languages = 3 [(dlg).log="visible"];
}

// Starting Login Authentication
message RequestStartUsernameAuth {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string username = 1 [(dlg).log="visible"];
    google.protobuf.StringValue time_zone = 2 [(dlg).log="visible"];
    /** First language from this array will be used for some notifications from server **/
    repeated string preferred_languages = 3 [(dlg).log="visible"];
}

message ResponseStartUsernameAuth {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    /** Hash of authorization transaction **/
    string transaction_hash = 1;
    bool is_registered = 2;
}

// Apply external session to authorize user
message RequestApplyExternalSessionAuth {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string session_id = 1 [(dlg).log="visible"];
}

// Get Id Token for external system
message RequestGetIdToken {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
     /** service alias token is intended for **/
    string service = 1;
}

// Get Id Token for external system
message ResponseGetIdToken {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string token = 1;
    /** Unix time stamp **/
    int64 expiration_date = 2;
}

// Start Authentication/Authorization via external oAuth2/OpenID SSO Provider
message RequestStartAuthTransaction {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
     /** Client timezone **/
    google.protobuf.StringValue time_zone = 1 [(dlg).log="visible"];
    /** First language from this array will be used for some notifications from server **/
    repeated string preferred_languages = 2 [(dlg).log="visible"];
}

message ResponseStartAuthTransaction {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    /** Hash of authorization transaction **/
    string transaction_hash = 1;
}

// Performing user sign in.
message RequestValidateCode {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    /** Hash of the authorization transaction **/
    string transaction_hash = 1 [(dlg).log="danger"];
    string code = 2 [(dlg).log="hidden"]; /// Authorization code
}

// Performs code resend
message RequestResendCode {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    /** Hash of the authorization transaction **/
    string transaction_hash = 1 [(dlg).log="danger"];
}

// Validation of account password
message RequestValidatePassword {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    /** Hash of the authorization transaction **/
    string transaction_hash = 1 [(dlg).log="danger"];
    string password = 2 [(dlg).log="danger"];
}

// Loading OAuth2 Parameters
message RequestGetOAuth2Params {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string transaction_hash = 1 [(dlg).log="danger"];
    string redirect_url = 2 [(dlg).log="visible"];
}

/// Redirect url result
message ResponseGetOAuth2Params {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    string auth_url = 1;
}

// Complete OAuth2 Authentication
message RequestCompleteOAuth2 {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string transaction_hash = 1 [(dlg).log="danger"];
    string code = 2 [(dlg).log="danger"];
}

// Perform user SignUp
message RequestSignUp {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    /** Hash of the authorization transaction **/
    string transaction_hash = 1 [(dlg).log="danger"];
    // Your name
    string name = 2 [(dlg).log="visible"];
    Sex sex = 3 [(dlg).log="visible"];
    google.protobuf.StringValue password = 4 [(dlg).log="hidden"];
}

enum AuthExtraInfoType {
    AUTH_EXTRA_INFO_TYPE_NONE = 0;
    AUTH_EXTRA_INFO_TYPE_NEED_CHANGE_PASSWORD = 1;
}

// Authentication result
message ResponseAuth {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    /// Registered/authorized user
    User user = 2 [(dlg).log="compact"];
    /// Config for that user
    Config config = 3 [(dlg).log="visible"];
    /// Hash of config to later usage
    google.protobuf.Int64Value config_hash = 4 [(dlg).log="visible"];
    repeated AuthExtraInfoType extra_info = 5 [(dlg).log = "visible"];
}

// Authentication session
message AuthSession {
    string id = 1 [(dlg).log="visible"]; /// Unuque ID of session
    /// holder of session. 1 - this device, 2 - other.
    AuthHolder auth_holder = 2 [(dlg).log="visible"];
    /// Application Id that you set during authorization
    int32 app_id = 3 [(dlg).log="visible"];
    string app_title = 4 [(dlg).log="visible"];
    string device_title = 5 [(dlg).log="visible"];
    /// Time of session creating
    int32 auth_time = 6 [(dlg).log="visible"];
    /// Two-letter country code of session create
    string auth_location = 7 [(dlg).log="hidden"];
    google.protobuf.DoubleValue latitude = 8 [(dlg).log="hidden"];
    google.protobuf.DoubleValue longitude = 9 [(dlg).log="hidden"];
}

/// Holder of session
enum AuthHolder {
    AUTH_HOLDER_UNKNOWN = 0;
    AUTH_HOLDER_THISDEVICE = 1;
    AUTH_HOLDER_OTHERDEVICE = 2;
}

// Getting of all active user's authentication sessions
message RequestGetAuthSessions {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
}

message ResponseGetAuthSessions {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    repeated AuthSession user_auths = 1; /// Active user's sessions
}

// SignOut on specified user's session
message RequestTerminateSession {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string id = 1 [(dlg).log="visible"]; /// Session id
}

// SignOut on all exept current sessions
message RequestTerminateAllSessions {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
}

// SignOut current session
message RequestSignOut {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
}

/**
 * Notification to force client to reload some entities from server
 * Just for old clients. Should be ignore.
 */
message ForceReloadField {
    oneof body {
        ForceReloadDialogs force_reload_dialogs = 1;
        ForceReloadContacts force_reload_contacts = 2;
        ForceReloadHistory force_reload_history = 3;
    }
}

// Tells the client to clear dialogs and load them again
message ForceReloadDialogs {
}

// Tells the client to clear contacts and load them again
message ForceReloadContacts {
}

// Tells the client to clear the specified conversation and load it again
// peer the peer whose history should be reloaded
message ForceReloadHistory {
    Peer peer = 1 [(dlg).log="visible"];
}

message RequestChangePassword {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcRequest";
    string old_password = 1 [(dlg).log = "danger"];
    string new_password = 2 [(dlg).log = "danger"];
}

message ResponseGetSelf {
    option (scalapb.message).extends = "im.dlg.grpc.GrpcResponse";
    /// Registered/authorized user
    User user = 1 [(dlg).log="compact"];
}

service Authentication {
    /// Start authorization by phone
    rpc StartPhoneAuth (RequestStartPhoneAuth) returns (ResponseStartPhoneAuth) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/StartPhoneAuth"
            body: "*"
        };
    }
    /// Resend code by transaction hash
    rpc SendCodeByPhoneCall (RequestSendCodeByPhoneCall) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/SendCodeByPhoneCall"
            body: "*"
        };
    }
    /// Start email authorization process
    rpc StartEmailAuth (RequestStartEmailAuth) returns (ResponseStartEmailAuth) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/StartEmailAuth"
            body: "*"
        };
    }

    rpc StartCertificateAuth (RequestStartCertificateAuth) returns (ResponseAuth) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/StartCertificateAuth"
            body: "*"
        };
    }

    /// Start token auth authorization (actual for bots)
    rpc StartTokenAuth (RequestStartTokenAuth) returns (ResponseAuth) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/StartTokenAuth"
            body: "*"
        };
    }
    /// Start login/password authorization process
    rpc StartUsernameAuth (RequestStartUsernameAuth) returns (ResponseStartUsernameAuth) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/StartUsernameAuth"
            body: "*"
        };
    }
    rpc ApplyExternalSessionAuth (RequestApplyExternalSessionAuth) returns (ResponseAuth) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/ApplyExternalSessionAuth"
            body: "*"
        };
    }

    // Get Id Token for external system
    rpc GetIdToken (RequestGetIdToken) returns (ResponseGetIdToken) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/RequestGetIdToken"
            body: "*"
        };
    }

    rpc StartAuthTransaction (RequestStartAuthTransaction) returns (ResponseStartAuthTransaction) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/RequestStartAuthTransaction"
            body: "*"
        };
    }
    /** Validate code received by phone or email
     *  Returns error if user does not exist
     */
    rpc ValidateCode (RequestValidateCode) returns (ResponseAuth) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/ValidateCode"
            body: "*"
        };
    }
    /// Resend code if you don't receive it with first attempt
    rpc ResendCode (RequestResendCode) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/ResendCode"
            body: "*"
        };
    }
    /// Validate your passwword
    rpc ValidatePassword (RequestValidatePassword) returns (ResponseAuth) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/ValidatePassword"
            body: "*"
        };
    }
    /// Get redirect url
    rpc GetOAuth2Params (RequestGetOAuth2Params) returns (ResponseGetOAuth2Params) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/GetOAuth2Params"
            body: "*"
        };
    }
    /// Complete OAuth2 Authentication
    rpc CompleteOAuth2 (RequestCompleteOAuth2) returns (ResponseAuth) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/CompleteOAuth2"
            body: "*"
        };
    }
    /// Sign up existed user
    rpc SignUp (RequestSignUp) returns (ResponseAuth) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/SignUp"
            body: "*"
        };
    }
    /// Returns all authorized user's sessions
    rpc GetAuthSessions (RequestGetAuthSessions) returns (ResponseGetAuthSessions) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/GetAuthSessions"
            body: "*"
        };
    }
    
    rpc TerminateSession (RequestTerminateSession) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/TerminateSession"
            body: "*"
        };
    }
    /// Log out user
    rpc TerminateAllSessions (RequestTerminateAllSessions) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/TerminateAllSessions"
            body: "*"
        };
    }
    /// Log out current session
    rpc SignOut (RequestSignOut) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/SignOut"
            body: "*"
        };
    }
    rpc ChangePassword (RequestChangePassword) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/ChangePassword"
            body: "*"
        };
    }

    rpc GetSelf(google.protobuf.Empty) returns (ResponseGetSelf) {
        option (google.api.http) = {
            post: "/v1/grpc/Authentication/GetSelf"
            body: "*"
        };
    }
}
