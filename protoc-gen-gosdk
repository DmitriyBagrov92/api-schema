#!/usr/bin/env python

import sys

from google.protobuf.compiler import plugin_pb2 as plugin

def gen_services(request):
    services = []
    for proto in request.proto_file:
        for service in proto.service:
            services.append(service)
    return services

def gen_idented_code(code):
    return code[0] + "\n" + "\n".join(["\t%s" % s for s in code[1:-1]]) + "\n" + code[-1]

initialization = """
func (d *DialogSDK) initializeContext() error {
    ctx, cancel := context.WithCancel(context.Background())
    res, err := d.registration.RegisterDevice(ctx, &RequestRegisterDevice{})
    if err != nil {
        return err
    }
    d.internalContext = metadata.AppendToOutgoingContext(ctx, "x-auth-ticket", res.Token)
    d.cancel = cancel
    return nil
}
func (d *DialogSDK) Close() {
    d.cancel()
    d.conn.Close()
}
"""

def gen_header():
    return "\n".join([
        "package dialog", "",
        'import grpc "google.golang.org/grpc"',
        'import metadata "google.golang.org/grpc/metadata"',
        'import context "golang.org/x/net/context"',
        'import . "github.com/golang/protobuf/ptypes/wrappers"',
        'import . "github.com/golang/protobuf/ptypes/empty"'
    ]) + initialization

def gen_sdk_struct(services):
    struct = ["type DialogSDK struct {", "internalContext context.Context", "cancel context.CancelFunc", "conn *grpc.ClientConn"]
    constructor = ["func NewDialogSDK(cc *grpc.ClientConn) (d *DialogSDK, err error) {", "d = &DialogSDK{}"]
    for service in services:
        struct.append("%s %sClient" % (service.name.lower(), service.name))
        constructor.append("d.%s = New%sClient(cc)" % (service.name.lower(), service.name))
    struct.append("}")
    constructor.append("d.conn = cc")
    constructor.append("err = d.initializeContext()")
    constructor.append("return")
    constructor.append("}")
    return gen_idented_code(struct) + "\n" + gen_idented_code(constructor) + "\n"

def gen_sdk_method(service, method):
    code = []
    preamble = "func (d *DialogSDK) %s%s" % (service.name, method.name)
    if method.server_streaming and method.client_streaming:
        # bidi
        code.append("%s() (%s_%sClient, error) {" % (preamble, service.name, method.name))
        code.append("return d.%s.%s(d.internalContext)" % (service.name.lower(), method.name))
    elif method.server_streaming:
        # server
        code.append("%s(in *%s) (%s_%sClient, error) {" % (preamble, method.input_type.split(".")[-1], service.name, method.name))
        code.append("return d.%s.%s(d.internalContext, in)" % (service.name.lower(), method.name))
    elif method.client_streaming:
        # client
        code.append("%s() (%s_%sClient, error) {" % (preamble, service.name, method.name))
        code.append("return d.%s.%s(d.internalContext)" % (service.name.lower(), method.name))
    else:
        # rpc
        code.append("%s(in *%s) (*%s, error) {" % (preamble, method.input_type.split(".")[-1], method.output_type.split(".")[-1]))
        code.append("return d.%s.%s(d.internalContext, in)" % (service.name.lower(), method.name))
    code.append("}")
    return gen_idented_code(code)

def gen_sdk_methods(services):
    result = ""
    for service in services:
        for method in service.method:
            result += gen_sdk_method(service, method) + "\n"
    return result

def generate_code(request, response):
    services = gen_services(request)
    f = response.file.add()
    f.name = 'sdk.go'
    f.content = gen_header() + gen_sdk_struct(services) + gen_sdk_methods(services)

if __name__ == '__main__':
    request = plugin.CodeGeneratorRequest()
    request.ParseFromString(sys.stdin.read())
    response = plugin.CodeGeneratorResponse()
    generate_code(request, response)
    sys.stdout.write(response.SerializeToString())
