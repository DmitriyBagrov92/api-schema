// Code generated by gRPC proto compiler.  DO NOT EDIT!
// source: messaging.proto

#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
#import "Messaging.pbrpc.h"
#import "Messaging.pbobjc.h"
#import <ProtoRPC/ProtoRPCLegacy.h>
#import <RxLibrary/GRXWriter+Immediate.h>

#if defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS) && GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
#import <Protobuf/GPBWrappers.pbobjc.h>
#else
#import "GPBWrappers.pbobjc.h"
#endif
#import "google/api/Annotations.pbobjc.h"
#import "Definitions.pbobjc.h"
#import "Miscellaneous.pbobjc.h"
#import "Peers.pbobjc.h"
#import "MediaAndFiles.pbobjc.h"
#import "scalapb/Scalapb.pbobjc.h"

@implementation Messaging

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"dialog"
                 serviceName:@"Messaging"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"dialog"
                 serviceName:@"Messaging"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark DoInteractiveMediaAction(RequestDoInteractiveMediaAction) returns (ResponseVoid)

/**
 * / Interact with a message media (click on button for example)
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)doInteractiveMediaActionWithRequest:(RequestDoInteractiveMediaAction *)request handler:(void(^)(ResponseVoid *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToDoInteractiveMediaActionWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Interact with a message media (click on button for example)
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToDoInteractiveMediaActionWithRequest:(RequestDoInteractiveMediaAction *)request handler:(void(^)(ResponseVoid *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"DoInteractiveMediaAction"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseVoid class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Interact with a message media (click on button for example)
 */
- (GRPCUnaryProtoCall *)doInteractiveMediaActionWithMessage:(RequestDoInteractiveMediaAction *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"DoInteractiveMediaAction"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseVoid class]];
}

#pragma mark SendMessage(RequestSendMessage) returns (ResponseSendMessage)

- (void)sendMessageWithRequest:(RequestSendMessage *)request handler:(void(^)(ResponseSendMessage *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToSendMessageWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToSendMessageWithRequest:(RequestSendMessage *)request handler:(void(^)(ResponseSendMessage *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"SendMessage"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseSendMessage class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)sendMessageWithMessage:(RequestSendMessage *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"SendMessage"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseSendMessage class]];
}

#pragma mark UpdateMessage(RequestUpdateMessage) returns (ResponseSeqDate)

- (void)updateMessageWithRequest:(RequestUpdateMessage *)request handler:(void(^)(ResponseSeqDate *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToUpdateMessageWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToUpdateMessageWithRequest:(RequestUpdateMessage *)request handler:(void(^)(ResponseSeqDate *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"UpdateMessage"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseSeqDate class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)updateMessageWithMessage:(RequestUpdateMessage *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"UpdateMessage"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseSeqDate class]];
}

#pragma mark MessageReceived(RequestMessageReceived) returns (ResponseVoid)

/**
 * / Mark message as received by self
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)messageReceivedWithRequest:(RequestMessageReceived *)request handler:(void(^)(ResponseVoid *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToMessageReceivedWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Mark message as received by self
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToMessageReceivedWithRequest:(RequestMessageReceived *)request handler:(void(^)(ResponseVoid *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"MessageReceived"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseVoid class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Mark message as received by self
 */
- (GRPCUnaryProtoCall *)messageReceivedWithMessage:(RequestMessageReceived *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"MessageReceived"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseVoid class]];
}

#pragma mark MessageRead(RequestMessageRead) returns (ResponseVoid)

/**
 * / Mark message as read by self
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)messageReadWithRequest:(RequestMessageRead *)request handler:(void(^)(ResponseVoid *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToMessageReadWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Mark message as read by self
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToMessageReadWithRequest:(RequestMessageRead *)request handler:(void(^)(ResponseVoid *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"MessageRead"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseVoid class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Mark message as read by self
 */
- (GRPCUnaryProtoCall *)messageReadWithMessage:(RequestMessageRead *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"MessageRead"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseVoid class]];
}

#pragma mark DeleteMessageObsolete(RequestDeleteMessageObsolete) returns (ResponseSeq)

/**
 * / deprecated
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)deleteMessageObsoleteWithRequest:(RequestDeleteMessageObsolete *)request handler:(void(^)(ResponseSeq *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToDeleteMessageObsoleteWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / deprecated
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToDeleteMessageObsoleteWithRequest:(RequestDeleteMessageObsolete *)request handler:(void(^)(ResponseSeq *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"DeleteMessageObsolete"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseSeq class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / deprecated
 */
- (GRPCUnaryProtoCall *)deleteMessageObsoleteWithMessage:(RequestDeleteMessageObsolete *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"DeleteMessageObsolete"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseSeq class]];
}

#pragma mark DeleteMessage(RequestDeleteMessage) returns (ResponseVoid)

- (void)deleteMessageWithRequest:(RequestDeleteMessage *)request handler:(void(^)(ResponseVoid *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToDeleteMessageWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToDeleteMessageWithRequest:(RequestDeleteMessage *)request handler:(void(^)(ResponseVoid *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"DeleteMessage"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseVoid class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)deleteMessageWithMessage:(RequestDeleteMessage *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"DeleteMessage"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseVoid class]];
}

#pragma mark ClearChat(RequestClearChat) returns (ResponseSeq)

/**
 * / Clear chat history
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)clearChatWithRequest:(RequestClearChat *)request handler:(void(^)(ResponseSeq *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToClearChatWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Clear chat history
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToClearChatWithRequest:(RequestClearChat *)request handler:(void(^)(ResponseSeq *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"ClearChat"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseSeq class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Clear chat history
 */
- (GRPCUnaryProtoCall *)clearChatWithMessage:(RequestClearChat *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"ClearChat"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseSeq class]];
}

#pragma mark DeleteChat(RequestDeleteChat) returns (ResponseSeq)

- (void)deleteChatWithRequest:(RequestDeleteChat *)request handler:(void(^)(ResponseSeq *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToDeleteChatWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToDeleteChatWithRequest:(RequestDeleteChat *)request handler:(void(^)(ResponseSeq *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"DeleteChat"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseSeq class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)deleteChatWithMessage:(RequestDeleteChat *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"DeleteChat"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseSeq class]];
}

#pragma mark ArchiveChat(RequestArchiveChat) returns (ResponseSeq)

/**
 * / deprecated
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)archiveChatWithRequest:(RequestArchiveChat *)request handler:(void(^)(ResponseSeq *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToArchiveChatWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / deprecated
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToArchiveChatWithRequest:(RequestArchiveChat *)request handler:(void(^)(ResponseSeq *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"ArchiveChat"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseSeq class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / deprecated
 */
- (GRPCUnaryProtoCall *)archiveChatWithMessage:(RequestArchiveChat *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"ArchiveChat"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseSeq class]];
}

#pragma mark MessageSetReaction(RequestMessageSetReaction) returns (ResponseReactionsResponse)

/**
 * / Add reaction on message (emoji)
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)messageSetReactionWithRequest:(RequestMessageSetReaction *)request handler:(void(^)(ResponseReactionsResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToMessageSetReactionWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Add reaction on message (emoji)
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToMessageSetReactionWithRequest:(RequestMessageSetReaction *)request handler:(void(^)(ResponseReactionsResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"MessageSetReaction"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseReactionsResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Add reaction on message (emoji)
 */
- (GRPCUnaryProtoCall *)messageSetReactionWithMessage:(RequestMessageSetReaction *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"MessageSetReaction"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseReactionsResponse class]];
}

#pragma mark MessageRemoveReaction(RequestMessageRemoveReaction) returns (ResponseReactionsResponse)

- (void)messageRemoveReactionWithRequest:(RequestMessageRemoveReaction *)request handler:(void(^)(ResponseReactionsResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToMessageRemoveReactionWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToMessageRemoveReactionWithRequest:(RequestMessageRemoveReaction *)request handler:(void(^)(ResponseReactionsResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"MessageRemoveReaction"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseReactionsResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)messageRemoveReactionWithMessage:(RequestMessageRemoveReaction *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"MessageRemoveReaction"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseReactionsResponse class]];
}

#pragma mark LoadHistory(RequestLoadHistory) returns (ResponseLoadHistory)

/**
 * / Load conversation history
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)loadHistoryWithRequest:(RequestLoadHistory *)request handler:(void(^)(ResponseLoadHistory *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToLoadHistoryWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Load conversation history
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToLoadHistoryWithRequest:(RequestLoadHistory *)request handler:(void(^)(ResponseLoadHistory *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"LoadHistory"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseLoadHistory class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Load conversation history
 */
- (GRPCUnaryProtoCall *)loadHistoryWithMessage:(RequestLoadHistory *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"LoadHistory"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseLoadHistory class]];
}

#pragma mark HistoryDifference(RequestHistoryDifference) returns (ResponseHistoryDifference)

/**
 * / Load total history difference for all user's conversations
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)historyDifferenceWithRequest:(RequestHistoryDifference *)request handler:(void(^)(ResponseHistoryDifference *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToHistoryDifferenceWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Load total history difference for all user's conversations
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToHistoryDifferenceWithRequest:(RequestHistoryDifference *)request handler:(void(^)(ResponseHistoryDifference *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"HistoryDifference"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseHistoryDifference class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Load total history difference for all user's conversations
 */
- (GRPCUnaryProtoCall *)historyDifferenceWithMessage:(RequestHistoryDifference *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"HistoryDifference"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseHistoryDifference class]];
}

#pragma mark LoadDialogs(RequestLoadDialogs) returns (ResponseLoadDialogs)

/**
 * / Load user's dialogs
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)loadDialogsWithRequest:(RequestLoadDialogs *)request handler:(void(^)(ResponseLoadDialogs *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToLoadDialogsWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Load user's dialogs
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToLoadDialogsWithRequest:(RequestLoadDialogs *)request handler:(void(^)(ResponseLoadDialogs *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"LoadDialogs"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseLoadDialogs class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Load user's dialogs
 */
- (GRPCUnaryProtoCall *)loadDialogsWithMessage:(RequestLoadDialogs *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"LoadDialogs"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseLoadDialogs class]];
}

#pragma mark FetchDialogIndex(RequestFetchDialogIndex) returns (ResponseFetchDialogIndex)

/**
 * / Load short info about all user's dialogs
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)fetchDialogIndexWithRequest:(RequestFetchDialogIndex *)request handler:(void(^)(ResponseFetchDialogIndex *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToFetchDialogIndexWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Load short info about all user's dialogs
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToFetchDialogIndexWithRequest:(RequestFetchDialogIndex *)request handler:(void(^)(ResponseFetchDialogIndex *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"FetchDialogIndex"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseFetchDialogIndex class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Load short info about all user's dialogs
 */
- (GRPCUnaryProtoCall *)fetchDialogIndexWithMessage:(RequestFetchDialogIndex *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"FetchDialogIndex"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseFetchDialogIndex class]];
}

#pragma mark DialogListDifference(RequestDialogListDifference) returns (ResponseDialogListDifference)

/**
 * / Load dialogs by peers
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)dialogListDifferenceWithRequest:(RequestDialogListDifference *)request handler:(void(^)(ResponseDialogListDifference *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToDialogListDifferenceWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Load dialogs by peers
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToDialogListDifferenceWithRequest:(RequestDialogListDifference *)request handler:(void(^)(ResponseDialogListDifference *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"DialogListDifference"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseDialogListDifference class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Load dialogs by peers
 */
- (GRPCUnaryProtoCall *)dialogListDifferenceWithMessage:(RequestDialogListDifference *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"DialogListDifference"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseDialogListDifference class]];
}

#pragma mark GetLastConversationMessages(RequestGetLastConversationMessages) returns (ResponseGetLastConversationMessages)

/**
 * / Load last messages of the given conversations
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getLastConversationMessagesWithRequest:(RequestGetLastConversationMessages *)request handler:(void(^)(ResponseGetLastConversationMessages *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetLastConversationMessagesWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Load last messages of the given conversations
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetLastConversationMessagesWithRequest:(RequestGetLastConversationMessages *)request handler:(void(^)(ResponseGetLastConversationMessages *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetLastConversationMessages"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseGetLastConversationMessages class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Load last messages of the given conversations
 */
- (GRPCUnaryProtoCall *)getLastConversationMessagesWithMessage:(RequestGetLastConversationMessages *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetLastConversationMessages"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseGetLastConversationMessages class]];
}

#pragma mark LoadArchived(RequestLoadArchived) returns (ResponseLoadArchived)

/**
 * / deprecated
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)loadArchivedWithRequest:(RequestLoadArchived *)request handler:(void(^)(ResponseLoadArchived *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToLoadArchivedWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / deprecated
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToLoadArchivedWithRequest:(RequestLoadArchived *)request handler:(void(^)(ResponseLoadArchived *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"LoadArchived"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseLoadArchived class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / deprecated
 */
- (GRPCUnaryProtoCall *)loadArchivedWithMessage:(RequestLoadArchived *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"LoadArchived"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseLoadArchived class]];
}

#pragma mark LoadGroupedDialogs(RequestLoadGroupedDialogs) returns (ResponseLoadGroupedDialogs)

/**
 * / deprecated
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)loadGroupedDialogsWithRequest:(RequestLoadGroupedDialogs *)request handler:(void(^)(ResponseLoadGroupedDialogs *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToLoadGroupedDialogsWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / deprecated
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToLoadGroupedDialogsWithRequest:(RequestLoadGroupedDialogs *)request handler:(void(^)(ResponseLoadGroupedDialogs *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"LoadGroupedDialogs"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseLoadGroupedDialogs class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / deprecated
 */
- (GRPCUnaryProtoCall *)loadGroupedDialogsWithMessage:(RequestLoadGroupedDialogs *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"LoadGroupedDialogs"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseLoadGroupedDialogs class]];
}

#pragma mark HideDialog(RequestHideDialog) returns (ResponseDialogsOrder)

/**
 * / deprecated
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)hideDialogWithRequest:(RequestHideDialog *)request handler:(void(^)(ResponseDialogsOrder *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToHideDialogWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / deprecated
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToHideDialogWithRequest:(RequestHideDialog *)request handler:(void(^)(ResponseDialogsOrder *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"HideDialog"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseDialogsOrder class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / deprecated
 */
- (GRPCUnaryProtoCall *)hideDialogWithMessage:(RequestHideDialog *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"HideDialog"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseDialogsOrder class]];
}

#pragma mark ShowDialog(RequestShowDialog) returns (ResponseDialogsOrder)

/**
 * / deprecated
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)showDialogWithRequest:(RequestShowDialog *)request handler:(void(^)(ResponseDialogsOrder *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToShowDialogWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / deprecated
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToShowDialogWithRequest:(RequestShowDialog *)request handler:(void(^)(ResponseDialogsOrder *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"ShowDialog"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseDialogsOrder class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / deprecated
 */
- (GRPCUnaryProtoCall *)showDialogWithMessage:(RequestShowDialog *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"ShowDialog"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseDialogsOrder class]];
}

#pragma mark FavouriteDialog(RequestFavouriteDialog) returns (ResponseDialogsOrder)

- (void)favouriteDialogWithRequest:(RequestFavouriteDialog *)request handler:(void(^)(ResponseDialogsOrder *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToFavouriteDialogWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToFavouriteDialogWithRequest:(RequestFavouriteDialog *)request handler:(void(^)(ResponseDialogsOrder *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"FavouriteDialog"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseDialogsOrder class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)favouriteDialogWithMessage:(RequestFavouriteDialog *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"FavouriteDialog"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseDialogsOrder class]];
}

#pragma mark UnfavouriteDialog(RequestUnfavouriteDialog) returns (ResponseDialogsOrder)

- (void)unfavouriteDialogWithRequest:(RequestUnfavouriteDialog *)request handler:(void(^)(ResponseDialogsOrder *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToUnfavouriteDialogWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToUnfavouriteDialogWithRequest:(RequestUnfavouriteDialog *)request handler:(void(^)(ResponseDialogsOrder *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"UnfavouriteDialog"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseDialogsOrder class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)unfavouriteDialogWithMessage:(RequestUnfavouriteDialog *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"UnfavouriteDialog"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseDialogsOrder class]];
}

#pragma mark NotifyDialogOpened(RequestNotifyDialogOpened) returns (ResponseVoid)

- (void)notifyDialogOpenedWithRequest:(RequestNotifyDialogOpened *)request handler:(void(^)(ResponseVoid *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToNotifyDialogOpenedWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToNotifyDialogOpenedWithRequest:(RequestNotifyDialogOpened *)request handler:(void(^)(ResponseVoid *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"NotifyDialogOpened"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseVoid class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)notifyDialogOpenedWithMessage:(RequestNotifyDialogOpened *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"NotifyDialogOpened"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseVoid class]];
}

#pragma mark PinMessage(RequestPinMessage) returns (ResponseSeqDate)

- (void)pinMessageWithRequest:(RequestPinMessage *)request handler:(void(^)(ResponseSeqDate *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToPinMessageWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToPinMessageWithRequest:(RequestPinMessage *)request handler:(void(^)(ResponseSeqDate *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"PinMessage"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseSeqDate class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)pinMessageWithMessage:(RequestPinMessage *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"PinMessage"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseSeqDate class]];
}

#pragma mark UnpinMessage(RequestUnpinMessage) returns (ResponseSeqDate)

- (void)unpinMessageWithRequest:(RequestUnpinMessage *)request handler:(void(^)(ResponseSeqDate *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToUnpinMessageWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToUnpinMessageWithRequest:(RequestUnpinMessage *)request handler:(void(^)(ResponseSeqDate *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"UnpinMessage"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseSeqDate class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)unpinMessageWithMessage:(RequestUnpinMessage *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"UnpinMessage"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseSeqDate class]];
}

#pragma mark GetUpdatedMessages(RequestGetUpdatedMessages) returns (ResponseGetUpdatedMessages)

- (void)getUpdatedMessagesWithRequest:(RequestGetUpdatedMessages *)request handler:(void(^)(ResponseGetUpdatedMessages *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetUpdatedMessagesWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToGetUpdatedMessagesWithRequest:(RequestGetUpdatedMessages *)request handler:(void(^)(ResponseGetUpdatedMessages *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetUpdatedMessages"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseGetUpdatedMessages class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)getUpdatedMessagesWithMessage:(RequestGetUpdatedMessages *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetUpdatedMessages"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseGetUpdatedMessages class]];
}

#pragma mark GetMessageReads(RequestMessageReads) returns (ResponseMessageReads)

/**
 * Returns read status of the message per user
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getMessageReadsWithRequest:(RequestMessageReads *)request handler:(void(^)(ResponseMessageReads *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetMessageReadsWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Returns read status of the message per user
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetMessageReadsWithRequest:(RequestMessageReads *)request handler:(void(^)(ResponseMessageReads *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetMessageReads"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseMessageReads class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Returns read status of the message per user
 */
- (GRPCUnaryProtoCall *)getMessageReadsWithMessage:(RequestMessageReads *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetMessageReads"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseMessageReads class]];
}

#pragma mark GetMessageReceives(RequestMessageReceives) returns (ResponseMessageReceives)

/**
 * Returns receive status of the message per user
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getMessageReceivesWithRequest:(RequestMessageReceives *)request handler:(void(^)(ResponseMessageReceives *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetMessageReceivesWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Returns receive status of the message per user
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetMessageReceivesWithRequest:(RequestMessageReceives *)request handler:(void(^)(ResponseMessageReceives *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetMessageReceives"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseMessageReceives class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Returns receive status of the message per user
 */
- (GRPCUnaryProtoCall *)getMessageReceivesWithMessage:(RequestMessageReceives *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetMessageReceives"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseMessageReceives class]];
}

@end
#endif
