// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: push.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Push.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
#import "Definitions.pbobjc.h"
#import "Miscellaneous.pbobjc.h"
#import "scalapb/Scalapb.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PushRoot

@implementation PushRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
    [registry addExtensions:[DefinitionsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - PushRoot_FileDescriptor

static GPBFileDescriptor *PushRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"dialog"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RequestRegisterGooglePush

@implementation RequestRegisterGooglePush

@dynamic projectId;
@dynamic token;

typedef struct RequestRegisterGooglePush__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
  int64_t projectId;
} RequestRegisterGooglePush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "projectId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestRegisterGooglePush_FieldNumber_ProjectId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestRegisterGooglePush__storage_, projectId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestRegisterGooglePush_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestRegisterGooglePush__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestRegisterGooglePush class]
                                     rootClass:[PushRoot class]
                                          file:PushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestRegisterGooglePush__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestUnregisterGooglePush

@implementation RequestUnregisterGooglePush

@dynamic token;

typedef struct RequestUnregisterGooglePush__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
} RequestUnregisterGooglePush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestUnregisterGooglePush_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestUnregisterGooglePush__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestUnregisterGooglePush class]
                                     rootClass:[PushRoot class]
                                          file:PushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestUnregisterGooglePush__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestRegisterApplePush

@implementation RequestRegisterApplePush

@dynamic apnsKey;
@dynamic token;
@dynamic apnsStringKey;

typedef struct RequestRegisterApplePush__storage_ {
  uint32_t _has_storage_[1];
  int32_t apnsKey;
  NSString *token;
  NSString *apnsStringKey;
} RequestRegisterApplePush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "apnsKey",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestRegisterApplePush_FieldNumber_ApnsKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestRegisterApplePush__storage_, apnsKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestRegisterApplePush_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestRegisterApplePush__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "apnsStringKey",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestRegisterApplePush_FieldNumber_ApnsStringKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestRegisterApplePush__storage_, apnsStringKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestRegisterApplePush class]
                                     rootClass:[PushRoot class]
                                          file:PushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestRegisterApplePush__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestUnregisterApplePush

@implementation RequestUnregisterApplePush

@dynamic token;

typedef struct RequestUnregisterApplePush__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
} RequestUnregisterApplePush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestUnregisterApplePush_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestUnregisterApplePush__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestUnregisterApplePush class]
                                     rootClass:[PushRoot class]
                                          file:PushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestUnregisterApplePush__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestRegisterApplePushKit

@implementation RequestRegisterApplePushKit

@dynamic apnsKey;
@dynamic token;
@dynamic apnsStringKey;

typedef struct RequestRegisterApplePushKit__storage_ {
  uint32_t _has_storage_[1];
  int32_t apnsKey;
  NSString *token;
  NSString *apnsStringKey;
} RequestRegisterApplePushKit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "apnsKey",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestRegisterApplePushKit_FieldNumber_ApnsKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestRegisterApplePushKit__storage_, apnsKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestRegisterApplePushKit_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestRegisterApplePushKit__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "apnsStringKey",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestRegisterApplePushKit_FieldNumber_ApnsStringKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestRegisterApplePushKit__storage_, apnsStringKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestRegisterApplePushKit class]
                                     rootClass:[PushRoot class]
                                          file:PushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestRegisterApplePushKit__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestUnregisterApplePushKit

@implementation RequestUnregisterApplePushKit

@dynamic token;

typedef struct RequestUnregisterApplePushKit__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
} RequestUnregisterApplePushKit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestUnregisterApplePushKit_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestUnregisterApplePushKit__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestUnregisterApplePushKit class]
                                     rootClass:[PushRoot class]
                                          file:PushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestUnregisterApplePushKit__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestRegisterApplePushToken

@implementation RequestRegisterApplePushToken

@dynamic bundleId;
@dynamic token;

typedef struct RequestRegisterApplePushToken__storage_ {
  uint32_t _has_storage_[1];
  NSString *bundleId;
  NSString *token;
} RequestRegisterApplePushToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bundleId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestRegisterApplePushToken_FieldNumber_BundleId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestRegisterApplePushToken__storage_, bundleId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestRegisterApplePushToken_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestRegisterApplePushToken__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestRegisterApplePushToken class]
                                     rootClass:[PushRoot class]
                                          file:PushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestRegisterApplePushToken__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestUnregisterApplePushToken

@implementation RequestUnregisterApplePushToken

@dynamic token;

typedef struct RequestUnregisterApplePushToken__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
} RequestUnregisterApplePushToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestUnregisterApplePushToken_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestUnregisterApplePushToken__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestUnregisterApplePushToken class]
                                     rootClass:[PushRoot class]
                                          file:PushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestUnregisterApplePushToken__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
