// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: profile.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Profile.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
#import "Definitions.pbobjc.h"
#import "Miscellaneous.pbobjc.h"
#import "MediaAndFiles.pbobjc.h"
#import "Users.pbobjc.h"
#import "scalapb/Scalapb.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Avatar);
GPBObjCClassDeclaration(FileLocation);
GPBObjCClassDeclaration(GPBStringValue);
GPBObjCClassDeclaration(UserStatus);

#pragma mark - ProfileRoot

@implementation ProfileRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
    [registry addExtensions:[DefinitionsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ProfileRoot_FileDescriptor

static GPBFileDescriptor *ProfileRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"dialog"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RequestEditName

@implementation RequestEditName

@dynamic name;

typedef struct RequestEditName__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
} RequestEditName__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestEditName_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestEditName__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestEditName class]
                                     rootClass:[ProfileRoot class]
                                          file:ProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestEditName__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestEditNickName

@implementation RequestEditNickName

@dynamic hasNickname, nickname;

typedef struct RequestEditNickName__storage_ {
  uint32_t _has_storage_[1];
  GPBStringValue *nickname;
} RequestEditNickName__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nickname",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = RequestEditNickName_FieldNumber_Nickname,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestEditNickName__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestEditNickName class]
                                     rootClass:[ProfileRoot class]
                                          file:ProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestEditNickName__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestCheckNickName

@implementation RequestCheckNickName

@dynamic nickname;

typedef struct RequestCheckNickName__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickname;
} RequestCheckNickName__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nickname",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestCheckNickName_FieldNumber_Nickname,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestCheckNickName__storage_, nickname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestCheckNickName class]
                                     rootClass:[ProfileRoot class]
                                          file:ProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestCheckNickName__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestEditAbout

@implementation RequestEditAbout

@dynamic hasAbout, about;

typedef struct RequestEditAbout__storage_ {
  uint32_t _has_storage_[1];
  GPBStringValue *about;
} RequestEditAbout__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "about",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = RequestEditAbout_FieldNumber_About,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestEditAbout__storage_, about),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestEditAbout class]
                                     rootClass:[ProfileRoot class]
                                          file:ProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestEditAbout__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestEditAvatar

@implementation RequestEditAvatar

@dynamic hasFileLocation, fileLocation;

typedef struct RequestEditAvatar__storage_ {
  uint32_t _has_storage_[1];
  FileLocation *fileLocation;
} RequestEditAvatar__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileLocation",
        .dataTypeSpecific.clazz = GPBObjCClass(FileLocation),
        .number = RequestEditAvatar_FieldNumber_FileLocation,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestEditAvatar__storage_, fileLocation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestEditAvatar class]
                                     rootClass:[ProfileRoot class]
                                          file:ProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestEditAvatar__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseEditAvatar

@implementation ResponseEditAvatar

@dynamic hasAvatar, avatar;
@dynamic seq;
@dynamic state;

typedef struct ResponseEditAvatar__storage_ {
  uint32_t _has_storage_[1];
  int32_t seq;
  Avatar *avatar;
  NSData *state;
} ResponseEditAvatar__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "avatar",
        .dataTypeSpecific.clazz = GPBObjCClass(Avatar),
        .number = ResponseEditAvatar_FieldNumber_Avatar,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseEditAvatar__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "seq",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseEditAvatar_FieldNumber_Seq,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ResponseEditAvatar__storage_, seq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "state",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseEditAvatar_FieldNumber_State,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ResponseEditAvatar__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseEditAvatar class]
                                     rootClass:[ProfileRoot class]
                                          file:ProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseEditAvatar__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestRemoveAvatar

@implementation RequestRemoveAvatar


typedef struct RequestRemoveAvatar__storage_ {
  uint32_t _has_storage_[1];
} RequestRemoveAvatar__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestRemoveAvatar class]
                                     rootClass:[ProfileRoot class]
                                          file:ProfileRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(RequestRemoveAvatar__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestEditMyTimeZone

@implementation RequestEditMyTimeZone

@dynamic tz;

typedef struct RequestEditMyTimeZone__storage_ {
  uint32_t _has_storage_[1];
  NSString *tz;
} RequestEditMyTimeZone__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tz",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestEditMyTimeZone_FieldNumber_Tz,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestEditMyTimeZone__storage_, tz),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestEditMyTimeZone class]
                                     rootClass:[ProfileRoot class]
                                          file:ProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestEditMyTimeZone__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestEditMyPreferredLanguages

@implementation RequestEditMyPreferredLanguages

@dynamic preferredLanguagesArray, preferredLanguagesArray_Count;

typedef struct RequestEditMyPreferredLanguages__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *preferredLanguagesArray;
} RequestEditMyPreferredLanguages__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "preferredLanguagesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestEditMyPreferredLanguages_FieldNumber_PreferredLanguagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestEditMyPreferredLanguages__storage_, preferredLanguagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestEditMyPreferredLanguages class]
                                     rootClass:[ProfileRoot class]
                                          file:ProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestEditMyPreferredLanguages__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestEditSex

@implementation RequestEditSex

@dynamic sex;

typedef struct RequestEditSex__storage_ {
  uint32_t _has_storage_[1];
  Sex sex;
} RequestEditSex__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = Sex_EnumDescriptor,
        .number = RequestEditSex_FieldNumber_Sex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestEditSex__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestEditSex class]
                                     rootClass:[ProfileRoot class]
                                          file:ProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestEditSex__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RequestEditSex_Sex_RawValue(RequestEditSex *message) {
  GPBDescriptor *descriptor = [RequestEditSex descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RequestEditSex_FieldNumber_Sex];
  return GPBGetMessageRawEnumField(message, field);
}

void SetRequestEditSex_Sex_RawValue(RequestEditSex *message, int32_t value) {
  GPBDescriptor *descriptor = [RequestEditSex descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RequestEditSex_FieldNumber_Sex];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - RequestEditCustomProfile

@implementation RequestEditCustomProfile

@dynamic customProfile;

typedef struct RequestEditCustomProfile__storage_ {
  uint32_t _has_storage_[1];
  NSString *customProfile;
} RequestEditCustomProfile__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customProfile",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestEditCustomProfile_FieldNumber_CustomProfile,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestEditCustomProfile__storage_, customProfile),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestEditCustomProfile class]
                                     rootClass:[ProfileRoot class]
                                          file:ProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestEditCustomProfile__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestChangeUserStatus

@implementation RequestChangeUserStatus

@dynamic hasStatus, status;

typedef struct RequestChangeUserStatus__storage_ {
  uint32_t _has_storage_[1];
  UserStatus *status;
} RequestChangeUserStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.clazz = GPBObjCClass(UserStatus),
        .number = RequestChangeUserStatus_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestChangeUserStatus__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestChangeUserStatus class]
                                     rootClass:[ProfileRoot class]
                                          file:ProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestChangeUserStatus__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
