// Code generated by protoc-gen-gogo.
// source: miscellaneous.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RtcpMuxPolicy int32

const (
	RTCPMUXPOLICY_UNKNOWN   RtcpMuxPolicy = 0
	RTCPMUXPOLICY_NEGOTIATE RtcpMuxPolicy = 1
	RTCPMUXPOLICY_REQUIRE   RtcpMuxPolicy = 2
)

var RtcpMuxPolicy_name = map[int32]string{
	0: "RTCPMUXPOLICY_UNKNOWN",
	1: "RTCPMUXPOLICY_NEGOTIATE",
	2: "RTCPMUXPOLICY_REQUIRE",
}
var RtcpMuxPolicy_value = map[string]int32{
	"RTCPMUXPOLICY_UNKNOWN":   0,
	"RTCPMUXPOLICY_NEGOTIATE": 1,
	"RTCPMUXPOLICY_REQUIRE":   2,
}

func (RtcpMuxPolicy) EnumDescriptor() ([]byte, []int) { return fileDescriptorMiscellaneous, []int{0} }

type UpdateOptimization int32

const (
	UPDATEOPTIMIZATION_UNKNOWN           UpdateOptimization = 0
	UPDATEOPTIMIZATION_NONE              UpdateOptimization = 1
	UPDATEOPTIMIZATION_STRIP_ENTITIES    UpdateOptimization = 2
	UPDATEOPTIMIZATION_ENABLE_COMBINED   UpdateOptimization = 3
	UPDATEOPTIMIZATION_FASTER_MESSAGES   UpdateOptimization = 4
	UPDATEOPTIMIZATION_STRIP_COUNTERS    UpdateOptimization = 5
	UPDATEOPTIMIZATION_COMPACT_USERS     UpdateOptimization = 6
	UPDATEOPTIMIZATION_GROUPS_V2         UpdateOptimization = 7
	UPDATEOPTIMIZATION_STRIP_ENTITIES_V2 UpdateOptimization = 8
)

var UpdateOptimization_name = map[int32]string{
	0: "UPDATEOPTIMIZATION_UNKNOWN",
	1: "UPDATEOPTIMIZATION_NONE",
	2: "UPDATEOPTIMIZATION_STRIP_ENTITIES",
	3: "UPDATEOPTIMIZATION_ENABLE_COMBINED",
	4: "UPDATEOPTIMIZATION_FASTER_MESSAGES",
	5: "UPDATEOPTIMIZATION_STRIP_COUNTERS",
	6: "UPDATEOPTIMIZATION_COMPACT_USERS",
	7: "UPDATEOPTIMIZATION_GROUPS_V2",
	8: "UPDATEOPTIMIZATION_STRIP_ENTITIES_V2",
}
var UpdateOptimization_value = map[string]int32{
	"UPDATEOPTIMIZATION_UNKNOWN":           0,
	"UPDATEOPTIMIZATION_NONE":              1,
	"UPDATEOPTIMIZATION_STRIP_ENTITIES":    2,
	"UPDATEOPTIMIZATION_ENABLE_COMBINED":   3,
	"UPDATEOPTIMIZATION_FASTER_MESSAGES":   4,
	"UPDATEOPTIMIZATION_STRIP_COUNTERS":    5,
	"UPDATEOPTIMIZATION_COMPACT_USERS":     6,
	"UPDATEOPTIMIZATION_GROUPS_V2":         7,
	"UPDATEOPTIMIZATION_STRIP_ENTITIES_V2": 8,
}

func (UpdateOptimization) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMiscellaneous, []int{1}
}

// Empty response
type ResponseVoid struct {
}

func (m *ResponseVoid) Reset()                    { *m = ResponseVoid{} }
func (*ResponseVoid) ProtoMessage()               {}
func (*ResponseVoid) Descriptor() ([]byte, []int) { return fileDescriptorMiscellaneous, []int{0} }

// Sequence response. Methods that return this value must process response in particular order
type ResponseSeq struct {
	Seq   int32  `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State []byte `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Date  int64  `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *ResponseSeq) Reset()                    { *m = ResponseSeq{} }
func (*ResponseSeq) ProtoMessage()               {}
func (*ResponseSeq) Descriptor() ([]byte, []int) { return fileDescriptorMiscellaneous, []int{1} }

func (m *ResponseSeq) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseSeq) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseSeq) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Sequence response with date. Methods that return this value must process response in particular order
type ResponseSeqDate struct {
	Seq   int32      `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State []byte     `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Date  int64      `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	Mid   *UUIDValue `protobuf:"bytes,4,opt,name=mid" json:"mid,omitempty"`
}

func (m *ResponseSeqDate) Reset()                    { *m = ResponseSeqDate{} }
func (*ResponseSeqDate) ProtoMessage()               {}
func (*ResponseSeqDate) Descriptor() ([]byte, []int) { return fileDescriptorMiscellaneous, []int{2} }

func (m *ResponseSeqDate) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseSeqDate) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseSeqDate) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ResponseSeqDate) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

// Response with seq, date and messageId
type ResponseSeqDateMid struct {
	Seq   int32      `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State []byte     `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Date  int64      `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	Mid   *UUIDValue `protobuf:"bytes,4,opt,name=mid" json:"mid,omitempty"`
}

func (m *ResponseSeqDateMid) Reset()                    { *m = ResponseSeqDateMid{} }
func (*ResponseSeqDateMid) ProtoMessage()               {}
func (*ResponseSeqDateMid) Descriptor() ([]byte, []int) { return fileDescriptorMiscellaneous, []int{3} }

func (m *ResponseSeqDateMid) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseSeqDateMid) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseSeqDateMid) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ResponseSeqDateMid) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

// Boolean response
type ResponseBool struct {
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ResponseBool) Reset()                    { *m = ResponseBool{} }
func (*ResponseBool) ProtoMessage()               {}
func (*ResponseBool) Descriptor() ([]byte, []int) { return fileDescriptorMiscellaneous, []int{4} }

func (m *ResponseBool) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

// Configuration of system
// maxGroupSize Current maximum group size
// discover Discover configuration
// shareEndpoint Share endpoint
// callsConfig Calls configuration
// groupInviteConfig Group invite configuration
// serverMetaInfo Server meta information (version, etc.)
// customProfileSchema Custom profile JSON Schema
// servicePeers Service peers supported interpreted by the client
type Config struct {
	MaxGroupSize        int32                        `protobuf:"varint,1,opt,name=max_group_size,json=maxGroupSize,proto3" json:"max_group_size,omitempty"`
	Discover            *Discover                    `protobuf:"bytes,2,opt,name=discover" json:"discover,omitempty"`
	ShareEndpoint       *google_protobuf.StringValue `protobuf:"bytes,4,opt,name=share_endpoint,json=shareEndpoint" json:"share_endpoint,omitempty"`
	CallsConfig         *CallsConfig                 `protobuf:"bytes,5,opt,name=calls_config,json=callsConfig" json:"calls_config,omitempty"`
	GroupInviteConfig   *InvitesConfig               `protobuf:"bytes,6,opt,name=group_invite_config,json=groupInviteConfig" json:"group_invite_config,omitempty"`
	ServerMetaInfo      *ServerMetaInfo              `protobuf:"bytes,7,opt,name=server_meta_info,json=serverMetaInfo" json:"server_meta_info,omitempty"`
	CustomProfileSchema string                       `protobuf:"bytes,8,opt,name=custom_profile_schema,json=customProfileSchema,proto3" json:"custom_profile_schema,omitempty"`
	ServicePeers        *ServicePeers                `protobuf:"bytes,9,opt,name=service_peers,json=servicePeers" json:"service_peers,omitempty"`
	Extensions          []*Any                       `protobuf:"bytes,3,rep,name=extensions" json:"extensions,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptorMiscellaneous, []int{5} }

func (m *Config) GetMaxGroupSize() int32 {
	if m != nil {
		return m.MaxGroupSize
	}
	return 0
}

func (m *Config) GetDiscover() *Discover {
	if m != nil {
		return m.Discover
	}
	return nil
}

func (m *Config) GetShareEndpoint() *google_protobuf.StringValue {
	if m != nil {
		return m.ShareEndpoint
	}
	return nil
}

func (m *Config) GetCallsConfig() *CallsConfig {
	if m != nil {
		return m.CallsConfig
	}
	return nil
}

func (m *Config) GetGroupInviteConfig() *InvitesConfig {
	if m != nil {
		return m.GroupInviteConfig
	}
	return nil
}

func (m *Config) GetServerMetaInfo() *ServerMetaInfo {
	if m != nil {
		return m.ServerMetaInfo
	}
	return nil
}

func (m *Config) GetCustomProfileSchema() string {
	if m != nil {
		return m.CustomProfileSchema
	}
	return ""
}

func (m *Config) GetServicePeers() *ServicePeers {
	if m != nil {
		return m.ServicePeers
	}
	return nil
}

func (m *Config) GetExtensions() []*Any {
	if m != nil {
		return m.Extensions
	}
	return nil
}

// Service peers
type ServicePeers struct {
	Security *OutPeer `protobuf:"bytes,1,opt,name=security" json:"security,omitempty"`
	Support  *OutPeer `protobuf:"bytes,2,opt,name=support" json:"support,omitempty"`
	Stash    *OutPeer `protobuf:"bytes,3,opt,name=stash" json:"stash,omitempty"`
}

func (m *ServicePeers) Reset()                    { *m = ServicePeers{} }
func (*ServicePeers) ProtoMessage()               {}
func (*ServicePeers) Descriptor() ([]byte, []int) { return fileDescriptorMiscellaneous, []int{6} }

func (m *ServicePeers) GetSecurity() *OutPeer {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *ServicePeers) GetSupport() *OutPeer {
	if m != nil {
		return m.Support
	}
	return nil
}

func (m *ServicePeers) GetStash() *OutPeer {
	if m != nil {
		return m.Stash
	}
	return nil
}

// Some info about the servr
// releaseDate Server release date in milliseconds
// apiVersion Server api version
type ServerMetaInfo struct {
	ReleaseDate int64                       `protobuf:"varint,1,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	ApiVersion  *google_protobuf.Int64Value `protobuf:"bytes,2,opt,name=api_version,json=apiVersion" json:"api_version,omitempty"`
}

func (m *ServerMetaInfo) Reset()                    { *m = ServerMetaInfo{} }
func (*ServerMetaInfo) ProtoMessage()               {}
func (*ServerMetaInfo) Descriptor() ([]byte, []int) { return fileDescriptorMiscellaneous, []int{7} }

func (m *ServerMetaInfo) GetReleaseDate() int64 {
	if m != nil {
		return m.ReleaseDate
	}
	return 0
}

func (m *ServerMetaInfo) GetApiVersion() *google_protobuf.Int64Value {
	if m != nil {
		return m.ApiVersion
	}
	return nil
}

// Calls configuration
// callsEnabled If true then client should enable calls
// videoCallsEnabled If true then client should enable video calls
// groupCallsEnabled If true then client should enable group calls
// groupCallsMaxMembers Determines how many members may participate in call
// rtcpMuxPolicy The RTCP mux policy to use when gathering ICE candidates
// emojiSecurityEnabled If true then client should send and render emoji security
// screenSharingEnabled If true then client should enable screen sharing
type CallsConfig struct {
	CallsEnabled         *google_protobuf.BoolValue  `protobuf:"bytes,1,opt,name=calls_enabled,json=callsEnabled" json:"calls_enabled,omitempty"`
	VideoCallsEnabled    *google_protobuf.BoolValue  `protobuf:"bytes,2,opt,name=video_calls_enabled,json=videoCallsEnabled" json:"video_calls_enabled,omitempty"`
	GroupCallsEnabled    *google_protobuf.BoolValue  `protobuf:"bytes,3,opt,name=group_calls_enabled,json=groupCallsEnabled" json:"group_calls_enabled,omitempty"`
	GroupCallsMaxMembers *google_protobuf.Int32Value `protobuf:"bytes,4,opt,name=group_calls_max_members,json=groupCallsMaxMembers" json:"group_calls_max_members,omitempty"`
	RtcpMuxPolicy        RtcpMuxPolicy               `protobuf:"varint,5,opt,name=rtcp_mux_policy,json=rtcpMuxPolicy,proto3,enum=dialog.RtcpMuxPolicy" json:"rtcp_mux_policy,omitempty"`
	EmojiSecurityEnabled *google_protobuf.BoolValue  `protobuf:"bytes,6,opt,name=emoji_security_enabled,json=emojiSecurityEnabled" json:"emoji_security_enabled,omitempty"`
	ScreenSharingEnabled *google_protobuf.BoolValue  `protobuf:"bytes,7,opt,name=screen_sharing_enabled,json=screenSharingEnabled" json:"screen_sharing_enabled,omitempty"`
}

func (m *CallsConfig) Reset()                    { *m = CallsConfig{} }
func (*CallsConfig) ProtoMessage()               {}
func (*CallsConfig) Descriptor() ([]byte, []int) { return fileDescriptorMiscellaneous, []int{8} }

func (m *CallsConfig) GetCallsEnabled() *google_protobuf.BoolValue {
	if m != nil {
		return m.CallsEnabled
	}
	return nil
}

func (m *CallsConfig) GetVideoCallsEnabled() *google_protobuf.BoolValue {
	if m != nil {
		return m.VideoCallsEnabled
	}
	return nil
}

func (m *CallsConfig) GetGroupCallsEnabled() *google_protobuf.BoolValue {
	if m != nil {
		return m.GroupCallsEnabled
	}
	return nil
}

func (m *CallsConfig) GetGroupCallsMaxMembers() *google_protobuf.Int32Value {
	if m != nil {
		return m.GroupCallsMaxMembers
	}
	return nil
}

func (m *CallsConfig) GetRtcpMuxPolicy() RtcpMuxPolicy {
	if m != nil {
		return m.RtcpMuxPolicy
	}
	return RTCPMUXPOLICY_UNKNOWN
}

func (m *CallsConfig) GetEmojiSecurityEnabled() *google_protobuf.BoolValue {
	if m != nil {
		return m.EmojiSecurityEnabled
	}
	return nil
}

func (m *CallsConfig) GetScreenSharingEnabled() *google_protobuf.BoolValue {
	if m != nil {
		return m.ScreenSharingEnabled
	}
	return nil
}

// Group invites configuration
// baseUrl Base URL part
// groupInviteUrlPrefix Prefix for private group invite detection
// resolveUrlPrefix Prefix for public groups and users link detection
// shareInviteUrl Independent URL for external app sharing
type InvitesConfig struct {
	BaseUrl              *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=base_url,json=baseUrl" json:"base_url,omitempty"`
	GroupInviteUrlPrefix *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=group_invite_url_prefix,json=groupInviteUrlPrefix" json:"group_invite_url_prefix,omitempty"`
	ResolveUrlPrefix     *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=resolve_url_prefix,json=resolveUrlPrefix" json:"resolve_url_prefix,omitempty"`
	ShareInviteUrl       *google_protobuf.StringValue `protobuf:"bytes,4,opt,name=share_invite_url,json=shareInviteUrl" json:"share_invite_url,omitempty"`
}

func (m *InvitesConfig) Reset()                    { *m = InvitesConfig{} }
func (*InvitesConfig) ProtoMessage()               {}
func (*InvitesConfig) Descriptor() ([]byte, []int) { return fileDescriptorMiscellaneous, []int{9} }

func (m *InvitesConfig) GetBaseUrl() *google_protobuf.StringValue {
	if m != nil {
		return m.BaseUrl
	}
	return nil
}

func (m *InvitesConfig) GetGroupInviteUrlPrefix() *google_protobuf.StringValue {
	if m != nil {
		return m.GroupInviteUrlPrefix
	}
	return nil
}

func (m *InvitesConfig) GetResolveUrlPrefix() *google_protobuf.StringValue {
	if m != nil {
		return m.ResolveUrlPrefix
	}
	return nil
}

func (m *InvitesConfig) GetShareInviteUrl() *google_protobuf.StringValue {
	if m != nil {
		return m.ShareInviteUrl
	}
	return nil
}

// Discover description
// peers peers
type Discover struct {
	Peers []*OutPeer `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *Discover) Reset()                    { *m = Discover{} }
func (*Discover) ProtoMessage()               {}
func (*Discover) Descriptor() ([]byte, []int) { return fileDescriptorMiscellaneous, []int{10} }

func (m *Discover) GetPeers() []*OutPeer {
	if m != nil {
		return m.Peers
	}
	return nil
}

// Extention
// id Extension id
// data Extension data
type Extension struct {
	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Extension) Reset()                    { *m = Extension{} }
func (*Extension) ProtoMessage()               {}
func (*Extension) Descriptor() ([]byte, []int) { return fileDescriptorMiscellaneous, []int{11} }

func (m *Extension) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Extension) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Any
// typeUrl type url
// data data
type Any struct {
	TypeUrl string `protobuf:"bytes,1,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Any) Reset()                    { *m = Any{} }
func (*Any) ProtoMessage()               {}
func (*Any) Descriptor() ([]byte, []int) { return fileDescriptorMiscellaneous, []int{12} }

func (m *Any) GetTypeUrl() string {
	if m != nil {
		return m.TypeUrl
	}
	return ""
}

func (m *Any) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Update about config change
type UpdateConfig struct {
	Config     *Config                     `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	ConfigHash *google_protobuf.Int64Value `protobuf:"bytes,2,opt,name=config_hash,json=configHash" json:"config_hash,omitempty"`
}

func (m *UpdateConfig) Reset()                    { *m = UpdateConfig{} }
func (*UpdateConfig) ProtoMessage()               {}
func (*UpdateConfig) Descriptor() ([]byte, []int) { return fileDescriptorMiscellaneous, []int{13} }

func (m *UpdateConfig) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *UpdateConfig) GetConfigHash() *google_protobuf.Int64Value {
	if m != nil {
		return m.ConfigHash
	}
	return nil
}

type RecursiveMapValue struct {
	Items []*RecursiveMapValue_Item `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *RecursiveMapValue) Reset()                    { *m = RecursiveMapValue{} }
func (*RecursiveMapValue) ProtoMessage()               {}
func (*RecursiveMapValue) Descriptor() ([]byte, []int) { return fileDescriptorMiscellaneous, []int{14} }

func (m *RecursiveMapValue) GetItems() []*RecursiveMapValue_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type RecursiveMapValue_Value struct {
	// Types that are valid to be assigned to Value:
	//	*RecursiveMapValue_Value_D
	//	*RecursiveMapValue_Value_I32
	//	*RecursiveMapValue_Value_I64
	//	*RecursiveMapValue_Value_Str
	//	*RecursiveMapValue_Value_Rec
	//	*RecursiveMapValue_Value_ArrayRec
	Value isRecursiveMapValue_Value_Value `protobuf_oneof:"value"`
}

func (m *RecursiveMapValue_Value) Reset()      { *m = RecursiveMapValue_Value{} }
func (*RecursiveMapValue_Value) ProtoMessage() {}
func (*RecursiveMapValue_Value) Descriptor() ([]byte, []int) {
	return fileDescriptorMiscellaneous, []int{14, 0}
}

type isRecursiveMapValue_Value_Value interface {
	isRecursiveMapValue_Value_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RecursiveMapValue_Value_D struct {
	D *google_protobuf.DoubleValue `protobuf:"bytes,2,opt,name=d,oneof"`
}
type RecursiveMapValue_Value_I32 struct {
	I32 *google_protobuf.Int32Value `protobuf:"bytes,3,opt,name=i32,oneof"`
}
type RecursiveMapValue_Value_I64 struct {
	I64 *google_protobuf.Int64Value `protobuf:"bytes,4,opt,name=i64,oneof"`
}
type RecursiveMapValue_Value_Str struct {
	Str *google_protobuf.StringValue `protobuf:"bytes,5,opt,name=str,oneof"`
}
type RecursiveMapValue_Value_Rec struct {
	Rec *RecursiveMapValue `protobuf:"bytes,6,opt,name=rec,oneof"`
}
type RecursiveMapValue_Value_ArrayRec struct {
	ArrayRec *RecursiveMapValue_Array `protobuf:"bytes,7,opt,name=array_rec,json=arrayRec,oneof"`
}

func (*RecursiveMapValue_Value_D) isRecursiveMapValue_Value_Value()        {}
func (*RecursiveMapValue_Value_I32) isRecursiveMapValue_Value_Value()      {}
func (*RecursiveMapValue_Value_I64) isRecursiveMapValue_Value_Value()      {}
func (*RecursiveMapValue_Value_Str) isRecursiveMapValue_Value_Value()      {}
func (*RecursiveMapValue_Value_Rec) isRecursiveMapValue_Value_Value()      {}
func (*RecursiveMapValue_Value_ArrayRec) isRecursiveMapValue_Value_Value() {}

func (m *RecursiveMapValue_Value) GetValue() isRecursiveMapValue_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RecursiveMapValue_Value) GetD() *google_protobuf.DoubleValue {
	if x, ok := m.GetValue().(*RecursiveMapValue_Value_D); ok {
		return x.D
	}
	return nil
}

func (m *RecursiveMapValue_Value) GetI32() *google_protobuf.Int32Value {
	if x, ok := m.GetValue().(*RecursiveMapValue_Value_I32); ok {
		return x.I32
	}
	return nil
}

func (m *RecursiveMapValue_Value) GetI64() *google_protobuf.Int64Value {
	if x, ok := m.GetValue().(*RecursiveMapValue_Value_I64); ok {
		return x.I64
	}
	return nil
}

func (m *RecursiveMapValue_Value) GetStr() *google_protobuf.StringValue {
	if x, ok := m.GetValue().(*RecursiveMapValue_Value_Str); ok {
		return x.Str
	}
	return nil
}

func (m *RecursiveMapValue_Value) GetRec() *RecursiveMapValue {
	if x, ok := m.GetValue().(*RecursiveMapValue_Value_Rec); ok {
		return x.Rec
	}
	return nil
}

func (m *RecursiveMapValue_Value) GetArrayRec() *RecursiveMapValue_Array {
	if x, ok := m.GetValue().(*RecursiveMapValue_Value_ArrayRec); ok {
		return x.ArrayRec
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RecursiveMapValue_Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RecursiveMapValue_Value_OneofMarshaler, _RecursiveMapValue_Value_OneofUnmarshaler, _RecursiveMapValue_Value_OneofSizer, []interface{}{
		(*RecursiveMapValue_Value_D)(nil),
		(*RecursiveMapValue_Value_I32)(nil),
		(*RecursiveMapValue_Value_I64)(nil),
		(*RecursiveMapValue_Value_Str)(nil),
		(*RecursiveMapValue_Value_Rec)(nil),
		(*RecursiveMapValue_Value_ArrayRec)(nil),
	}
}

func _RecursiveMapValue_Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RecursiveMapValue_Value)
	// value
	switch x := m.Value.(type) {
	case *RecursiveMapValue_Value_D:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.D); err != nil {
			return err
		}
	case *RecursiveMapValue_Value_I32:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.I32); err != nil {
			return err
		}
	case *RecursiveMapValue_Value_I64:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.I64); err != nil {
			return err
		}
	case *RecursiveMapValue_Value_Str:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Str); err != nil {
			return err
		}
	case *RecursiveMapValue_Value_Rec:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rec); err != nil {
			return err
		}
	case *RecursiveMapValue_Value_ArrayRec:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ArrayRec); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RecursiveMapValue_Value.Value has unexpected type %T", x)
	}
	return nil
}

func _RecursiveMapValue_Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RecursiveMapValue_Value)
	switch tag {
	case 2: // value.d
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.DoubleValue)
		err := b.DecodeMessage(msg)
		m.Value = &RecursiveMapValue_Value_D{msg}
		return true, err
	case 3: // value.i32
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Int32Value)
		err := b.DecodeMessage(msg)
		m.Value = &RecursiveMapValue_Value_I32{msg}
		return true, err
	case 4: // value.i64
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Int64Value)
		err := b.DecodeMessage(msg)
		m.Value = &RecursiveMapValue_Value_I64{msg}
		return true, err
	case 5: // value.str
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.StringValue)
		err := b.DecodeMessage(msg)
		m.Value = &RecursiveMapValue_Value_Str{msg}
		return true, err
	case 6: // value.rec
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RecursiveMapValue)
		err := b.DecodeMessage(msg)
		m.Value = &RecursiveMapValue_Value_Rec{msg}
		return true, err
	case 7: // value.array_rec
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RecursiveMapValue_Array)
		err := b.DecodeMessage(msg)
		m.Value = &RecursiveMapValue_Value_ArrayRec{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RecursiveMapValue_Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RecursiveMapValue_Value)
	// value
	switch x := m.Value.(type) {
	case *RecursiveMapValue_Value_D:
		s := proto.Size(x.D)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RecursiveMapValue_Value_I32:
		s := proto.Size(x.I32)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RecursiveMapValue_Value_I64:
		s := proto.Size(x.I64)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RecursiveMapValue_Value_Str:
		s := proto.Size(x.Str)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RecursiveMapValue_Value_Rec:
		s := proto.Size(x.Rec)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RecursiveMapValue_Value_ArrayRec:
		s := proto.Size(x.ArrayRec)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RecursiveMapValue_Array struct {
	Values []*RecursiveMapValue_Value `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *RecursiveMapValue_Array) Reset()      { *m = RecursiveMapValue_Array{} }
func (*RecursiveMapValue_Array) ProtoMessage() {}
func (*RecursiveMapValue_Array) Descriptor() ([]byte, []int) {
	return fileDescriptorMiscellaneous, []int{14, 1}
}

func (m *RecursiveMapValue_Array) GetValues() []*RecursiveMapValue_Value {
	if m != nil {
		return m.Values
	}
	return nil
}

type RecursiveMapValue_Item struct {
	Key   string                   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *RecursiveMapValue_Value `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *RecursiveMapValue_Item) Reset()      { *m = RecursiveMapValue_Item{} }
func (*RecursiveMapValue_Item) ProtoMessage() {}
func (*RecursiveMapValue_Item) Descriptor() ([]byte, []int) {
	return fileDescriptorMiscellaneous, []int{14, 2}
}

func (m *RecursiveMapValue_Item) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RecursiveMapValue_Item) GetValue() *RecursiveMapValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*ResponseVoid)(nil), "dialog.ResponseVoid")
	proto.RegisterType((*ResponseSeq)(nil), "dialog.ResponseSeq")
	proto.RegisterType((*ResponseSeqDate)(nil), "dialog.ResponseSeqDate")
	proto.RegisterType((*ResponseSeqDateMid)(nil), "dialog.ResponseSeqDateMid")
	proto.RegisterType((*ResponseBool)(nil), "dialog.ResponseBool")
	proto.RegisterType((*Config)(nil), "dialog.Config")
	proto.RegisterType((*ServicePeers)(nil), "dialog.ServicePeers")
	proto.RegisterType((*ServerMetaInfo)(nil), "dialog.ServerMetaInfo")
	proto.RegisterType((*CallsConfig)(nil), "dialog.CallsConfig")
	proto.RegisterType((*InvitesConfig)(nil), "dialog.InvitesConfig")
	proto.RegisterType((*Discover)(nil), "dialog.Discover")
	proto.RegisterType((*Extension)(nil), "dialog.Extension")
	proto.RegisterType((*Any)(nil), "dialog.Any")
	proto.RegisterType((*UpdateConfig)(nil), "dialog.UpdateConfig")
	proto.RegisterType((*RecursiveMapValue)(nil), "dialog.RecursiveMapValue")
	proto.RegisterType((*RecursiveMapValue_Value)(nil), "dialog.RecursiveMapValue.Value")
	proto.RegisterType((*RecursiveMapValue_Array)(nil), "dialog.RecursiveMapValue.Array")
	proto.RegisterType((*RecursiveMapValue_Item)(nil), "dialog.RecursiveMapValue.Item")
	proto.RegisterEnum("dialog.RtcpMuxPolicy", RtcpMuxPolicy_name, RtcpMuxPolicy_value)
	proto.RegisterEnum("dialog.UpdateOptimization", UpdateOptimization_name, UpdateOptimization_value)
}
func (x RtcpMuxPolicy) String() string {
	s, ok := RtcpMuxPolicy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UpdateOptimization) String() string {
	s, ok := UpdateOptimization_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ResponseVoid) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseVoid)
	if !ok {
		that2, ok := that.(ResponseVoid)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResponseSeq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseSeq)
	if !ok {
		that2, ok := that.(ResponseSeq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	return true
}
func (this *ResponseSeqDate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseSeqDate)
	if !ok {
		that2, ok := that.(ResponseSeqDate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	return true
}
func (this *ResponseSeqDateMid) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseSeqDateMid)
	if !ok {
		that2, ok := that.(ResponseSeqDateMid)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	return true
}
func (this *ResponseBool) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseBool)
	if !ok {
		that2, ok := that.(ResponseBool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Config) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Config)
	if !ok {
		that2, ok := that.(Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MaxGroupSize != that1.MaxGroupSize {
		return false
	}
	if !this.Discover.Equal(that1.Discover) {
		return false
	}
	if !this.ShareEndpoint.Equal(that1.ShareEndpoint) {
		return false
	}
	if !this.CallsConfig.Equal(that1.CallsConfig) {
		return false
	}
	if !this.GroupInviteConfig.Equal(that1.GroupInviteConfig) {
		return false
	}
	if !this.ServerMetaInfo.Equal(that1.ServerMetaInfo) {
		return false
	}
	if this.CustomProfileSchema != that1.CustomProfileSchema {
		return false
	}
	if !this.ServicePeers.Equal(that1.ServicePeers) {
		return false
	}
	if len(this.Extensions) != len(that1.Extensions) {
		return false
	}
	for i := range this.Extensions {
		if !this.Extensions[i].Equal(that1.Extensions[i]) {
			return false
		}
	}
	return true
}
func (this *ServicePeers) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServicePeers)
	if !ok {
		that2, ok := that.(ServicePeers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Security.Equal(that1.Security) {
		return false
	}
	if !this.Support.Equal(that1.Support) {
		return false
	}
	if !this.Stash.Equal(that1.Stash) {
		return false
	}
	return true
}
func (this *ServerMetaInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerMetaInfo)
	if !ok {
		that2, ok := that.(ServerMetaInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ReleaseDate != that1.ReleaseDate {
		return false
	}
	if !this.ApiVersion.Equal(that1.ApiVersion) {
		return false
	}
	return true
}
func (this *CallsConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CallsConfig)
	if !ok {
		that2, ok := that.(CallsConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CallsEnabled.Equal(that1.CallsEnabled) {
		return false
	}
	if !this.VideoCallsEnabled.Equal(that1.VideoCallsEnabled) {
		return false
	}
	if !this.GroupCallsEnabled.Equal(that1.GroupCallsEnabled) {
		return false
	}
	if !this.GroupCallsMaxMembers.Equal(that1.GroupCallsMaxMembers) {
		return false
	}
	if this.RtcpMuxPolicy != that1.RtcpMuxPolicy {
		return false
	}
	if !this.EmojiSecurityEnabled.Equal(that1.EmojiSecurityEnabled) {
		return false
	}
	if !this.ScreenSharingEnabled.Equal(that1.ScreenSharingEnabled) {
		return false
	}
	return true
}
func (this *InvitesConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InvitesConfig)
	if !ok {
		that2, ok := that.(InvitesConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.BaseUrl.Equal(that1.BaseUrl) {
		return false
	}
	if !this.GroupInviteUrlPrefix.Equal(that1.GroupInviteUrlPrefix) {
		return false
	}
	if !this.ResolveUrlPrefix.Equal(that1.ResolveUrlPrefix) {
		return false
	}
	if !this.ShareInviteUrl.Equal(that1.ShareInviteUrl) {
		return false
	}
	return true
}
func (this *Discover) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Discover)
	if !ok {
		that2, ok := that.(Discover)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Peers) != len(that1.Peers) {
		return false
	}
	for i := range this.Peers {
		if !this.Peers[i].Equal(that1.Peers[i]) {
			return false
		}
	}
	return true
}
func (this *Extension) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Extension)
	if !ok {
		that2, ok := that.(Extension)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *Any) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Any)
	if !ok {
		that2, ok := that.(Any)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TypeUrl != that1.TypeUrl {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *UpdateConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateConfig)
	if !ok {
		that2, ok := that.(UpdateConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if !this.ConfigHash.Equal(that1.ConfigHash) {
		return false
	}
	return true
}
func (this *RecursiveMapValue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RecursiveMapValue)
	if !ok {
		that2, ok := that.(RecursiveMapValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *RecursiveMapValue_Value) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RecursiveMapValue_Value)
	if !ok {
		that2, ok := that.(RecursiveMapValue_Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *RecursiveMapValue_Value_D) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RecursiveMapValue_Value_D)
	if !ok {
		that2, ok := that.(RecursiveMapValue_Value_D)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.D.Equal(that1.D) {
		return false
	}
	return true
}
func (this *RecursiveMapValue_Value_I32) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RecursiveMapValue_Value_I32)
	if !ok {
		that2, ok := that.(RecursiveMapValue_Value_I32)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.I32.Equal(that1.I32) {
		return false
	}
	return true
}
func (this *RecursiveMapValue_Value_I64) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RecursiveMapValue_Value_I64)
	if !ok {
		that2, ok := that.(RecursiveMapValue_Value_I64)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.I64.Equal(that1.I64) {
		return false
	}
	return true
}
func (this *RecursiveMapValue_Value_Str) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RecursiveMapValue_Value_Str)
	if !ok {
		that2, ok := that.(RecursiveMapValue_Value_Str)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Str.Equal(that1.Str) {
		return false
	}
	return true
}
func (this *RecursiveMapValue_Value_Rec) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RecursiveMapValue_Value_Rec)
	if !ok {
		that2, ok := that.(RecursiveMapValue_Value_Rec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Rec.Equal(that1.Rec) {
		return false
	}
	return true
}
func (this *RecursiveMapValue_Value_ArrayRec) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RecursiveMapValue_Value_ArrayRec)
	if !ok {
		that2, ok := that.(RecursiveMapValue_Value_ArrayRec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ArrayRec.Equal(that1.ArrayRec) {
		return false
	}
	return true
}
func (this *RecursiveMapValue_Array) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RecursiveMapValue_Array)
	if !ok {
		that2, ok := that.(RecursiveMapValue_Array)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *RecursiveMapValue_Item) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RecursiveMapValue_Item)
	if !ok {
		that2, ok := that.(RecursiveMapValue_Item)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *ResponseVoid) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ResponseVoid{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSeq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseSeq{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSeqDate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.ResponseSeqDate{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSeqDateMid) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.ResponseSeqDateMid{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseBool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseBool{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Config) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&dialog.Config{")
	s = append(s, "MaxGroupSize: "+fmt.Sprintf("%#v", this.MaxGroupSize)+",\n")
	if this.Discover != nil {
		s = append(s, "Discover: "+fmt.Sprintf("%#v", this.Discover)+",\n")
	}
	if this.ShareEndpoint != nil {
		s = append(s, "ShareEndpoint: "+fmt.Sprintf("%#v", this.ShareEndpoint)+",\n")
	}
	if this.CallsConfig != nil {
		s = append(s, "CallsConfig: "+fmt.Sprintf("%#v", this.CallsConfig)+",\n")
	}
	if this.GroupInviteConfig != nil {
		s = append(s, "GroupInviteConfig: "+fmt.Sprintf("%#v", this.GroupInviteConfig)+",\n")
	}
	if this.ServerMetaInfo != nil {
		s = append(s, "ServerMetaInfo: "+fmt.Sprintf("%#v", this.ServerMetaInfo)+",\n")
	}
	s = append(s, "CustomProfileSchema: "+fmt.Sprintf("%#v", this.CustomProfileSchema)+",\n")
	if this.ServicePeers != nil {
		s = append(s, "ServicePeers: "+fmt.Sprintf("%#v", this.ServicePeers)+",\n")
	}
	if this.Extensions != nil {
		s = append(s, "Extensions: "+fmt.Sprintf("%#v", this.Extensions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServicePeers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ServicePeers{")
	if this.Security != nil {
		s = append(s, "Security: "+fmt.Sprintf("%#v", this.Security)+",\n")
	}
	if this.Support != nil {
		s = append(s, "Support: "+fmt.Sprintf("%#v", this.Support)+",\n")
	}
	if this.Stash != nil {
		s = append(s, "Stash: "+fmt.Sprintf("%#v", this.Stash)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerMetaInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ServerMetaInfo{")
	s = append(s, "ReleaseDate: "+fmt.Sprintf("%#v", this.ReleaseDate)+",\n")
	if this.ApiVersion != nil {
		s = append(s, "ApiVersion: "+fmt.Sprintf("%#v", this.ApiVersion)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CallsConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.CallsConfig{")
	if this.CallsEnabled != nil {
		s = append(s, "CallsEnabled: "+fmt.Sprintf("%#v", this.CallsEnabled)+",\n")
	}
	if this.VideoCallsEnabled != nil {
		s = append(s, "VideoCallsEnabled: "+fmt.Sprintf("%#v", this.VideoCallsEnabled)+",\n")
	}
	if this.GroupCallsEnabled != nil {
		s = append(s, "GroupCallsEnabled: "+fmt.Sprintf("%#v", this.GroupCallsEnabled)+",\n")
	}
	if this.GroupCallsMaxMembers != nil {
		s = append(s, "GroupCallsMaxMembers: "+fmt.Sprintf("%#v", this.GroupCallsMaxMembers)+",\n")
	}
	s = append(s, "RtcpMuxPolicy: "+fmt.Sprintf("%#v", this.RtcpMuxPolicy)+",\n")
	if this.EmojiSecurityEnabled != nil {
		s = append(s, "EmojiSecurityEnabled: "+fmt.Sprintf("%#v", this.EmojiSecurityEnabled)+",\n")
	}
	if this.ScreenSharingEnabled != nil {
		s = append(s, "ScreenSharingEnabled: "+fmt.Sprintf("%#v", this.ScreenSharingEnabled)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InvitesConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.InvitesConfig{")
	if this.BaseUrl != nil {
		s = append(s, "BaseUrl: "+fmt.Sprintf("%#v", this.BaseUrl)+",\n")
	}
	if this.GroupInviteUrlPrefix != nil {
		s = append(s, "GroupInviteUrlPrefix: "+fmt.Sprintf("%#v", this.GroupInviteUrlPrefix)+",\n")
	}
	if this.ResolveUrlPrefix != nil {
		s = append(s, "ResolveUrlPrefix: "+fmt.Sprintf("%#v", this.ResolveUrlPrefix)+",\n")
	}
	if this.ShareInviteUrl != nil {
		s = append(s, "ShareInviteUrl: "+fmt.Sprintf("%#v", this.ShareInviteUrl)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Discover) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.Discover{")
	if this.Peers != nil {
		s = append(s, "Peers: "+fmt.Sprintf("%#v", this.Peers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Extension) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.Extension{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Any) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.Any{")
	s = append(s, "TypeUrl: "+fmt.Sprintf("%#v", this.TypeUrl)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateConfig{")
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	if this.ConfigHash != nil {
		s = append(s, "ConfigHash: "+fmt.Sprintf("%#v", this.ConfigHash)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecursiveMapValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RecursiveMapValue{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecursiveMapValue_Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.RecursiveMapValue_Value{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecursiveMapValue_Value_D) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.RecursiveMapValue_Value_D{` +
		`D:` + fmt.Sprintf("%#v", this.D) + `}`}, ", ")
	return s
}
func (this *RecursiveMapValue_Value_I32) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.RecursiveMapValue_Value_I32{` +
		`I32:` + fmt.Sprintf("%#v", this.I32) + `}`}, ", ")
	return s
}
func (this *RecursiveMapValue_Value_I64) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.RecursiveMapValue_Value_I64{` +
		`I64:` + fmt.Sprintf("%#v", this.I64) + `}`}, ", ")
	return s
}
func (this *RecursiveMapValue_Value_Str) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.RecursiveMapValue_Value_Str{` +
		`Str:` + fmt.Sprintf("%#v", this.Str) + `}`}, ", ")
	return s
}
func (this *RecursiveMapValue_Value_Rec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.RecursiveMapValue_Value_Rec{` +
		`Rec:` + fmt.Sprintf("%#v", this.Rec) + `}`}, ", ")
	return s
}
func (this *RecursiveMapValue_Value_ArrayRec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.RecursiveMapValue_Value_ArrayRec{` +
		`ArrayRec:` + fmt.Sprintf("%#v", this.ArrayRec) + `}`}, ", ")
	return s
}
func (this *RecursiveMapValue_Array) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RecursiveMapValue_Array{")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecursiveMapValue_Item) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RecursiveMapValue_Item{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMiscellaneous(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ResponseVoid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseVoid) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResponseSeq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSeq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Seq))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Date))
	}
	return i, nil
}

func (m *ResponseSeqDate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSeqDate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Seq))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Date))
	}
	if m.Mid != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Mid.Size()))
		n1, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ResponseSeqDateMid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSeqDateMid) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Seq))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Date))
	}
	if m.Mid != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Mid.Size()))
		n2, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ResponseBool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseBool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value {
		dAtA[i] = 0x8
		i++
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxGroupSize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.MaxGroupSize))
	}
	if m.Discover != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Discover.Size()))
		n3, err := m.Discover.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Extensions) > 0 {
		for _, msg := range m.Extensions {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMiscellaneous(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ShareEndpoint != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.ShareEndpoint.Size()))
		n4, err := m.ShareEndpoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.CallsConfig != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.CallsConfig.Size()))
		n5, err := m.CallsConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.GroupInviteConfig != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.GroupInviteConfig.Size()))
		n6, err := m.GroupInviteConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.ServerMetaInfo != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.ServerMetaInfo.Size()))
		n7, err := m.ServerMetaInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.CustomProfileSchema) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(len(m.CustomProfileSchema)))
		i += copy(dAtA[i:], m.CustomProfileSchema)
	}
	if m.ServicePeers != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.ServicePeers.Size()))
		n8, err := m.ServicePeers.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *ServicePeers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicePeers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Security != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Security.Size()))
		n9, err := m.Security.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Support != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Support.Size()))
		n10, err := m.Support.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Stash != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Stash.Size()))
		n11, err := m.Stash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *ServerMetaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerMetaInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReleaseDate != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.ReleaseDate))
	}
	if m.ApiVersion != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.ApiVersion.Size()))
		n12, err := m.ApiVersion.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *CallsConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallsConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CallsEnabled != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.CallsEnabled.Size()))
		n13, err := m.CallsEnabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.VideoCallsEnabled != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.VideoCallsEnabled.Size()))
		n14, err := m.VideoCallsEnabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.GroupCallsEnabled != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.GroupCallsEnabled.Size()))
		n15, err := m.GroupCallsEnabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.GroupCallsMaxMembers != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.GroupCallsMaxMembers.Size()))
		n16, err := m.GroupCallsMaxMembers.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.RtcpMuxPolicy != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.RtcpMuxPolicy))
	}
	if m.EmojiSecurityEnabled != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.EmojiSecurityEnabled.Size()))
		n17, err := m.EmojiSecurityEnabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.ScreenSharingEnabled != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.ScreenSharingEnabled.Size()))
		n18, err := m.ScreenSharingEnabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *InvitesConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvitesConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BaseUrl != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.BaseUrl.Size()))
		n19, err := m.BaseUrl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.GroupInviteUrlPrefix != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.GroupInviteUrlPrefix.Size()))
		n20, err := m.GroupInviteUrlPrefix.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.ResolveUrlPrefix != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.ResolveUrlPrefix.Size()))
		n21, err := m.ResolveUrlPrefix.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.ShareInviteUrl != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.ShareInviteUrl.Size()))
		n22, err := m.ShareInviteUrl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *Discover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Discover) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for _, msg := range m.Peers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMiscellaneous(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Extension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Extension) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Id))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *Any) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Any) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TypeUrl) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(len(m.TypeUrl)))
		i += copy(dAtA[i:], m.TypeUrl)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *UpdateConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Config.Size()))
		n23, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.ConfigHash != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.ConfigHash.Size()))
		n24, err := m.ConfigHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *RecursiveMapValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecursiveMapValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMiscellaneous(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RecursiveMapValue_Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecursiveMapValue_Value) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn25, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn25
	}
	return i, nil
}

func (m *RecursiveMapValue_Value_D) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.D != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.D.Size()))
		n26, err := m.D.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *RecursiveMapValue_Value_I32) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.I32 != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.I32.Size()))
		n27, err := m.I32.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *RecursiveMapValue_Value_I64) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.I64 != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.I64.Size()))
		n28, err := m.I64.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *RecursiveMapValue_Value_Str) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Str != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Str.Size()))
		n29, err := m.Str.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *RecursiveMapValue_Value_Rec) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Rec != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Rec.Size()))
		n30, err := m.Rec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *RecursiveMapValue_Value_ArrayRec) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ArrayRec != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.ArrayRec.Size()))
		n31, err := m.ArrayRec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *RecursiveMapValue_Array) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecursiveMapValue_Array) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMiscellaneous(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RecursiveMapValue_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecursiveMapValue_Item) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Value.Size()))
		n32, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}

func encodeFixed64Miscellaneous(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Miscellaneous(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMiscellaneous(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ResponseVoid) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ResponseSeq) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovMiscellaneous(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovMiscellaneous(uint64(m.Date))
	}
	return n
}

func (m *ResponseSeqDate) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovMiscellaneous(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovMiscellaneous(uint64(m.Date))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *ResponseSeqDateMid) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovMiscellaneous(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovMiscellaneous(uint64(m.Date))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *ResponseBool) Size() (n int) {
	var l int
	_ = l
	if m.Value {
		n += 2
	}
	return n
}

func (m *Config) Size() (n int) {
	var l int
	_ = l
	if m.MaxGroupSize != 0 {
		n += 1 + sovMiscellaneous(uint64(m.MaxGroupSize))
	}
	if m.Discover != nil {
		l = m.Discover.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if len(m.Extensions) > 0 {
		for _, e := range m.Extensions {
			l = e.Size()
			n += 1 + l + sovMiscellaneous(uint64(l))
		}
	}
	if m.ShareEndpoint != nil {
		l = m.ShareEndpoint.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.CallsConfig != nil {
		l = m.CallsConfig.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.GroupInviteConfig != nil {
		l = m.GroupInviteConfig.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.ServerMetaInfo != nil {
		l = m.ServerMetaInfo.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	l = len(m.CustomProfileSchema)
	if l > 0 {
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.ServicePeers != nil {
		l = m.ServicePeers.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *ServicePeers) Size() (n int) {
	var l int
	_ = l
	if m.Security != nil {
		l = m.Security.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.Support != nil {
		l = m.Support.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.Stash != nil {
		l = m.Stash.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *ServerMetaInfo) Size() (n int) {
	var l int
	_ = l
	if m.ReleaseDate != 0 {
		n += 1 + sovMiscellaneous(uint64(m.ReleaseDate))
	}
	if m.ApiVersion != nil {
		l = m.ApiVersion.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *CallsConfig) Size() (n int) {
	var l int
	_ = l
	if m.CallsEnabled != nil {
		l = m.CallsEnabled.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.VideoCallsEnabled != nil {
		l = m.VideoCallsEnabled.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.GroupCallsEnabled != nil {
		l = m.GroupCallsEnabled.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.GroupCallsMaxMembers != nil {
		l = m.GroupCallsMaxMembers.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.RtcpMuxPolicy != 0 {
		n += 1 + sovMiscellaneous(uint64(m.RtcpMuxPolicy))
	}
	if m.EmojiSecurityEnabled != nil {
		l = m.EmojiSecurityEnabled.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.ScreenSharingEnabled != nil {
		l = m.ScreenSharingEnabled.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *InvitesConfig) Size() (n int) {
	var l int
	_ = l
	if m.BaseUrl != nil {
		l = m.BaseUrl.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.GroupInviteUrlPrefix != nil {
		l = m.GroupInviteUrlPrefix.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.ResolveUrlPrefix != nil {
		l = m.ResolveUrlPrefix.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.ShareInviteUrl != nil {
		l = m.ShareInviteUrl.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *Discover) Size() (n int) {
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovMiscellaneous(uint64(l))
		}
	}
	return n
}

func (m *Extension) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMiscellaneous(uint64(m.Id))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *Any) Size() (n int) {
	var l int
	_ = l
	l = len(m.TypeUrl)
	if l > 0 {
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *UpdateConfig) Size() (n int) {
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.ConfigHash != nil {
		l = m.ConfigHash.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *RecursiveMapValue) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovMiscellaneous(uint64(l))
		}
	}
	return n
}

func (m *RecursiveMapValue_Value) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *RecursiveMapValue_Value_D) Size() (n int) {
	var l int
	_ = l
	if m.D != nil {
		l = m.D.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}
func (m *RecursiveMapValue_Value_I32) Size() (n int) {
	var l int
	_ = l
	if m.I32 != nil {
		l = m.I32.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}
func (m *RecursiveMapValue_Value_I64) Size() (n int) {
	var l int
	_ = l
	if m.I64 != nil {
		l = m.I64.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}
func (m *RecursiveMapValue_Value_Str) Size() (n int) {
	var l int
	_ = l
	if m.Str != nil {
		l = m.Str.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}
func (m *RecursiveMapValue_Value_Rec) Size() (n int) {
	var l int
	_ = l
	if m.Rec != nil {
		l = m.Rec.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}
func (m *RecursiveMapValue_Value_ArrayRec) Size() (n int) {
	var l int
	_ = l
	if m.ArrayRec != nil {
		l = m.ArrayRec.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}
func (m *RecursiveMapValue_Array) Size() (n int) {
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovMiscellaneous(uint64(l))
		}
	}
	return n
}

func (m *RecursiveMapValue_Item) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func sovMiscellaneous(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMiscellaneous(x uint64) (n int) {
	return sovMiscellaneous(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ResponseVoid) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseVoid{`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSeq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseSeq{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSeqDate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseSeqDate{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSeqDateMid) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseSeqDateMid{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseBool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseBool{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Config) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Config{`,
		`MaxGroupSize:` + fmt.Sprintf("%v", this.MaxGroupSize) + `,`,
		`Discover:` + strings.Replace(fmt.Sprintf("%v", this.Discover), "Discover", "Discover", 1) + `,`,
		`Extensions:` + strings.Replace(fmt.Sprintf("%v", this.Extensions), "Any", "Any", 1) + `,`,
		`ShareEndpoint:` + strings.Replace(fmt.Sprintf("%v", this.ShareEndpoint), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`CallsConfig:` + strings.Replace(fmt.Sprintf("%v", this.CallsConfig), "CallsConfig", "CallsConfig", 1) + `,`,
		`GroupInviteConfig:` + strings.Replace(fmt.Sprintf("%v", this.GroupInviteConfig), "InvitesConfig", "InvitesConfig", 1) + `,`,
		`ServerMetaInfo:` + strings.Replace(fmt.Sprintf("%v", this.ServerMetaInfo), "ServerMetaInfo", "ServerMetaInfo", 1) + `,`,
		`CustomProfileSchema:` + fmt.Sprintf("%v", this.CustomProfileSchema) + `,`,
		`ServicePeers:` + strings.Replace(fmt.Sprintf("%v", this.ServicePeers), "ServicePeers", "ServicePeers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicePeers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicePeers{`,
		`Security:` + strings.Replace(fmt.Sprintf("%v", this.Security), "OutPeer", "OutPeer", 1) + `,`,
		`Support:` + strings.Replace(fmt.Sprintf("%v", this.Support), "OutPeer", "OutPeer", 1) + `,`,
		`Stash:` + strings.Replace(fmt.Sprintf("%v", this.Stash), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerMetaInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerMetaInfo{`,
		`ReleaseDate:` + fmt.Sprintf("%v", this.ReleaseDate) + `,`,
		`ApiVersion:` + strings.Replace(fmt.Sprintf("%v", this.ApiVersion), "Int64Value", "google_protobuf.Int64Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CallsConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CallsConfig{`,
		`CallsEnabled:` + strings.Replace(fmt.Sprintf("%v", this.CallsEnabled), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`VideoCallsEnabled:` + strings.Replace(fmt.Sprintf("%v", this.VideoCallsEnabled), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`GroupCallsEnabled:` + strings.Replace(fmt.Sprintf("%v", this.GroupCallsEnabled), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`GroupCallsMaxMembers:` + strings.Replace(fmt.Sprintf("%v", this.GroupCallsMaxMembers), "Int32Value", "google_protobuf.Int32Value", 1) + `,`,
		`RtcpMuxPolicy:` + fmt.Sprintf("%v", this.RtcpMuxPolicy) + `,`,
		`EmojiSecurityEnabled:` + strings.Replace(fmt.Sprintf("%v", this.EmojiSecurityEnabled), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`ScreenSharingEnabled:` + strings.Replace(fmt.Sprintf("%v", this.ScreenSharingEnabled), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InvitesConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InvitesConfig{`,
		`BaseUrl:` + strings.Replace(fmt.Sprintf("%v", this.BaseUrl), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`GroupInviteUrlPrefix:` + strings.Replace(fmt.Sprintf("%v", this.GroupInviteUrlPrefix), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`ResolveUrlPrefix:` + strings.Replace(fmt.Sprintf("%v", this.ResolveUrlPrefix), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`ShareInviteUrl:` + strings.Replace(fmt.Sprintf("%v", this.ShareInviteUrl), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Discover) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Discover{`,
		`Peers:` + strings.Replace(fmt.Sprintf("%v", this.Peers), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Extension) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Extension{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Any) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Any{`,
		`TypeUrl:` + fmt.Sprintf("%v", this.TypeUrl) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateConfig{`,
		`Config:` + strings.Replace(fmt.Sprintf("%v", this.Config), "Config", "Config", 1) + `,`,
		`ConfigHash:` + strings.Replace(fmt.Sprintf("%v", this.ConfigHash), "Int64Value", "google_protobuf.Int64Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecursiveMapValue{`,
		`Items:` + strings.Replace(fmt.Sprintf("%v", this.Items), "RecursiveMapValue_Item", "RecursiveMapValue_Item", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue_Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecursiveMapValue_Value{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue_Value_D) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecursiveMapValue_Value_D{`,
		`D:` + strings.Replace(fmt.Sprintf("%v", this.D), "DoubleValue", "google_protobuf.DoubleValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue_Value_I32) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecursiveMapValue_Value_I32{`,
		`I32:` + strings.Replace(fmt.Sprintf("%v", this.I32), "Int32Value", "google_protobuf.Int32Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue_Value_I64) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecursiveMapValue_Value_I64{`,
		`I64:` + strings.Replace(fmt.Sprintf("%v", this.I64), "Int64Value", "google_protobuf.Int64Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue_Value_Str) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecursiveMapValue_Value_Str{`,
		`Str:` + strings.Replace(fmt.Sprintf("%v", this.Str), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue_Value_Rec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecursiveMapValue_Value_Rec{`,
		`Rec:` + strings.Replace(fmt.Sprintf("%v", this.Rec), "RecursiveMapValue", "RecursiveMapValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue_Value_ArrayRec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecursiveMapValue_Value_ArrayRec{`,
		`ArrayRec:` + strings.Replace(fmt.Sprintf("%v", this.ArrayRec), "RecursiveMapValue_Array", "RecursiveMapValue_Array", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue_Array) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecursiveMapValue_Array{`,
		`Values:` + strings.Replace(fmt.Sprintf("%v", this.Values), "RecursiveMapValue_Value", "RecursiveMapValue_Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue_Item) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecursiveMapValue_Item{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "RecursiveMapValue_Value", "RecursiveMapValue_Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMiscellaneous(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ResponseVoid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseVoid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseVoid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSeq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSeq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSeq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSeqDate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSeqDate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSeqDate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSeqDateMid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSeqDateMid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSeqDateMid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseBool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseBool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseBool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGroupSize", wireType)
			}
			m.MaxGroupSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGroupSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discover", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Discover == nil {
				m.Discover = &Discover{}
			}
			if err := m.Discover.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = append(m.Extensions, &Any{})
			if err := m.Extensions[len(m.Extensions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShareEndpoint == nil {
				m.ShareEndpoint = &google_protobuf.StringValue{}
			}
			if err := m.ShareEndpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CallsConfig == nil {
				m.CallsConfig = &CallsConfig{}
			}
			if err := m.CallsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInviteConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupInviteConfig == nil {
				m.GroupInviteConfig = &InvitesConfig{}
			}
			if err := m.GroupInviteConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerMetaInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerMetaInfo == nil {
				m.ServerMetaInfo = &ServerMetaInfo{}
			}
			if err := m.ServerMetaInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomProfileSchema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomProfileSchema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServicePeers == nil {
				m.ServicePeers = &ServicePeers{}
			}
			if err := m.ServicePeers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicePeers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicePeers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicePeers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Security", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Security == nil {
				m.Security = &OutPeer{}
			}
			if err := m.Security.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Support", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Support == nil {
				m.Support = &OutPeer{}
			}
			if err := m.Support.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stash == nil {
				m.Stash = &OutPeer{}
			}
			if err := m.Stash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerMetaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerMetaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerMetaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseDate", wireType)
			}
			m.ReleaseDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReleaseDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiVersion == nil {
				m.ApiVersion = &google_protobuf.Int64Value{}
			}
			if err := m.ApiVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallsConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallsConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallsConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallsEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CallsEnabled == nil {
				m.CallsEnabled = &google_protobuf.BoolValue{}
			}
			if err := m.CallsEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoCallsEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VideoCallsEnabled == nil {
				m.VideoCallsEnabled = &google_protobuf.BoolValue{}
			}
			if err := m.VideoCallsEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCallsEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupCallsEnabled == nil {
				m.GroupCallsEnabled = &google_protobuf.BoolValue{}
			}
			if err := m.GroupCallsEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCallsMaxMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupCallsMaxMembers == nil {
				m.GroupCallsMaxMembers = &google_protobuf.Int32Value{}
			}
			if err := m.GroupCallsMaxMembers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RtcpMuxPolicy", wireType)
			}
			m.RtcpMuxPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RtcpMuxPolicy |= (RtcpMuxPolicy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmojiSecurityEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmojiSecurityEnabled == nil {
				m.EmojiSecurityEnabled = &google_protobuf.BoolValue{}
			}
			if err := m.EmojiSecurityEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenSharingEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScreenSharingEnabled == nil {
				m.ScreenSharingEnabled = &google_protobuf.BoolValue{}
			}
			if err := m.ScreenSharingEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvitesConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvitesConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvitesConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseUrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseUrl == nil {
				m.BaseUrl = &google_protobuf.StringValue{}
			}
			if err := m.BaseUrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInviteUrlPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupInviteUrlPrefix == nil {
				m.GroupInviteUrlPrefix = &google_protobuf.StringValue{}
			}
			if err := m.GroupInviteUrlPrefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveUrlPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResolveUrlPrefix == nil {
				m.ResolveUrlPrefix = &google_protobuf.StringValue{}
			}
			if err := m.ResolveUrlPrefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareInviteUrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShareInviteUrl == nil {
				m.ShareInviteUrl = &google_protobuf.StringValue{}
			}
			if err := m.ShareInviteUrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Discover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Discover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Discover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &OutPeer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Extension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Extension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Extension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Any) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Any: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Any: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigHash == nil {
				m.ConfigHash = &google_protobuf.Int64Value{}
			}
			if err := m.ConfigHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecursiveMapValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecursiveMapValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecursiveMapValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &RecursiveMapValue_Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecursiveMapValue_Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &google_protobuf.DoubleValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &RecursiveMapValue_Value_D{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field I32", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &google_protobuf.Int32Value{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &RecursiveMapValue_Value_I32{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field I64", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &google_protobuf.Int64Value{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &RecursiveMapValue_Value_I64{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &google_protobuf.StringValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &RecursiveMapValue_Value_Str{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RecursiveMapValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &RecursiveMapValue_Value_Rec{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArrayRec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RecursiveMapValue_Array{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &RecursiveMapValue_Value_ArrayRec{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecursiveMapValue_Array) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Array: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Array: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &RecursiveMapValue_Value{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecursiveMapValue_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &RecursiveMapValue_Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMiscellaneous(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMiscellaneous
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMiscellaneous
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMiscellaneous(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMiscellaneous = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMiscellaneous   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("miscellaneous.proto", fileDescriptorMiscellaneous) }

var fileDescriptorMiscellaneous = []byte{
	// 1570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x97, 0x4b, 0x6f, 0x1b, 0x51,
	0x15, 0xc7, 0x3d, 0x76, 0xfc, 0xc8, 0xb1, 0x93, 0x3a, 0x37, 0x8f, 0xba, 0x6e, 0xeb, 0xba, 0xa6,
	0x45, 0xa6, 0xa5, 0x4e, 0xe4, 0x84, 0x2e, 0x40, 0xa2, 0x38, 0xce, 0x34, 0xb1, 0x5a, 0x3f, 0x3a,
	0x63, 0x07, 0xca, 0x66, 0x34, 0x9e, 0xb9, 0x71, 0x2e, 0xcc, 0xab, 0x33, 0x63, 0x93, 0x74, 0xc5,
	0x8a, 0x45, 0x25, 0x04, 0x42, 0xe2, 0x3b, 0xf0, 0x35, 0xd8, 0xb1, 0x41, 0xea, 0x92, 0x05, 0x0b,
	0x62, 0x36, 0xa8, 0x12, 0x52, 0x57, 0xac, 0xd1, 0xbd, 0x33, 0x13, 0xbf, 0x26, 0x89, 0xd2, 0x05,
	0x12, 0xab, 0x36, 0xf3, 0xff, 0x9f, 0xdf, 0xbd, 0x73, 0xee, 0xb9, 0xe7, 0x8c, 0x61, 0x5d, 0x27,
	0x8e, 0x82, 0x35, 0x4d, 0x36, 0xb0, 0x39, 0x74, 0x2a, 0x96, 0x6d, 0xba, 0x26, 0x4a, 0xa8, 0x44,
	0xd6, 0xcc, 0x41, 0xbe, 0x30, 0x30, 0xcd, 0x81, 0x86, 0xb7, 0xd9, 0xd3, 0xfe, 0xf0, 0x64, 0xfb,
	0x57, 0xb6, 0x6c, 0x59, 0xd8, 0xf6, 0x7d, 0xf9, 0x07, 0xbe, 0x2e, 0x5b, 0x64, 0x5b, 0x36, 0x0c,
	0xd3, 0x95, 0x5d, 0x62, 0x1a, 0x81, 0xba, 0xa6, 0xe2, 0x13, 0x62, 0x90, 0xe9, 0x47, 0x69, 0x0b,
	0x4f, 0xa2, 0x37, 0x1d, 0x45, 0xd6, 0x64, 0xab, 0xbf, 0xed, 0xff, 0xeb, 0x3d, 0x2e, 0xbd, 0x80,
	0x8c, 0x80, 0x1d, 0xcb, 0x34, 0x1c, 0x7c, 0x6c, 0x12, 0xf5, 0x87, 0x0f, 0xc7, 0xaf, 0xf2, 0x90,
	0x23, 0x7a, 0x45, 0xd5, 0x06, 0x95, 0x81, 0x6d, 0x29, 0x95, 0x43, 0xdb, 0x52, 0x02, 0x4b, 0xe9,
	0x8f, 0x1c, 0xa4, 0x83, 0x3f, 0x44, 0xfc, 0x01, 0x3d, 0x82, 0x98, 0x83, 0x3f, 0xe4, 0xb8, 0x22,
	0x57, 0x8e, 0xef, 0xaf, 0x7c, 0xfa, 0xb2, 0xb3, 0x0c, 0xc9, 0x11, 0x71, 0x48, 0x5f, 0xc3, 0x02,
	0x55, 0xd0, 0x77, 0x20, 0xee, 0xb8, 0xb2, 0x8b, 0x73, 0xd1, 0x22, 0x57, 0xce, 0xcc, 0x5b, 0x3c,
	0x0d, 0x3d, 0x86, 0x25, 0x95, 0x7a, 0x62, 0x45, 0xae, 0x1c, 0x9b, 0xf7, 0x30, 0xe9, 0xa6, 0x7d,
	0xfd, 0x95, 0x83, 0x3b, 0x53, 0xfb, 0x3a, 0xa0, 0xd4, 0xff, 0xd5, 0xde, 0x50, 0x15, 0x62, 0x3a,
	0x51, 0x73, 0x4b, 0x45, 0xae, 0x9c, 0xae, 0xae, 0x55, 0xbc, 0xe3, 0xac, 0xf4, 0x7a, 0x8d, 0x83,
	0x63, 0x59, 0x1b, 0xe2, 0x85, 0xb5, 0xf5, 0x9b, 0xf3, 0xfc, 0x99, 0x03, 0x34, 0xf7, 0x3e, 0x4d,
	0xa2, 0xfe, 0x5f, 0xbf, 0x92, 0x30, 0xa9, 0xb4, 0x7d, 0xd3, 0xd4, 0xe8, 0x56, 0x47, 0x94, 0xc5,
	0xde, 0x26, 0xb5, 0xb0, 0x55, 0xa6, 0xdd, 0xc4, 0xfc, 0xcf, 0x12, 0x24, 0xea, 0xa6, 0x71, 0x42,
	0x06, 0x68, 0x17, 0x56, 0x75, 0xf9, 0x4c, 0x1a, 0xd8, 0xe6, 0xd0, 0x92, 0x1c, 0xf2, 0x11, 0x87,
	0x67, 0x29, 0xa3, 0xcb, 0x67, 0x87, 0xd4, 0x23, 0x92, 0x8f, 0x18, 0xfd, 0x08, 0x52, 0x2a, 0x71,
	0x14, 0x73, 0x84, 0x6d, 0x96, 0xb1, 0x74, 0x35, 0x1b, 0xbc, 0xeb, 0x81, 0xff, 0x7c, 0x1e, 0x70,
	0x19, 0x80, 0x9e, 0x03, 0xe0, 0x33, 0x17, 0x1b, 0x0e, 0xbd, 0x72, 0xb9, 0x58, 0x31, 0x56, 0x4e,
	0x57, 0xd3, 0x41, 0x78, 0xcd, 0x38, 0x17, 0xa6, 0x64, 0x24, 0xc0, 0xaa, 0x73, 0x2a, 0xdb, 0x58,
	0xc2, 0x86, 0x6a, 0x99, 0xc4, 0x70, 0xfd, 0xdc, 0x3e, 0xa8, 0x78, 0xb7, 0xba, 0x12, 0xdc, 0xfa,
	0x8a, 0xe8, 0xda, 0xc4, 0x18, 0x84, 0xa6, 0x79, 0x85, 0x21, 0x78, 0x9f, 0x80, 0x78, 0xc8, 0x28,
	0xb2, 0xa6, 0x39, 0x92, 0xc2, 0x52, 0x90, 0x8b, 0x33, 0xe2, 0x7a, 0xb0, 0x85, 0x3a, 0xd5, 0xbc,
	0xec, 0xcc, 0x83, 0xd2, 0xca, 0x44, 0x43, 0x5d, 0x58, 0xf7, 0xb2, 0x46, 0x8c, 0x11, 0x71, 0x71,
	0x40, 0x4b, 0x30, 0xda, 0x66, 0x40, 0x6b, 0x30, 0xf1, 0x0a, 0xde, 0x1a, 0x03, 0x78, 0x16, 0x9f,
	0xda, 0x86, 0xac, 0x83, 0xed, 0x11, 0xb6, 0x25, 0x1d, 0xbb, 0xb2, 0x44, 0x8c, 0x13, 0x33, 0x97,
	0x64, 0xc8, 0xad, 0x00, 0x29, 0x32, 0xbd, 0x89, 0x5d, 0xb9, 0x61, 0x9c, 0x98, 0xf3, 0xcc, 0x55,
	0x67, 0x46, 0x46, 0x35, 0xd8, 0x54, 0x86, 0x8e, 0x6b, 0xea, 0x92, 0x65, 0x9b, 0x27, 0x44, 0xc3,
	0x92, 0xa3, 0x9c, 0x62, 0x5d, 0xce, 0xa5, 0x8a, 0x5c, 0x79, 0x79, 0x3e, 0x7a, 0xdd, 0xf3, 0x76,
	0x3c, 0xab, 0xc8, 0x9c, 0xe8, 0x08, 0x56, 0x28, 0x94, 0x28, 0x58, 0x62, 0xad, 0x31, 0xb7, 0xcc,
	0x36, 0xb4, 0x31, 0xbd, 0x21, 0xa2, 0xe0, 0x0e, 0xd5, 0x16, 0x0a, 0xc7, 0x99, 0x12, 0x4b, 0xbf,
	0xe5, 0x20, 0x33, 0xed, 0x46, 0xcf, 0x21, 0xe5, 0x60, 0x65, 0x68, 0x13, 0xf7, 0x9c, 0x15, 0x5e,
	0xba, 0x7a, 0x27, 0xa0, 0xb6, 0x87, 0x2e, 0xf5, 0x08, 0x97, 0x06, 0xf4, 0x3d, 0x48, 0x3a, 0x43,
	0xcb, 0x32, 0x6d, 0xd7, 0xaf, 0xba, 0x05, 0x6f, 0xa0, 0xa3, 0xa7, 0xec, 0x42, 0x3b, 0xa7, 0xec,
	0xb2, 0x86, 0x18, 0x3d, 0xb5, 0xf4, 0x3b, 0x0e, 0x56, 0x67, 0xd3, 0x89, 0x76, 0x20, 0x63, 0x63,
	0x0d, 0xcb, 0x0e, 0x96, 0xd8, 0x6d, 0xe7, 0xc2, 0x6e, 0x7b, 0xda, 0xb7, 0xb0, 0x86, 0xf9, 0x06,
	0xd2, 0xb2, 0x45, 0xa4, 0x11, 0xb6, 0x69, 0xcd, 0xfa, 0x5b, 0xbb, 0xbf, 0x50, 0xa0, 0x0d, 0xc3,
	0x7d, 0xb9, 0x17, 0x5a, 0x9f, 0x20, 0x5b, 0xe4, 0xd8, 0x8b, 0x2e, 0xfd, 0x26, 0x0e, 0xe9, 0xa9,
	0x0a, 0x44, 0x2d, 0x58, 0xf1, 0x8a, 0x15, 0x1b, 0x72, 0x5f, 0xc3, 0xaa, 0x9f, 0xa5, 0xfc, 0x02,
	0x9e, 0x36, 0x87, 0x50, 0xba, 0x57, 0xec, 0xbc, 0x17, 0x8e, 0xde, 0xc3, 0xfa, 0x88, 0xa8, 0xd8,
	0x94, 0x66, 0xa9, 0xd1, 0xdb, 0x52, 0xd7, 0x18, 0xa5, 0x3e, 0x87, 0xf6, 0x2e, 0xc4, 0x2c, 0x3a,
	0x76, 0x6b, 0x34, 0xa3, 0xcc, 0xa0, 0x65, 0xb8, 0x3b, 0x8d, 0xa6, 0x1d, 0x4b, 0xc7, 0x7a, 0x9f,
	0xd6, 0xe2, 0xd2, 0xd5, 0xe9, 0xde, 0xad, 0x86, 0xf2, 0x37, 0x26, 0xfc, 0xa6, 0x7c, 0xd6, 0xf4,
	0x38, 0xe8, 0x2d, 0xdc, 0xb1, 0x5d, 0xc5, 0x92, 0xf4, 0xe1, 0x99, 0x64, 0x99, 0x1a, 0x51, 0xce,
	0x59, 0x63, 0x58, 0x9d, 0x5c, 0x65, 0xc1, 0x55, 0xac, 0xe6, 0xf0, 0xac, 0xc3, 0xc4, 0x85, 0x1e,
	0x63, 0x4f, 0xab, 0x48, 0x82, 0x2d, 0xac, 0x9b, 0xbf, 0x20, 0x52, 0x50, 0xbc, 0x97, 0xe9, 0x48,
	0xdc, 0x36, 0x1d, 0x1b, 0x0c, 0x24, 0xfa, 0x9c, 0x20, 0x23, 0x12, 0x6c, 0x39, 0x8a, 0x8d, 0xb1,
	0x21, 0xd1, 0xe6, 0x46, 0x8c, 0xc1, 0xe5, 0x02, 0xc9, 0x5b, 0x2f, 0xe0, 0x81, 0x44, 0x8f, 0xe3,
	0x2f, 0x50, 0xfa, 0x77, 0x14, 0x56, 0x66, 0x9a, 0x17, 0x7a, 0x0d, 0xa9, 0x3e, 0xbd, 0x16, 0x43,
	0x5b, 0xf3, 0xab, 0xf0, 0x56, 0x5d, 0x38, 0x49, 0x83, 0x7b, 0xb6, 0x86, 0xfa, 0xc1, 0x61, 0xfa,
	0x8d, 0x73, 0x68, 0x6b, 0x92, 0x65, 0xe3, 0x13, 0x72, 0xe6, 0x97, 0xe1, 0xad, 0xb0, 0x1b, 0x53,
	0x3d, 0xb4, 0x67, 0x6b, 0x1d, 0x06, 0x42, 0xef, 0x01, 0xd9, 0xd8, 0x31, 0xb5, 0xd1, 0x0c, 0x3e,
	0x76, 0x7b, 0x7c, 0xd6, 0xc7, 0x4c, 0xd0, 0x3d, 0xc8, 0x7a, 0x23, 0x69, 0xb2, 0xfd, 0x6f, 0x19,
	0x4a, 0xde, 0x5c, 0xbb, 0xdc, 0x77, 0xe9, 0x27, 0x90, 0x0a, 0x66, 0x27, 0xda, 0x83, 0xb8, 0xd7,
	0x68, 0x39, 0x36, 0x1d, 0xe7, 0xbb, 0xd7, 0xc2, 0xd0, 0x67, 0xe6, 0x52, 0x13, 0x96, 0xf9, 0x60,
	0x72, 0xa2, 0x87, 0x10, 0x25, 0x6a, 0xf8, 0x2c, 0x8f, 0x12, 0xd5, 0xff, 0x96, 0x91, 0xc3, 0xbf,
	0x77, 0x98, 0x54, 0x7a, 0x07, 0xb1, 0x9a, 0x71, 0x8e, 0xca, 0x90, 0x72, 0xcf, 0xad, 0xc9, 0xa9,
	0x2f, 0x8c, 0x8c, 0x24, 0x95, 0xe9, 0xb9, 0x16, 0x67, 0x98, 0x99, 0x4f, 0x5f, 0x76, 0x52, 0x90,
	0x38, 0x25, 0xaa, 0x8a, 0x0d, 0x1f, 0xf9, 0x07, 0x0e, 0x32, 0x3d, 0x8b, 0xb6, 0x55, 0xbf, 0xa4,
	0x7e, 0x00, 0x09, 0x7f, 0x6c, 0x7a, 0x05, 0xb5, 0x7a, 0x39, 0x84, 0x43, 0xe7, 0xa5, 0x6f, 0xa6,
	0x1d, 0xd7, 0xfb, 0x9f, 0x74, 0x4a, 0x7b, 0xfc, 0x37, 0x74, 0x5c, 0x2f, 0xfc, 0x88, 0xce, 0x80,
	0xbf, 0x2f, 0xc1, 0x9a, 0x40, 0x6f, 0x97, 0x43, 0x46, 0xb8, 0x29, 0x5b, 0x2c, 0x00, 0xd5, 0x21,
	0x4e, 0x5c, 0xac, 0x07, 0x47, 0x50, 0xb8, 0x6c, 0x02, 0xf3, 0xce, 0x4a, 0xc3, 0xc5, 0xfa, 0xc2,
	0x89, 0xb0, 0xd8, 0xfc, 0x9f, 0xa3, 0x10, 0xf7, 0x70, 0xdf, 0x07, 0x4e, 0xbd, 0xb2, 0xba, 0x0f,
	0xcc, 0x61, 0x5f, 0xc3, 0xcc, 0x78, 0x14, 0x11, 0x38, 0x15, 0x6d, 0x43, 0x8c, 0xec, 0x56, 0xfd,
	0x72, 0xbd, 0xae, 0xb5, 0x1d, 0x45, 0x04, 0xea, 0x64, 0x01, 0x2f, 0xf7, 0xae, 0xeb, 0x85, 0x7e,
	0x22, 0x58, 0xc0, 0xcb, 0x3d, 0xb4, 0x03, 0x31, 0xc7, 0xb5, 0xfd, 0x4f, 0x9f, 0x6b, 0xeb, 0x96,
	0x46, 0x38, 0xae, 0x8d, 0x5e, 0x40, 0xcc, 0xc6, 0x8a, 0xdf, 0xbe, 0xee, 0x5d, 0x99, 0x0e, 0x6a,
	0xb7, 0xb1, 0x82, 0x7e, 0x0c, 0xcb, 0xb2, 0x6d, 0xcb, 0xe7, 0x12, 0x0d, 0xf2, 0x5a, 0xd2, 0xa3,
	0xab, 0x73, 0x58, 0xa3, 0xd6, 0xa3, 0x88, 0x90, 0x62, 0x31, 0x02, 0x56, 0xf6, 0x93, 0xfe, 0x67,
	0x6e, 0xbe, 0x0d, 0x71, 0xa6, 0xa2, 0xd7, 0x90, 0x60, 0x4f, 0x82, 0x23, 0xb9, 0x06, 0x17, 0x7a,
	0xe6, 0x7e, 0x74, 0x5e, 0x87, 0x25, 0x7a, 0x64, 0xf4, 0x47, 0xc1, 0x2f, 0xf1, 0x79, 0x78, 0x4d,
	0x53, 0x05, 0x1d, 0x04, 0x5f, 0xda, 0xd1, 0x9b, 0xb6, 0x1f, 0xba, 0x9e, 0x17, 0xfc, 0xac, 0x0f,
	0x2b, 0x33, 0x83, 0x03, 0xdd, 0x83, 0x4d, 0xa1, 0x5b, 0xef, 0x34, 0x7b, 0x3f, 0xeb, 0xb4, 0xdf,
	0x36, 0xea, 0xef, 0xa5, 0x5e, 0xeb, 0x4d, 0xab, 0xfd, 0xd3, 0x56, 0x36, 0x82, 0xee, 0xc3, 0xdd,
	0x59, 0xa9, 0xc5, 0x1f, 0xb6, 0xbb, 0x8d, 0x5a, 0x97, 0xcf, 0x72, 0x8b, 0x71, 0x02, 0xff, 0xae,
	0xd7, 0x10, 0xf8, 0x6c, 0xf4, 0xd9, 0x45, 0x14, 0x90, 0x77, 0xaf, 0xda, 0x96, 0x4b, 0x74, 0xf2,
	0x91, 0xfd, 0xc4, 0x45, 0x05, 0xc8, 0xf7, 0x3a, 0x07, 0xb5, 0x2e, 0xdf, 0xee, 0x74, 0x1b, 0xcd,
	0xc6, 0xcf, 0x6b, 0xdd, 0x46, 0xbb, 0x35, 0xbb, 0x5c, 0x88, 0xde, 0x6a, 0xb7, 0xe8, 0x72, 0x4f,
	0xe1, 0x71, 0x88, 0x28, 0x76, 0x85, 0x46, 0x47, 0xe2, 0x5b, 0xdd, 0x46, 0xb7, 0xc1, 0x8b, 0xd9,
	0x28, 0xfa, 0x2e, 0x94, 0x42, 0x6c, 0x7c, 0xab, 0xb6, 0xff, 0x96, 0x97, 0xea, 0xed, 0xe6, 0x7e,
	0xa3, 0xc5, 0x1f, 0x64, 0x63, 0x57, 0xf8, 0x5e, 0xd7, 0xc4, 0x2e, 0x2f, 0x48, 0x4d, 0x5e, 0x14,
	0x6b, 0x87, 0xbc, 0x98, 0x5d, 0xba, 0x76, 0xd9, 0x7a, 0xbb, 0xd7, 0xea, 0xf2, 0x82, 0x98, 0x8d,
	0xa3, 0x27, 0x50, 0x0c, 0xb1, 0xd5, 0xdb, 0xcd, 0x4e, 0xad, 0xde, 0x95, 0x7a, 0x22, 0x75, 0x25,
	0x50, 0x11, 0x1e, 0x84, 0xb8, 0x0e, 0x85, 0x76, 0xaf, 0x23, 0x4a, 0xc7, 0xd5, 0x6c, 0x12, 0x95,
	0xe1, 0xc9, 0x8d, 0x6f, 0x49, 0x9d, 0xa9, 0x7d, 0x7e, 0xfc, 0x6a, 0x0b, 0x36, 0xa6, 0x7f, 0x52,
	0xf9, 0x5f, 0xb6, 0xce, 0xe7, 0x8b, 0x42, 0xe4, 0x6f, 0x17, 0x85, 0xc8, 0xd7, 0x8b, 0x02, 0xf7,
	0xeb, 0x71, 0x81, 0xfb, 0xd3, 0xb8, 0xc0, 0xfd, 0x65, 0x5c, 0xe0, 0x3e, 0x8f, 0x0b, 0xdc, 0x3f,
	0xc6, 0x05, 0xee, 0x5f, 0xe3, 0x42, 0xe4, 0xeb, 0xb8, 0xc0, 0xfd, 0xfe, 0x9f, 0x85, 0x48, 0x3f,
	0xc1, 0xee, 0xd8, 0xee, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x31, 0x50, 0x41, 0xd3, 0x10,
	0x00, 0x00,
}
