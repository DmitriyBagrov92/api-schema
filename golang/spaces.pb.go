// Code generated by protoc-gen-gogo.
// source: spaces.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import google_protobuf3 "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Space struct {
	Id        *UUIDValue                  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	CreatedAt *google_protobuf3.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// Types that are valid to be assigned to SpaceType:
	//	*Space_General_
	//	*Space_Public_
	//	*Space_Private_
	SpaceType isSpace_SpaceType            `protobuf_oneof:"space_type"`
	Title     string                       `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	About     *google_protobuf.StringValue `protobuf:"bytes,7,opt,name=about" json:"about,omitempty"`
	Avatar    *Avatar                      `protobuf:"bytes,8,opt,name=avatar" json:"avatar,omitempty"`
	DeletedAt *google_protobuf3.Timestamp  `protobuf:"bytes,9,opt,name=deleted_at,json=deletedAt" json:"deleted_at,omitempty"`
	Clock     *DataClock                   `protobuf:"bytes,10,opt,name=clock" json:"clock,omitempty"`
}

func (m *Space) Reset()                    { *m = Space{} }
func (*Space) ProtoMessage()               {}
func (*Space) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{0} }

type isSpace_SpaceType interface {
	isSpace_SpaceType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Space_General_ struct {
	General *Space_General `protobuf:"bytes,3,opt,name=general,oneof"`
}
type Space_Public_ struct {
	Public *Space_Public `protobuf:"bytes,4,opt,name=public,oneof"`
}
type Space_Private_ struct {
	Private *Space_Private `protobuf:"bytes,5,opt,name=private,oneof"`
}

func (*Space_General_) isSpace_SpaceType() {}
func (*Space_Public_) isSpace_SpaceType()  {}
func (*Space_Private_) isSpace_SpaceType() {}

func (m *Space) GetSpaceType() isSpace_SpaceType {
	if m != nil {
		return m.SpaceType
	}
	return nil
}

func (m *Space) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Space) GetCreatedAt() *google_protobuf3.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Space) GetGeneral() *Space_General {
	if x, ok := m.GetSpaceType().(*Space_General_); ok {
		return x.General
	}
	return nil
}

func (m *Space) GetPublic() *Space_Public {
	if x, ok := m.GetSpaceType().(*Space_Public_); ok {
		return x.Public
	}
	return nil
}

func (m *Space) GetPrivate() *Space_Private {
	if x, ok := m.GetSpaceType().(*Space_Private_); ok {
		return x.Private
	}
	return nil
}

func (m *Space) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Space) GetAbout() *google_protobuf.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *Space) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *Space) GetDeletedAt() *google_protobuf3.Timestamp {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *Space) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Space) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Space_OneofMarshaler, _Space_OneofUnmarshaler, _Space_OneofSizer, []interface{}{
		(*Space_General_)(nil),
		(*Space_Public_)(nil),
		(*Space_Private_)(nil),
	}
}

func _Space_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Space)
	// space_type
	switch x := m.SpaceType.(type) {
	case *Space_General_:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.General); err != nil {
			return err
		}
	case *Space_Public_:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Public); err != nil {
			return err
		}
	case *Space_Private_:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Private); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Space.SpaceType has unexpected type %T", x)
	}
	return nil
}

func _Space_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Space)
	switch tag {
	case 3: // space_type.general
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Space_General)
		err := b.DecodeMessage(msg)
		m.SpaceType = &Space_General_{msg}
		return true, err
	case 4: // space_type.public
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Space_Public)
		err := b.DecodeMessage(msg)
		m.SpaceType = &Space_Public_{msg}
		return true, err
	case 5: // space_type.private
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Space_Private)
		err := b.DecodeMessage(msg)
		m.SpaceType = &Space_Private_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Space_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Space)
	// space_type
	switch x := m.SpaceType.(type) {
	case *Space_General_:
		s := proto.Size(x.General)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Space_Public_:
		s := proto.Size(x.Public)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Space_Private_:
		s := proto.Size(x.Private)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Space_General struct {
}

func (m *Space_General) Reset()                    { *m = Space_General{} }
func (*Space_General) ProtoMessage()               {}
func (*Space_General) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{0, 0} }

type Space_Public struct {
	OwnerUserId int32  `protobuf:"varint,1,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"`
	Shortname   string `protobuf:"bytes,2,opt,name=shortname,proto3" json:"shortname,omitempty"`
}

func (m *Space_Public) Reset()                    { *m = Space_Public{} }
func (*Space_Public) ProtoMessage()               {}
func (*Space_Public) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{0, 1} }

func (m *Space_Public) GetOwnerUserId() int32 {
	if m != nil {
		return m.OwnerUserId
	}
	return 0
}

func (m *Space_Public) GetShortname() string {
	if m != nil {
		return m.Shortname
	}
	return ""
}

type Space_Private struct {
	OwnerUserId int32 `protobuf:"varint,1,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"`
}

func (m *Space_Private) Reset()                    { *m = Space_Private{} }
func (*Space_Private) ProtoMessage()               {}
func (*Space_Private) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{0, 2} }

func (m *Space_Private) GetOwnerUserId() int32 {
	if m != nil {
		return m.OwnerUserId
	}
	return 0
}

type SpaceMember struct {
	SpaceId   *UUIDValue                  `protobuf:"bytes,1,opt,name=space_id,json=spaceId" json:"space_id,omitempty"`
	UserId    int32                       `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InvitedAt *google_protobuf3.Timestamp `protobuf:"bytes,3,opt,name=invited_at,json=invitedAt" json:"invited_at,omitempty"`
	JoinedAt  *google_protobuf3.Timestamp `protobuf:"bytes,4,opt,name=joined_at,json=joinedAt" json:"joined_at,omitempty"`
	DeletedAt *google_protobuf3.Timestamp `protobuf:"bytes,5,opt,name=deleted_at,json=deletedAt" json:"deleted_at,omitempty"`
	Clock     *DataClock                  `protobuf:"bytes,6,opt,name=clock" json:"clock,omitempty"`
}

func (m *SpaceMember) Reset()                    { *m = SpaceMember{} }
func (*SpaceMember) ProtoMessage()               {}
func (*SpaceMember) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{1} }

func (m *SpaceMember) GetSpaceId() *UUIDValue {
	if m != nil {
		return m.SpaceId
	}
	return nil
}

func (m *SpaceMember) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SpaceMember) GetInvitedAt() *google_protobuf3.Timestamp {
	if m != nil {
		return m.InvitedAt
	}
	return nil
}

func (m *SpaceMember) GetJoinedAt() *google_protobuf3.Timestamp {
	if m != nil {
		return m.JoinedAt
	}
	return nil
}

func (m *SpaceMember) GetDeletedAt() *google_protobuf3.Timestamp {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *SpaceMember) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type UpdateSpaceModified struct {
	Space *Space `protobuf:"bytes,1,opt,name=space" json:"space,omitempty"`
}

func (m *UpdateSpaceModified) Reset()                    { *m = UpdateSpaceModified{} }
func (*UpdateSpaceModified) ProtoMessage()               {}
func (*UpdateSpaceModified) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{2} }

func (m *UpdateSpaceModified) GetSpace() *Space {
	if m != nil {
		return m.Space
	}
	return nil
}

type UpdateSpaceMemberModified struct {
	Member *SpaceMember `protobuf:"bytes,1,opt,name=member" json:"member,omitempty"`
}

func (m *UpdateSpaceMemberModified) Reset()                    { *m = UpdateSpaceMemberModified{} }
func (*UpdateSpaceMemberModified) ProtoMessage()               {}
func (*UpdateSpaceMemberModified) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{3} }

func (m *UpdateSpaceMemberModified) GetMember() *SpaceMember {
	if m != nil {
		return m.Member
	}
	return nil
}

type RequestCreateSpace struct {
	RequestId int64                        `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Title     string                       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Shortname *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=shortname" json:"shortname,omitempty"`
	About     *google_protobuf.StringValue `protobuf:"bytes,4,opt,name=about" json:"about,omitempty"`
	Avatar    *Avatar                      `protobuf:"bytes,5,opt,name=avatar" json:"avatar,omitempty"`
}

func (m *RequestCreateSpace) Reset()                    { *m = RequestCreateSpace{} }
func (*RequestCreateSpace) ProtoMessage()               {}
func (*RequestCreateSpace) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{4} }

func (m *RequestCreateSpace) GetRequestId() int64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *RequestCreateSpace) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RequestCreateSpace) GetShortname() *google_protobuf.StringValue {
	if m != nil {
		return m.Shortname
	}
	return nil
}

func (m *RequestCreateSpace) GetAbout() *google_protobuf.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *RequestCreateSpace) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

type ResponseSpace struct {
	Space *Space `protobuf:"bytes,1,opt,name=space" json:"space,omitempty"`
}

func (m *ResponseSpace) Reset()                    { *m = ResponseSpace{} }
func (*ResponseSpace) ProtoMessage()               {}
func (*ResponseSpace) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{5} }

func (m *ResponseSpace) GetSpace() *Space {
	if m != nil {
		return m.Space
	}
	return nil
}

type ResponseSpaceMember struct {
	SpaceId *UUIDValue   `protobuf:"bytes,1,opt,name=space_id,json=spaceId" json:"space_id,omitempty"`
	Member  *SpaceMember `protobuf:"bytes,2,opt,name=member" json:"member,omitempty"`
}

func (m *ResponseSpaceMember) Reset()                    { *m = ResponseSpaceMember{} }
func (*ResponseSpaceMember) ProtoMessage()               {}
func (*ResponseSpaceMember) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{6} }

func (m *ResponseSpaceMember) GetSpaceId() *UUIDValue {
	if m != nil {
		return m.SpaceId
	}
	return nil
}

func (m *ResponseSpaceMember) GetMember() *SpaceMember {
	if m != nil {
		return m.Member
	}
	return nil
}

type RequestDeleteSpace struct {
	Id    *UUIDValue `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Clock *DataClock `protobuf:"bytes,2,opt,name=clock" json:"clock,omitempty"`
}

func (m *RequestDeleteSpace) Reset()                    { *m = RequestDeleteSpace{} }
func (*RequestDeleteSpace) ProtoMessage()               {}
func (*RequestDeleteSpace) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{7} }

func (m *RequestDeleteSpace) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestDeleteSpace) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type RequestLoadSpaces struct {
}

func (m *RequestLoadSpaces) Reset()                    { *m = RequestLoadSpaces{} }
func (*RequestLoadSpaces) ProtoMessage()               {}
func (*RequestLoadSpaces) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{8} }

type ResponseLoadSpaces struct {
	Space      []*Space       `protobuf:"bytes,1,rep,name=space" json:"space,omitempty"`
	OwnerPeers []*UserOutPeer `protobuf:"bytes,2,rep,name=owner_peers,json=ownerPeers" json:"owner_peers,omitempty"`
}

func (m *ResponseLoadSpaces) Reset()                    { *m = ResponseLoadSpaces{} }
func (*ResponseLoadSpaces) ProtoMessage()               {}
func (*ResponseLoadSpaces) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{9} }

func (m *ResponseLoadSpaces) GetSpace() []*Space {
	if m != nil {
		return m.Space
	}
	return nil
}

func (m *ResponseLoadSpaces) GetOwnerPeers() []*UserOutPeer {
	if m != nil {
		return m.OwnerPeers
	}
	return nil
}

type RequestStreamSpaceMembers struct {
	SpaceId *UUIDValue `protobuf:"bytes,1,opt,name=space_id,json=spaceId" json:"space_id,omitempty"`
	Clock   *DataClock `protobuf:"bytes,2,opt,name=clock" json:"clock,omitempty"`
}

func (m *RequestStreamSpaceMembers) Reset()                    { *m = RequestStreamSpaceMembers{} }
func (*RequestStreamSpaceMembers) ProtoMessage()               {}
func (*RequestStreamSpaceMembers) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{10} }

func (m *RequestStreamSpaceMembers) GetSpaceId() *UUIDValue {
	if m != nil {
		return m.SpaceId
	}
	return nil
}

func (m *RequestStreamSpaceMembers) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type SpaceMemberWithPeer struct {
	Member *SpaceMember `protobuf:"bytes,1,opt,name=member" json:"member,omitempty"`
	Peer   *UserOutPeer `protobuf:"bytes,2,opt,name=peer" json:"peer,omitempty"`
}

func (m *SpaceMemberWithPeer) Reset()                    { *m = SpaceMemberWithPeer{} }
func (*SpaceMemberWithPeer) ProtoMessage()               {}
func (*SpaceMemberWithPeer) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{11} }

func (m *SpaceMemberWithPeer) GetMember() *SpaceMember {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *SpaceMemberWithPeer) GetPeer() *UserOutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type RequestSetTitle struct {
	Id    *UUIDValue `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Clock *DataClock `protobuf:"bytes,3,opt,name=clock" json:"clock,omitempty"`
}

func (m *RequestSetTitle) Reset()                    { *m = RequestSetTitle{} }
func (*RequestSetTitle) ProtoMessage()               {}
func (*RequestSetTitle) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{12} }

func (m *RequestSetTitle) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestSetTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RequestSetTitle) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type RequestSetShortname struct {
	Id        *UUIDValue                   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Shortname *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=shortname" json:"shortname,omitempty"`
	Clock     *DataClock                   `protobuf:"bytes,3,opt,name=clock" json:"clock,omitempty"`
}

func (m *RequestSetShortname) Reset()                    { *m = RequestSetShortname{} }
func (*RequestSetShortname) ProtoMessage()               {}
func (*RequestSetShortname) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{13} }

func (m *RequestSetShortname) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestSetShortname) GetShortname() *google_protobuf.StringValue {
	if m != nil {
		return m.Shortname
	}
	return nil
}

func (m *RequestSetShortname) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type RequestSetAbout struct {
	Id    *UUIDValue                   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	About *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=about" json:"about,omitempty"`
	Clock *DataClock                   `protobuf:"bytes,3,opt,name=clock" json:"clock,omitempty"`
}

func (m *RequestSetAbout) Reset()                    { *m = RequestSetAbout{} }
func (*RequestSetAbout) ProtoMessage()               {}
func (*RequestSetAbout) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{14} }

func (m *RequestSetAbout) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestSetAbout) GetAbout() *google_protobuf.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *RequestSetAbout) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type RequestSetAvatar struct {
	Id           *UUIDValue    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	FileLocation *FileLocation `protobuf:"bytes,2,opt,name=file_location,json=fileLocation" json:"file_location,omitempty"`
	Clock        *DataClock    `protobuf:"bytes,3,opt,name=clock" json:"clock,omitempty"`
}

func (m *RequestSetAvatar) Reset()                    { *m = RequestSetAvatar{} }
func (*RequestSetAvatar) ProtoMessage()               {}
func (*RequestSetAvatar) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{15} }

func (m *RequestSetAvatar) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestSetAvatar) GetFileLocation() *FileLocation {
	if m != nil {
		return m.FileLocation
	}
	return nil
}

func (m *RequestSetAvatar) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type RequestSpaceInvite struct {
	Id     *UUIDValue `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	UserId int32      `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Clock  *DataClock `protobuf:"bytes,3,opt,name=clock" json:"clock,omitempty"`
}

func (m *RequestSpaceInvite) Reset()                    { *m = RequestSpaceInvite{} }
func (*RequestSpaceInvite) ProtoMessage()               {}
func (*RequestSpaceInvite) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{16} }

func (m *RequestSpaceInvite) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestSpaceInvite) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RequestSpaceInvite) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type RequestSpaceKick struct {
	Id     *UUIDValue `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	UserId int32      `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Clock  *DataClock `protobuf:"bytes,3,opt,name=clock" json:"clock,omitempty"`
}

func (m *RequestSpaceKick) Reset()                    { *m = RequestSpaceKick{} }
func (*RequestSpaceKick) ProtoMessage()               {}
func (*RequestSpaceKick) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{17} }

func (m *RequestSpaceKick) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestSpaceKick) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RequestSpaceKick) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type RequestSpaceLeave struct {
	Id     *UUIDValue `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	UserId int32      `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Clock  *DataClock `protobuf:"bytes,3,opt,name=clock" json:"clock,omitempty"`
}

func (m *RequestSpaceLeave) Reset()                    { *m = RequestSpaceLeave{} }
func (*RequestSpaceLeave) ProtoMessage()               {}
func (*RequestSpaceLeave) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{18} }

func (m *RequestSpaceLeave) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestSpaceLeave) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RequestSpaceLeave) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type RequestGetSpaceInviteUrl struct {
	Id *UUIDValue `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RequestGetSpaceInviteUrl) Reset()                    { *m = RequestGetSpaceInviteUrl{} }
func (*RequestGetSpaceInviteUrl) ProtoMessage()               {}
func (*RequestGetSpaceInviteUrl) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{19} }

func (m *RequestGetSpaceInviteUrl) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

type ResponseSpaceInviteUrl struct {
	InviteUrl string `protobuf:"bytes,1,opt,name=invite_url,json=inviteUrl,proto3" json:"invite_url,omitempty"`
}

func (m *ResponseSpaceInviteUrl) Reset()                    { *m = ResponseSpaceInviteUrl{} }
func (*ResponseSpaceInviteUrl) ProtoMessage()               {}
func (*ResponseSpaceInviteUrl) Descriptor() ([]byte, []int) { return fileDescriptorSpaces, []int{20} }

func (m *ResponseSpaceInviteUrl) GetInviteUrl() string {
	if m != nil {
		return m.InviteUrl
	}
	return ""
}

type RequestRevokeSpaceInviteUrl struct {
	Id *UUIDValue `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RequestRevokeSpaceInviteUrl) Reset()      { *m = RequestRevokeSpaceInviteUrl{} }
func (*RequestRevokeSpaceInviteUrl) ProtoMessage() {}
func (*RequestRevokeSpaceInviteUrl) Descriptor() ([]byte, []int) {
	return fileDescriptorSpaces, []int{21}
}

func (m *RequestRevokeSpaceInviteUrl) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func init() {
	proto.RegisterType((*Space)(nil), "dialog.Space")
	proto.RegisterType((*Space_General)(nil), "dialog.Space.General")
	proto.RegisterType((*Space_Public)(nil), "dialog.Space.Public")
	proto.RegisterType((*Space_Private)(nil), "dialog.Space.Private")
	proto.RegisterType((*SpaceMember)(nil), "dialog.SpaceMember")
	proto.RegisterType((*UpdateSpaceModified)(nil), "dialog.UpdateSpaceModified")
	proto.RegisterType((*UpdateSpaceMemberModified)(nil), "dialog.UpdateSpaceMemberModified")
	proto.RegisterType((*RequestCreateSpace)(nil), "dialog.RequestCreateSpace")
	proto.RegisterType((*ResponseSpace)(nil), "dialog.ResponseSpace")
	proto.RegisterType((*ResponseSpaceMember)(nil), "dialog.ResponseSpaceMember")
	proto.RegisterType((*RequestDeleteSpace)(nil), "dialog.RequestDeleteSpace")
	proto.RegisterType((*RequestLoadSpaces)(nil), "dialog.RequestLoadSpaces")
	proto.RegisterType((*ResponseLoadSpaces)(nil), "dialog.ResponseLoadSpaces")
	proto.RegisterType((*RequestStreamSpaceMembers)(nil), "dialog.RequestStreamSpaceMembers")
	proto.RegisterType((*SpaceMemberWithPeer)(nil), "dialog.SpaceMemberWithPeer")
	proto.RegisterType((*RequestSetTitle)(nil), "dialog.RequestSetTitle")
	proto.RegisterType((*RequestSetShortname)(nil), "dialog.RequestSetShortname")
	proto.RegisterType((*RequestSetAbout)(nil), "dialog.RequestSetAbout")
	proto.RegisterType((*RequestSetAvatar)(nil), "dialog.RequestSetAvatar")
	proto.RegisterType((*RequestSpaceInvite)(nil), "dialog.RequestSpaceInvite")
	proto.RegisterType((*RequestSpaceKick)(nil), "dialog.RequestSpaceKick")
	proto.RegisterType((*RequestSpaceLeave)(nil), "dialog.RequestSpaceLeave")
	proto.RegisterType((*RequestGetSpaceInviteUrl)(nil), "dialog.RequestGetSpaceInviteUrl")
	proto.RegisterType((*ResponseSpaceInviteUrl)(nil), "dialog.ResponseSpaceInviteUrl")
	proto.RegisterType((*RequestRevokeSpaceInviteUrl)(nil), "dialog.RequestRevokeSpaceInviteUrl")
}
func (this *Space) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Space)
	if !ok {
		that2, ok := that.(Space)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if that1.SpaceType == nil {
		if this.SpaceType != nil {
			return false
		}
	} else if this.SpaceType == nil {
		return false
	} else if !this.SpaceType.Equal(that1.SpaceType) {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	if !this.Avatar.Equal(that1.Avatar) {
		return false
	}
	if !this.DeletedAt.Equal(that1.DeletedAt) {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *Space_General_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Space_General_)
	if !ok {
		that2, ok := that.(Space_General_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.General.Equal(that1.General) {
		return false
	}
	return true
}
func (this *Space_Public_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Space_Public_)
	if !ok {
		that2, ok := that.(Space_Public_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Public.Equal(that1.Public) {
		return false
	}
	return true
}
func (this *Space_Private_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Space_Private_)
	if !ok {
		that2, ok := that.(Space_Private_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Private.Equal(that1.Private) {
		return false
	}
	return true
}
func (this *Space_General) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Space_General)
	if !ok {
		that2, ok := that.(Space_General)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *Space_Public) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Space_Public)
	if !ok {
		that2, ok := that.(Space_Public)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OwnerUserId != that1.OwnerUserId {
		return false
	}
	if this.Shortname != that1.Shortname {
		return false
	}
	return true
}
func (this *Space_Private) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Space_Private)
	if !ok {
		that2, ok := that.(Space_Private)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OwnerUserId != that1.OwnerUserId {
		return false
	}
	return true
}
func (this *SpaceMember) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SpaceMember)
	if !ok {
		that2, ok := that.(SpaceMember)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SpaceId.Equal(that1.SpaceId) {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if !this.InvitedAt.Equal(that1.InvitedAt) {
		return false
	}
	if !this.JoinedAt.Equal(that1.JoinedAt) {
		return false
	}
	if !this.DeletedAt.Equal(that1.DeletedAt) {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *UpdateSpaceModified) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSpaceModified)
	if !ok {
		that2, ok := that.(UpdateSpaceModified)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Space.Equal(that1.Space) {
		return false
	}
	return true
}
func (this *UpdateSpaceMemberModified) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSpaceMemberModified)
	if !ok {
		that2, ok := that.(UpdateSpaceMemberModified)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Member.Equal(that1.Member) {
		return false
	}
	return true
}
func (this *RequestCreateSpace) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestCreateSpace)
	if !ok {
		that2, ok := that.(RequestCreateSpace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if !this.Shortname.Equal(that1.Shortname) {
		return false
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	if !this.Avatar.Equal(that1.Avatar) {
		return false
	}
	return true
}
func (this *ResponseSpace) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseSpace)
	if !ok {
		that2, ok := that.(ResponseSpace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Space.Equal(that1.Space) {
		return false
	}
	return true
}
func (this *ResponseSpaceMember) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseSpaceMember)
	if !ok {
		that2, ok := that.(ResponseSpaceMember)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SpaceId.Equal(that1.SpaceId) {
		return false
	}
	if !this.Member.Equal(that1.Member) {
		return false
	}
	return true
}
func (this *RequestDeleteSpace) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestDeleteSpace)
	if !ok {
		that2, ok := that.(RequestDeleteSpace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *RequestLoadSpaces) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestLoadSpaces)
	if !ok {
		that2, ok := that.(RequestLoadSpaces)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResponseLoadSpaces) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseLoadSpaces)
	if !ok {
		that2, ok := that.(ResponseLoadSpaces)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Space) != len(that1.Space) {
		return false
	}
	for i := range this.Space {
		if !this.Space[i].Equal(that1.Space[i]) {
			return false
		}
	}
	if len(this.OwnerPeers) != len(that1.OwnerPeers) {
		return false
	}
	for i := range this.OwnerPeers {
		if !this.OwnerPeers[i].Equal(that1.OwnerPeers[i]) {
			return false
		}
	}
	return true
}
func (this *RequestStreamSpaceMembers) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestStreamSpaceMembers)
	if !ok {
		that2, ok := that.(RequestStreamSpaceMembers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SpaceId.Equal(that1.SpaceId) {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *SpaceMemberWithPeer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SpaceMemberWithPeer)
	if !ok {
		that2, ok := that.(SpaceMemberWithPeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Member.Equal(that1.Member) {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *RequestSetTitle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSetTitle)
	if !ok {
		that2, ok := that.(RequestSetTitle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *RequestSetShortname) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSetShortname)
	if !ok {
		that2, ok := that.(RequestSetShortname)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.Shortname.Equal(that1.Shortname) {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *RequestSetAbout) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSetAbout)
	if !ok {
		that2, ok := that.(RequestSetAbout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *RequestSetAvatar) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSetAvatar)
	if !ok {
		that2, ok := that.(RequestSetAvatar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.FileLocation.Equal(that1.FileLocation) {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *RequestSpaceInvite) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSpaceInvite)
	if !ok {
		that2, ok := that.(RequestSpaceInvite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *RequestSpaceKick) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSpaceKick)
	if !ok {
		that2, ok := that.(RequestSpaceKick)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *RequestSpaceLeave) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSpaceLeave)
	if !ok {
		that2, ok := that.(RequestSpaceLeave)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *RequestGetSpaceInviteUrl) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestGetSpaceInviteUrl)
	if !ok {
		that2, ok := that.(RequestGetSpaceInviteUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	return true
}
func (this *ResponseSpaceInviteUrl) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseSpaceInviteUrl)
	if !ok {
		that2, ok := that.(ResponseSpaceInviteUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.InviteUrl != that1.InviteUrl {
		return false
	}
	return true
}
func (this *RequestRevokeSpaceInviteUrl) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestRevokeSpaceInviteUrl)
	if !ok {
		that2, ok := that.(RequestRevokeSpaceInviteUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	return true
}
func (this *Space) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&dialog.Space{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.SpaceType != nil {
		s = append(s, "SpaceType: "+fmt.Sprintf("%#v", this.SpaceType)+",\n")
	}
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	if this.Avatar != nil {
		s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	}
	if this.DeletedAt != nil {
		s = append(s, "DeletedAt: "+fmt.Sprintf("%#v", this.DeletedAt)+",\n")
	}
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Space_General_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.Space_General_{` +
		`General:` + fmt.Sprintf("%#v", this.General) + `}`}, ", ")
	return s
}
func (this *Space_Public_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.Space_Public_{` +
		`Public:` + fmt.Sprintf("%#v", this.Public) + `}`}, ", ")
	return s
}
func (this *Space_Private_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.Space_Private_{` +
		`Private:` + fmt.Sprintf("%#v", this.Private) + `}`}, ", ")
	return s
}
func (this *Space_General) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.Space_General{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Space_Public) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.Space_Public{")
	s = append(s, "OwnerUserId: "+fmt.Sprintf("%#v", this.OwnerUserId)+",\n")
	s = append(s, "Shortname: "+fmt.Sprintf("%#v", this.Shortname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Space_Private) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.Space_Private{")
	s = append(s, "OwnerUserId: "+fmt.Sprintf("%#v", this.OwnerUserId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpaceMember) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.SpaceMember{")
	if this.SpaceId != nil {
		s = append(s, "SpaceId: "+fmt.Sprintf("%#v", this.SpaceId)+",\n")
	}
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.InvitedAt != nil {
		s = append(s, "InvitedAt: "+fmt.Sprintf("%#v", this.InvitedAt)+",\n")
	}
	if this.JoinedAt != nil {
		s = append(s, "JoinedAt: "+fmt.Sprintf("%#v", this.JoinedAt)+",\n")
	}
	if this.DeletedAt != nil {
		s = append(s, "DeletedAt: "+fmt.Sprintf("%#v", this.DeletedAt)+",\n")
	}
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSpaceModified) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateSpaceModified{")
	if this.Space != nil {
		s = append(s, "Space: "+fmt.Sprintf("%#v", this.Space)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSpaceMemberModified) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateSpaceMemberModified{")
	if this.Member != nil {
		s = append(s, "Member: "+fmt.Sprintf("%#v", this.Member)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCreateSpace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.RequestCreateSpace{")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.Shortname != nil {
		s = append(s, "Shortname: "+fmt.Sprintf("%#v", this.Shortname)+",\n")
	}
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	if this.Avatar != nil {
		s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSpace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseSpace{")
	if this.Space != nil {
		s = append(s, "Space: "+fmt.Sprintf("%#v", this.Space)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSpaceMember) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseSpaceMember{")
	if this.SpaceId != nil {
		s = append(s, "SpaceId: "+fmt.Sprintf("%#v", this.SpaceId)+",\n")
	}
	if this.Member != nil {
		s = append(s, "Member: "+fmt.Sprintf("%#v", this.Member)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestDeleteSpace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestDeleteSpace{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadSpaces) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestLoadSpaces{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadSpaces) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseLoadSpaces{")
	if this.Space != nil {
		s = append(s, "Space: "+fmt.Sprintf("%#v", this.Space)+",\n")
	}
	if this.OwnerPeers != nil {
		s = append(s, "OwnerPeers: "+fmt.Sprintf("%#v", this.OwnerPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestStreamSpaceMembers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestStreamSpaceMembers{")
	if this.SpaceId != nil {
		s = append(s, "SpaceId: "+fmt.Sprintf("%#v", this.SpaceId)+",\n")
	}
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpaceMemberWithPeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.SpaceMemberWithPeer{")
	if this.Member != nil {
		s = append(s, "Member: "+fmt.Sprintf("%#v", this.Member)+",\n")
	}
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSetTitle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestSetTitle{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSetShortname) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestSetShortname{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Shortname != nil {
		s = append(s, "Shortname: "+fmt.Sprintf("%#v", this.Shortname)+",\n")
	}
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSetAbout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestSetAbout{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSetAvatar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestSetAvatar{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.FileLocation != nil {
		s = append(s, "FileLocation: "+fmt.Sprintf("%#v", this.FileLocation)+",\n")
	}
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSpaceInvite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestSpaceInvite{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSpaceKick) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestSpaceKick{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSpaceLeave) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestSpaceLeave{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetSpaceInviteUrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestGetSpaceInviteUrl{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSpaceInviteUrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseSpaceInviteUrl{")
	s = append(s, "InviteUrl: "+fmt.Sprintf("%#v", this.InviteUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRevokeSpaceInviteUrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestRevokeSpaceInviteUrl{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSpaces(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Spaces service

type SpacesClient interface {
	CreateSpace(ctx context.Context, in *RequestCreateSpace, opts ...grpc.CallOption) (*ResponseSpace, error)
	DeleteSpace(ctx context.Context, in *RequestDeleteSpace, opts ...grpc.CallOption) (*ResponseSpace, error)
	SetTitle(ctx context.Context, in *RequestSetTitle, opts ...grpc.CallOption) (*ResponseSpace, error)
	SetShortname(ctx context.Context, in *RequestSetShortname, opts ...grpc.CallOption) (*ResponseSpace, error)
	SetAbout(ctx context.Context, in *RequestSetAbout, opts ...grpc.CallOption) (*ResponseSpace, error)
	SetAvatar(ctx context.Context, in *RequestSetAvatar, opts ...grpc.CallOption) (*ResponseSpace, error)
	LoadSpaces(ctx context.Context, in *RequestLoadSpaces, opts ...grpc.CallOption) (*ResponseLoadSpaces, error)
	LoadSpaceMembers(ctx context.Context, in *RequestStreamSpaceMembers, opts ...grpc.CallOption) (Spaces_LoadSpaceMembersClient, error)
	Invite(ctx context.Context, in *RequestSpaceInvite, opts ...grpc.CallOption) (*ResponseSpaceMember, error)
	Kick(ctx context.Context, in *RequestSpaceKick, opts ...grpc.CallOption) (*ResponseSpaceMember, error)
	Leave(ctx context.Context, in *RequestSpaceLeave, opts ...grpc.CallOption) (*ResponseSpaceMember, error)
	GetSpaceInviteUrl(ctx context.Context, in *RequestGetSpaceInviteUrl, opts ...grpc.CallOption) (*ResponseSpaceInviteUrl, error)
	RevokeSpaceInviteUrl(ctx context.Context, in *RequestRevokeSpaceInviteUrl, opts ...grpc.CallOption) (*ResponseSpaceInviteUrl, error)
}

type spacesClient struct {
	cc *grpc.ClientConn
}

func NewSpacesClient(cc *grpc.ClientConn) SpacesClient {
	return &spacesClient{cc}
}

func (c *spacesClient) CreateSpace(ctx context.Context, in *RequestCreateSpace, opts ...grpc.CallOption) (*ResponseSpace, error) {
	out := new(ResponseSpace)
	err := grpc.Invoke(ctx, "/dialog.Spaces/CreateSpace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) DeleteSpace(ctx context.Context, in *RequestDeleteSpace, opts ...grpc.CallOption) (*ResponseSpace, error) {
	out := new(ResponseSpace)
	err := grpc.Invoke(ctx, "/dialog.Spaces/DeleteSpace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) SetTitle(ctx context.Context, in *RequestSetTitle, opts ...grpc.CallOption) (*ResponseSpace, error) {
	out := new(ResponseSpace)
	err := grpc.Invoke(ctx, "/dialog.Spaces/SetTitle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) SetShortname(ctx context.Context, in *RequestSetShortname, opts ...grpc.CallOption) (*ResponseSpace, error) {
	out := new(ResponseSpace)
	err := grpc.Invoke(ctx, "/dialog.Spaces/SetShortname", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) SetAbout(ctx context.Context, in *RequestSetAbout, opts ...grpc.CallOption) (*ResponseSpace, error) {
	out := new(ResponseSpace)
	err := grpc.Invoke(ctx, "/dialog.Spaces/SetAbout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) SetAvatar(ctx context.Context, in *RequestSetAvatar, opts ...grpc.CallOption) (*ResponseSpace, error) {
	out := new(ResponseSpace)
	err := grpc.Invoke(ctx, "/dialog.Spaces/SetAvatar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) LoadSpaces(ctx context.Context, in *RequestLoadSpaces, opts ...grpc.CallOption) (*ResponseLoadSpaces, error) {
	out := new(ResponseLoadSpaces)
	err := grpc.Invoke(ctx, "/dialog.Spaces/LoadSpaces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) LoadSpaceMembers(ctx context.Context, in *RequestStreamSpaceMembers, opts ...grpc.CallOption) (Spaces_LoadSpaceMembersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Spaces_serviceDesc.Streams[0], c.cc, "/dialog.Spaces/LoadSpaceMembers", opts...)
	if err != nil {
		return nil, err
	}
	x := &spacesLoadSpaceMembersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Spaces_LoadSpaceMembersClient interface {
	Recv() (*SpaceMemberWithPeer, error)
	grpc.ClientStream
}

type spacesLoadSpaceMembersClient struct {
	grpc.ClientStream
}

func (x *spacesLoadSpaceMembersClient) Recv() (*SpaceMemberWithPeer, error) {
	m := new(SpaceMemberWithPeer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *spacesClient) Invite(ctx context.Context, in *RequestSpaceInvite, opts ...grpc.CallOption) (*ResponseSpaceMember, error) {
	out := new(ResponseSpaceMember)
	err := grpc.Invoke(ctx, "/dialog.Spaces/Invite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) Kick(ctx context.Context, in *RequestSpaceKick, opts ...grpc.CallOption) (*ResponseSpaceMember, error) {
	out := new(ResponseSpaceMember)
	err := grpc.Invoke(ctx, "/dialog.Spaces/Kick", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) Leave(ctx context.Context, in *RequestSpaceLeave, opts ...grpc.CallOption) (*ResponseSpaceMember, error) {
	out := new(ResponseSpaceMember)
	err := grpc.Invoke(ctx, "/dialog.Spaces/Leave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) GetSpaceInviteUrl(ctx context.Context, in *RequestGetSpaceInviteUrl, opts ...grpc.CallOption) (*ResponseSpaceInviteUrl, error) {
	out := new(ResponseSpaceInviteUrl)
	err := grpc.Invoke(ctx, "/dialog.Spaces/GetSpaceInviteUrl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) RevokeSpaceInviteUrl(ctx context.Context, in *RequestRevokeSpaceInviteUrl, opts ...grpc.CallOption) (*ResponseSpaceInviteUrl, error) {
	out := new(ResponseSpaceInviteUrl)
	err := grpc.Invoke(ctx, "/dialog.Spaces/RevokeSpaceInviteUrl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Spaces service

type SpacesServer interface {
	CreateSpace(context.Context, *RequestCreateSpace) (*ResponseSpace, error)
	DeleteSpace(context.Context, *RequestDeleteSpace) (*ResponseSpace, error)
	SetTitle(context.Context, *RequestSetTitle) (*ResponseSpace, error)
	SetShortname(context.Context, *RequestSetShortname) (*ResponseSpace, error)
	SetAbout(context.Context, *RequestSetAbout) (*ResponseSpace, error)
	SetAvatar(context.Context, *RequestSetAvatar) (*ResponseSpace, error)
	LoadSpaces(context.Context, *RequestLoadSpaces) (*ResponseLoadSpaces, error)
	LoadSpaceMembers(*RequestStreamSpaceMembers, Spaces_LoadSpaceMembersServer) error
	Invite(context.Context, *RequestSpaceInvite) (*ResponseSpaceMember, error)
	Kick(context.Context, *RequestSpaceKick) (*ResponseSpaceMember, error)
	Leave(context.Context, *RequestSpaceLeave) (*ResponseSpaceMember, error)
	GetSpaceInviteUrl(context.Context, *RequestGetSpaceInviteUrl) (*ResponseSpaceInviteUrl, error)
	RevokeSpaceInviteUrl(context.Context, *RequestRevokeSpaceInviteUrl) (*ResponseSpaceInviteUrl, error)
}

func RegisterSpacesServer(s *grpc.Server, srv SpacesServer) {
	s.RegisterService(&_Spaces_serviceDesc, srv)
}

func _Spaces_CreateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreateSpace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).CreateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/CreateSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).CreateSpace(ctx, req.(*RequestCreateSpace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_DeleteSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteSpace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).DeleteSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/DeleteSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).DeleteSpace(ctx, req.(*RequestDeleteSpace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_SetTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).SetTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/SetTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).SetTitle(ctx, req.(*RequestSetTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_SetShortname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetShortname)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).SetShortname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/SetShortname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).SetShortname(ctx, req.(*RequestSetShortname))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_SetAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).SetAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/SetAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).SetAbout(ctx, req.(*RequestSetAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_SetAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).SetAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/SetAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).SetAvatar(ctx, req.(*RequestSetAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_LoadSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadSpaces)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).LoadSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/LoadSpaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).LoadSpaces(ctx, req.(*RequestLoadSpaces))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_LoadSpaceMembers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestStreamSpaceMembers)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpacesServer).LoadSpaceMembers(m, &spacesLoadSpaceMembersServer{stream})
}

type Spaces_LoadSpaceMembersServer interface {
	Send(*SpaceMemberWithPeer) error
	grpc.ServerStream
}

type spacesLoadSpaceMembersServer struct {
	grpc.ServerStream
}

func (x *spacesLoadSpaceMembersServer) Send(m *SpaceMemberWithPeer) error {
	return x.ServerStream.SendMsg(m)
}

func _Spaces_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSpaceInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).Invite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/Invite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).Invite(ctx, req.(*RequestSpaceInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_Kick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSpaceKick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).Kick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/Kick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).Kick(ctx, req.(*RequestSpaceKick))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSpaceLeave)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).Leave(ctx, req.(*RequestSpaceLeave))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_GetSpaceInviteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetSpaceInviteUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).GetSpaceInviteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/GetSpaceInviteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).GetSpaceInviteUrl(ctx, req.(*RequestGetSpaceInviteUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_RevokeSpaceInviteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRevokeSpaceInviteUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).RevokeSpaceInviteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/RevokeSpaceInviteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).RevokeSpaceInviteUrl(ctx, req.(*RequestRevokeSpaceInviteUrl))
	}
	return interceptor(ctx, in, info, handler)
}

var _Spaces_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Spaces",
	HandlerType: (*SpacesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpace",
			Handler:    _Spaces_CreateSpace_Handler,
		},
		{
			MethodName: "DeleteSpace",
			Handler:    _Spaces_DeleteSpace_Handler,
		},
		{
			MethodName: "SetTitle",
			Handler:    _Spaces_SetTitle_Handler,
		},
		{
			MethodName: "SetShortname",
			Handler:    _Spaces_SetShortname_Handler,
		},
		{
			MethodName: "SetAbout",
			Handler:    _Spaces_SetAbout_Handler,
		},
		{
			MethodName: "SetAvatar",
			Handler:    _Spaces_SetAvatar_Handler,
		},
		{
			MethodName: "LoadSpaces",
			Handler:    _Spaces_LoadSpaces_Handler,
		},
		{
			MethodName: "Invite",
			Handler:    _Spaces_Invite_Handler,
		},
		{
			MethodName: "Kick",
			Handler:    _Spaces_Kick_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Spaces_Leave_Handler,
		},
		{
			MethodName: "GetSpaceInviteUrl",
			Handler:    _Spaces_GetSpaceInviteUrl_Handler,
		},
		{
			MethodName: "RevokeSpaceInviteUrl",
			Handler:    _Spaces_RevokeSpaceInviteUrl_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoadSpaceMembers",
			Handler:       _Spaces_LoadSpaceMembers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spaces.proto",
}

func (m *Space) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Space) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Id.Size()))
		n1, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.CreatedAt != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.CreatedAt.Size()))
		n2, err := m.CreatedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.SpaceType != nil {
		nn3, err := m.SpaceType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.About != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.About.Size()))
		n4, err := m.About.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Avatar != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Avatar.Size()))
		n5, err := m.Avatar.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.DeletedAt != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.DeletedAt.Size()))
		n6, err := m.DeletedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Clock != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Clock.Size()))
		n7, err := m.Clock.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *Space_General_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.General != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.General.Size()))
		n8, err := m.General.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Space_Public_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Public != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Public.Size()))
		n9, err := m.Public.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Space_Private_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Private != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Private.Size()))
		n10, err := m.Private.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Space_General) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Space_General) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Space_Public) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Space_Public) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OwnerUserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.OwnerUserId))
	}
	if len(m.Shortname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(len(m.Shortname)))
		i += copy(dAtA[i:], m.Shortname)
	}
	return i, nil
}

func (m *Space_Private) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Space_Private) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OwnerUserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.OwnerUserId))
	}
	return i, nil
}

func (m *SpaceMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpaceMember) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SpaceId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.SpaceId.Size()))
		n11, err := m.SpaceId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.UserId))
	}
	if m.InvitedAt != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.InvitedAt.Size()))
		n12, err := m.InvitedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.JoinedAt != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.JoinedAt.Size()))
		n13, err := m.JoinedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.DeletedAt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.DeletedAt.Size()))
		n14, err := m.DeletedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Clock != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Clock.Size()))
		n15, err := m.Clock.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *UpdateSpaceModified) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSpaceModified) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Space != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Space.Size()))
		n16, err := m.Space.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *UpdateSpaceMemberModified) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSpaceMemberModified) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Member != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Member.Size()))
		n17, err := m.Member.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *RequestCreateSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCreateSpace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.RequestId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Shortname != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Shortname.Size()))
		n18, err := m.Shortname.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.About != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.About.Size()))
		n19, err := m.About.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.Avatar != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Avatar.Size()))
		n20, err := m.Avatar.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *ResponseSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSpace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Space != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Space.Size()))
		n21, err := m.Space.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *ResponseSpaceMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSpaceMember) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SpaceId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.SpaceId.Size()))
		n22, err := m.SpaceId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.Member != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Member.Size()))
		n23, err := m.Member.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *RequestDeleteSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDeleteSpace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Id.Size()))
		n24, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.Clock != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Clock.Size()))
		n25, err := m.Clock.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *RequestLoadSpaces) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadSpaces) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResponseLoadSpaces) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadSpaces) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Space) > 0 {
		for _, msg := range m.Space {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSpaces(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OwnerPeers) > 0 {
		for _, msg := range m.OwnerPeers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSpaces(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestStreamSpaceMembers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStreamSpaceMembers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SpaceId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.SpaceId.Size()))
		n26, err := m.SpaceId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.Clock != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Clock.Size()))
		n27, err := m.Clock.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *SpaceMemberWithPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpaceMemberWithPeer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Member != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Member.Size()))
		n28, err := m.Member.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.Peer != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Peer.Size()))
		n29, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *RequestSetTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSetTitle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Id.Size()))
		n30, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Clock != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Clock.Size()))
		n31, err := m.Clock.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *RequestSetShortname) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSetShortname) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Id.Size()))
		n32, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.Shortname != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Shortname.Size()))
		n33, err := m.Shortname.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.Clock != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Clock.Size()))
		n34, err := m.Clock.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *RequestSetAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSetAbout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Id.Size()))
		n35, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.About != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.About.Size()))
		n36, err := m.About.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if m.Clock != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Clock.Size()))
		n37, err := m.Clock.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}

func (m *RequestSetAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSetAvatar) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Id.Size()))
		n38, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if m.FileLocation != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.FileLocation.Size()))
		n39, err := m.FileLocation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	if m.Clock != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Clock.Size()))
		n40, err := m.Clock.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}

func (m *RequestSpaceInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSpaceInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Id.Size()))
		n41, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.UserId))
	}
	if m.Clock != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Clock.Size()))
		n42, err := m.Clock.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}

func (m *RequestSpaceKick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSpaceKick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Id.Size()))
		n43, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.UserId))
	}
	if m.Clock != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Clock.Size()))
		n44, err := m.Clock.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}

func (m *RequestSpaceLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSpaceLeave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Id.Size()))
		n45, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.UserId))
	}
	if m.Clock != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Clock.Size()))
		n46, err := m.Clock.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}

func (m *RequestGetSpaceInviteUrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetSpaceInviteUrl) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Id.Size()))
		n47, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}

func (m *ResponseSpaceInviteUrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSpaceInviteUrl) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InviteUrl) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(len(m.InviteUrl)))
		i += copy(dAtA[i:], m.InviteUrl)
	}
	return i, nil
}

func (m *RequestRevokeSpaceInviteUrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRevokeSpaceInviteUrl) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpaces(dAtA, i, uint64(m.Id.Size()))
		n48, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}

func encodeFixed64Spaces(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Spaces(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSpaces(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Space) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.SpaceType != nil {
		n += m.SpaceType.Size()
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.DeletedAt != nil {
		l = m.DeletedAt.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *Space_General_) Size() (n int) {
	var l int
	_ = l
	if m.General != nil {
		l = m.General.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}
func (m *Space_Public_) Size() (n int) {
	var l int
	_ = l
	if m.Public != nil {
		l = m.Public.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}
func (m *Space_Private_) Size() (n int) {
	var l int
	_ = l
	if m.Private != nil {
		l = m.Private.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}
func (m *Space_General) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Space_Public) Size() (n int) {
	var l int
	_ = l
	if m.OwnerUserId != 0 {
		n += 1 + sovSpaces(uint64(m.OwnerUserId))
	}
	l = len(m.Shortname)
	if l > 0 {
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *Space_Private) Size() (n int) {
	var l int
	_ = l
	if m.OwnerUserId != 0 {
		n += 1 + sovSpaces(uint64(m.OwnerUserId))
	}
	return n
}

func (m *SpaceMember) Size() (n int) {
	var l int
	_ = l
	if m.SpaceId != nil {
		l = m.SpaceId.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovSpaces(uint64(m.UserId))
	}
	if m.InvitedAt != nil {
		l = m.InvitedAt.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.JoinedAt != nil {
		l = m.JoinedAt.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.DeletedAt != nil {
		l = m.DeletedAt.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *UpdateSpaceModified) Size() (n int) {
	var l int
	_ = l
	if m.Space != nil {
		l = m.Space.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *UpdateSpaceMemberModified) Size() (n int) {
	var l int
	_ = l
	if m.Member != nil {
		l = m.Member.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestCreateSpace) Size() (n int) {
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovSpaces(uint64(m.RequestId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Shortname != nil {
		l = m.Shortname.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *ResponseSpace) Size() (n int) {
	var l int
	_ = l
	if m.Space != nil {
		l = m.Space.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *ResponseSpaceMember) Size() (n int) {
	var l int
	_ = l
	if m.SpaceId != nil {
		l = m.SpaceId.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Member != nil {
		l = m.Member.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestDeleteSpace) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestLoadSpaces) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ResponseLoadSpaces) Size() (n int) {
	var l int
	_ = l
	if len(m.Space) > 0 {
		for _, e := range m.Space {
			l = e.Size()
			n += 1 + l + sovSpaces(uint64(l))
		}
	}
	if len(m.OwnerPeers) > 0 {
		for _, e := range m.OwnerPeers {
			l = e.Size()
			n += 1 + l + sovSpaces(uint64(l))
		}
	}
	return n
}

func (m *RequestStreamSpaceMembers) Size() (n int) {
	var l int
	_ = l
	if m.SpaceId != nil {
		l = m.SpaceId.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *SpaceMemberWithPeer) Size() (n int) {
	var l int
	_ = l
	if m.Member != nil {
		l = m.Member.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestSetTitle) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestSetShortname) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Shortname != nil {
		l = m.Shortname.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestSetAbout) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestSetAvatar) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.FileLocation != nil {
		l = m.FileLocation.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestSpaceInvite) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovSpaces(uint64(m.UserId))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestSpaceKick) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovSpaces(uint64(m.UserId))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestSpaceLeave) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovSpaces(uint64(m.UserId))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestGetSpaceInviteUrl) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *ResponseSpaceInviteUrl) Size() (n int) {
	var l int
	_ = l
	l = len(m.InviteUrl)
	if l > 0 {
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestRevokeSpaceInviteUrl) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func sovSpaces(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSpaces(x uint64) (n int) {
	return sovSpaces(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Space) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Space{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "google_protobuf3.Timestamp", 1) + `,`,
		`SpaceType:` + fmt.Sprintf("%v", this.SpaceType) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Avatar:` + strings.Replace(fmt.Sprintf("%v", this.Avatar), "Avatar", "Avatar", 1) + `,`,
		`DeletedAt:` + strings.Replace(fmt.Sprintf("%v", this.DeletedAt), "Timestamp", "google_protobuf3.Timestamp", 1) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Space_General_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Space_General_{`,
		`General:` + strings.Replace(fmt.Sprintf("%v", this.General), "Space_General", "Space_General", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Space_Public_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Space_Public_{`,
		`Public:` + strings.Replace(fmt.Sprintf("%v", this.Public), "Space_Public", "Space_Public", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Space_Private_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Space_Private_{`,
		`Private:` + strings.Replace(fmt.Sprintf("%v", this.Private), "Space_Private", "Space_Private", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Space_General) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Space_General{`,
		`}`,
	}, "")
	return s
}
func (this *Space_Public) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Space_Public{`,
		`OwnerUserId:` + fmt.Sprintf("%v", this.OwnerUserId) + `,`,
		`Shortname:` + fmt.Sprintf("%v", this.Shortname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Space_Private) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Space_Private{`,
		`OwnerUserId:` + fmt.Sprintf("%v", this.OwnerUserId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpaceMember) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpaceMember{`,
		`SpaceId:` + strings.Replace(fmt.Sprintf("%v", this.SpaceId), "UUIDValue", "UUIDValue", 1) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`InvitedAt:` + strings.Replace(fmt.Sprintf("%v", this.InvitedAt), "Timestamp", "google_protobuf3.Timestamp", 1) + `,`,
		`JoinedAt:` + strings.Replace(fmt.Sprintf("%v", this.JoinedAt), "Timestamp", "google_protobuf3.Timestamp", 1) + `,`,
		`DeletedAt:` + strings.Replace(fmt.Sprintf("%v", this.DeletedAt), "Timestamp", "google_protobuf3.Timestamp", 1) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSpaceModified) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSpaceModified{`,
		`Space:` + strings.Replace(fmt.Sprintf("%v", this.Space), "Space", "Space", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSpaceMemberModified) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSpaceMemberModified{`,
		`Member:` + strings.Replace(fmt.Sprintf("%v", this.Member), "SpaceMember", "SpaceMember", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCreateSpace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCreateSpace{`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Shortname:` + strings.Replace(fmt.Sprintf("%v", this.Shortname), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Avatar:` + strings.Replace(fmt.Sprintf("%v", this.Avatar), "Avatar", "Avatar", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSpace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseSpace{`,
		`Space:` + strings.Replace(fmt.Sprintf("%v", this.Space), "Space", "Space", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSpaceMember) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseSpaceMember{`,
		`SpaceId:` + strings.Replace(fmt.Sprintf("%v", this.SpaceId), "UUIDValue", "UUIDValue", 1) + `,`,
		`Member:` + strings.Replace(fmt.Sprintf("%v", this.Member), "SpaceMember", "SpaceMember", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestDeleteSpace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestDeleteSpace{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadSpaces) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadSpaces{`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadSpaces) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseLoadSpaces{`,
		`Space:` + strings.Replace(fmt.Sprintf("%v", this.Space), "Space", "Space", 1) + `,`,
		`OwnerPeers:` + strings.Replace(fmt.Sprintf("%v", this.OwnerPeers), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestStreamSpaceMembers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestStreamSpaceMembers{`,
		`SpaceId:` + strings.Replace(fmt.Sprintf("%v", this.SpaceId), "UUIDValue", "UUIDValue", 1) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpaceMemberWithPeer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpaceMemberWithPeer{`,
		`Member:` + strings.Replace(fmt.Sprintf("%v", this.Member), "SpaceMember", "SpaceMember", 1) + `,`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSetTitle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSetTitle{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSetShortname) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSetShortname{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`Shortname:` + strings.Replace(fmt.Sprintf("%v", this.Shortname), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSetAbout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSetAbout{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSetAvatar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSetAvatar{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`FileLocation:` + strings.Replace(fmt.Sprintf("%v", this.FileLocation), "FileLocation", "FileLocation", 1) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSpaceInvite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSpaceInvite{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSpaceKick) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSpaceKick{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSpaceLeave) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSpaceLeave{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetSpaceInviteUrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetSpaceInviteUrl{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSpaceInviteUrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseSpaceInviteUrl{`,
		`InviteUrl:` + fmt.Sprintf("%v", this.InviteUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRevokeSpaceInviteUrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRevokeSpaceInviteUrl{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSpaces(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Space) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Space: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Space: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &google_protobuf3.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field General", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Space_General{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SpaceType = &Space_General_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Public", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Space_Public{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SpaceType = &Space_Public_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Private", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Space_Private{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SpaceType = &Space_Private_{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &google_protobuf.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = &google_protobuf3.Timestamp{}
			}
			if err := m.DeletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Space_General) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: General: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: General: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Space_Public) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Public: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Public: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerUserId", wireType)
			}
			m.OwnerUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shortname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shortname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Space_Private) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Private: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Private: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerUserId", wireType)
			}
			m.OwnerUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpaceMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpaceMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpaceMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpaceId == nil {
				m.SpaceId = &UUIDValue{}
			}
			if err := m.SpaceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InvitedAt == nil {
				m.InvitedAt = &google_protobuf3.Timestamp{}
			}
			if err := m.InvitedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JoinedAt == nil {
				m.JoinedAt = &google_protobuf3.Timestamp{}
			}
			if err := m.JoinedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = &google_protobuf3.Timestamp{}
			}
			if err := m.DeletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSpaceModified) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSpaceModified: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSpaceModified: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Space == nil {
				m.Space = &Space{}
			}
			if err := m.Space.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSpaceMemberModified) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSpaceMemberModified: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSpaceMemberModified: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Member == nil {
				m.Member = &SpaceMember{}
			}
			if err := m.Member.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCreateSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCreateSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCreateSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shortname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shortname == nil {
				m.Shortname = &google_protobuf.StringValue{}
			}
			if err := m.Shortname.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &google_protobuf.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Space == nil {
				m.Space = &Space{}
			}
			if err := m.Space.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSpaceMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSpaceMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSpaceMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpaceId == nil {
				m.SpaceId = &UUIDValue{}
			}
			if err := m.SpaceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Member == nil {
				m.Member = &SpaceMember{}
			}
			if err := m.Member.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDeleteSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDeleteSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDeleteSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadSpaces) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadSpaces: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadSpaces: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadSpaces) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadSpaces: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadSpaces: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Space = append(m.Space, &Space{})
			if err := m.Space[len(m.Space)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerPeers = append(m.OwnerPeers, &UserOutPeer{})
			if err := m.OwnerPeers[len(m.OwnerPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestStreamSpaceMembers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStreamSpaceMembers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStreamSpaceMembers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpaceId == nil {
				m.SpaceId = &UUIDValue{}
			}
			if err := m.SpaceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpaceMemberWithPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpaceMemberWithPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpaceMemberWithPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Member == nil {
				m.Member = &SpaceMember{}
			}
			if err := m.Member.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &UserOutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSetTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSetTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSetTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSetShortname) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSetShortname: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSetShortname: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shortname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shortname == nil {
				m.Shortname = &google_protobuf.StringValue{}
			}
			if err := m.Shortname.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSetAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSetAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSetAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &google_protobuf.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSetAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSetAvatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSetAvatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileLocation == nil {
				m.FileLocation = &FileLocation{}
			}
			if err := m.FileLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSpaceInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSpaceInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSpaceInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSpaceKick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSpaceKick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSpaceKick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSpaceLeave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSpaceLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSpaceLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetSpaceInviteUrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetSpaceInviteUrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetSpaceInviteUrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSpaceInviteUrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSpaceInviteUrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSpaceInviteUrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRevokeSpaceInviteUrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRevokeSpaceInviteUrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRevokeSpaceInviteUrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpaces(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSpaces
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSpaces
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSpaces(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSpaces = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpaces   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("spaces.proto", fileDescriptorSpaces) }

var fileDescriptorSpaces = []byte{
	// 1286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x56, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0xfa, 0x67, 0xfc, 0x92, 0x7c, 0xbf, 0xcd, 0x26, 0x6d, 0x37, 0x9b, 0x74, 0x69, 0xb7,
	0x12, 0xad, 0x04, 0x38, 0xb4, 0x20, 0xa1, 0x46, 0x88, 0xc8, 0x6d, 0x4a, 0x13, 0x08, 0x22, 0xda,
	0xd4, 0xe9, 0x01, 0x81, 0x35, 0xf6, 0x4e, 0xdc, 0x21, 0xeb, 0xdd, 0x65, 0x77, 0xec, 0x8a, 0x0b,
	0xe2, 0x2f, 0x80, 0x72, 0x00, 0xfe, 0x05, 0x0e, 0x48, 0x48, 0x5c, 0x38, 0xf0, 0x0f, 0x70, 0xec,
	0x91, 0x23, 0x31, 0x42, 0xe2, 0xd8, 0xff, 0x00, 0xb4, 0x33, 0xb3, 0x3f, 0xbc, 0xb6, 0xb3, 0x4e,
	0xf0, 0xa1, 0x27, 0x7b, 0xe7, 0xbd, 0xf7, 0x99, 0xcf, 0x7c, 0xde, 0xbc, 0x37, 0x0f, 0x16, 0x7c,
	0x17, 0xb5, 0xb1, 0x5f, 0x73, 0x3d, 0x87, 0x3a, 0x72, 0xd9, 0x24, 0xc8, 0x72, 0x3a, 0xaa, 0xd6,
	0x71, 0x9c, 0x8e, 0x85, 0x37, 0xd8, 0x6a, 0xab, 0x77, 0xb4, 0xf1, 0xc4, 0x43, 0xae, 0x8b, 0x3d,
	0xe1, 0xa7, 0xbe, 0x94, 0xb6, 0x53, 0xd2, 0xc5, 0x3e, 0x45, 0x5d, 0x57, 0x38, 0xac, 0x0b, 0x07,
	0xe4, 0x92, 0x0d, 0x64, 0xdb, 0x0e, 0x45, 0x94, 0x38, 0x76, 0x18, 0xbe, 0x64, 0xe2, 0x23, 0x62,
	0x93, 0xe4, 0xd2, 0xbc, 0x8b, 0x63, 0xf8, 0x8b, 0x5d, 0x6c, 0x12, 0xd4, 0x44, 0xb6, 0xd9, 0x3c,
	0x22, 0x16, 0x8e, 0x96, 0xfd, 0x36, 0xb2, 0x90, 0xdb, 0xda, 0x10, 0xbf, 0x7c, 0x59, 0xff, 0xab,
	0x08, 0xa5, 0x83, 0xe0, 0x14, 0xf2, 0x35, 0xc8, 0x13, 0x53, 0x91, 0xae, 0x4a, 0x37, 0xe7, 0x6f,
	0x2f, 0xd5, 0xf8, 0x59, 0x6a, 0x8d, 0xc6, 0xee, 0xf6, 0x21, 0xb2, 0x7a, 0xd8, 0xc8, 0x13, 0x53,
	0xbe, 0x03, 0xd0, 0xf6, 0x30, 0xa2, 0xd8, 0x6c, 0x22, 0xaa, 0xe4, 0x99, 0xab, 0x5a, 0xe3, 0x6c,
	0x6b, 0xe1, 0x71, 0x6a, 0x0f, 0xc3, 0xe3, 0x18, 0x55, 0xe1, 0x5d, 0xa7, 0xf2, 0x2d, 0xa8, 0x74,
	0xb0, 0x8d, 0x3d, 0x64, 0x29, 0x05, 0x16, 0x77, 0x31, 0xdc, 0x82, 0xed, 0x5e, 0x7b, 0xc0, 0x8d,
	0x3b, 0x39, 0x23, 0xf4, 0x93, 0x6b, 0x50, 0x76, 0x7b, 0x2d, 0x8b, 0xb4, 0x95, 0x22, 0x8b, 0x58,
	0x19, 0x8e, 0xd8, 0x67, 0xb6, 0x9d, 0x9c, 0x21, 0xbc, 0x82, 0x2d, 0x5c, 0x8f, 0xf4, 0x11, 0xc5,
	0x4a, 0x69, 0xdc, 0x16, 0xfb, 0xdc, 0x18, 0x6c, 0x21, 0xfc, 0xe4, 0x15, 0x28, 0x51, 0x42, 0x2d,
	0xac, 0x94, 0xaf, 0x4a, 0x37, 0xab, 0x06, 0xff, 0x90, 0x6f, 0x43, 0x09, 0xb5, 0x9c, 0x1e, 0x55,
	0x2a, 0x0c, 0x66, 0x7d, 0xe4, 0x84, 0x07, 0xd4, 0x23, 0x76, 0x87, 0xeb, 0xc2, 0x5d, 0xe5, 0x97,
	0xa1, 0x8c, 0xfa, 0x88, 0x22, 0x4f, 0x99, 0x63, 0x41, 0xff, 0x0b, 0xf7, 0xae, 0xb3, 0x55, 0x43,
	0x58, 0x03, 0x09, 0x4d, 0x6c, 0x61, 0x21, 0x61, 0x35, 0x5b, 0x42, 0xe1, 0x5d, 0xa7, 0xf2, 0x0d,
	0x28, 0xb5, 0x2d, 0xa7, 0x7d, 0xac, 0xc0, 0x70, 0x8e, 0xb6, 0x11, 0x45, 0xf7, 0x02, 0x83, 0xc1,
	0xed, 0x6a, 0x15, 0x2a, 0x42, 0x4e, 0xf5, 0x3d, 0x28, 0x73, 0x9d, 0x64, 0x1d, 0x16, 0x9d, 0x27,
	0x36, 0xf6, 0x9a, 0x3d, 0x1f, 0x7b, 0x4d, 0x91, 0xe9, 0x92, 0x31, 0xcf, 0x16, 0x1b, 0x3e, 0xf6,
	0x76, 0x4d, 0x79, 0x1d, 0xaa, 0xfe, 0x63, 0xc7, 0xa3, 0x36, 0xea, 0x62, 0x96, 0xde, 0xaa, 0x11,
	0x2f, 0xa8, 0xaf, 0x41, 0x45, 0x48, 0x38, 0x0d, 0xd8, 0xdd, 0x05, 0x00, 0x56, 0x1e, 0x4d, 0xfa,
	0xb9, 0x8b, 0xf5, 0x1f, 0xf3, 0x30, 0xcf, 0xd2, 0xf0, 0x01, 0xee, 0xb6, 0xb0, 0x27, 0xbf, 0x0a,
	0x73, 0xdc, 0x7a, 0xda, 0x9d, 0xab, 0x30, 0x97, 0x5d, 0x53, 0xbe, 0x0c, 0x95, 0x70, 0xa7, 0x3c,
	0xdb, 0xa9, 0xdc, 0xe3, 0x8c, 0xef, 0x00, 0x10, 0xbb, 0x4f, 0x84, 0x9c, 0x85, 0x6c, 0x39, 0x85,
	0x77, 0x9d, 0xca, 0x6f, 0x41, 0xf5, 0x53, 0x87, 0xd8, 0x3c, 0xb2, 0x98, 0x19, 0x39, 0xc7, 0x9d,
	0xeb, 0x34, 0x95, 0xc2, 0xd2, 0xb9, 0x52, 0x58, 0x3e, 0x3d, 0x85, 0xfa, 0x26, 0x2c, 0x37, 0x5c,
	0x13, 0x51, 0xcc, 0x35, 0x73, 0x4c, 0x72, 0x44, 0xb0, 0x29, 0x5f, 0x87, 0x12, 0x93, 0x44, 0x48,
	0xb6, 0x38, 0x74, 0xc1, 0x0d, 0x6e, 0xd3, 0x77, 0x60, 0x35, 0x19, 0xcb, 0xf4, 0x8e, 0x10, 0x5e,
	0x81, 0x72, 0x97, 0xad, 0x08, 0x88, 0xe5, 0x21, 0x08, 0xee, 0x6c, 0x08, 0x17, 0xfd, 0x1f, 0x09,
	0x64, 0x03, 0x7f, 0xd6, 0xc3, 0x3e, 0xbd, 0xc7, 0x2a, 0x99, 0x77, 0x8a, 0x2b, 0x00, 0x1e, 0x5f,
	0x0d, 0xb3, 0x57, 0x30, 0xaa, 0x62, 0x65, 0xd7, 0x8c, 0x8b, 0x2a, 0x9f, 0x2c, 0xaa, 0xcd, 0xe4,
	0xdd, 0x2a, 0x4c, 0x51, 0x58, 0xb1, 0x7b, 0x5c, 0x90, 0xc5, 0xf3, 0x14, 0x64, 0xe9, 0xb4, 0x82,
	0xdc, 0x5c, 0x1f, 0x6c, 0xad, 0xc2, 0x65, 0xd2, 0xad, 0x99, 0x56, 0xa7, 0xd6, 0xf1, 0xdc, 0x76,
	0xed, 0x81, 0xe7, 0xb6, 0xc5, 0xa9, 0xf5, 0x03, 0x58, 0x34, 0xb0, 0xef, 0x3a, 0xb6, 0x2f, 0xce,
	0x3e, 0x4d, 0x06, 0x36, 0xaf, 0x0c, 0xb6, 0x54, 0x50, 0x46, 0x31, 0x39, 0x90, 0xfe, 0xb5, 0x04,
	0xcb, 0x43, 0xa8, 0xe7, 0xaa, 0x89, 0x38, 0x93, 0xf9, 0xcc, 0x4c, 0x66, 0x31, 0xfa, 0x22, 0xca,
	0xf3, 0x36, 0xbb, 0xab, 0x53, 0xbf, 0x08, 0xd1, 0x85, 0xce, 0x9f, 0x7e, 0xa1, 0x33, 0x64, 0xbe,
	0x05, 0x4b, 0xe2, 0xef, 0x9e, 0x83, 0x4c, 0xb6, 0xbb, 0x9f, 0x11, 0xf2, 0x15, 0xbb, 0x9b, 0x9c,
	0x7f, 0x1c, 0x94, 0xcc, 0x4f, 0x61, 0x52, 0x7e, 0xe4, 0x37, 0x81, 0x77, 0xaa, 0x26, 0x7b, 0x37,
	0x95, 0x3c, 0x73, 0x8d, 0xf4, 0x0b, 0xfa, 0xd7, 0x87, 0x3d, 0xba, 0x8f, 0xb1, 0x67, 0x00, 0xf3,
	0x0b, 0xfe, 0xfa, 0x59, 0x1a, 0x3e, 0x95, 0x60, 0x55, 0x90, 0x3b, 0xa0, 0x1e, 0x46, 0xdd, 0x44,
	0x1e, 0xfc, 0x33, 0xe6, 0x76, 0x46, 0xb2, 0x1e, 0xc3, 0x72, 0x82, 0xc4, 0x23, 0x42, 0x1f, 0x07,
	0x27, 0x39, 0x53, 0x0f, 0x90, 0x6f, 0x40, 0x31, 0x50, 0x29, 0x7d, 0xc9, 0x92, 0x22, 0x31, 0x07,
	0xfd, 0x1b, 0x09, 0xfe, 0x1f, 0x9e, 0x1f, 0xd3, 0x87, 0xac, 0xe8, 0xa7, 0xb8, 0x41, 0xe3, 0xbb,
	0x45, 0x24, 0x40, 0xe1, 0x3f, 0x09, 0xf0, 0x2b, 0xab, 0xb4, 0x90, 0xd3, 0x41, 0xd4, 0x50, 0xa6,
	0xe0, 0xb5, 0x99, 0x7e, 0x0b, 0xcf, 0xd0, 0xaf, 0x66, 0xc4, 0xfe, 0xa7, 0x21, 0x45, 0xeb, 0xac,
	0xad, 0x4d, 0xc1, 0x3c, 0xea, 0x96, 0xf9, 0xe9, 0xbb, 0xe5, 0x8c, 0x18, 0xff, 0x22, 0xc1, 0x85,
	0x04, 0x63, 0x3e, 0xf2, 0x4c, 0x35, 0x58, 0x2e, 0x06, 0xb3, 0x6a, 0xd3, 0x72, 0xda, 0x6c, 0xd6,
	0x15, 0xd4, 0xa3, 0x89, 0xef, 0x5d, 0x62, 0xe1, 0x3d, 0x61, 0x33, 0x16, 0x8e, 0x12, 0x5f, 0xb3,
	0x62, 0xfe, 0x7d, 0xfc, 0xd4, 0xb1, 0x2a, 0xd8, 0x65, 0x73, 0xc2, 0x34, 0xdc, 0x27, 0xce, 0x26,
	0x33, 0x62, 0xf6, 0x6d, 0x42, 0xd3, 0x80, 0xd9, 0xfb, 0xa4, 0x7d, 0xfc, 0x22, 0xf0, 0xfa, 0x4e,
	0x8a, 0x9a, 0x36, 0xe3, 0xb5, 0x87, 0x51, 0xff, 0x85, 0x10, 0xec, 0x23, 0x50, 0xc4, 0xdf, 0x07,
	0x38, 0x99, 0xcc, 0x86, 0x67, 0x4d, 0x41, 0x2f, 0x03, 0xfc, 0x10, 0x2e, 0x0d, 0x3d, 0xdd, 0x31,
	0xf4, 0x95, 0x70, 0x14, 0x6d, 0xf6, 0x3c, 0x8b, 0x6d, 0x51, 0x0d, 0xc7, 0xcd, 0x86, 0x67, 0x65,
	0xbd, 0x1e, 0x9f, 0xc0, 0x9a, 0xd8, 0xc2, 0xc0, 0x7d, 0xe7, 0x18, 0xcf, 0x98, 0xf7, 0xed, 0x9f,
	0x2b, 0x50, 0x16, 0x4f, 0xe4, 0x5d, 0x98, 0x4f, 0x4e, 0x73, 0x6a, 0x08, 0x37, 0x3a, 0xe9, 0xa9,
	0x17, 0x63, 0x5b, 0xe2, 0xcc, 0x7a, 0x2e, 0xc0, 0x48, 0x4e, 0x0a, 0x69, 0x8c, 0x84, 0x6d, 0x32,
	0xc6, 0xdb, 0x30, 0x17, 0x3d, 0x14, 0x97, 0x53, 0x00, 0xa1, 0x61, 0x72, 0xf4, 0x36, 0x2c, 0x0c,
	0xb5, 0xf4, 0xb5, 0x51, 0x84, 0xc8, 0x98, 0xc5, 0x81, 0xb7, 0xd6, 0x31, 0x1c, 0x98, 0x61, 0x72,
	0xf4, 0x3b, 0x50, 0x8d, 0xdb, 0x9c, 0x32, 0x26, 0x9c, 0x59, 0x26, 0xc7, 0xdf, 0x07, 0x48, 0x8c,
	0x2e, 0xab, 0x29, 0x80, 0xd8, 0xa4, 0xaa, 0x69, 0x84, 0xd8, 0xa6, 0xe7, 0xe4, 0x43, 0xb8, 0x10,
	0x7d, 0x87, 0xf3, 0xc6, 0xb5, 0x34, 0x9b, 0x91, 0x91, 0x44, 0x5d, 0x1b, 0xf3, 0xec, 0x87, 0x33,
	0x82, 0x9e, 0x7b, 0x5d, 0x92, 0xef, 0x41, 0x59, 0xb4, 0xc1, 0x74, 0x7e, 0x13, 0xb7, 0x53, 0x5d,
	0x1b, 0x7b, 0x3a, 0x0e, 0xa7, 0xe7, 0xe4, 0x2d, 0x28, 0xb2, 0x8e, 0xa5, 0x8c, 0x83, 0x08, 0x2c,
	0x59, 0x00, 0x75, 0x28, 0xf1, 0xd6, 0xb2, 0x3a, 0x0e, 0x81, 0x99, 0xb2, 0x20, 0x1e, 0xc1, 0xd2,
	0x68, 0x2b, 0xb8, 0x9a, 0x82, 0x1b, 0xf1, 0x50, 0xb5, 0xb1, 0xa8, 0x91, 0x5d, 0xcf, 0xc9, 0x1f,
	0xc3, 0xca, 0xd8, 0x72, 0xbd, 0x9e, 0xc2, 0x1e, 0xe7, 0x94, 0x0d, 0x7f, 0xf7, 0xfe, 0x60, 0xeb,
	0x12, 0xac, 0x24, 0x4b, 0xda, 0xc7, 0x5e, 0x9f, 0xb4, 0xb1, 0xff, 0xec, 0x44, 0xcb, 0xfd, 0x7e,
	0xa2, 0xe5, 0x9e, 0x9f, 0x68, 0xd2, 0x97, 0x03, 0x4d, 0xfa, 0x61, 0xa0, 0x49, 0xbf, 0x0d, 0x34,
	0xe9, 0xd9, 0x40, 0x93, 0xfe, 0x18, 0x68, 0xd2, 0xdf, 0x03, 0x2d, 0xf7, 0x7c, 0xa0, 0x49, 0x4f,
	0xff, 0xd4, 0x72, 0xad, 0x32, 0x7b, 0xf9, 0xdf, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0x43, 0x5b,
	0x85, 0xd4, 0xaf, 0x12, 0x00, 0x00,
}
