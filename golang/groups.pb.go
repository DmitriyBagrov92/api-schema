// Code generated by protoc-gen-gogo.
// source: groups.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GroupType int32

const (
	GROUPTYPE_UNKNOWN GroupType = 0
	GROUPTYPE_GROUP   GroupType = 1
	GROUPTYPE_CHANNEL GroupType = 2
)

var GroupType_name = map[int32]string{
	0: "GROUPTYPE_UNKNOWN",
	1: "GROUPTYPE_GROUP",
	2: "GROUPTYPE_CHANNEL",
}
var GroupType_value = map[string]int32{
	"GROUPTYPE_UNKNOWN": 0,
	"GROUPTYPE_GROUP":   1,
	"GROUPTYPE_CHANNEL": 2,
}

func (GroupType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGroups, []int{0} }

// / Possible permissions on a group
type GroupAdminPermission int32

const (
	GROUPADMINPERMISSION_UNKNOWN             GroupAdminPermission = 0
	GROUPADMINPERMISSION_EDITSHORTNAME       GroupAdminPermission = 1
	GROUPADMINPERMISSION_INVITE              GroupAdminPermission = 2
	GROUPADMINPERMISSION_KICK                GroupAdminPermission = 3
	GROUPADMINPERMISSION_UPDATEINFO          GroupAdminPermission = 4
	GROUPADMINPERMISSION_SETPERMISSIONS      GroupAdminPermission = 5
	GROUPADMINPERMISSION_EDITMESSAGE         GroupAdminPermission = 6
	GROUPADMINPERMISSION_DELETEMESSAGE       GroupAdminPermission = 7
	GROUPADMINPERMISSION_GETINTEGRATIONTOKEN GroupAdminPermission = 8
	GROUPADMINPERMISSION_SENDMESSAGE         GroupAdminPermission = 9
	GROUPADMINPERMISSION_PINMESSAGE          GroupAdminPermission = 10
)

var GroupAdminPermission_name = map[int32]string{
	0:  "GROUPADMINPERMISSION_UNKNOWN",
	1:  "GROUPADMINPERMISSION_EDITSHORTNAME",
	2:  "GROUPADMINPERMISSION_INVITE",
	3:  "GROUPADMINPERMISSION_KICK",
	4:  "GROUPADMINPERMISSION_UPDATEINFO",
	5:  "GROUPADMINPERMISSION_SETPERMISSIONS",
	6:  "GROUPADMINPERMISSION_EDITMESSAGE",
	7:  "GROUPADMINPERMISSION_DELETEMESSAGE",
	8:  "GROUPADMINPERMISSION_GETINTEGRATIONTOKEN",
	9:  "GROUPADMINPERMISSION_SENDMESSAGE",
	10: "GROUPADMINPERMISSION_PINMESSAGE",
}
var GroupAdminPermission_value = map[string]int32{
	"GROUPADMINPERMISSION_UNKNOWN":             0,
	"GROUPADMINPERMISSION_EDITSHORTNAME":       1,
	"GROUPADMINPERMISSION_INVITE":              2,
	"GROUPADMINPERMISSION_KICK":                3,
	"GROUPADMINPERMISSION_UPDATEINFO":          4,
	"GROUPADMINPERMISSION_SETPERMISSIONS":      5,
	"GROUPADMINPERMISSION_EDITMESSAGE":         6,
	"GROUPADMINPERMISSION_DELETEMESSAGE":       7,
	"GROUPADMINPERMISSION_GETINTEGRATIONTOKEN": 8,
	"GROUPADMINPERMISSION_SENDMESSAGE":         9,
	"GROUPADMINPERMISSION_PINMESSAGE":          10,
}

func (GroupAdminPermission) EnumDescriptor() ([]byte, []int) { return fileDescriptorGroups, []int{1} }

// Member information
type Member struct {
	Uid        int32                      `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	InviterUid int32                      `protobuf:"varint,2,opt,name=inviter_uid,json=inviterUid,proto3" json:"inviter_uid,omitempty"`
	Date       int64                      `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	IsAdmin    *google_protobuf.BoolValue `protobuf:"bytes,4,opt,name=is_admin,json=isAdmin" json:"is_admin,omitempty"`
	// / List of member permissions
	Permissions []GroupAdminPermission `protobuf:"varint,5,rep,packed,name=permissions,enum=dialog.GroupAdminPermission" json:"permissions,omitempty"`
}

func (m *Member) Reset()                    { *m = Member{} }
func (*Member) ProtoMessage()               {}
func (*Member) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{0} }

func (m *Member) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Member) GetInviterUid() int32 {
	if m != nil {
		return m.InviterUid
	}
	return 0
}

func (m *Member) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *Member) GetIsAdmin() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsAdmin
	}
	return nil
}

func (m *Member) GetPermissions() []GroupAdminPermission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

// Group information
type Group struct {
	Id         int32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SpaceId    *UUIDValue `protobuf:"bytes,27,opt,name=space_id,json=spaceId" json:"space_id,omitempty"`
	AccessHash int64      `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Title      string     `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Avatar     *Avatar    `protobuf:"bytes,4,opt,name=avatar" json:"avatar,omitempty"`
	// / Number of members
	MembersAmount *google_protobuf.Int32Value `protobuf:"bytes,24,opt,name=members_amount,json=membersAmount" json:"members_amount,omitempty"`
	// / Is current user a member of a group. Default is true.
	IsMember *google_protobuf.BoolValue `protobuf:"bytes,6,opt,name=is_member,json=isMember" json:"is_member,omitempty"`
	// / Is group hidden (not showing it in recent list). Default is false.
	IsHidden *google_protobuf.BoolValue `protobuf:"bytes,20,opt,name=is_hidden,json=isHidden" json:"is_hidden,omitempty"`
	// / Group Type. Used only for displaying information. Default is GROUP.
	GroupType GroupType `protobuf:"varint,25,opt,name=group_type,json=groupType,proto3,enum=dialog.GroupType" json:"group_type,omitempty"`
	// / Can user send messages. Default is equals isMember for Group and false for channels.
	CanSendMessage *google_protobuf.BoolValue `protobuf:"bytes,26,opt,name=can_send_message,json=canSendMessage" json:"can_send_message,omitempty"`
	IsAdmin        *google_protobuf.BoolValue `protobuf:"bytes,16,opt,name=is_admin,json=isAdmin" json:"is_admin,omitempty"`
	CreatorUid     int32                      `protobuf:"varint,8,opt,name=creator_uid,json=creatorUid,proto3" json:"creator_uid,omitempty"`
	Members        []*Member                  `protobuf:"bytes,9,rep,name=members" json:"members,omitempty"`
	CreateDate     int64                      `protobuf:"varint,10,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	// / Theme of group
	Theme *google_protobuf.StringValue `protobuf:"bytes,17,opt,name=theme" json:"theme,omitempty"`
	// / About of group
	About *google_protobuf.StringValue `protobuf:"bytes,18,opt,name=about" json:"about,omitempty"`
	// / Group short name
	Shortname *google_protobuf.StringValue `protobuf:"bytes,19,opt,name=shortname" json:"shortname,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{1} }

func (m *Group) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Group) GetSpaceId() *UUIDValue {
	if m != nil {
		return m.SpaceId
	}
	return nil
}

func (m *Group) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *Group) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Group) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *Group) GetMembersAmount() *google_protobuf.Int32Value {
	if m != nil {
		return m.MembersAmount
	}
	return nil
}

func (m *Group) GetIsMember() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsMember
	}
	return nil
}

func (m *Group) GetIsHidden() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsHidden
	}
	return nil
}

func (m *Group) GetGroupType() GroupType {
	if m != nil {
		return m.GroupType
	}
	return GROUPTYPE_UNKNOWN
}

func (m *Group) GetCanSendMessage() *google_protobuf.BoolValue {
	if m != nil {
		return m.CanSendMessage
	}
	return nil
}

func (m *Group) GetIsAdmin() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsAdmin
	}
	return nil
}

func (m *Group) GetCreatorUid() int32 {
	if m != nil {
		return m.CreatorUid
	}
	return 0
}

func (m *Group) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Group) GetCreateDate() int64 {
	if m != nil {
		return m.CreateDate
	}
	return 0
}

func (m *Group) GetTheme() *google_protobuf.StringValue {
	if m != nil {
		return m.Theme
	}
	return nil
}

func (m *Group) GetAbout() *google_protobuf.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *Group) GetShortname() *google_protobuf.StringValue {
	if m != nil {
		return m.Shortname
	}
	return nil
}

// Goup Full information - Deprecated
type GroupFull struct {
	Id         int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateDate int64 `protobuf:"varint,6,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	OwnerUid   int32 `protobuf:"varint,5,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	// / Group members. Can be empty when isAsyncMembers enabled.
	Members []*Member `protobuf:"bytes,12,rep,name=members" json:"members,omitempty"`
	// / Group Theme
	Theme *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=theme" json:"theme,omitempty"`
	// / Group about
	About *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=about" json:"about,omitempty"`
	// / Is Members need to be loaded asynchronous.
	IsAsyncMembers *google_protobuf.BoolValue `protobuf:"bytes,11,opt,name=is_async_members,json=isAsyncMembers" json:"is_async_members,omitempty"`
	// / Can current user view members of the group. Default is true.
	CanViewMembers *google_protobuf.BoolValue `protobuf:"bytes,8,opt,name=can_view_members,json=canViewMembers" json:"can_view_members,omitempty"`
	// / Can current user invite new people. Default is true.
	CanInvitePeople *google_protobuf.BoolValue `protobuf:"bytes,9,opt,name=can_invite_people,json=canInvitePeople" json:"can_invite_people,omitempty"`
	// / Is history shared among all users.
	IsSharedHistory *google_protobuf.BoolValue `protobuf:"bytes,10,opt,name=is_shared_history,json=isSharedHistory" json:"is_shared_history,omitempty"`
}

func (m *GroupFull) Reset()                    { *m = GroupFull{} }
func (*GroupFull) ProtoMessage()               {}
func (*GroupFull) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{2} }

func (m *GroupFull) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GroupFull) GetCreateDate() int64 {
	if m != nil {
		return m.CreateDate
	}
	return 0
}

func (m *GroupFull) GetOwnerUid() int32 {
	if m != nil {
		return m.OwnerUid
	}
	return 0
}

func (m *GroupFull) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *GroupFull) GetTheme() *google_protobuf.StringValue {
	if m != nil {
		return m.Theme
	}
	return nil
}

func (m *GroupFull) GetAbout() *google_protobuf.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *GroupFull) GetIsAsyncMembers() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsAsyncMembers
	}
	return nil
}

func (m *GroupFull) GetCanViewMembers() *google_protobuf.BoolValue {
	if m != nil {
		return m.CanViewMembers
	}
	return nil
}

func (m *GroupFull) GetCanInvitePeople() *google_protobuf.BoolValue {
	if m != nil {
		return m.CanInvitePeople
	}
	return nil
}

func (m *GroupFull) GetIsSharedHistory() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsSharedHistory
	}
	return nil
}

// Loading Full Groups - Deprecated
type RequestLoadFullGroups struct {
	Groups []*GroupOutPeer `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *RequestLoadFullGroups) Reset()                    { *m = RequestLoadFullGroups{} }
func (*RequestLoadFullGroups) ProtoMessage()               {}
func (*RequestLoadFullGroups) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{3} }

func (m *RequestLoadFullGroups) GetGroups() []*GroupOutPeer {
	if m != nil {
		return m.Groups
	}
	return nil
}

// / Deprecated
type ResponseLoadFullGroups struct {
	Groups []*GroupFull `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *ResponseLoadFullGroups) Reset()                    { *m = ResponseLoadFullGroups{} }
func (*ResponseLoadFullGroups) ProtoMessage()               {}
func (*ResponseLoadFullGroups) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{4} }

func (m *ResponseLoadFullGroups) GetGroups() []*GroupFull {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Loading group members
type RequestLoadMembers struct {
	Group *GroupOutPeer               `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Limit int32                       `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Next  *google_protobuf.BytesValue `protobuf:"bytes,3,opt,name=next" json:"next,omitempty"`
}

func (m *RequestLoadMembers) Reset()                    { *m = RequestLoadMembers{} }
func (*RequestLoadMembers) ProtoMessage()               {}
func (*RequestLoadMembers) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{5} }

func (m *RequestLoadMembers) GetGroup() *GroupOutPeer {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *RequestLoadMembers) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RequestLoadMembers) GetNext() *google_protobuf.BytesValue {
	if m != nil {
		return m.Next
	}
	return nil
}

type ResponseLoadMembers struct {
	Members []*UserOutPeer              `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
	Next    *google_protobuf.BytesValue `protobuf:"bytes,2,opt,name=next" json:"next,omitempty"`
}

func (m *ResponseLoadMembers) Reset()                    { *m = ResponseLoadMembers{} }
func (*ResponseLoadMembers) ProtoMessage()               {}
func (*ResponseLoadMembers) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{6} }

func (m *ResponseLoadMembers) GetMembers() []*UserOutPeer {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *ResponseLoadMembers) GetNext() *google_protobuf.BytesValue {
	if m != nil {
		return m.Next
	}
	return nil
}

// Update about title changed
type UpdateGroupTitleChanged struct {
	GroupId int32  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *UpdateGroupTitleChanged) Reset()                    { *m = UpdateGroupTitleChanged{} }
func (*UpdateGroupTitleChanged) ProtoMessage()               {}
func (*UpdateGroupTitleChanged) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{7} }

func (m *UpdateGroupTitleChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupTitleChanged) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

// Update about avatar changed
type UpdateGroupAvatarChanged struct {
	GroupId int32   `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Avatar  *Avatar `protobuf:"bytes,2,opt,name=avatar" json:"avatar,omitempty"`
}

func (m *UpdateGroupAvatarChanged) Reset()                    { *m = UpdateGroupAvatarChanged{} }
func (*UpdateGroupAvatarChanged) ProtoMessage()               {}
func (*UpdateGroupAvatarChanged) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{8} }

func (m *UpdateGroupAvatarChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupAvatarChanged) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

// Update about topic changed
type UpdateGroupTopicChanged struct {
	GroupId int32                        `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Topic   *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
}

func (m *UpdateGroupTopicChanged) Reset()                    { *m = UpdateGroupTopicChanged{} }
func (*UpdateGroupTopicChanged) ProtoMessage()               {}
func (*UpdateGroupTopicChanged) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{9} }

func (m *UpdateGroupTopicChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupTopicChanged) GetTopic() *google_protobuf.StringValue {
	if m != nil {
		return m.Topic
	}
	return nil
}

// Update about about changed
type UpdateGroupAboutChanged struct {
	GroupId int32                        `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	About   *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=about" json:"about,omitempty"`
}

func (m *UpdateGroupAboutChanged) Reset()                    { *m = UpdateGroupAboutChanged{} }
func (*UpdateGroupAboutChanged) ProtoMessage()               {}
func (*UpdateGroupAboutChanged) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{10} }

func (m *UpdateGroupAboutChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupAboutChanged) GetAbout() *google_protobuf.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

// Update about owner changed
type UpdateGroupOwnerChanged struct {
	GroupId int32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId  int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *UpdateGroupOwnerChanged) Reset()                    { *m = UpdateGroupOwnerChanged{} }
func (*UpdateGroupOwnerChanged) ProtoMessage()               {}
func (*UpdateGroupOwnerChanged) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{11} }

func (m *UpdateGroupOwnerChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupOwnerChanged) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// Update about history shared
type UpdateGroupHistoryShared struct {
	GroupId int32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *UpdateGroupHistoryShared) Reset()                    { *m = UpdateGroupHistoryShared{} }
func (*UpdateGroupHistoryShared) ProtoMessage()               {}
func (*UpdateGroupHistoryShared) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{12} }

func (m *UpdateGroupHistoryShared) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

// Update about can send messages changed
type UpdateGroupCanSendMessagesChanged struct {
	GroupId         int32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	CanSendMessages bool  `protobuf:"varint,2,opt,name=can_send_messages,json=canSendMessages,proto3" json:"can_send_messages,omitempty"`
}

func (m *UpdateGroupCanSendMessagesChanged) Reset()      { *m = UpdateGroupCanSendMessagesChanged{} }
func (*UpdateGroupCanSendMessagesChanged) ProtoMessage() {}
func (*UpdateGroupCanSendMessagesChanged) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{13}
}

func (m *UpdateGroupCanSendMessagesChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupCanSendMessagesChanged) GetCanSendMessages() bool {
	if m != nil {
		return m.CanSendMessages
	}
	return false
}

// Update about can view members changed
type UpdateGroupCanViewMembersChanged struct {
	GroupId        int32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	CanViewMembers bool  `protobuf:"varint,2,opt,name=can_view_members,json=canViewMembers,proto3" json:"can_view_members,omitempty"`
}

func (m *UpdateGroupCanViewMembersChanged) Reset()      { *m = UpdateGroupCanViewMembersChanged{} }
func (*UpdateGroupCanViewMembersChanged) ProtoMessage() {}
func (*UpdateGroupCanViewMembersChanged) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{14}
}

func (m *UpdateGroupCanViewMembersChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupCanViewMembersChanged) GetCanViewMembers() bool {
	if m != nil {
		return m.CanViewMembers
	}
	return false
}

// Update about can invite members changed
type UpdateGroupCanInviteMembersChanged struct {
	GroupId          int32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	CanInviteMembers bool  `protobuf:"varint,2,opt,name=can_invite_members,json=canInviteMembers,proto3" json:"can_invite_members,omitempty"`
}

func (m *UpdateGroupCanInviteMembersChanged) Reset()      { *m = UpdateGroupCanInviteMembersChanged{} }
func (*UpdateGroupCanInviteMembersChanged) ProtoMessage() {}
func (*UpdateGroupCanInviteMembersChanged) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{15}
}

func (m *UpdateGroupCanInviteMembersChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupCanInviteMembersChanged) GetCanInviteMembers() bool {
	if m != nil {
		return m.CanInviteMembers
	}
	return false
}

// Update about membership changed
type UpdateGroupMemberChanged struct {
	GroupId  int32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	IsMember bool  `protobuf:"varint,2,opt,name=is_member,json=isMember,proto3" json:"is_member,omitempty"`
}

func (m *UpdateGroupMemberChanged) Reset()                    { *m = UpdateGroupMemberChanged{} }
func (*UpdateGroupMemberChanged) ProtoMessage()               {}
func (*UpdateGroupMemberChanged) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{16} }

func (m *UpdateGroupMemberChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupMemberChanged) GetIsMember() bool {
	if m != nil {
		return m.IsMember
	}
	return false
}

// Update about members became async
type UpdateGroupMembersBecameAsync struct {
	GroupId int32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *UpdateGroupMembersBecameAsync) Reset()      { *m = UpdateGroupMembersBecameAsync{} }
func (*UpdateGroupMembersBecameAsync) ProtoMessage() {}
func (*UpdateGroupMembersBecameAsync) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{17}
}

func (m *UpdateGroupMembersBecameAsync) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

// Update about members updated
type UpdateGroupMembersUpdated struct {
	GroupId int32     `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Members []*Member `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
}

func (m *UpdateGroupMembersUpdated) Reset()                    { *m = UpdateGroupMembersUpdated{} }
func (*UpdateGroupMembersUpdated) ProtoMessage()               {}
func (*UpdateGroupMembersUpdated) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{18} }

func (m *UpdateGroupMembersUpdated) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupMembersUpdated) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

// Update about members changed
type UpdateGroupMemberDiff struct {
	RemovedUsers []int32   `protobuf:"varint,1,rep,packed,name=removed_users,json=removedUsers" json:"removed_users,omitempty"`
	AddedMembers []*Member `protobuf:"bytes,2,rep,name=added_members,json=addedMembers" json:"added_members,omitempty"`
	MembersCount int32     `protobuf:"varint,3,opt,name=members_count,json=membersCount,proto3" json:"members_count,omitempty"`
}

func (m *UpdateGroupMemberDiff) Reset()                    { *m = UpdateGroupMemberDiff{} }
func (*UpdateGroupMemberDiff) ProtoMessage()               {}
func (*UpdateGroupMemberDiff) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{19} }

func (m *UpdateGroupMemberDiff) GetRemovedUsers() []int32 {
	if m != nil {
		return m.RemovedUsers
	}
	return nil
}

func (m *UpdateGroupMemberDiff) GetAddedMembers() []*Member {
	if m != nil {
		return m.AddedMembers
	}
	return nil
}

func (m *UpdateGroupMemberDiff) GetMembersCount() int32 {
	if m != nil {
		return m.MembersCount
	}
	return 0
}

// Update about members count changed
type UpdateGroupMembersCountChanged struct {
	GroupId      int32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MembersCount int32 `protobuf:"varint,2,opt,name=members_count,json=membersCount,proto3" json:"members_count,omitempty"`
}

func (m *UpdateGroupMembersCountChanged) Reset()      { *m = UpdateGroupMembersCountChanged{} }
func (*UpdateGroupMembersCountChanged) ProtoMessage() {}
func (*UpdateGroupMembersCountChanged) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{20}
}

func (m *UpdateGroupMembersCountChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupMembersCountChanged) GetMembersCount() int32 {
	if m != nil {
		return m.MembersCount
	}
	return 0
}

// Update about member admin changed
type UpdateGroupMemberAdminChanged struct {
	GroupId int32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId  int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsAdmin bool  `protobuf:"varint,3,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
}

func (m *UpdateGroupMemberAdminChanged) Reset()      { *m = UpdateGroupMemberAdminChanged{} }
func (*UpdateGroupMemberAdminChanged) ProtoMessage() {}
func (*UpdateGroupMemberAdminChanged) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{21}
}

func (m *UpdateGroupMemberAdminChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupMemberAdminChanged) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateGroupMemberAdminChanged) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

// Creating group chat
type RequestCreateGroup struct {
	Rid       int64          `protobuf:"varint,1,opt,name=rid,proto3" json:"rid,omitempty"`
	SpaceId   *UUIDValue     `protobuf:"bytes,9,opt,name=space_id,json=spaceId" json:"space_id,omitempty"`
	Title     string         `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Users     []*UserOutPeer `protobuf:"bytes,3,rep,name=users" json:"users,omitempty"`
	GroupType GroupType      `protobuf:"varint,6,opt,name=group_type,json=groupType,proto3,enum=dialog.GroupType" json:"group_type,omitempty"`
	// / optional shortname of a group, group will be public if set
	Username *google_protobuf.StringValue `protobuf:"bytes,8,opt,name=username" json:"username,omitempty"`
	// / Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,7,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestCreateGroup) Reset()                    { *m = RequestCreateGroup{} }
func (*RequestCreateGroup) ProtoMessage()               {}
func (*RequestCreateGroup) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{22} }

func (m *RequestCreateGroup) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestCreateGroup) GetSpaceId() *UUIDValue {
	if m != nil {
		return m.SpaceId
	}
	return nil
}

func (m *RequestCreateGroup) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RequestCreateGroup) GetUsers() []*UserOutPeer {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *RequestCreateGroup) GetGroupType() GroupType {
	if m != nil {
		return m.GroupType
	}
	return GROUPTYPE_UNKNOWN
}

func (m *RequestCreateGroup) GetUsername() *google_protobuf.StringValue {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *RequestCreateGroup) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type ResponseCreateGroup struct {
	Seq       int32          `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State     []byte         `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Group     *Group         `protobuf:"bytes,3,opt,name=group" json:"group,omitempty"`
	Users     []*User        `protobuf:"bytes,4,rep,name=users" json:"users,omitempty"`
	UserPeers []*UserOutPeer `protobuf:"bytes,5,rep,name=user_peers,json=userPeers" json:"user_peers,omitempty"`
}

func (m *ResponseCreateGroup) Reset()                    { *m = ResponseCreateGroup{} }
func (*ResponseCreateGroup) ProtoMessage()               {}
func (*ResponseCreateGroup) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{23} }

func (m *ResponseCreateGroup) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseCreateGroup) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseCreateGroup) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *ResponseCreateGroup) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseCreateGroup) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

// Changing group title
type RequestEditGroupTitle struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	Rid       int64         `protobuf:"varint,4,opt,name=rid,proto3" json:"rid,omitempty"`
	Title     string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// / Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,5,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestEditGroupTitle) Reset()                    { *m = RequestEditGroupTitle{} }
func (*RequestEditGroupTitle) ProtoMessage()               {}
func (*RequestEditGroupTitle) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{24} }

func (m *RequestEditGroupTitle) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestEditGroupTitle) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestEditGroupTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RequestEditGroupTitle) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Sets group short name
type RequestSetGroupShortname struct {
	Peer *GroupOutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	// / if shortname was empty, then group will become public
	Shortname string `protobuf:"bytes,2,opt,name=shortname,proto3" json:"shortname,omitempty"`
}

func (m *RequestSetGroupShortname) Reset()                    { *m = RequestSetGroupShortname{} }
func (*RequestSetGroupShortname) ProtoMessage()               {}
func (*RequestSetGroupShortname) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{25} }

func (m *RequestSetGroupShortname) GetPeer() *GroupOutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestSetGroupShortname) GetShortname() string {
	if m != nil {
		return m.Shortname
	}
	return ""
}

// Changing group avatar
type RequestEditGroupAvatar struct {
	GroupPeer    *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	Rid          int64         `protobuf:"varint,4,opt,name=rid,proto3" json:"rid,omitempty"`
	FileLocation *FileLocation `protobuf:"bytes,3,opt,name=file_location,json=fileLocation" json:"file_location,omitempty"`
	// / Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,5,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestEditGroupAvatar) Reset()                    { *m = RequestEditGroupAvatar{} }
func (*RequestEditGroupAvatar) ProtoMessage()               {}
func (*RequestEditGroupAvatar) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{26} }

func (m *RequestEditGroupAvatar) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestEditGroupAvatar) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestEditGroupAvatar) GetFileLocation() *FileLocation {
	if m != nil {
		return m.FileLocation
	}
	return nil
}

func (m *RequestEditGroupAvatar) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type ResponseEditGroupAvatar struct {
	Avatar *Avatar    `protobuf:"bytes,1,opt,name=avatar" json:"avatar,omitempty"`
	Seq    int32      `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	State  []byte     `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Date   int64      `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	Mid    *UUIDValue `protobuf:"bytes,5,opt,name=mid" json:"mid,omitempty"`
}

func (m *ResponseEditGroupAvatar) Reset()                    { *m = ResponseEditGroupAvatar{} }
func (*ResponseEditGroupAvatar) ProtoMessage()               {}
func (*ResponseEditGroupAvatar) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{27} }

func (m *ResponseEditGroupAvatar) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *ResponseEditGroupAvatar) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseEditGroupAvatar) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseEditGroupAvatar) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ResponseEditGroupAvatar) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

// Removing group avatar
type RequestRemoveGroupAvatar struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	Rid       int64         `protobuf:"varint,4,opt,name=rid,proto3" json:"rid,omitempty"`
	// / Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,5,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestRemoveGroupAvatar) Reset()                    { *m = RequestRemoveGroupAvatar{} }
func (*RequestRemoveGroupAvatar) ProtoMessage()               {}
func (*RequestRemoveGroupAvatar) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{28} }

func (m *RequestRemoveGroupAvatar) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestRemoveGroupAvatar) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestRemoveGroupAvatar) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Edit group topic
type RequestEditGroupTopic struct {
	GroupPeer *GroupOutPeer                `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	Rid       int64                        `protobuf:"varint,2,opt,name=rid,proto3" json:"rid,omitempty"`
	Topic     *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	// / Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,4,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestEditGroupTopic) Reset()                    { *m = RequestEditGroupTopic{} }
func (*RequestEditGroupTopic) ProtoMessage()               {}
func (*RequestEditGroupTopic) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{29} }

func (m *RequestEditGroupTopic) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestEditGroupTopic) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestEditGroupTopic) GetTopic() *google_protobuf.StringValue {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *RequestEditGroupTopic) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Edit Group About
type RequestEditGroupAbout struct {
	GroupPeer *GroupOutPeer                `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	Rid       int64                        `protobuf:"varint,2,opt,name=rid,proto3" json:"rid,omitempty"`
	About     *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=about" json:"about,omitempty"`
	// / Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,5,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestEditGroupAbout) Reset()                    { *m = RequestEditGroupAbout{} }
func (*RequestEditGroupAbout) ProtoMessage()               {}
func (*RequestEditGroupAbout) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{30} }

func (m *RequestEditGroupAbout) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestEditGroupAbout) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestEditGroupAbout) GetAbout() *google_protobuf.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *RequestEditGroupAbout) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Inviting user to group
type RequestInviteUser struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	Rid       int64         `protobuf:"varint,4,opt,name=rid,proto3" json:"rid,omitempty"`
	User      *UserOutPeer  `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	// / Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,5,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestInviteUser) Reset()                    { *m = RequestInviteUser{} }
func (*RequestInviteUser) ProtoMessage()               {}
func (*RequestInviteUser) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{31} }

func (m *RequestInviteUser) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestInviteUser) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestInviteUser) GetUser() *UserOutPeer {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RequestInviteUser) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Leaving group
type RequestLeaveGroup struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	Rid       int64         `protobuf:"varint,2,opt,name=rid,proto3" json:"rid,omitempty"`
	// / Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,3,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestLeaveGroup) Reset()                    { *m = RequestLeaveGroup{} }
func (*RequestLeaveGroup) ProtoMessage()               {}
func (*RequestLeaveGroup) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{32} }

func (m *RequestLeaveGroup) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestLeaveGroup) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestLeaveGroup) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Kicking user from group
type RequestKickUser struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	Rid       int64         `protobuf:"varint,4,opt,name=rid,proto3" json:"rid,omitempty"`
	User      *UserOutPeer  `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	// / Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,5,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestKickUser) Reset()                    { *m = RequestKickUser{} }
func (*RequestKickUser) ProtoMessage()               {}
func (*RequestKickUser) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{33} }

func (m *RequestKickUser) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestKickUser) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestKickUser) GetUser() *UserOutPeer {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RequestKickUser) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Make user admin
type RequestMakeUserAdmin struct {
	GroupPeer   *GroupOutPeer          `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	UserPeer    *UserOutPeer           `protobuf:"bytes,2,opt,name=user_peer,json=userPeer" json:"user_peer,omitempty"`
	Permissions []GroupAdminPermission `protobuf:"varint,3,rep,packed,name=permissions,enum=dialog.GroupAdminPermission" json:"permissions,omitempty"`
}

func (m *RequestMakeUserAdmin) Reset()                    { *m = RequestMakeUserAdmin{} }
func (*RequestMakeUserAdmin) ProtoMessage()               {}
func (*RequestMakeUserAdmin) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{34} }

func (m *RequestMakeUserAdmin) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestMakeUserAdmin) GetUserPeer() *UserOutPeer {
	if m != nil {
		return m.UserPeer
	}
	return nil
}

func (m *RequestMakeUserAdmin) GetPermissions() []GroupAdminPermission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

// A struct mapping a group member to their permissions
// userId the id of the group member
// permissions a list of permissions that user has
type GroupMemberPermission struct {
	UserId      int32                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Permissions []GroupAdminPermission `protobuf:"varint,2,rep,packed,name=permissions,enum=dialog.GroupAdminPermission" json:"permissions,omitempty"`
}

func (m *GroupMemberPermission) Reset()                    { *m = GroupMemberPermission{} }
func (*GroupMemberPermission) ProtoMessage()               {}
func (*GroupMemberPermission) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{35} }

func (m *GroupMemberPermission) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupMemberPermission) GetPermissions() []GroupAdminPermission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

// Fetches the group administration permissions for each of the users from the list
type RequestGetGroupMemberPermissions struct {
	GroupId int32   `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserIds []int32 `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds" json:"user_ids,omitempty"`
}

func (m *RequestGetGroupMemberPermissions) Reset()      { *m = RequestGetGroupMemberPermissions{} }
func (*RequestGetGroupMemberPermissions) ProtoMessage() {}
func (*RequestGetGroupMemberPermissions) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{36}
}

func (m *RequestGetGroupMemberPermissions) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *RequestGetGroupMemberPermissions) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type ResponseGetGroupMemberPermissions struct {
	Permissions []*GroupMemberPermission `protobuf:"bytes,1,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *ResponseGetGroupMemberPermissions) Reset()      { *m = ResponseGetGroupMemberPermissions{} }
func (*ResponseGetGroupMemberPermissions) ProtoMessage() {}
func (*ResponseGetGroupMemberPermissions) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{37}
}

func (m *ResponseGetGroupMemberPermissions) GetPermissions() []*GroupMemberPermission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

// Update about the user's permissions
type UpdateGroupMemberPermissionsChanged struct {
	GroupId     int32                  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId      int32                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Permissions []GroupAdminPermission `protobuf:"varint,3,rep,packed,name=permissions,enum=dialog.GroupAdminPermission" json:"permissions,omitempty"`
}

func (m *UpdateGroupMemberPermissionsChanged) Reset()      { *m = UpdateGroupMemberPermissionsChanged{} }
func (*UpdateGroupMemberPermissionsChanged) ProtoMessage() {}
func (*UpdateGroupMemberPermissionsChanged) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{38}
}

func (m *UpdateGroupMemberPermissionsChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupMemberPermissionsChanged) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateGroupMemberPermissionsChanged) GetPermissions() []GroupAdminPermission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

// Transfer ownership of group
type RequestTransferOwnership struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	NewOwner  int32         `protobuf:"varint,2,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
}

func (m *RequestTransferOwnership) Reset()                    { *m = RequestTransferOwnership{} }
func (*RequestTransferOwnership) ProtoMessage()               {}
func (*RequestTransferOwnership) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{39} }

func (m *RequestTransferOwnership) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestTransferOwnership) GetNewOwner() int32 {
	if m != nil {
		return m.NewOwner
	}
	return 0
}

// Response for invite url methods
type ResponseInviteUrl struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *ResponseInviteUrl) Reset()                    { *m = ResponseInviteUrl{} }
func (*ResponseInviteUrl) ProtoMessage()               {}
func (*ResponseInviteUrl) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{40} }

func (m *ResponseInviteUrl) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// Building invite url
type RequestGetGroupInviteUrl struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
}

func (m *RequestGetGroupInviteUrl) Reset()                    { *m = RequestGetGroupInviteUrl{} }
func (*RequestGetGroupInviteUrl) ProtoMessage()               {}
func (*RequestGetGroupInviteUrl) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{41} }

func (m *RequestGetGroupInviteUrl) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

// Get group invite url base
type RequestGetGroupInviteUrlBase struct {
}

func (m *RequestGetGroupInviteUrlBase) Reset()      { *m = RequestGetGroupInviteUrlBase{} }
func (*RequestGetGroupInviteUrlBase) ProtoMessage() {}
func (*RequestGetGroupInviteUrlBase) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{42}
}

type ResponseGetGroupInviteUrlBase struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *ResponseGetGroupInviteUrlBase) Reset()      { *m = ResponseGetGroupInviteUrlBase{} }
func (*ResponseGetGroupInviteUrlBase) ProtoMessage() {}
func (*ResponseGetGroupInviteUrlBase) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{43}
}

func (m *ResponseGetGroupInviteUrlBase) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// Revoking invite urls
type RequestRevokeInviteUrl struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
}

func (m *RequestRevokeInviteUrl) Reset()                    { *m = RequestRevokeInviteUrl{} }
func (*RequestRevokeInviteUrl) ProtoMessage()               {}
func (*RequestRevokeInviteUrl) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{44} }

func (m *RequestRevokeInviteUrl) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

// Join group method
type RequestJoinGroup struct {
	Token         string               `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,2,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestJoinGroup) Reset()                    { *m = RequestJoinGroup{} }
func (*RequestJoinGroup) ProtoMessage()               {}
func (*RequestJoinGroup) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{45} }

func (m *RequestJoinGroup) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RequestJoinGroup) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type ResponseJoinGroup struct {
	Group     *Group         `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Users     []*User        `protobuf:"bytes,5,rep,name=users" json:"users,omitempty"`
	UserPeers []*UserOutPeer `protobuf:"bytes,7,rep,name=user_peers,json=userPeers" json:"user_peers,omitempty"`
	Mid       *UUIDValue     `protobuf:"bytes,8,opt,name=mid" json:"mid,omitempty"`
	Seq       int32          `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	State     []byte         `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Date      int64          `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *ResponseJoinGroup) Reset()                    { *m = ResponseJoinGroup{} }
func (*ResponseJoinGroup) ProtoMessage()               {}
func (*ResponseJoinGroup) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{46} }

func (m *ResponseJoinGroup) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *ResponseJoinGroup) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseJoinGroup) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

func (m *ResponseJoinGroup) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *ResponseJoinGroup) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseJoinGroup) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseJoinGroup) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Join group by peer
type RequestJoinGroupByPeer struct {
	Peer *GroupOutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *RequestJoinGroupByPeer) Reset()                    { *m = RequestJoinGroupByPeer{} }
func (*RequestJoinGroupByPeer) ProtoMessage()               {}
func (*RequestJoinGroupByPeer) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{47} }

func (m *RequestJoinGroupByPeer) GetPeer() *GroupOutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// [OBSOLETE] Make user admin
type RequestMakeUserAdminObsolete struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	UserPeer  *UserOutPeer  `protobuf:"bytes,2,opt,name=user_peer,json=userPeer" json:"user_peer,omitempty"`
}

func (m *RequestMakeUserAdminObsolete) Reset()      { *m = RequestMakeUserAdminObsolete{} }
func (*RequestMakeUserAdminObsolete) ProtoMessage() {}
func (*RequestMakeUserAdminObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{48}
}

func (m *RequestMakeUserAdminObsolete) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestMakeUserAdminObsolete) GetUserPeer() *UserOutPeer {
	if m != nil {
		return m.UserPeer
	}
	return nil
}

type ResponseMakeUserAdminObsolete struct {
	Members []*Member `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
	Seq     int32     `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	State   []byte    `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *ResponseMakeUserAdminObsolete) Reset()      { *m = ResponseMakeUserAdminObsolete{} }
func (*ResponseMakeUserAdminObsolete) ProtoMessage() {}
func (*ResponseMakeUserAdminObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{49}
}

func (m *ResponseMakeUserAdminObsolete) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *ResponseMakeUserAdminObsolete) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseMakeUserAdminObsolete) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

// Update about inviting current user to group
type UpdateGroupInviteObsolete struct {
	GroupId   int32      `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Rid       int64      `protobuf:"varint,9,opt,name=rid,proto3" json:"rid,omitempty"`
	Mid       *UUIDValue `protobuf:"bytes,10,opt,name=mid" json:"mid,omitempty"`
	InviteUid int32      `protobuf:"varint,5,opt,name=invite_uid,json=inviteUid,proto3" json:"invite_uid,omitempty"`
	Date      int64      `protobuf:"varint,8,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *UpdateGroupInviteObsolete) Reset()                    { *m = UpdateGroupInviteObsolete{} }
func (*UpdateGroupInviteObsolete) ProtoMessage()               {}
func (*UpdateGroupInviteObsolete) Descriptor() ([]byte, []int) { return fileDescriptorGroups, []int{50} }

func (m *UpdateGroupInviteObsolete) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupInviteObsolete) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *UpdateGroupInviteObsolete) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateGroupInviteObsolete) GetInviteUid() int32 {
	if m != nil {
		return m.InviteUid
	}
	return 0
}

func (m *UpdateGroupInviteObsolete) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Update about inviting user to group
type UpdateGroupUserInvitedObsolete struct {
	GroupId    int32      `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Rid        int64      `protobuf:"varint,5,opt,name=rid,proto3" json:"rid,omitempty"`
	Mid        *UUIDValue `protobuf:"bytes,6,opt,name=mid" json:"mid,omitempty"`
	Uid        int32      `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	InviterUid int32      `protobuf:"varint,3,opt,name=inviter_uid,json=inviterUid,proto3" json:"inviter_uid,omitempty"`
	Date       int64      `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *UpdateGroupUserInvitedObsolete) Reset()      { *m = UpdateGroupUserInvitedObsolete{} }
func (*UpdateGroupUserInvitedObsolete) ProtoMessage() {}
func (*UpdateGroupUserInvitedObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{51}
}

func (m *UpdateGroupUserInvitedObsolete) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupUserInvitedObsolete) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *UpdateGroupUserInvitedObsolete) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateGroupUserInvitedObsolete) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateGroupUserInvitedObsolete) GetInviterUid() int32 {
	if m != nil {
		return m.InviterUid
	}
	return 0
}

func (m *UpdateGroupUserInvitedObsolete) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Update about leaving user
type UpdateGroupUserLeaveObsolete struct {
	GroupId int32      `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Mid     *UUIDValue `protobuf:"bytes,5,opt,name=mid" json:"mid,omitempty"`
	Uid     int32      `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Date    int64      `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *UpdateGroupUserLeaveObsolete) Reset()      { *m = UpdateGroupUserLeaveObsolete{} }
func (*UpdateGroupUserLeaveObsolete) ProtoMessage() {}
func (*UpdateGroupUserLeaveObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{52}
}

func (m *UpdateGroupUserLeaveObsolete) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupUserLeaveObsolete) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateGroupUserLeaveObsolete) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateGroupUserLeaveObsolete) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Update about kicking user
type UpdateGroupUserKickObsolete struct {
	GroupId   int32      `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Mid       *UUIDValue `protobuf:"bytes,6,opt,name=mid" json:"mid,omitempty"`
	Uid       int32      `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	KickerUid int32      `protobuf:"varint,3,opt,name=kicker_uid,json=kickerUid,proto3" json:"kicker_uid,omitempty"`
	Date      int64      `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *UpdateGroupUserKickObsolete) Reset()      { *m = UpdateGroupUserKickObsolete{} }
func (*UpdateGroupUserKickObsolete) ProtoMessage() {}
func (*UpdateGroupUserKickObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{53}
}

func (m *UpdateGroupUserKickObsolete) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupUserKickObsolete) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateGroupUserKickObsolete) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateGroupUserKickObsolete) GetKickerUid() int32 {
	if m != nil {
		return m.KickerUid
	}
	return 0
}

func (m *UpdateGroupUserKickObsolete) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Silent group members update
type UpdateGroupMembersUpdateObsolete struct {
	GroupId int32     `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Members []*Member `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
}

func (m *UpdateGroupMembersUpdateObsolete) Reset()      { *m = UpdateGroupMembersUpdateObsolete{} }
func (*UpdateGroupMembersUpdateObsolete) ProtoMessage() {}
func (*UpdateGroupMembersUpdateObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{54}
}

func (m *UpdateGroupMembersUpdateObsolete) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupMembersUpdateObsolete) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

// Update about group title change
type UpdateGroupTitleChangedObsolete struct {
	GroupId int32      `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Mid     *UUIDValue `protobuf:"bytes,6,opt,name=mid" json:"mid,omitempty"`
	Uid     int32      `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Title   string     `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Date    int64      `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *UpdateGroupTitleChangedObsolete) Reset()      { *m = UpdateGroupTitleChangedObsolete{} }
func (*UpdateGroupTitleChangedObsolete) ProtoMessage() {}
func (*UpdateGroupTitleChangedObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{55}
}

func (m *UpdateGroupTitleChangedObsolete) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupTitleChangedObsolete) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateGroupTitleChangedObsolete) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateGroupTitleChangedObsolete) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdateGroupTitleChangedObsolete) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Update about group topic change
type UpdateGroupTopicChangedObsolete struct {
	GroupId int32                        `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Rid     int64                        `protobuf:"varint,2,opt,name=rid,proto3" json:"rid,omitempty"`
	Uid     int32                        `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Topic   *google_protobuf.StringValue `protobuf:"bytes,4,opt,name=topic" json:"topic,omitempty"`
	Date    int64                        `protobuf:"varint,5,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *UpdateGroupTopicChangedObsolete) Reset()      { *m = UpdateGroupTopicChangedObsolete{} }
func (*UpdateGroupTopicChangedObsolete) ProtoMessage() {}
func (*UpdateGroupTopicChangedObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{56}
}

func (m *UpdateGroupTopicChangedObsolete) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupTopicChangedObsolete) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *UpdateGroupTopicChangedObsolete) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateGroupTopicChangedObsolete) GetTopic() *google_protobuf.StringValue {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *UpdateGroupTopicChangedObsolete) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Update about group about change
type UpdateGroupAboutChangedObsolete struct {
	GroupId int32                        `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	About   *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=about" json:"about,omitempty"`
}

func (m *UpdateGroupAboutChangedObsolete) Reset()      { *m = UpdateGroupAboutChangedObsolete{} }
func (*UpdateGroupAboutChangedObsolete) ProtoMessage() {}
func (*UpdateGroupAboutChangedObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{57}
}

func (m *UpdateGroupAboutChangedObsolete) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupAboutChangedObsolete) GetAbout() *google_protobuf.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

// Update about group avatar change
type UpdateGroupAvatarChangedObsolete struct {
	GroupId int32      `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Mid     *UUIDValue `protobuf:"bytes,6,opt,name=mid" json:"mid,omitempty"`
	Uid     int32      `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Avatar  *Avatar    `protobuf:"bytes,3,opt,name=avatar" json:"avatar,omitempty"`
	Date    int64      `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *UpdateGroupAvatarChangedObsolete) Reset()      { *m = UpdateGroupAvatarChangedObsolete{} }
func (*UpdateGroupAvatarChangedObsolete) ProtoMessage() {}
func (*UpdateGroupAvatarChangedObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{58}
}

func (m *UpdateGroupAvatarChangedObsolete) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupAvatarChangedObsolete) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateGroupAvatarChangedObsolete) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateGroupAvatarChangedObsolete) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *UpdateGroupAvatarChangedObsolete) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Update group short name
type UpdateGroupShortnameChanged struct {
	GroupId   int32  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Shortname string `protobuf:"bytes,2,opt,name=shortname,proto3" json:"shortname,omitempty"`
	Uid       int32  `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *UpdateGroupShortnameChanged) Reset()      { *m = UpdateGroupShortnameChanged{} }
func (*UpdateGroupShortnameChanged) ProtoMessage() {}
func (*UpdateGroupShortnameChanged) Descriptor() ([]byte, []int) {
	return fileDescriptorGroups, []int{59}
}

func (m *UpdateGroupShortnameChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupShortnameChanged) GetShortname() string {
	if m != nil {
		return m.Shortname
	}
	return ""
}

func (m *UpdateGroupShortnameChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func init() {
	proto.RegisterType((*Member)(nil), "dialog.Member")
	proto.RegisterType((*Group)(nil), "dialog.Group")
	proto.RegisterType((*GroupFull)(nil), "dialog.GroupFull")
	proto.RegisterType((*RequestLoadFullGroups)(nil), "dialog.RequestLoadFullGroups")
	proto.RegisterType((*ResponseLoadFullGroups)(nil), "dialog.ResponseLoadFullGroups")
	proto.RegisterType((*RequestLoadMembers)(nil), "dialog.RequestLoadMembers")
	proto.RegisterType((*ResponseLoadMembers)(nil), "dialog.ResponseLoadMembers")
	proto.RegisterType((*UpdateGroupTitleChanged)(nil), "dialog.UpdateGroupTitleChanged")
	proto.RegisterType((*UpdateGroupAvatarChanged)(nil), "dialog.UpdateGroupAvatarChanged")
	proto.RegisterType((*UpdateGroupTopicChanged)(nil), "dialog.UpdateGroupTopicChanged")
	proto.RegisterType((*UpdateGroupAboutChanged)(nil), "dialog.UpdateGroupAboutChanged")
	proto.RegisterType((*UpdateGroupOwnerChanged)(nil), "dialog.UpdateGroupOwnerChanged")
	proto.RegisterType((*UpdateGroupHistoryShared)(nil), "dialog.UpdateGroupHistoryShared")
	proto.RegisterType((*UpdateGroupCanSendMessagesChanged)(nil), "dialog.UpdateGroupCanSendMessagesChanged")
	proto.RegisterType((*UpdateGroupCanViewMembersChanged)(nil), "dialog.UpdateGroupCanViewMembersChanged")
	proto.RegisterType((*UpdateGroupCanInviteMembersChanged)(nil), "dialog.UpdateGroupCanInviteMembersChanged")
	proto.RegisterType((*UpdateGroupMemberChanged)(nil), "dialog.UpdateGroupMemberChanged")
	proto.RegisterType((*UpdateGroupMembersBecameAsync)(nil), "dialog.UpdateGroupMembersBecameAsync")
	proto.RegisterType((*UpdateGroupMembersUpdated)(nil), "dialog.UpdateGroupMembersUpdated")
	proto.RegisterType((*UpdateGroupMemberDiff)(nil), "dialog.UpdateGroupMemberDiff")
	proto.RegisterType((*UpdateGroupMembersCountChanged)(nil), "dialog.UpdateGroupMembersCountChanged")
	proto.RegisterType((*UpdateGroupMemberAdminChanged)(nil), "dialog.UpdateGroupMemberAdminChanged")
	proto.RegisterType((*RequestCreateGroup)(nil), "dialog.RequestCreateGroup")
	proto.RegisterType((*ResponseCreateGroup)(nil), "dialog.ResponseCreateGroup")
	proto.RegisterType((*RequestEditGroupTitle)(nil), "dialog.RequestEditGroupTitle")
	proto.RegisterType((*RequestSetGroupShortname)(nil), "dialog.RequestSetGroupShortname")
	proto.RegisterType((*RequestEditGroupAvatar)(nil), "dialog.RequestEditGroupAvatar")
	proto.RegisterType((*ResponseEditGroupAvatar)(nil), "dialog.ResponseEditGroupAvatar")
	proto.RegisterType((*RequestRemoveGroupAvatar)(nil), "dialog.RequestRemoveGroupAvatar")
	proto.RegisterType((*RequestEditGroupTopic)(nil), "dialog.RequestEditGroupTopic")
	proto.RegisterType((*RequestEditGroupAbout)(nil), "dialog.RequestEditGroupAbout")
	proto.RegisterType((*RequestInviteUser)(nil), "dialog.RequestInviteUser")
	proto.RegisterType((*RequestLeaveGroup)(nil), "dialog.RequestLeaveGroup")
	proto.RegisterType((*RequestKickUser)(nil), "dialog.RequestKickUser")
	proto.RegisterType((*RequestMakeUserAdmin)(nil), "dialog.RequestMakeUserAdmin")
	proto.RegisterType((*GroupMemberPermission)(nil), "dialog.GroupMemberPermission")
	proto.RegisterType((*RequestGetGroupMemberPermissions)(nil), "dialog.RequestGetGroupMemberPermissions")
	proto.RegisterType((*ResponseGetGroupMemberPermissions)(nil), "dialog.ResponseGetGroupMemberPermissions")
	proto.RegisterType((*UpdateGroupMemberPermissionsChanged)(nil), "dialog.UpdateGroupMemberPermissionsChanged")
	proto.RegisterType((*RequestTransferOwnership)(nil), "dialog.RequestTransferOwnership")
	proto.RegisterType((*ResponseInviteUrl)(nil), "dialog.ResponseInviteUrl")
	proto.RegisterType((*RequestGetGroupInviteUrl)(nil), "dialog.RequestGetGroupInviteUrl")
	proto.RegisterType((*RequestGetGroupInviteUrlBase)(nil), "dialog.RequestGetGroupInviteUrlBase")
	proto.RegisterType((*ResponseGetGroupInviteUrlBase)(nil), "dialog.ResponseGetGroupInviteUrlBase")
	proto.RegisterType((*RequestRevokeInviteUrl)(nil), "dialog.RequestRevokeInviteUrl")
	proto.RegisterType((*RequestJoinGroup)(nil), "dialog.RequestJoinGroup")
	proto.RegisterType((*ResponseJoinGroup)(nil), "dialog.ResponseJoinGroup")
	proto.RegisterType((*RequestJoinGroupByPeer)(nil), "dialog.RequestJoinGroupByPeer")
	proto.RegisterType((*RequestMakeUserAdminObsolete)(nil), "dialog.RequestMakeUserAdminObsolete")
	proto.RegisterType((*ResponseMakeUserAdminObsolete)(nil), "dialog.ResponseMakeUserAdminObsolete")
	proto.RegisterType((*UpdateGroupInviteObsolete)(nil), "dialog.UpdateGroupInviteObsolete")
	proto.RegisterType((*UpdateGroupUserInvitedObsolete)(nil), "dialog.UpdateGroupUserInvitedObsolete")
	proto.RegisterType((*UpdateGroupUserLeaveObsolete)(nil), "dialog.UpdateGroupUserLeaveObsolete")
	proto.RegisterType((*UpdateGroupUserKickObsolete)(nil), "dialog.UpdateGroupUserKickObsolete")
	proto.RegisterType((*UpdateGroupMembersUpdateObsolete)(nil), "dialog.UpdateGroupMembersUpdateObsolete")
	proto.RegisterType((*UpdateGroupTitleChangedObsolete)(nil), "dialog.UpdateGroupTitleChangedObsolete")
	proto.RegisterType((*UpdateGroupTopicChangedObsolete)(nil), "dialog.UpdateGroupTopicChangedObsolete")
	proto.RegisterType((*UpdateGroupAboutChangedObsolete)(nil), "dialog.UpdateGroupAboutChangedObsolete")
	proto.RegisterType((*UpdateGroupAvatarChangedObsolete)(nil), "dialog.UpdateGroupAvatarChangedObsolete")
	proto.RegisterType((*UpdateGroupShortnameChanged)(nil), "dialog.UpdateGroupShortnameChanged")
	proto.RegisterEnum("dialog.GroupType", GroupType_name, GroupType_value)
	proto.RegisterEnum("dialog.GroupAdminPermission", GroupAdminPermission_name, GroupAdminPermission_value)
}
func (x GroupType) String() string {
	s, ok := GroupType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x GroupAdminPermission) String() string {
	s, ok := GroupAdminPermission_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Member) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Member)
	if !ok {
		that2, ok := that.(Member)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.InviterUid != that1.InviterUid {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if !this.IsAdmin.Equal(that1.IsAdmin) {
		return false
	}
	if len(this.Permissions) != len(that1.Permissions) {
		return false
	}
	for i := range this.Permissions {
		if this.Permissions[i] != that1.Permissions[i] {
			return false
		}
	}
	return true
}
func (this *Group) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Group)
	if !ok {
		that2, ok := that.(Group)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.SpaceId.Equal(that1.SpaceId) {
		return false
	}
	if this.AccessHash != that1.AccessHash {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if !this.Avatar.Equal(that1.Avatar) {
		return false
	}
	if !this.MembersAmount.Equal(that1.MembersAmount) {
		return false
	}
	if !this.IsMember.Equal(that1.IsMember) {
		return false
	}
	if !this.IsHidden.Equal(that1.IsHidden) {
		return false
	}
	if this.GroupType != that1.GroupType {
		return false
	}
	if !this.CanSendMessage.Equal(that1.CanSendMessage) {
		return false
	}
	if !this.IsAdmin.Equal(that1.IsAdmin) {
		return false
	}
	if this.CreatorUid != that1.CreatorUid {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	if this.CreateDate != that1.CreateDate {
		return false
	}
	if !this.Theme.Equal(that1.Theme) {
		return false
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	if !this.Shortname.Equal(that1.Shortname) {
		return false
	}
	return true
}
func (this *GroupFull) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GroupFull)
	if !ok {
		that2, ok := that.(GroupFull)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.CreateDate != that1.CreateDate {
		return false
	}
	if this.OwnerUid != that1.OwnerUid {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	if !this.Theme.Equal(that1.Theme) {
		return false
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	if !this.IsAsyncMembers.Equal(that1.IsAsyncMembers) {
		return false
	}
	if !this.CanViewMembers.Equal(that1.CanViewMembers) {
		return false
	}
	if !this.CanInvitePeople.Equal(that1.CanInvitePeople) {
		return false
	}
	if !this.IsSharedHistory.Equal(that1.IsSharedHistory) {
		return false
	}
	return true
}
func (this *RequestLoadFullGroups) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestLoadFullGroups)
	if !ok {
		that2, ok := that.(RequestLoadFullGroups)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *ResponseLoadFullGroups) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseLoadFullGroups)
	if !ok {
		that2, ok := that.(ResponseLoadFullGroups)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *RequestLoadMembers) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestLoadMembers)
	if !ok {
		that2, ok := that.(RequestLoadMembers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Group.Equal(that1.Group) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if !this.Next.Equal(that1.Next) {
		return false
	}
	return true
}
func (this *ResponseLoadMembers) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseLoadMembers)
	if !ok {
		that2, ok := that.(ResponseLoadMembers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	if !this.Next.Equal(that1.Next) {
		return false
	}
	return true
}
func (this *UpdateGroupTitleChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupTitleChanged)
	if !ok {
		that2, ok := that.(UpdateGroupTitleChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	return true
}
func (this *UpdateGroupAvatarChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupAvatarChanged)
	if !ok {
		that2, ok := that.(UpdateGroupAvatarChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if !this.Avatar.Equal(that1.Avatar) {
		return false
	}
	return true
}
func (this *UpdateGroupTopicChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupTopicChanged)
	if !ok {
		that2, ok := that.(UpdateGroupTopicChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if !this.Topic.Equal(that1.Topic) {
		return false
	}
	return true
}
func (this *UpdateGroupAboutChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupAboutChanged)
	if !ok {
		that2, ok := that.(UpdateGroupAboutChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	return true
}
func (this *UpdateGroupOwnerChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupOwnerChanged)
	if !ok {
		that2, ok := that.(UpdateGroupOwnerChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	return true
}
func (this *UpdateGroupHistoryShared) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupHistoryShared)
	if !ok {
		that2, ok := that.(UpdateGroupHistoryShared)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	return true
}
func (this *UpdateGroupCanSendMessagesChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupCanSendMessagesChanged)
	if !ok {
		that2, ok := that.(UpdateGroupCanSendMessagesChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if this.CanSendMessages != that1.CanSendMessages {
		return false
	}
	return true
}
func (this *UpdateGroupCanViewMembersChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupCanViewMembersChanged)
	if !ok {
		that2, ok := that.(UpdateGroupCanViewMembersChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if this.CanViewMembers != that1.CanViewMembers {
		return false
	}
	return true
}
func (this *UpdateGroupCanInviteMembersChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupCanInviteMembersChanged)
	if !ok {
		that2, ok := that.(UpdateGroupCanInviteMembersChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if this.CanInviteMembers != that1.CanInviteMembers {
		return false
	}
	return true
}
func (this *UpdateGroupMemberChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupMemberChanged)
	if !ok {
		that2, ok := that.(UpdateGroupMemberChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if this.IsMember != that1.IsMember {
		return false
	}
	return true
}
func (this *UpdateGroupMembersBecameAsync) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupMembersBecameAsync)
	if !ok {
		that2, ok := that.(UpdateGroupMembersBecameAsync)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	return true
}
func (this *UpdateGroupMembersUpdated) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupMembersUpdated)
	if !ok {
		that2, ok := that.(UpdateGroupMembersUpdated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateGroupMemberDiff) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupMemberDiff)
	if !ok {
		that2, ok := that.(UpdateGroupMemberDiff)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.RemovedUsers) != len(that1.RemovedUsers) {
		return false
	}
	for i := range this.RemovedUsers {
		if this.RemovedUsers[i] != that1.RemovedUsers[i] {
			return false
		}
	}
	if len(this.AddedMembers) != len(that1.AddedMembers) {
		return false
	}
	for i := range this.AddedMembers {
		if !this.AddedMembers[i].Equal(that1.AddedMembers[i]) {
			return false
		}
	}
	if this.MembersCount != that1.MembersCount {
		return false
	}
	return true
}
func (this *UpdateGroupMembersCountChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupMembersCountChanged)
	if !ok {
		that2, ok := that.(UpdateGroupMembersCountChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if this.MembersCount != that1.MembersCount {
		return false
	}
	return true
}
func (this *UpdateGroupMemberAdminChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupMemberAdminChanged)
	if !ok {
		that2, ok := that.(UpdateGroupMemberAdminChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.IsAdmin != that1.IsAdmin {
		return false
	}
	return true
}
func (this *RequestCreateGroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestCreateGroup)
	if !ok {
		that2, ok := that.(RequestCreateGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if !this.SpaceId.Equal(that1.SpaceId) {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if this.GroupType != that1.GroupType {
		return false
	}
	if !this.Username.Equal(that1.Username) {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *ResponseCreateGroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseCreateGroup)
	if !ok {
		that2, ok := that.(ResponseCreateGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if !this.Group.Equal(that1.Group) {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	return true
}
func (this *RequestEditGroupTitle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestEditGroupTitle)
	if !ok {
		that2, ok := that.(RequestEditGroupTitle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *RequestSetGroupShortname) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSetGroupShortname)
	if !ok {
		that2, ok := that.(RequestSetGroupShortname)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Shortname != that1.Shortname {
		return false
	}
	return true
}
func (this *RequestEditGroupAvatar) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestEditGroupAvatar)
	if !ok {
		that2, ok := that.(RequestEditGroupAvatar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if !this.FileLocation.Equal(that1.FileLocation) {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *ResponseEditGroupAvatar) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseEditGroupAvatar)
	if !ok {
		that2, ok := that.(ResponseEditGroupAvatar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Avatar.Equal(that1.Avatar) {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	return true
}
func (this *RequestRemoveGroupAvatar) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestRemoveGroupAvatar)
	if !ok {
		that2, ok := that.(RequestRemoveGroupAvatar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *RequestEditGroupTopic) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestEditGroupTopic)
	if !ok {
		that2, ok := that.(RequestEditGroupTopic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if !this.Topic.Equal(that1.Topic) {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *RequestEditGroupAbout) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestEditGroupAbout)
	if !ok {
		that2, ok := that.(RequestEditGroupAbout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *RequestInviteUser) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestInviteUser)
	if !ok {
		that2, ok := that.(RequestInviteUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *RequestLeaveGroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestLeaveGroup)
	if !ok {
		that2, ok := that.(RequestLeaveGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *RequestKickUser) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestKickUser)
	if !ok {
		that2, ok := that.(RequestKickUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *RequestMakeUserAdmin) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestMakeUserAdmin)
	if !ok {
		that2, ok := that.(RequestMakeUserAdmin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	if !this.UserPeer.Equal(that1.UserPeer) {
		return false
	}
	if len(this.Permissions) != len(that1.Permissions) {
		return false
	}
	for i := range this.Permissions {
		if this.Permissions[i] != that1.Permissions[i] {
			return false
		}
	}
	return true
}
func (this *GroupMemberPermission) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GroupMemberPermission)
	if !ok {
		that2, ok := that.(GroupMemberPermission)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if len(this.Permissions) != len(that1.Permissions) {
		return false
	}
	for i := range this.Permissions {
		if this.Permissions[i] != that1.Permissions[i] {
			return false
		}
	}
	return true
}
func (this *RequestGetGroupMemberPermissions) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestGetGroupMemberPermissions)
	if !ok {
		that2, ok := that.(RequestGetGroupMemberPermissions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if len(this.UserIds) != len(that1.UserIds) {
		return false
	}
	for i := range this.UserIds {
		if this.UserIds[i] != that1.UserIds[i] {
			return false
		}
	}
	return true
}
func (this *ResponseGetGroupMemberPermissions) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseGetGroupMemberPermissions)
	if !ok {
		that2, ok := that.(ResponseGetGroupMemberPermissions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Permissions) != len(that1.Permissions) {
		return false
	}
	for i := range this.Permissions {
		if !this.Permissions[i].Equal(that1.Permissions[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateGroupMemberPermissionsChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupMemberPermissionsChanged)
	if !ok {
		that2, ok := that.(UpdateGroupMemberPermissionsChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if len(this.Permissions) != len(that1.Permissions) {
		return false
	}
	for i := range this.Permissions {
		if this.Permissions[i] != that1.Permissions[i] {
			return false
		}
	}
	return true
}
func (this *RequestTransferOwnership) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestTransferOwnership)
	if !ok {
		that2, ok := that.(RequestTransferOwnership)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	if this.NewOwner != that1.NewOwner {
		return false
	}
	return true
}
func (this *ResponseInviteUrl) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseInviteUrl)
	if !ok {
		that2, ok := that.(ResponseInviteUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *RequestGetGroupInviteUrl) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestGetGroupInviteUrl)
	if !ok {
		that2, ok := that.(RequestGetGroupInviteUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	return true
}
func (this *RequestGetGroupInviteUrlBase) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestGetGroupInviteUrlBase)
	if !ok {
		that2, ok := that.(RequestGetGroupInviteUrlBase)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResponseGetGroupInviteUrlBase) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseGetGroupInviteUrlBase)
	if !ok {
		that2, ok := that.(ResponseGetGroupInviteUrlBase)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *RequestRevokeInviteUrl) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestRevokeInviteUrl)
	if !ok {
		that2, ok := that.(RequestRevokeInviteUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	return true
}
func (this *RequestJoinGroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestJoinGroup)
	if !ok {
		that2, ok := that.(RequestJoinGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *ResponseJoinGroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseJoinGroup)
	if !ok {
		that2, ok := that.(ResponseJoinGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Group.Equal(that1.Group) {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	return true
}
func (this *RequestJoinGroupByPeer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestJoinGroupByPeer)
	if !ok {
		that2, ok := that.(RequestJoinGroupByPeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *RequestMakeUserAdminObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestMakeUserAdminObsolete)
	if !ok {
		that2, ok := that.(RequestMakeUserAdminObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	if !this.UserPeer.Equal(that1.UserPeer) {
		return false
	}
	return true
}
func (this *ResponseMakeUserAdminObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseMakeUserAdminObsolete)
	if !ok {
		that2, ok := that.(ResponseMakeUserAdminObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	return true
}
func (this *UpdateGroupInviteObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupInviteObsolete)
	if !ok {
		that2, ok := that.(UpdateGroupInviteObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.InviteUid != that1.InviteUid {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	return true
}
func (this *UpdateGroupUserInvitedObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupUserInvitedObsolete)
	if !ok {
		that2, ok := that.(UpdateGroupUserInvitedObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.InviterUid != that1.InviterUid {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	return true
}
func (this *UpdateGroupUserLeaveObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupUserLeaveObsolete)
	if !ok {
		that2, ok := that.(UpdateGroupUserLeaveObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	return true
}
func (this *UpdateGroupUserKickObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupUserKickObsolete)
	if !ok {
		that2, ok := that.(UpdateGroupUserKickObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.KickerUid != that1.KickerUid {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	return true
}
func (this *UpdateGroupMembersUpdateObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupMembersUpdateObsolete)
	if !ok {
		that2, ok := that.(UpdateGroupMembersUpdateObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateGroupTitleChangedObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupTitleChangedObsolete)
	if !ok {
		that2, ok := that.(UpdateGroupTitleChangedObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	return true
}
func (this *UpdateGroupTopicChangedObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupTopicChangedObsolete)
	if !ok {
		that2, ok := that.(UpdateGroupTopicChangedObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.Topic.Equal(that1.Topic) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	return true
}
func (this *UpdateGroupAboutChangedObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupAboutChangedObsolete)
	if !ok {
		that2, ok := that.(UpdateGroupAboutChangedObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	return true
}
func (this *UpdateGroupAvatarChangedObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupAvatarChangedObsolete)
	if !ok {
		that2, ok := that.(UpdateGroupAvatarChangedObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.Avatar.Equal(that1.Avatar) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	return true
}
func (this *UpdateGroupShortnameChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGroupShortnameChanged)
	if !ok {
		that2, ok := that.(UpdateGroupShortnameChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if this.Shortname != that1.Shortname {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	return true
}
func (this *Member) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.Member{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "InviterUid: "+fmt.Sprintf("%#v", this.InviterUid)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	if this.IsAdmin != nil {
		s = append(s, "IsAdmin: "+fmt.Sprintf("%#v", this.IsAdmin)+",\n")
	}
	s = append(s, "Permissions: "+fmt.Sprintf("%#v", this.Permissions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Group) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&dialog.Group{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.SpaceId != nil {
		s = append(s, "SpaceId: "+fmt.Sprintf("%#v", this.SpaceId)+",\n")
	}
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.Avatar != nil {
		s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	}
	if this.MembersAmount != nil {
		s = append(s, "MembersAmount: "+fmt.Sprintf("%#v", this.MembersAmount)+",\n")
	}
	if this.IsMember != nil {
		s = append(s, "IsMember: "+fmt.Sprintf("%#v", this.IsMember)+",\n")
	}
	if this.IsHidden != nil {
		s = append(s, "IsHidden: "+fmt.Sprintf("%#v", this.IsHidden)+",\n")
	}
	s = append(s, "GroupType: "+fmt.Sprintf("%#v", this.GroupType)+",\n")
	if this.CanSendMessage != nil {
		s = append(s, "CanSendMessage: "+fmt.Sprintf("%#v", this.CanSendMessage)+",\n")
	}
	if this.IsAdmin != nil {
		s = append(s, "IsAdmin: "+fmt.Sprintf("%#v", this.IsAdmin)+",\n")
	}
	s = append(s, "CreatorUid: "+fmt.Sprintf("%#v", this.CreatorUid)+",\n")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	s = append(s, "CreateDate: "+fmt.Sprintf("%#v", this.CreateDate)+",\n")
	if this.Theme != nil {
		s = append(s, "Theme: "+fmt.Sprintf("%#v", this.Theme)+",\n")
	}
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	if this.Shortname != nil {
		s = append(s, "Shortname: "+fmt.Sprintf("%#v", this.Shortname)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GroupFull) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&dialog.GroupFull{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "CreateDate: "+fmt.Sprintf("%#v", this.CreateDate)+",\n")
	s = append(s, "OwnerUid: "+fmt.Sprintf("%#v", this.OwnerUid)+",\n")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	if this.Theme != nil {
		s = append(s, "Theme: "+fmt.Sprintf("%#v", this.Theme)+",\n")
	}
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	if this.IsAsyncMembers != nil {
		s = append(s, "IsAsyncMembers: "+fmt.Sprintf("%#v", this.IsAsyncMembers)+",\n")
	}
	if this.CanViewMembers != nil {
		s = append(s, "CanViewMembers: "+fmt.Sprintf("%#v", this.CanViewMembers)+",\n")
	}
	if this.CanInvitePeople != nil {
		s = append(s, "CanInvitePeople: "+fmt.Sprintf("%#v", this.CanInvitePeople)+",\n")
	}
	if this.IsSharedHistory != nil {
		s = append(s, "IsSharedHistory: "+fmt.Sprintf("%#v", this.IsSharedHistory)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadFullGroups) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestLoadFullGroups{")
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadFullGroups) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseLoadFullGroups{")
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadMembers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestLoadMembers{")
	if this.Group != nil {
		s = append(s, "Group: "+fmt.Sprintf("%#v", this.Group)+",\n")
	}
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	if this.Next != nil {
		s = append(s, "Next: "+fmt.Sprintf("%#v", this.Next)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadMembers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseLoadMembers{")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	if this.Next != nil {
		s = append(s, "Next: "+fmt.Sprintf("%#v", this.Next)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupTitleChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateGroupTitleChanged{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupAvatarChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateGroupAvatarChanged{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	if this.Avatar != nil {
		s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupTopicChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateGroupTopicChanged{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	if this.Topic != nil {
		s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupAboutChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateGroupAboutChanged{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupOwnerChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateGroupOwnerChanged{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupHistoryShared) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateGroupHistoryShared{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupCanSendMessagesChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateGroupCanSendMessagesChanged{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "CanSendMessages: "+fmt.Sprintf("%#v", this.CanSendMessages)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupCanViewMembersChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateGroupCanViewMembersChanged{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "CanViewMembers: "+fmt.Sprintf("%#v", this.CanViewMembers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupCanInviteMembersChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateGroupCanInviteMembersChanged{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "CanInviteMembers: "+fmt.Sprintf("%#v", this.CanInviteMembers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupMemberChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateGroupMemberChanged{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "IsMember: "+fmt.Sprintf("%#v", this.IsMember)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupMembersBecameAsync) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateGroupMembersBecameAsync{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupMembersUpdated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateGroupMembersUpdated{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupMemberDiff) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateGroupMemberDiff{")
	s = append(s, "RemovedUsers: "+fmt.Sprintf("%#v", this.RemovedUsers)+",\n")
	if this.AddedMembers != nil {
		s = append(s, "AddedMembers: "+fmt.Sprintf("%#v", this.AddedMembers)+",\n")
	}
	s = append(s, "MembersCount: "+fmt.Sprintf("%#v", this.MembersCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupMembersCountChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateGroupMembersCountChanged{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "MembersCount: "+fmt.Sprintf("%#v", this.MembersCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupMemberAdminChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateGroupMemberAdminChanged{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "IsAdmin: "+fmt.Sprintf("%#v", this.IsAdmin)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCreateGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.RequestCreateGroup{")
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	if this.SpaceId != nil {
		s = append(s, "SpaceId: "+fmt.Sprintf("%#v", this.SpaceId)+",\n")
	}
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	s = append(s, "GroupType: "+fmt.Sprintf("%#v", this.GroupType)+",\n")
	if this.Username != nil {
		s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	}
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseCreateGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.ResponseCreateGroup{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Group != nil {
		s = append(s, "Group: "+fmt.Sprintf("%#v", this.Group)+",\n")
	}
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditGroupTitle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestEditGroupTitle{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSetGroupShortname) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestSetGroupShortname{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Shortname: "+fmt.Sprintf("%#v", this.Shortname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditGroupAvatar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestEditGroupAvatar{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	if this.FileLocation != nil {
		s = append(s, "FileLocation: "+fmt.Sprintf("%#v", this.FileLocation)+",\n")
	}
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseEditGroupAvatar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.ResponseEditGroupAvatar{")
	if this.Avatar != nil {
		s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	}
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRemoveGroupAvatar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestRemoveGroupAvatar{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditGroupTopic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestEditGroupTopic{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	if this.Topic != nil {
		s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	}
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditGroupAbout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestEditGroupAbout{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestInviteUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestInviteUser{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	if this.User != nil {
		s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	}
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLeaveGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestLeaveGroup{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestKickUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestKickUser{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	if this.User != nil {
		s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	}
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestMakeUserAdmin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestMakeUserAdmin{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	if this.UserPeer != nil {
		s = append(s, "UserPeer: "+fmt.Sprintf("%#v", this.UserPeer)+",\n")
	}
	s = append(s, "Permissions: "+fmt.Sprintf("%#v", this.Permissions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GroupMemberPermission) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.GroupMemberPermission{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Permissions: "+fmt.Sprintf("%#v", this.Permissions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetGroupMemberPermissions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestGetGroupMemberPermissions{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "UserIds: "+fmt.Sprintf("%#v", this.UserIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetGroupMemberPermissions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseGetGroupMemberPermissions{")
	if this.Permissions != nil {
		s = append(s, "Permissions: "+fmt.Sprintf("%#v", this.Permissions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupMemberPermissionsChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateGroupMemberPermissionsChanged{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Permissions: "+fmt.Sprintf("%#v", this.Permissions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestTransferOwnership) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestTransferOwnership{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	s = append(s, "NewOwner: "+fmt.Sprintf("%#v", this.NewOwner)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseInviteUrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseInviteUrl{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetGroupInviteUrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestGetGroupInviteUrl{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetGroupInviteUrlBase) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestGetGroupInviteUrlBase{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetGroupInviteUrlBase) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseGetGroupInviteUrlBase{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRevokeInviteUrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestRevokeInviteUrl{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestJoinGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestJoinGroup{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseJoinGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.ResponseJoinGroup{")
	if this.Group != nil {
		s = append(s, "Group: "+fmt.Sprintf("%#v", this.Group)+",\n")
	}
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestJoinGroupByPeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestJoinGroupByPeer{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestMakeUserAdminObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestMakeUserAdminObsolete{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	if this.UserPeer != nil {
		s = append(s, "UserPeer: "+fmt.Sprintf("%#v", this.UserPeer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseMakeUserAdminObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseMakeUserAdminObsolete{")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupInviteObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.UpdateGroupInviteObsolete{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "InviteUid: "+fmt.Sprintf("%#v", this.InviteUid)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupUserInvitedObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.UpdateGroupUserInvitedObsolete{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "InviterUid: "+fmt.Sprintf("%#v", this.InviterUid)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupUserLeaveObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.UpdateGroupUserLeaveObsolete{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupUserKickObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.UpdateGroupUserKickObsolete{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "KickerUid: "+fmt.Sprintf("%#v", this.KickerUid)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupMembersUpdateObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateGroupMembersUpdateObsolete{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupTitleChangedObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.UpdateGroupTitleChangedObsolete{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupTopicChangedObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.UpdateGroupTopicChangedObsolete{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.Topic != nil {
		s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	}
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupAboutChangedObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateGroupAboutChangedObsolete{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupAvatarChangedObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.UpdateGroupAvatarChangedObsolete{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.Avatar != nil {
		s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	}
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupShortnameChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateGroupShortnameChanged{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "Shortname: "+fmt.Sprintf("%#v", this.Shortname)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGroups(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Groups service

type GroupsClient interface {
	// / deprecated
	LoadFullGroups(ctx context.Context, in *RequestLoadFullGroups, opts ...grpc.CallOption) (*ResponseLoadFullGroups, error)
	LoadMembers(ctx context.Context, in *RequestLoadMembers, opts ...grpc.CallOption) (*ResponseLoadMembers, error)
	CreateGroup(ctx context.Context, in *RequestCreateGroup, opts ...grpc.CallOption) (*ResponseCreateGroup, error)
	EditGroupTitle(ctx context.Context, in *RequestEditGroupTitle, opts ...grpc.CallOption) (*ResponseSeqDateMid, error)
	SetGroupShortname(ctx context.Context, in *RequestSetGroupShortname, opts ...grpc.CallOption) (*ResponseSeq, error)
	EditGroupAvatar(ctx context.Context, in *RequestEditGroupAvatar, opts ...grpc.CallOption) (*ResponseEditGroupAvatar, error)
	RemoveGroupAvatar(ctx context.Context, in *RequestRemoveGroupAvatar, opts ...grpc.CallOption) (*ResponseSeqDateMid, error)
	EditGroupTopic(ctx context.Context, in *RequestEditGroupTopic, opts ...grpc.CallOption) (*ResponseSeqDate, error)
	EditGroupAbout(ctx context.Context, in *RequestEditGroupAbout, opts ...grpc.CallOption) (*ResponseSeqDate, error)
	InviteUser(ctx context.Context, in *RequestInviteUser, opts ...grpc.CallOption) (*ResponseSeqDateMid, error)
	LeaveGroup(ctx context.Context, in *RequestLeaveGroup, opts ...grpc.CallOption) (*ResponseSeqDateMid, error)
	KickUser(ctx context.Context, in *RequestKickUser, opts ...grpc.CallOption) (*ResponseSeqDateMid, error)
	MakeUserAdmin(ctx context.Context, in *RequestMakeUserAdmin, opts ...grpc.CallOption) (*ResponseSeqDate, error)
	GetGroupMemberPermissions(ctx context.Context, in *RequestGetGroupMemberPermissions, opts ...grpc.CallOption) (*ResponseGetGroupMemberPermissions, error)
	TransferOwnership(ctx context.Context, in *RequestTransferOwnership, opts ...grpc.CallOption) (*ResponseSeqDate, error)
	GetGroupInviteUrl(ctx context.Context, in *RequestGetGroupInviteUrl, opts ...grpc.CallOption) (*ResponseInviteUrl, error)
	GetGroupInviteUrlBase(ctx context.Context, in *RequestGetGroupInviteUrlBase, opts ...grpc.CallOption) (*ResponseGetGroupInviteUrlBase, error)
	RevokeInviteUrl(ctx context.Context, in *RequestRevokeInviteUrl, opts ...grpc.CallOption) (*ResponseInviteUrl, error)
	JoinGroup(ctx context.Context, in *RequestJoinGroup, opts ...grpc.CallOption) (*ResponseJoinGroup, error)
	JoinGroupByPeer(ctx context.Context, in *RequestJoinGroupByPeer, opts ...grpc.CallOption) (*ResponseVoid, error)
	MakeUserAdminObsolete(ctx context.Context, in *RequestMakeUserAdminObsolete, opts ...grpc.CallOption) (*ResponseMakeUserAdminObsolete, error)
}

type groupsClient struct {
	cc *grpc.ClientConn
}

func NewGroupsClient(cc *grpc.ClientConn) GroupsClient {
	return &groupsClient{cc}
}

func (c *groupsClient) LoadFullGroups(ctx context.Context, in *RequestLoadFullGroups, opts ...grpc.CallOption) (*ResponseLoadFullGroups, error) {
	out := new(ResponseLoadFullGroups)
	err := grpc.Invoke(ctx, "/dialog.Groups/LoadFullGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) LoadMembers(ctx context.Context, in *RequestLoadMembers, opts ...grpc.CallOption) (*ResponseLoadMembers, error) {
	out := new(ResponseLoadMembers)
	err := grpc.Invoke(ctx, "/dialog.Groups/LoadMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) CreateGroup(ctx context.Context, in *RequestCreateGroup, opts ...grpc.CallOption) (*ResponseCreateGroup, error) {
	out := new(ResponseCreateGroup)
	err := grpc.Invoke(ctx, "/dialog.Groups/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) EditGroupTitle(ctx context.Context, in *RequestEditGroupTitle, opts ...grpc.CallOption) (*ResponseSeqDateMid, error) {
	out := new(ResponseSeqDateMid)
	err := grpc.Invoke(ctx, "/dialog.Groups/EditGroupTitle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) SetGroupShortname(ctx context.Context, in *RequestSetGroupShortname, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Groups/SetGroupShortname", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) EditGroupAvatar(ctx context.Context, in *RequestEditGroupAvatar, opts ...grpc.CallOption) (*ResponseEditGroupAvatar, error) {
	out := new(ResponseEditGroupAvatar)
	err := grpc.Invoke(ctx, "/dialog.Groups/EditGroupAvatar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) RemoveGroupAvatar(ctx context.Context, in *RequestRemoveGroupAvatar, opts ...grpc.CallOption) (*ResponseSeqDateMid, error) {
	out := new(ResponseSeqDateMid)
	err := grpc.Invoke(ctx, "/dialog.Groups/RemoveGroupAvatar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) EditGroupTopic(ctx context.Context, in *RequestEditGroupTopic, opts ...grpc.CallOption) (*ResponseSeqDate, error) {
	out := new(ResponseSeqDate)
	err := grpc.Invoke(ctx, "/dialog.Groups/EditGroupTopic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) EditGroupAbout(ctx context.Context, in *RequestEditGroupAbout, opts ...grpc.CallOption) (*ResponseSeqDate, error) {
	out := new(ResponseSeqDate)
	err := grpc.Invoke(ctx, "/dialog.Groups/EditGroupAbout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) InviteUser(ctx context.Context, in *RequestInviteUser, opts ...grpc.CallOption) (*ResponseSeqDateMid, error) {
	out := new(ResponseSeqDateMid)
	err := grpc.Invoke(ctx, "/dialog.Groups/InviteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) LeaveGroup(ctx context.Context, in *RequestLeaveGroup, opts ...grpc.CallOption) (*ResponseSeqDateMid, error) {
	out := new(ResponseSeqDateMid)
	err := grpc.Invoke(ctx, "/dialog.Groups/LeaveGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) KickUser(ctx context.Context, in *RequestKickUser, opts ...grpc.CallOption) (*ResponseSeqDateMid, error) {
	out := new(ResponseSeqDateMid)
	err := grpc.Invoke(ctx, "/dialog.Groups/KickUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) MakeUserAdmin(ctx context.Context, in *RequestMakeUserAdmin, opts ...grpc.CallOption) (*ResponseSeqDate, error) {
	out := new(ResponseSeqDate)
	err := grpc.Invoke(ctx, "/dialog.Groups/MakeUserAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) GetGroupMemberPermissions(ctx context.Context, in *RequestGetGroupMemberPermissions, opts ...grpc.CallOption) (*ResponseGetGroupMemberPermissions, error) {
	out := new(ResponseGetGroupMemberPermissions)
	err := grpc.Invoke(ctx, "/dialog.Groups/GetGroupMemberPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) TransferOwnership(ctx context.Context, in *RequestTransferOwnership, opts ...grpc.CallOption) (*ResponseSeqDate, error) {
	out := new(ResponseSeqDate)
	err := grpc.Invoke(ctx, "/dialog.Groups/TransferOwnership", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) GetGroupInviteUrl(ctx context.Context, in *RequestGetGroupInviteUrl, opts ...grpc.CallOption) (*ResponseInviteUrl, error) {
	out := new(ResponseInviteUrl)
	err := grpc.Invoke(ctx, "/dialog.Groups/GetGroupInviteUrl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) GetGroupInviteUrlBase(ctx context.Context, in *RequestGetGroupInviteUrlBase, opts ...grpc.CallOption) (*ResponseGetGroupInviteUrlBase, error) {
	out := new(ResponseGetGroupInviteUrlBase)
	err := grpc.Invoke(ctx, "/dialog.Groups/GetGroupInviteUrlBase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) RevokeInviteUrl(ctx context.Context, in *RequestRevokeInviteUrl, opts ...grpc.CallOption) (*ResponseInviteUrl, error) {
	out := new(ResponseInviteUrl)
	err := grpc.Invoke(ctx, "/dialog.Groups/RevokeInviteUrl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) JoinGroup(ctx context.Context, in *RequestJoinGroup, opts ...grpc.CallOption) (*ResponseJoinGroup, error) {
	out := new(ResponseJoinGroup)
	err := grpc.Invoke(ctx, "/dialog.Groups/JoinGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) JoinGroupByPeer(ctx context.Context, in *RequestJoinGroupByPeer, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Groups/JoinGroupByPeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) MakeUserAdminObsolete(ctx context.Context, in *RequestMakeUserAdminObsolete, opts ...grpc.CallOption) (*ResponseMakeUserAdminObsolete, error) {
	out := new(ResponseMakeUserAdminObsolete)
	err := grpc.Invoke(ctx, "/dialog.Groups/MakeUserAdminObsolete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Groups service

type GroupsServer interface {
	// / deprecated
	LoadFullGroups(context.Context, *RequestLoadFullGroups) (*ResponseLoadFullGroups, error)
	LoadMembers(context.Context, *RequestLoadMembers) (*ResponseLoadMembers, error)
	CreateGroup(context.Context, *RequestCreateGroup) (*ResponseCreateGroup, error)
	EditGroupTitle(context.Context, *RequestEditGroupTitle) (*ResponseSeqDateMid, error)
	SetGroupShortname(context.Context, *RequestSetGroupShortname) (*ResponseSeq, error)
	EditGroupAvatar(context.Context, *RequestEditGroupAvatar) (*ResponseEditGroupAvatar, error)
	RemoveGroupAvatar(context.Context, *RequestRemoveGroupAvatar) (*ResponseSeqDateMid, error)
	EditGroupTopic(context.Context, *RequestEditGroupTopic) (*ResponseSeqDate, error)
	EditGroupAbout(context.Context, *RequestEditGroupAbout) (*ResponseSeqDate, error)
	InviteUser(context.Context, *RequestInviteUser) (*ResponseSeqDateMid, error)
	LeaveGroup(context.Context, *RequestLeaveGroup) (*ResponseSeqDateMid, error)
	KickUser(context.Context, *RequestKickUser) (*ResponseSeqDateMid, error)
	MakeUserAdmin(context.Context, *RequestMakeUserAdmin) (*ResponseSeqDate, error)
	GetGroupMemberPermissions(context.Context, *RequestGetGroupMemberPermissions) (*ResponseGetGroupMemberPermissions, error)
	TransferOwnership(context.Context, *RequestTransferOwnership) (*ResponseSeqDate, error)
	GetGroupInviteUrl(context.Context, *RequestGetGroupInviteUrl) (*ResponseInviteUrl, error)
	GetGroupInviteUrlBase(context.Context, *RequestGetGroupInviteUrlBase) (*ResponseGetGroupInviteUrlBase, error)
	RevokeInviteUrl(context.Context, *RequestRevokeInviteUrl) (*ResponseInviteUrl, error)
	JoinGroup(context.Context, *RequestJoinGroup) (*ResponseJoinGroup, error)
	JoinGroupByPeer(context.Context, *RequestJoinGroupByPeer) (*ResponseVoid, error)
	MakeUserAdminObsolete(context.Context, *RequestMakeUserAdminObsolete) (*ResponseMakeUserAdminObsolete, error)
}

func RegisterGroupsServer(s *grpc.Server, srv GroupsServer) {
	s.RegisterService(&_Groups_serviceDesc, srv)
}

func _Groups_LoadFullGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadFullGroups)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).LoadFullGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/LoadFullGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).LoadFullGroups(ctx, req.(*RequestLoadFullGroups))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_LoadMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadMembers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).LoadMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/LoadMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).LoadMembers(ctx, req.(*RequestLoadMembers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreateGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).CreateGroup(ctx, req.(*RequestCreateGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_EditGroupTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditGroupTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).EditGroupTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/EditGroupTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).EditGroupTitle(ctx, req.(*RequestEditGroupTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_SetGroupShortname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetGroupShortname)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).SetGroupShortname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/SetGroupShortname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).SetGroupShortname(ctx, req.(*RequestSetGroupShortname))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_EditGroupAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditGroupAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).EditGroupAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/EditGroupAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).EditGroupAvatar(ctx, req.(*RequestEditGroupAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_RemoveGroupAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRemoveGroupAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).RemoveGroupAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/RemoveGroupAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).RemoveGroupAvatar(ctx, req.(*RequestRemoveGroupAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_EditGroupTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditGroupTopic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).EditGroupTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/EditGroupTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).EditGroupTopic(ctx, req.(*RequestEditGroupTopic))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_EditGroupAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditGroupAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).EditGroupAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/EditGroupAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).EditGroupAbout(ctx, req.(*RequestEditGroupAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_InviteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInviteUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).InviteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/InviteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).InviteUser(ctx, req.(*RequestInviteUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLeaveGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/LeaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).LeaveGroup(ctx, req.(*RequestLeaveGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_KickUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestKickUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).KickUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/KickUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).KickUser(ctx, req.(*RequestKickUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_MakeUserAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMakeUserAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).MakeUserAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/MakeUserAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).MakeUserAdmin(ctx, req.(*RequestMakeUserAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_GetGroupMemberPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetGroupMemberPermissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).GetGroupMemberPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/GetGroupMemberPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).GetGroupMemberPermissions(ctx, req.(*RequestGetGroupMemberPermissions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTransferOwnership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/TransferOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).TransferOwnership(ctx, req.(*RequestTransferOwnership))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_GetGroupInviteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetGroupInviteUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).GetGroupInviteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/GetGroupInviteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).GetGroupInviteUrl(ctx, req.(*RequestGetGroupInviteUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_GetGroupInviteUrlBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetGroupInviteUrlBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).GetGroupInviteUrlBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/GetGroupInviteUrlBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).GetGroupInviteUrlBase(ctx, req.(*RequestGetGroupInviteUrlBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_RevokeInviteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRevokeInviteUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).RevokeInviteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/RevokeInviteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).RevokeInviteUrl(ctx, req.(*RequestRevokeInviteUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestJoinGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/JoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).JoinGroup(ctx, req.(*RequestJoinGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_JoinGroupByPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestJoinGroupByPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).JoinGroupByPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/JoinGroupByPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).JoinGroupByPeer(ctx, req.(*RequestJoinGroupByPeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_MakeUserAdminObsolete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMakeUserAdminObsolete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).MakeUserAdminObsolete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/MakeUserAdminObsolete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).MakeUserAdminObsolete(ctx, req.(*RequestMakeUserAdminObsolete))
	}
	return interceptor(ctx, in, info, handler)
}

var _Groups_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Groups",
	HandlerType: (*GroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadFullGroups",
			Handler:    _Groups_LoadFullGroups_Handler,
		},
		{
			MethodName: "LoadMembers",
			Handler:    _Groups_LoadMembers_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Groups_CreateGroup_Handler,
		},
		{
			MethodName: "EditGroupTitle",
			Handler:    _Groups_EditGroupTitle_Handler,
		},
		{
			MethodName: "SetGroupShortname",
			Handler:    _Groups_SetGroupShortname_Handler,
		},
		{
			MethodName: "EditGroupAvatar",
			Handler:    _Groups_EditGroupAvatar_Handler,
		},
		{
			MethodName: "RemoveGroupAvatar",
			Handler:    _Groups_RemoveGroupAvatar_Handler,
		},
		{
			MethodName: "EditGroupTopic",
			Handler:    _Groups_EditGroupTopic_Handler,
		},
		{
			MethodName: "EditGroupAbout",
			Handler:    _Groups_EditGroupAbout_Handler,
		},
		{
			MethodName: "InviteUser",
			Handler:    _Groups_InviteUser_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _Groups_LeaveGroup_Handler,
		},
		{
			MethodName: "KickUser",
			Handler:    _Groups_KickUser_Handler,
		},
		{
			MethodName: "MakeUserAdmin",
			Handler:    _Groups_MakeUserAdmin_Handler,
		},
		{
			MethodName: "GetGroupMemberPermissions",
			Handler:    _Groups_GetGroupMemberPermissions_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _Groups_TransferOwnership_Handler,
		},
		{
			MethodName: "GetGroupInviteUrl",
			Handler:    _Groups_GetGroupInviteUrl_Handler,
		},
		{
			MethodName: "GetGroupInviteUrlBase",
			Handler:    _Groups_GetGroupInviteUrlBase_Handler,
		},
		{
			MethodName: "RevokeInviteUrl",
			Handler:    _Groups_RevokeInviteUrl_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _Groups_JoinGroup_Handler,
		},
		{
			MethodName: "JoinGroupByPeer",
			Handler:    _Groups_JoinGroupByPeer_Handler,
		},
		{
			MethodName: "MakeUserAdminObsolete",
			Handler:    _Groups_MakeUserAdminObsolete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "groups.proto",
}

func (m *Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Member) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Uid))
	}
	if m.InviterUid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.InviterUid))
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Date))
	}
	if m.IsAdmin != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.IsAdmin.Size()))
		n1, err := m.IsAdmin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Permissions) > 0 {
		dAtA3 := make([]byte, len(m.Permissions)*10)
		var j2 int
		for _, num := range m.Permissions {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Id))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Avatar != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Avatar.Size()))
		n4, err := m.Avatar.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.IsMember != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.IsMember.Size()))
		n5, err := m.IsMember.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.CreatorUid != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.CreatorUid))
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintGroups(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CreateDate != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.CreateDate))
	}
	if m.IsAdmin != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.IsAdmin.Size()))
		n6, err := m.IsAdmin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Theme != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Theme.Size()))
		n7, err := m.Theme.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.About != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.About.Size()))
		n8, err := m.About.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Shortname != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Shortname.Size()))
		n9, err := m.Shortname.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.IsHidden != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.IsHidden.Size()))
		n10, err := m.IsHidden.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.MembersAmount != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.MembersAmount.Size()))
		n11, err := m.MembersAmount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.GroupType != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupType))
	}
	if m.CanSendMessage != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.CanSendMessage.Size()))
		n12, err := m.CanSendMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.SpaceId != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.SpaceId.Size()))
		n13, err := m.SpaceId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *GroupFull) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupFull) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Id))
	}
	if m.Theme != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Theme.Size()))
		n14, err := m.Theme.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.About != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.About.Size()))
		n15, err := m.About.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.OwnerUid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.OwnerUid))
	}
	if m.CreateDate != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.CreateDate))
	}
	if m.CanViewMembers != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.CanViewMembers.Size()))
		n16, err := m.CanViewMembers.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.CanInvitePeople != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.CanInvitePeople.Size()))
		n17, err := m.CanInvitePeople.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.IsSharedHistory != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.IsSharedHistory.Size()))
		n18, err := m.IsSharedHistory.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.IsAsyncMembers != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.IsAsyncMembers.Size()))
		n19, err := m.IsAsyncMembers.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0x62
			i++
			i = encodeVarintGroups(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestLoadFullGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadFullGroups) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGroups(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ResponseLoadFullGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadFullGroups) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGroups(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestLoadMembers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadMembers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Group != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Group.Size()))
		n20, err := m.Group.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Limit))
	}
	if m.Next != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Next.Size()))
		n21, err := m.Next.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *ResponseLoadMembers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadMembers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGroups(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Next != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Next.Size()))
		n22, err := m.Next.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *UpdateGroupTitleChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupTitleChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroups(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	return i, nil
}

func (m *UpdateGroupAvatarChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupAvatarChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.Avatar != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Avatar.Size()))
		n23, err := m.Avatar.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *UpdateGroupTopicChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupTopicChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.Topic != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Topic.Size()))
		n24, err := m.Topic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *UpdateGroupAboutChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupAboutChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.About != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.About.Size()))
		n25, err := m.About.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *UpdateGroupOwnerChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupOwnerChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *UpdateGroupHistoryShared) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupHistoryShared) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	return i, nil
}

func (m *UpdateGroupCanSendMessagesChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupCanSendMessagesChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.CanSendMessages {
		dAtA[i] = 0x10
		i++
		if m.CanSendMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateGroupCanViewMembersChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupCanViewMembersChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.CanViewMembers {
		dAtA[i] = 0x10
		i++
		if m.CanViewMembers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateGroupCanInviteMembersChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupCanInviteMembersChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.CanInviteMembers {
		dAtA[i] = 0x10
		i++
		if m.CanInviteMembers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateGroupMemberChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupMemberChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.IsMember {
		dAtA[i] = 0x10
		i++
		if m.IsMember {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateGroupMembersBecameAsync) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupMembersBecameAsync) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	return i, nil
}

func (m *UpdateGroupMembersUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupMembersUpdated) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGroups(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateGroupMemberDiff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupMemberDiff) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RemovedUsers) > 0 {
		dAtA27 := make([]byte, len(m.RemovedUsers)*10)
		var j26 int
		for _, num1 := range m.RemovedUsers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(j26))
		i += copy(dAtA[i:], dAtA27[:j26])
	}
	if len(m.AddedMembers) > 0 {
		for _, msg := range m.AddedMembers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGroups(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MembersCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.MembersCount))
	}
	return i, nil
}

func (m *UpdateGroupMembersCountChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupMembersCountChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.MembersCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.MembersCount))
	}
	return i, nil
}

func (m *UpdateGroupMemberAdminChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupMemberAdminChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.UserId))
	}
	if m.IsAdmin {
		dAtA[i] = 0x18
		i++
		if m.IsAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RequestCreateGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCreateGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Rid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroups(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGroups(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.GroupType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupType))
	}
	if len(m.Optimizations) > 0 {
		dAtA29 := make([]byte, len(m.Optimizations)*10)
		var j28 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA29[j28] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j28++
			}
			dAtA29[j28] = uint8(num)
			j28++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(j28))
		i += copy(dAtA[i:], dAtA29[:j28])
	}
	if m.Username != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Username.Size()))
		n30, err := m.Username.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.SpaceId != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.SpaceId.Size()))
		n31, err := m.SpaceId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *ResponseCreateGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseCreateGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Seq))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroups(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if m.Group != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Group.Size()))
		n32, err := m.Group.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGroups(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UserPeers) > 0 {
		for _, msg := range m.UserPeers {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGroups(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestEditGroupTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditGroupTitle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupPeer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupPeer.Size()))
		n33, err := m.GroupPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Rid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Rid))
	}
	if len(m.Optimizations) > 0 {
		dAtA35 := make([]byte, len(m.Optimizations)*10)
		var j34 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA35[j34] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j34++
			}
			dAtA35[j34] = uint8(num)
			j34++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(j34))
		i += copy(dAtA[i:], dAtA35[:j34])
	}
	return i, nil
}

func (m *RequestSetGroupShortname) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSetGroupShortname) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Peer.Size()))
		n36, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if len(m.Shortname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroups(dAtA, i, uint64(len(m.Shortname)))
		i += copy(dAtA[i:], m.Shortname)
	}
	return i, nil
}

func (m *RequestEditGroupAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditGroupAvatar) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupPeer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupPeer.Size()))
		n37, err := m.GroupPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.FileLocation != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.FileLocation.Size()))
		n38, err := m.FileLocation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if m.Rid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Rid))
	}
	if len(m.Optimizations) > 0 {
		dAtA40 := make([]byte, len(m.Optimizations)*10)
		var j39 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA40[j39] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j39++
			}
			dAtA40[j39] = uint8(num)
			j39++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(j39))
		i += copy(dAtA[i:], dAtA40[:j39])
	}
	return i, nil
}

func (m *ResponseEditGroupAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseEditGroupAvatar) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Avatar != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Avatar.Size()))
		n41, err := m.Avatar.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if m.Seq != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Seq))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if m.Date != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Date))
	}
	if m.Mid != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Mid.Size()))
		n42, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}

func (m *RequestRemoveGroupAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRemoveGroupAvatar) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupPeer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupPeer.Size()))
		n43, err := m.GroupPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.Rid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Rid))
	}
	if len(m.Optimizations) > 0 {
		dAtA45 := make([]byte, len(m.Optimizations)*10)
		var j44 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA45[j44] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j44++
			}
			dAtA45[j44] = uint8(num)
			j44++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(j44))
		i += copy(dAtA[i:], dAtA45[:j44])
	}
	return i, nil
}

func (m *RequestEditGroupTopic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditGroupTopic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupPeer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupPeer.Size()))
		n46, err := m.GroupPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if m.Rid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Rid))
	}
	if m.Topic != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Topic.Size()))
		n47, err := m.Topic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	if len(m.Optimizations) > 0 {
		dAtA49 := make([]byte, len(m.Optimizations)*10)
		var j48 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA49[j48] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j48++
			}
			dAtA49[j48] = uint8(num)
			j48++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintGroups(dAtA, i, uint64(j48))
		i += copy(dAtA[i:], dAtA49[:j48])
	}
	return i, nil
}

func (m *RequestEditGroupAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditGroupAbout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupPeer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupPeer.Size()))
		n50, err := m.GroupPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	if m.Rid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Rid))
	}
	if m.About != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.About.Size()))
		n51, err := m.About.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	if len(m.Optimizations) > 0 {
		dAtA53 := make([]byte, len(m.Optimizations)*10)
		var j52 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA53[j52] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j52++
			}
			dAtA53[j52] = uint8(num)
			j52++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(j52))
		i += copy(dAtA[i:], dAtA53[:j52])
	}
	return i, nil
}

func (m *RequestInviteUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestInviteUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupPeer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupPeer.Size()))
		n54, err := m.GroupPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	if m.User != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.User.Size()))
		n55, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	if m.Rid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Rid))
	}
	if len(m.Optimizations) > 0 {
		dAtA57 := make([]byte, len(m.Optimizations)*10)
		var j56 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA57[j56] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j56++
			}
			dAtA57[j56] = uint8(num)
			j56++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(j56))
		i += copy(dAtA[i:], dAtA57[:j56])
	}
	return i, nil
}

func (m *RequestLeaveGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLeaveGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupPeer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupPeer.Size()))
		n58, err := m.GroupPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	if m.Rid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Rid))
	}
	if len(m.Optimizations) > 0 {
		dAtA60 := make([]byte, len(m.Optimizations)*10)
		var j59 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA60[j59] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j59++
			}
			dAtA60[j59] = uint8(num)
			j59++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(j59))
		i += copy(dAtA[i:], dAtA60[:j59])
	}
	return i, nil
}

func (m *RequestKickUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestKickUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupPeer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupPeer.Size()))
		n61, err := m.GroupPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	if m.User != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.User.Size()))
		n62, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	if m.Rid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Rid))
	}
	if len(m.Optimizations) > 0 {
		dAtA64 := make([]byte, len(m.Optimizations)*10)
		var j63 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA64[j63] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j63++
			}
			dAtA64[j63] = uint8(num)
			j63++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(j63))
		i += copy(dAtA[i:], dAtA64[:j63])
	}
	return i, nil
}

func (m *RequestMakeUserAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMakeUserAdmin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupPeer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupPeer.Size()))
		n65, err := m.GroupPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	if m.UserPeer != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.UserPeer.Size()))
		n66, err := m.UserPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	if len(m.Permissions) > 0 {
		dAtA68 := make([]byte, len(m.Permissions)*10)
		var j67 int
		for _, num := range m.Permissions {
			for num >= 1<<7 {
				dAtA68[j67] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j67++
			}
			dAtA68[j67] = uint8(num)
			j67++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(j67))
		i += copy(dAtA[i:], dAtA68[:j67])
	}
	return i, nil
}

func (m *GroupMemberPermission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMemberPermission) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.UserId))
	}
	if len(m.Permissions) > 0 {
		dAtA70 := make([]byte, len(m.Permissions)*10)
		var j69 int
		for _, num := range m.Permissions {
			for num >= 1<<7 {
				dAtA70[j69] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j69++
			}
			dAtA70[j69] = uint8(num)
			j69++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroups(dAtA, i, uint64(j69))
		i += copy(dAtA[i:], dAtA70[:j69])
	}
	return i, nil
}

func (m *RequestGetGroupMemberPermissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetGroupMemberPermissions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if len(m.UserIds) > 0 {
		dAtA72 := make([]byte, len(m.UserIds)*10)
		var j71 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA72[j71] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j71++
			}
			dAtA72[j71] = uint8(num)
			j71++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroups(dAtA, i, uint64(j71))
		i += copy(dAtA[i:], dAtA72[:j71])
	}
	return i, nil
}

func (m *ResponseGetGroupMemberPermissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetGroupMemberPermissions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Permissions) > 0 {
		for _, msg := range m.Permissions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGroups(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateGroupMemberPermissionsChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupMemberPermissionsChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.UserId))
	}
	if len(m.Permissions) > 0 {
		dAtA74 := make([]byte, len(m.Permissions)*10)
		var j73 int
		for _, num := range m.Permissions {
			for num >= 1<<7 {
				dAtA74[j73] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j73++
			}
			dAtA74[j73] = uint8(num)
			j73++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(j73))
		i += copy(dAtA[i:], dAtA74[:j73])
	}
	return i, nil
}

func (m *RequestTransferOwnership) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestTransferOwnership) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupPeer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupPeer.Size()))
		n75, err := m.GroupPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	if m.NewOwner != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.NewOwner))
	}
	return i, nil
}

func (m *ResponseInviteUrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseInviteUrl) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *RequestGetGroupInviteUrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetGroupInviteUrl) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupPeer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupPeer.Size()))
		n76, err := m.GroupPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}

func (m *RequestGetGroupInviteUrlBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetGroupInviteUrlBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResponseGetGroupInviteUrlBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetGroupInviteUrlBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *RequestRevokeInviteUrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRevokeInviteUrl) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupPeer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupPeer.Size()))
		n77, err := m.GroupPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}

func (m *RequestJoinGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestJoinGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Optimizations) > 0 {
		dAtA79 := make([]byte, len(m.Optimizations)*10)
		var j78 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA79[j78] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j78++
			}
			dAtA79[j78] = uint8(num)
			j78++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroups(dAtA, i, uint64(j78))
		i += copy(dAtA[i:], dAtA79[:j78])
	}
	return i, nil
}

func (m *ResponseJoinGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseJoinGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Group != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Group.Size()))
		n80, err := m.Group.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	if m.Seq != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Seq))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if m.Date != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Date))
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGroups(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UserPeers) > 0 {
		for _, msg := range m.UserPeers {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintGroups(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Mid != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Mid.Size()))
		n81, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	return i, nil
}

func (m *RequestJoinGroupByPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestJoinGroupByPeer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Peer.Size()))
		n82, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	return i, nil
}

func (m *RequestMakeUserAdminObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMakeUserAdminObsolete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupPeer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupPeer.Size()))
		n83, err := m.GroupPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	if m.UserPeer != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.UserPeer.Size()))
		n84, err := m.UserPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	return i, nil
}

func (m *ResponseMakeUserAdminObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseMakeUserAdminObsolete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGroups(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Seq != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Seq))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	return i, nil
}

func (m *UpdateGroupInviteObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupInviteObsolete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.InviteUid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.InviteUid))
	}
	if m.Date != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Date))
	}
	if m.Rid != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Rid))
	}
	if m.Mid != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Mid.Size()))
		n85, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n85
	}
	return i, nil
}

func (m *UpdateGroupUserInvitedObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupUserInvitedObsolete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Uid))
	}
	if m.InviterUid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.InviterUid))
	}
	if m.Date != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Date))
	}
	if m.Rid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Rid))
	}
	if m.Mid != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Mid.Size()))
		n86, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n86
	}
	return i, nil
}

func (m *UpdateGroupUserLeaveObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupUserLeaveObsolete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Uid))
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Date))
	}
	if m.Mid != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Mid.Size()))
		n87, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n87
	}
	return i, nil
}

func (m *UpdateGroupUserKickObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupUserKickObsolete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Uid))
	}
	if m.KickerUid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.KickerUid))
	}
	if m.Date != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Date))
	}
	if m.Mid != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Mid.Size()))
		n88, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	return i, nil
}

func (m *UpdateGroupMembersUpdateObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupMembersUpdateObsolete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGroups(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateGroupTitleChangedObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupTitleChangedObsolete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Uid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Date != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Date))
	}
	if m.Mid != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Mid.Size()))
		n89, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n89
	}
	return i, nil
}

func (m *UpdateGroupTopicChangedObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupTopicChangedObsolete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.Rid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Rid))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Uid))
	}
	if m.Topic != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Topic.Size()))
		n90, err := m.Topic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n90
	}
	if m.Date != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Date))
	}
	return i, nil
}

func (m *UpdateGroupAboutChangedObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupAboutChangedObsolete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.About != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.About.Size()))
		n91, err := m.About.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n91
	}
	return i, nil
}

func (m *UpdateGroupAvatarChangedObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupAvatarChangedObsolete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Uid))
	}
	if m.Avatar != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Avatar.Size()))
		n92, err := m.Avatar.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n92
	}
	if m.Date != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Date))
	}
	if m.Mid != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Mid.Size()))
		n93, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n93
	}
	return i, nil
}

func (m *UpdateGroupShortnameChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupShortnameChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.GroupId))
	}
	if len(m.Shortname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroups(dAtA, i, uint64(len(m.Shortname)))
		i += copy(dAtA[i:], m.Shortname)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGroups(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func encodeFixed64Groups(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Groups(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGroups(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Member) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovGroups(uint64(m.Uid))
	}
	if m.InviterUid != 0 {
		n += 1 + sovGroups(uint64(m.InviterUid))
	}
	if m.Date != 0 {
		n += 1 + sovGroups(uint64(m.Date))
	}
	if m.IsAdmin != nil {
		l = m.IsAdmin.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if len(m.Permissions) > 0 {
		l = 0
		for _, e := range m.Permissions {
			l += sovGroups(uint64(e))
		}
		n += 1 + sovGroups(uint64(l)) + l
	}
	return n
}

func (m *Group) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGroups(uint64(m.Id))
	}
	if m.AccessHash != 0 {
		n += 1 + sovGroups(uint64(m.AccessHash))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.IsMember != nil {
		l = m.IsMember.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.CreatorUid != 0 {
		n += 1 + sovGroups(uint64(m.CreatorUid))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovGroups(uint64(l))
		}
	}
	if m.CreateDate != 0 {
		n += 1 + sovGroups(uint64(m.CreateDate))
	}
	if m.IsAdmin != nil {
		l = m.IsAdmin.Size()
		n += 2 + l + sovGroups(uint64(l))
	}
	if m.Theme != nil {
		l = m.Theme.Size()
		n += 2 + l + sovGroups(uint64(l))
	}
	if m.About != nil {
		l = m.About.Size()
		n += 2 + l + sovGroups(uint64(l))
	}
	if m.Shortname != nil {
		l = m.Shortname.Size()
		n += 2 + l + sovGroups(uint64(l))
	}
	if m.IsHidden != nil {
		l = m.IsHidden.Size()
		n += 2 + l + sovGroups(uint64(l))
	}
	if m.MembersAmount != nil {
		l = m.MembersAmount.Size()
		n += 2 + l + sovGroups(uint64(l))
	}
	if m.GroupType != 0 {
		n += 2 + sovGroups(uint64(m.GroupType))
	}
	if m.CanSendMessage != nil {
		l = m.CanSendMessage.Size()
		n += 2 + l + sovGroups(uint64(l))
	}
	if m.SpaceId != nil {
		l = m.SpaceId.Size()
		n += 2 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *GroupFull) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGroups(uint64(m.Id))
	}
	if m.Theme != nil {
		l = m.Theme.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.OwnerUid != 0 {
		n += 1 + sovGroups(uint64(m.OwnerUid))
	}
	if m.CreateDate != 0 {
		n += 1 + sovGroups(uint64(m.CreateDate))
	}
	if m.CanViewMembers != nil {
		l = m.CanViewMembers.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.CanInvitePeople != nil {
		l = m.CanInvitePeople.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.IsSharedHistory != nil {
		l = m.IsSharedHistory.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.IsAsyncMembers != nil {
		l = m.IsAsyncMembers.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovGroups(uint64(l))
		}
	}
	return n
}

func (m *RequestLoadFullGroups) Size() (n int) {
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovGroups(uint64(l))
		}
	}
	return n
}

func (m *ResponseLoadFullGroups) Size() (n int) {
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovGroups(uint64(l))
		}
	}
	return n
}

func (m *RequestLoadMembers) Size() (n int) {
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovGroups(uint64(m.Limit))
	}
	if m.Next != nil {
		l = m.Next.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *ResponseLoadMembers) Size() (n int) {
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovGroups(uint64(l))
		}
	}
	if m.Next != nil {
		l = m.Next.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *UpdateGroupTitleChanged) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *UpdateGroupAvatarChanged) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *UpdateGroupTopicChanged) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.Topic != nil {
		l = m.Topic.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *UpdateGroupAboutChanged) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *UpdateGroupOwnerChanged) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.UserId != 0 {
		n += 1 + sovGroups(uint64(m.UserId))
	}
	return n
}

func (m *UpdateGroupHistoryShared) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	return n
}

func (m *UpdateGroupCanSendMessagesChanged) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.CanSendMessages {
		n += 2
	}
	return n
}

func (m *UpdateGroupCanViewMembersChanged) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.CanViewMembers {
		n += 2
	}
	return n
}

func (m *UpdateGroupCanInviteMembersChanged) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.CanInviteMembers {
		n += 2
	}
	return n
}

func (m *UpdateGroupMemberChanged) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.IsMember {
		n += 2
	}
	return n
}

func (m *UpdateGroupMembersBecameAsync) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	return n
}

func (m *UpdateGroupMembersUpdated) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovGroups(uint64(l))
		}
	}
	return n
}

func (m *UpdateGroupMemberDiff) Size() (n int) {
	var l int
	_ = l
	if len(m.RemovedUsers) > 0 {
		l = 0
		for _, e := range m.RemovedUsers {
			l += sovGroups(uint64(e))
		}
		n += 1 + sovGroups(uint64(l)) + l
	}
	if len(m.AddedMembers) > 0 {
		for _, e := range m.AddedMembers {
			l = e.Size()
			n += 1 + l + sovGroups(uint64(l))
		}
	}
	if m.MembersCount != 0 {
		n += 1 + sovGroups(uint64(m.MembersCount))
	}
	return n
}

func (m *UpdateGroupMembersCountChanged) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.MembersCount != 0 {
		n += 1 + sovGroups(uint64(m.MembersCount))
	}
	return n
}

func (m *UpdateGroupMemberAdminChanged) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.UserId != 0 {
		n += 1 + sovGroups(uint64(m.UserId))
	}
	if m.IsAdmin {
		n += 2
	}
	return n
}

func (m *RequestCreateGroup) Size() (n int) {
	var l int
	_ = l
	if m.Rid != 0 {
		n += 1 + sovGroups(uint64(m.Rid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGroups(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovGroups(uint64(l))
		}
	}
	if m.GroupType != 0 {
		n += 1 + sovGroups(uint64(m.GroupType))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovGroups(uint64(e))
		}
		n += 1 + sovGroups(uint64(l)) + l
	}
	if m.Username != nil {
		l = m.Username.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.SpaceId != nil {
		l = m.SpaceId.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *ResponseCreateGroup) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovGroups(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovGroups(uint64(l))
		}
	}
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovGroups(uint64(l))
		}
	}
	return n
}

func (m *RequestEditGroupTitle) Size() (n int) {
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Rid != 0 {
		n += 1 + sovGroups(uint64(m.Rid))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovGroups(uint64(e))
		}
		n += 1 + sovGroups(uint64(l)) + l
	}
	return n
}

func (m *RequestSetGroupShortname) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	l = len(m.Shortname)
	if l > 0 {
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *RequestEditGroupAvatar) Size() (n int) {
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.FileLocation != nil {
		l = m.FileLocation.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Rid != 0 {
		n += 1 + sovGroups(uint64(m.Rid))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovGroups(uint64(e))
		}
		n += 1 + sovGroups(uint64(l)) + l
	}
	return n
}

func (m *ResponseEditGroupAvatar) Size() (n int) {
	var l int
	_ = l
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovGroups(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovGroups(uint64(m.Date))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *RequestRemoveGroupAvatar) Size() (n int) {
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Rid != 0 {
		n += 1 + sovGroups(uint64(m.Rid))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovGroups(uint64(e))
		}
		n += 1 + sovGroups(uint64(l)) + l
	}
	return n
}

func (m *RequestEditGroupTopic) Size() (n int) {
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Rid != 0 {
		n += 1 + sovGroups(uint64(m.Rid))
	}
	if m.Topic != nil {
		l = m.Topic.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovGroups(uint64(e))
		}
		n += 1 + sovGroups(uint64(l)) + l
	}
	return n
}

func (m *RequestEditGroupAbout) Size() (n int) {
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Rid != 0 {
		n += 1 + sovGroups(uint64(m.Rid))
	}
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovGroups(uint64(e))
		}
		n += 1 + sovGroups(uint64(l)) + l
	}
	return n
}

func (m *RequestInviteUser) Size() (n int) {
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Rid != 0 {
		n += 1 + sovGroups(uint64(m.Rid))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovGroups(uint64(e))
		}
		n += 1 + sovGroups(uint64(l)) + l
	}
	return n
}

func (m *RequestLeaveGroup) Size() (n int) {
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Rid != 0 {
		n += 1 + sovGroups(uint64(m.Rid))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovGroups(uint64(e))
		}
		n += 1 + sovGroups(uint64(l)) + l
	}
	return n
}

func (m *RequestKickUser) Size() (n int) {
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Rid != 0 {
		n += 1 + sovGroups(uint64(m.Rid))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovGroups(uint64(e))
		}
		n += 1 + sovGroups(uint64(l)) + l
	}
	return n
}

func (m *RequestMakeUserAdmin) Size() (n int) {
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.UserPeer != nil {
		l = m.UserPeer.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if len(m.Permissions) > 0 {
		l = 0
		for _, e := range m.Permissions {
			l += sovGroups(uint64(e))
		}
		n += 1 + sovGroups(uint64(l)) + l
	}
	return n
}

func (m *GroupMemberPermission) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovGroups(uint64(m.UserId))
	}
	if len(m.Permissions) > 0 {
		l = 0
		for _, e := range m.Permissions {
			l += sovGroups(uint64(e))
		}
		n += 1 + sovGroups(uint64(l)) + l
	}
	return n
}

func (m *RequestGetGroupMemberPermissions) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovGroups(uint64(e))
		}
		n += 1 + sovGroups(uint64(l)) + l
	}
	return n
}

func (m *ResponseGetGroupMemberPermissions) Size() (n int) {
	var l int
	_ = l
	if len(m.Permissions) > 0 {
		for _, e := range m.Permissions {
			l = e.Size()
			n += 1 + l + sovGroups(uint64(l))
		}
	}
	return n
}

func (m *UpdateGroupMemberPermissionsChanged) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.UserId != 0 {
		n += 1 + sovGroups(uint64(m.UserId))
	}
	if len(m.Permissions) > 0 {
		l = 0
		for _, e := range m.Permissions {
			l += sovGroups(uint64(e))
		}
		n += 1 + sovGroups(uint64(l)) + l
	}
	return n
}

func (m *RequestTransferOwnership) Size() (n int) {
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.NewOwner != 0 {
		n += 1 + sovGroups(uint64(m.NewOwner))
	}
	return n
}

func (m *ResponseInviteUrl) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *RequestGetGroupInviteUrl) Size() (n int) {
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *RequestGetGroupInviteUrlBase) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ResponseGetGroupInviteUrlBase) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *RequestRevokeInviteUrl) Size() (n int) {
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *RequestJoinGroup) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovGroups(uint64(l))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovGroups(uint64(e))
		}
		n += 1 + sovGroups(uint64(l)) + l
	}
	return n
}

func (m *ResponseJoinGroup) Size() (n int) {
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovGroups(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovGroups(uint64(m.Date))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovGroups(uint64(l))
		}
	}
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovGroups(uint64(l))
		}
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *RequestJoinGroupByPeer) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *RequestMakeUserAdminObsolete) Size() (n int) {
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.UserPeer != nil {
		l = m.UserPeer.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *ResponseMakeUserAdminObsolete) Size() (n int) {
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovGroups(uint64(l))
		}
	}
	if m.Seq != 0 {
		n += 1 + sovGroups(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *UpdateGroupInviteObsolete) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.InviteUid != 0 {
		n += 1 + sovGroups(uint64(m.InviteUid))
	}
	if m.Date != 0 {
		n += 1 + sovGroups(uint64(m.Date))
	}
	if m.Rid != 0 {
		n += 1 + sovGroups(uint64(m.Rid))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *UpdateGroupUserInvitedObsolete) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.Uid != 0 {
		n += 1 + sovGroups(uint64(m.Uid))
	}
	if m.InviterUid != 0 {
		n += 1 + sovGroups(uint64(m.InviterUid))
	}
	if m.Date != 0 {
		n += 1 + sovGroups(uint64(m.Date))
	}
	if m.Rid != 0 {
		n += 1 + sovGroups(uint64(m.Rid))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *UpdateGroupUserLeaveObsolete) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.Uid != 0 {
		n += 1 + sovGroups(uint64(m.Uid))
	}
	if m.Date != 0 {
		n += 1 + sovGroups(uint64(m.Date))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *UpdateGroupUserKickObsolete) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.Uid != 0 {
		n += 1 + sovGroups(uint64(m.Uid))
	}
	if m.KickerUid != 0 {
		n += 1 + sovGroups(uint64(m.KickerUid))
	}
	if m.Date != 0 {
		n += 1 + sovGroups(uint64(m.Date))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *UpdateGroupMembersUpdateObsolete) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovGroups(uint64(l))
		}
	}
	return n
}

func (m *UpdateGroupTitleChangedObsolete) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.Uid != 0 {
		n += 1 + sovGroups(uint64(m.Uid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovGroups(uint64(m.Date))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *UpdateGroupTopicChangedObsolete) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.Rid != 0 {
		n += 1 + sovGroups(uint64(m.Rid))
	}
	if m.Uid != 0 {
		n += 1 + sovGroups(uint64(m.Uid))
	}
	if m.Topic != nil {
		l = m.Topic.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovGroups(uint64(m.Date))
	}
	return n
}

func (m *UpdateGroupAboutChangedObsolete) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *UpdateGroupAvatarChangedObsolete) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	if m.Uid != 0 {
		n += 1 + sovGroups(uint64(m.Uid))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovGroups(uint64(m.Date))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovGroups(uint64(l))
	}
	return n
}

func (m *UpdateGroupShortnameChanged) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroups(uint64(m.GroupId))
	}
	l = len(m.Shortname)
	if l > 0 {
		n += 1 + l + sovGroups(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovGroups(uint64(m.Uid))
	}
	return n
}

func sovGroups(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGroups(x uint64) (n int) {
	return sovGroups(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Member) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Member{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`InviterUid:` + fmt.Sprintf("%v", this.InviterUid) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`IsAdmin:` + strings.Replace(fmt.Sprintf("%v", this.IsAdmin), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`Permissions:` + fmt.Sprintf("%v", this.Permissions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Group) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Group{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`AccessHash:` + fmt.Sprintf("%v", this.AccessHash) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Avatar:` + strings.Replace(fmt.Sprintf("%v", this.Avatar), "Avatar", "Avatar", 1) + `,`,
		`IsMember:` + strings.Replace(fmt.Sprintf("%v", this.IsMember), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`CreatorUid:` + fmt.Sprintf("%v", this.CreatorUid) + `,`,
		`Members:` + strings.Replace(fmt.Sprintf("%v", this.Members), "Member", "Member", 1) + `,`,
		`CreateDate:` + fmt.Sprintf("%v", this.CreateDate) + `,`,
		`IsAdmin:` + strings.Replace(fmt.Sprintf("%v", this.IsAdmin), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`Theme:` + strings.Replace(fmt.Sprintf("%v", this.Theme), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Shortname:` + strings.Replace(fmt.Sprintf("%v", this.Shortname), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`IsHidden:` + strings.Replace(fmt.Sprintf("%v", this.IsHidden), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`MembersAmount:` + strings.Replace(fmt.Sprintf("%v", this.MembersAmount), "Int32Value", "google_protobuf.Int32Value", 1) + `,`,
		`GroupType:` + fmt.Sprintf("%v", this.GroupType) + `,`,
		`CanSendMessage:` + strings.Replace(fmt.Sprintf("%v", this.CanSendMessage), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`SpaceId:` + strings.Replace(fmt.Sprintf("%v", this.SpaceId), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GroupFull) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GroupFull{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Theme:` + strings.Replace(fmt.Sprintf("%v", this.Theme), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`OwnerUid:` + fmt.Sprintf("%v", this.OwnerUid) + `,`,
		`CreateDate:` + fmt.Sprintf("%v", this.CreateDate) + `,`,
		`CanViewMembers:` + strings.Replace(fmt.Sprintf("%v", this.CanViewMembers), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`CanInvitePeople:` + strings.Replace(fmt.Sprintf("%v", this.CanInvitePeople), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`IsSharedHistory:` + strings.Replace(fmt.Sprintf("%v", this.IsSharedHistory), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`IsAsyncMembers:` + strings.Replace(fmt.Sprintf("%v", this.IsAsyncMembers), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`Members:` + strings.Replace(fmt.Sprintf("%v", this.Members), "Member", "Member", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadFullGroups) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadFullGroups{`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadFullGroups) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseLoadFullGroups{`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "GroupFull", "GroupFull", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadMembers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadMembers{`,
		`Group:` + strings.Replace(fmt.Sprintf("%v", this.Group), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Next:` + strings.Replace(fmt.Sprintf("%v", this.Next), "BytesValue", "google_protobuf.BytesValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadMembers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseLoadMembers{`,
		`Members:` + strings.Replace(fmt.Sprintf("%v", this.Members), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`Next:` + strings.Replace(fmt.Sprintf("%v", this.Next), "BytesValue", "google_protobuf.BytesValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupTitleChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupTitleChanged{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupAvatarChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupAvatarChanged{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`Avatar:` + strings.Replace(fmt.Sprintf("%v", this.Avatar), "Avatar", "Avatar", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupTopicChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupTopicChanged{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`Topic:` + strings.Replace(fmt.Sprintf("%v", this.Topic), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupAboutChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupAboutChanged{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupOwnerChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupOwnerChanged{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupHistoryShared) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupHistoryShared{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupCanSendMessagesChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupCanSendMessagesChanged{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`CanSendMessages:` + fmt.Sprintf("%v", this.CanSendMessages) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupCanViewMembersChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupCanViewMembersChanged{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`CanViewMembers:` + fmt.Sprintf("%v", this.CanViewMembers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupCanInviteMembersChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupCanInviteMembersChanged{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`CanInviteMembers:` + fmt.Sprintf("%v", this.CanInviteMembers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupMemberChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupMemberChanged{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`IsMember:` + fmt.Sprintf("%v", this.IsMember) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupMembersBecameAsync) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupMembersBecameAsync{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupMembersUpdated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupMembersUpdated{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`Members:` + strings.Replace(fmt.Sprintf("%v", this.Members), "Member", "Member", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupMemberDiff) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupMemberDiff{`,
		`RemovedUsers:` + fmt.Sprintf("%v", this.RemovedUsers) + `,`,
		`AddedMembers:` + strings.Replace(fmt.Sprintf("%v", this.AddedMembers), "Member", "Member", 1) + `,`,
		`MembersCount:` + fmt.Sprintf("%v", this.MembersCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupMembersCountChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupMembersCountChanged{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`MembersCount:` + fmt.Sprintf("%v", this.MembersCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupMemberAdminChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupMemberAdminChanged{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`IsAdmin:` + fmt.Sprintf("%v", this.IsAdmin) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCreateGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCreateGroup{`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Users:` + strings.Replace(fmt.Sprintf("%v", this.Users), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`GroupType:` + fmt.Sprintf("%v", this.GroupType) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`Username:` + strings.Replace(fmt.Sprintf("%v", this.Username), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`SpaceId:` + strings.Replace(fmt.Sprintf("%v", this.SpaceId), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseCreateGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseCreateGroup{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Group:` + strings.Replace(fmt.Sprintf("%v", this.Group), "Group", "Group", 1) + `,`,
		`Users:` + strings.Replace(fmt.Sprintf("%v", this.Users), "User", "User", 1) + `,`,
		`UserPeers:` + strings.Replace(fmt.Sprintf("%v", this.UserPeers), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditGroupTitle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditGroupTitle{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSetGroupShortname) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSetGroupShortname{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`Shortname:` + fmt.Sprintf("%v", this.Shortname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditGroupAvatar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditGroupAvatar{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`FileLocation:` + strings.Replace(fmt.Sprintf("%v", this.FileLocation), "FileLocation", "FileLocation", 1) + `,`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseEditGroupAvatar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseEditGroupAvatar{`,
		`Avatar:` + strings.Replace(fmt.Sprintf("%v", this.Avatar), "Avatar", "Avatar", 1) + `,`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRemoveGroupAvatar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRemoveGroupAvatar{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditGroupTopic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditGroupTopic{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Topic:` + strings.Replace(fmt.Sprintf("%v", this.Topic), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditGroupAbout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditGroupAbout{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestInviteUser) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestInviteUser{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`User:` + strings.Replace(fmt.Sprintf("%v", this.User), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLeaveGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLeaveGroup{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestKickUser) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestKickUser{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`User:` + strings.Replace(fmt.Sprintf("%v", this.User), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestMakeUserAdmin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestMakeUserAdmin{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`UserPeer:` + strings.Replace(fmt.Sprintf("%v", this.UserPeer), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`Permissions:` + fmt.Sprintf("%v", this.Permissions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GroupMemberPermission) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GroupMemberPermission{`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`Permissions:` + fmt.Sprintf("%v", this.Permissions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetGroupMemberPermissions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetGroupMemberPermissions{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`UserIds:` + fmt.Sprintf("%v", this.UserIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetGroupMemberPermissions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseGetGroupMemberPermissions{`,
		`Permissions:` + strings.Replace(fmt.Sprintf("%v", this.Permissions), "GroupMemberPermission", "GroupMemberPermission", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupMemberPermissionsChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupMemberPermissionsChanged{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`Permissions:` + fmt.Sprintf("%v", this.Permissions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestTransferOwnership) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestTransferOwnership{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`NewOwner:` + fmt.Sprintf("%v", this.NewOwner) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseInviteUrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseInviteUrl{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetGroupInviteUrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetGroupInviteUrl{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetGroupInviteUrlBase) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetGroupInviteUrlBase{`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetGroupInviteUrlBase) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseGetGroupInviteUrlBase{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRevokeInviteUrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRevokeInviteUrl{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestJoinGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestJoinGroup{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseJoinGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseJoinGroup{`,
		`Group:` + strings.Replace(fmt.Sprintf("%v", this.Group), "Group", "Group", 1) + `,`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Users:` + strings.Replace(fmt.Sprintf("%v", this.Users), "User", "User", 1) + `,`,
		`UserPeers:` + strings.Replace(fmt.Sprintf("%v", this.UserPeers), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestJoinGroupByPeer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestJoinGroupByPeer{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestMakeUserAdminObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestMakeUserAdminObsolete{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`UserPeer:` + strings.Replace(fmt.Sprintf("%v", this.UserPeer), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseMakeUserAdminObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseMakeUserAdminObsolete{`,
		`Members:` + strings.Replace(fmt.Sprintf("%v", this.Members), "Member", "Member", 1) + `,`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupInviteObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupInviteObsolete{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`InviteUid:` + fmt.Sprintf("%v", this.InviteUid) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupUserInvitedObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupUserInvitedObsolete{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`InviterUid:` + fmt.Sprintf("%v", this.InviterUid) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupUserLeaveObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupUserLeaveObsolete{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupUserKickObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupUserKickObsolete{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`KickerUid:` + fmt.Sprintf("%v", this.KickerUid) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupMembersUpdateObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupMembersUpdateObsolete{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`Members:` + strings.Replace(fmt.Sprintf("%v", this.Members), "Member", "Member", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupTitleChangedObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupTitleChangedObsolete{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupTopicChangedObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupTopicChangedObsolete{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Topic:` + strings.Replace(fmt.Sprintf("%v", this.Topic), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupAboutChangedObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupAboutChangedObsolete{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupAvatarChangedObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupAvatarChangedObsolete{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Avatar:` + strings.Replace(fmt.Sprintf("%v", this.Avatar), "Avatar", "Avatar", 1) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupShortnameChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupShortnameChanged{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`Shortname:` + fmt.Sprintf("%v", this.Shortname) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGroups(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Member) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviterUid", wireType)
			}
			m.InviterUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviterUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsAdmin == nil {
				m.IsAdmin = &google_protobuf.BoolValue{}
			}
			if err := m.IsAdmin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v GroupAdminPermission
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (GroupAdminPermission(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Permissions = append(m.Permissions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroups
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v GroupAdminPermission
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroups
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (GroupAdminPermission(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Permissions = append(m.Permissions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsMember == nil {
				m.IsMember = &google_protobuf.BoolValue{}
			}
			if err := m.IsMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorUid", wireType)
			}
			m.CreatorUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatorUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &Member{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateDate", wireType)
			}
			m.CreateDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsAdmin == nil {
				m.IsAdmin = &google_protobuf.BoolValue{}
			}
			if err := m.IsAdmin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Theme", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Theme == nil {
				m.Theme = &google_protobuf.StringValue{}
			}
			if err := m.Theme.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &google_protobuf.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shortname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shortname == nil {
				m.Shortname = &google_protobuf.StringValue{}
			}
			if err := m.Shortname.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHidden", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsHidden == nil {
				m.IsHidden = &google_protobuf.BoolValue{}
			}
			if err := m.IsHidden.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MembersAmount == nil {
				m.MembersAmount = &google_protobuf.Int32Value{}
			}
			if err := m.MembersAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupType", wireType)
			}
			m.GroupType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupType |= (GroupType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CanSendMessage == nil {
				m.CanSendMessage = &google_protobuf.BoolValue{}
			}
			if err := m.CanSendMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpaceId == nil {
				m.SpaceId = &UUIDValue{}
			}
			if err := m.SpaceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupFull) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupFull: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupFull: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Theme", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Theme == nil {
				m.Theme = &google_protobuf.StringValue{}
			}
			if err := m.Theme.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &google_protobuf.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerUid", wireType)
			}
			m.OwnerUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateDate", wireType)
			}
			m.CreateDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanViewMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CanViewMembers == nil {
				m.CanViewMembers = &google_protobuf.BoolValue{}
			}
			if err := m.CanViewMembers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanInvitePeople", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CanInvitePeople == nil {
				m.CanInvitePeople = &google_protobuf.BoolValue{}
			}
			if err := m.CanInvitePeople.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSharedHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsSharedHistory == nil {
				m.IsSharedHistory = &google_protobuf.BoolValue{}
			}
			if err := m.IsSharedHistory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAsyncMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsAsyncMembers == nil {
				m.IsAsyncMembers = &google_protobuf.BoolValue{}
			}
			if err := m.IsAsyncMembers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &Member{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadFullGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadFullGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadFullGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupOutPeer{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadFullGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadFullGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadFullGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupFull{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadMembers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadMembers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadMembers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &GroupOutPeer{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Next == nil {
				m.Next = &google_protobuf.BytesValue{}
			}
			if err := m.Next.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadMembers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadMembers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadMembers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &UserOutPeer{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Next == nil {
				m.Next = &google_protobuf.BytesValue{}
			}
			if err := m.Next.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupTitleChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupTitleChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupTitleChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupAvatarChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupAvatarChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupAvatarChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupTopicChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupTopicChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupTopicChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topic == nil {
				m.Topic = &google_protobuf.StringValue{}
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupAboutChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupAboutChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupAboutChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &google_protobuf.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupOwnerChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupOwnerChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupOwnerChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupHistoryShared) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupHistoryShared: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupHistoryShared: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupCanSendMessagesChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupCanSendMessagesChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupCanSendMessagesChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendMessages = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupCanViewMembersChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupCanViewMembersChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupCanViewMembersChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanViewMembers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanViewMembers = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupCanInviteMembersChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupCanInviteMembersChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupCanInviteMembersChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanInviteMembers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanInviteMembers = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupMemberChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupMemberChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupMemberChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMember", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMember = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupMembersBecameAsync) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupMembersBecameAsync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupMembersBecameAsync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupMembersUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupMembersUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupMembersUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &Member{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupMemberDiff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupMemberDiff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupMemberDiff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RemovedUsers = append(m.RemovedUsers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroups
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroups
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RemovedUsers = append(m.RemovedUsers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedUsers", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddedMembers = append(m.AddedMembers, &Member{})
			if err := m.AddedMembers[len(m.AddedMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersCount", wireType)
			}
			m.MembersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MembersCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupMembersCountChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupMembersCountChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupMembersCountChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersCount", wireType)
			}
			m.MembersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MembersCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupMemberAdminChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupMemberAdminChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupMemberAdminChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmin = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCreateGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCreateGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCreateGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserOutPeer{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupType", wireType)
			}
			m.GroupType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupType |= (GroupType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroups
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroups
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Username == nil {
				m.Username = &google_protobuf.StringValue{}
			}
			if err := m.Username.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpaceId == nil {
				m.SpaceId = &UUIDValue{}
			}
			if err := m.SpaceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseCreateGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseCreateGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseCreateGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &Group{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditGroupTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditGroupTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditGroupTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &GroupOutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroups
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroups
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSetGroupShortname) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSetGroupShortname: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSetGroupShortname: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &GroupOutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shortname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shortname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditGroupAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditGroupAvatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditGroupAvatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &GroupOutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileLocation == nil {
				m.FileLocation = &FileLocation{}
			}
			if err := m.FileLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroups
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroups
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseEditGroupAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseEditGroupAvatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseEditGroupAvatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRemoveGroupAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRemoveGroupAvatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRemoveGroupAvatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &GroupOutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroups
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroups
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditGroupTopic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditGroupTopic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditGroupTopic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &GroupOutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topic == nil {
				m.Topic = &google_protobuf.StringValue{}
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroups
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroups
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditGroupAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditGroupAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditGroupAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &GroupOutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &google_protobuf.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroups
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroups
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestInviteUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestInviteUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestInviteUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &GroupOutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserOutPeer{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroups
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroups
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLeaveGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLeaveGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLeaveGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &GroupOutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroups
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroups
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestKickUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestKickUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestKickUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &GroupOutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserOutPeer{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroups
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroups
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMakeUserAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMakeUserAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMakeUserAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &GroupOutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserPeer == nil {
				m.UserPeer = &UserOutPeer{}
			}
			if err := m.UserPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v GroupAdminPermission
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (GroupAdminPermission(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Permissions = append(m.Permissions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroups
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v GroupAdminPermission
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroups
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (GroupAdminPermission(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Permissions = append(m.Permissions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMemberPermission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMemberPermission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMemberPermission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v GroupAdminPermission
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (GroupAdminPermission(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Permissions = append(m.Permissions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroups
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v GroupAdminPermission
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroups
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (GroupAdminPermission(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Permissions = append(m.Permissions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetGroupMemberPermissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetGroupMemberPermissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetGroupMemberPermissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroups
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroups
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetGroupMemberPermissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetGroupMemberPermissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetGroupMemberPermissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permissions = append(m.Permissions, &GroupMemberPermission{})
			if err := m.Permissions[len(m.Permissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupMemberPermissionsChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupMemberPermissionsChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupMemberPermissionsChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v GroupAdminPermission
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (GroupAdminPermission(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Permissions = append(m.Permissions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroups
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v GroupAdminPermission
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroups
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (GroupAdminPermission(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Permissions = append(m.Permissions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestTransferOwnership) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestTransferOwnership: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestTransferOwnership: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &GroupOutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			m.NewOwner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewOwner |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseInviteUrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseInviteUrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseInviteUrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetGroupInviteUrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetGroupInviteUrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetGroupInviteUrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &GroupOutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetGroupInviteUrlBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetGroupInviteUrlBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetGroupInviteUrlBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetGroupInviteUrlBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetGroupInviteUrlBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetGroupInviteUrlBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRevokeInviteUrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRevokeInviteUrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRevokeInviteUrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &GroupOutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestJoinGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestJoinGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestJoinGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroups
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroups
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseJoinGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseJoinGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseJoinGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &Group{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestJoinGroupByPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestJoinGroupByPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestJoinGroupByPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &GroupOutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMakeUserAdminObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMakeUserAdminObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMakeUserAdminObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &GroupOutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserPeer == nil {
				m.UserPeer = &UserOutPeer{}
			}
			if err := m.UserPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseMakeUserAdminObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseMakeUserAdminObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseMakeUserAdminObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &Member{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupInviteObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupInviteObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupInviteObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteUid", wireType)
			}
			m.InviteUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupUserInvitedObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupUserInvitedObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupUserInvitedObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviterUid", wireType)
			}
			m.InviterUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviterUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupUserLeaveObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupUserLeaveObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupUserLeaveObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupUserKickObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupUserKickObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupUserKickObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickerUid", wireType)
			}
			m.KickerUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickerUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupMembersUpdateObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupMembersUpdateObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupMembersUpdateObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &Member{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupTitleChangedObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupTitleChangedObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupTitleChangedObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupTopicChangedObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupTopicChangedObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupTopicChangedObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topic == nil {
				m.Topic = &google_protobuf.StringValue{}
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupAboutChangedObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupAboutChangedObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupAboutChangedObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &google_protobuf.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupAvatarChangedObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupAvatarChangedObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupAvatarChangedObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupShortnameChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupShortnameChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupShortnameChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shortname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroups
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shortname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroups(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroups
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroups
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGroups
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGroups
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGroups(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGroups = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroups   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("groups.proto", fileDescriptorGroups) }

var fileDescriptorGroups = []byte{
	// 3189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x5a, 0xdd, 0x6f, 0x23, 0x57,
	0x15, 0xdf, 0xb1, 0x63, 0xc7, 0x3e, 0xf9, 0x58, 0x67, 0x36, 0xdb, 0x75, 0xbc, 0x89, 0xe3, 0x9d,
	0x6c, 0x97, 0x6c, 0xd8, 0x26, 0x25, 0x05, 0x4a, 0x5b, 0xc4, 0x92, 0x6c, 0xbc, 0x59, 0xb3, 0x1b,
	0x27, 0xd8, 0xce, 0x22, 0x9e, 0xac, 0x89, 0xe7, 0x26, 0x19, 0x62, 0xcf, 0xb8, 0x9e, 0x49, 0xb6,
	0x5b, 0xaa, 0x82, 0x40, 0x95, 0xaa, 0x22, 0x44, 0x51, 0x0b, 0x2f, 0x15, 0x20, 0x1e, 0x40, 0x7d,
	0xe1, 0x81, 0x07, 0x78, 0xe0, 0x0d, 0x21, 0x21, 0x1e, 0x2b, 0x78, 0x29, 0x12, 0x42, 0x6c, 0x40,
	0x02, 0x55, 0x08, 0x55, 0xfc, 0x05, 0xe8, 0x7e, 0xcc, 0x78, 0xe6, 0xce, 0x8c, 0xc7, 0xe3, 0x24,
	0xab, 0x7d, 0xe0, 0x29, 0x13, 0xdf, 0x73, 0xcf, 0xef, 0x7c, 0xdd, 0x7b, 0xcf, 0x39, 0xf7, 0xc2,
	0xe8, 0x5e, 0x47, 0x3f, 0x6c, 0x1b, 0x8b, 0xed, 0x8e, 0x6e, 0xea, 0x62, 0x52, 0x51, 0xe5, 0xa6,
	0xbe, 0x97, 0xcb, 0xef, 0xe9, 0xfa, 0x5e, 0x13, 0x2d, 0x91, 0x5f, 0x77, 0x0e, 0x77, 0x97, 0x1e,
	0x74, 0xe4, 0x76, 0x1b, 0x75, 0x18, 0x5d, 0x6e, 0x9a, 0x8d, 0xcb, 0x6d, 0x75, 0x49, 0xd6, 0x34,
	0xdd, 0x94, 0x4d, 0x55, 0xd7, 0xac, 0xd1, 0x09, 0x05, 0xed, 0xaa, 0x9a, 0xea, 0xfc, 0xe9, 0x42,
	0x4b, 0x35, 0x1a, 0xa8, 0xd9, 0x94, 0x35, 0xa4, 0x1f, 0x5a, 0x3f, 0x8e, 0xb4, 0x51, 0x97, 0xe5,
	0xc5, 0x16, 0x52, 0x54, 0xb9, 0x2e, 0x6b, 0x4a, 0x7d, 0x57, 0x6d, 0x22, 0x9b, 0xe6, 0xd0, 0x70,
	0xd0, 0x18, 0x0d, 0xb9, 0x29, 0xb7, 0x77, 0x96, 0xd8, 0x5f, 0xfa, 0xb3, 0xf4, 0xfd, 0x18, 0x24,
	0x37, 0x50, 0x6b, 0x07, 0x75, 0xc4, 0x59, 0x88, 0x1f, 0xaa, 0x4a, 0x56, 0x28, 0x08, 0xf3, 0x89,
	0xd5, 0xb1, 0xb7, 0x3e, 0x7a, 0x36, 0x0d, 0xc3, 0x47, 0xaa, 0xa1, 0xee, 0x34, 0x51, 0x05, 0x8f,
	0x88, 0x8b, 0x30, 0xa2, 0x6a, 0x47, 0xaa, 0x89, 0x3a, 0x75, 0x4c, 0x18, 0xf3, 0x23, 0x04, 0x46,
	0xb1, 0xad, 0x2a, 0xe2, 0x15, 0x18, 0x52, 0x64, 0x13, 0x65, 0xe3, 0x05, 0x61, 0x3e, 0xce, 0x13,
	0x92, 0x21, 0x71, 0x0d, 0x52, 0xaa, 0x51, 0x97, 0x95, 0x96, 0xaa, 0x65, 0x87, 0x0a, 0xc2, 0xfc,
	0xc8, 0x72, 0x6e, 0x91, 0xda, 0x67, 0xd1, 0xb2, 0xdf, 0xe2, 0xaa, 0xae, 0x37, 0xef, 0xcb, 0xcd,
	0x43, 0xc4, 0xb3, 0x18, 0x56, 0x8d, 0x15, 0x3c, 0x53, 0xdc, 0x80, 0x91, 0x36, 0xea, 0xb4, 0x54,
	0xc3, 0xc0, 0x66, 0xcb, 0x26, 0x0a, 0xf1, 0xf9, 0xf1, 0xe5, 0xe9, 0x45, 0xea, 0x90, 0xc5, 0x75,
	0xec, 0x25, 0x42, 0xb8, 0x65, 0x13, 0xf1, 0xac, 0x9c, 0xf3, 0xa5, 0x37, 0x52, 0x90, 0x20, 0x93,
	0xc4, 0x19, 0x88, 0x05, 0x59, 0x24, 0xa6, 0x2a, 0xe2, 0x33, 0x30, 0x22, 0x37, 0x1a, 0xc8, 0x30,
	0xea, 0xfb, 0xb2, 0xb1, 0x4f, 0x0c, 0x12, 0x5f, 0x1d, 0x7d, 0xeb, 0xa3, 0x67, 0x53, 0x90, 0x54,
	0x64, 0x6d, 0x0f, 0x75, 0x2a, 0x40, 0x09, 0xee, 0xc8, 0xc6, 0xbe, 0x28, 0x41, 0xc2, 0x54, 0xcd,
	0x26, 0x35, 0x48, 0xda, 0x22, 0xdc, 0x57, 0x15, 0x05, 0x69, 0x15, 0x3a, 0x24, 0x7e, 0x06, 0x92,
	0xf2, 0x91, 0x6c, 0xca, 0x1d, 0x66, 0x8e, 0x71, 0x4b, 0x8b, 0x15, 0xf2, 0xab, 0x25, 0x45, 0x43,
	0x6f, 0xb5, 0xe5, 0x86, 0x59, 0x61, 0xc4, 0xe2, 0x6d, 0x48, 0xab, 0x46, 0xbd, 0x45, 0x1c, 0x99,
	0x4d, 0x46, 0x35, 0x64, 0x4a, 0x35, 0x58, 0x0c, 0x2c, 0xc2, 0x48, 0xa3, 0x83, 0x64, 0x53, 0xa7,
	0x2e, 0x4e, 0xf9, 0xba, 0x98, 0x51, 0x60, 0x17, 0x3f, 0x0f, 0xc3, 0x14, 0xd4, 0xc8, 0xa6, 0x0b,
	0x71, 0xa7, 0xbc, 0x94, 0x21, 0x2f, 0xaf, 0x45, 0x6d, 0x03, 0xa1, 0x3a, 0x09, 0x11, 0xf0, 0x0b,
	0x11, 0x0a, 0x84, 0xd6, 0xf8, 0x40, 0xc9, 0x0c, 0x1c, 0x28, 0x5f, 0x84, 0x84, 0xb9, 0x8f, 0x5a,
	0x28, 0x3b, 0x41, 0x58, 0x4c, 0x7b, 0x58, 0x54, 0xcd, 0x8e, 0xaa, 0xed, 0x51, 0x26, 0xbc, 0x7f,
	0xf0, 0x44, 0xcc, 0x41, 0xde, 0xd1, 0x0f, 0xcd, 0xac, 0x18, 0x9d, 0x03, 0x99, 0x28, 0x96, 0x20,
	0x6d, 0xec, 0xeb, 0x1d, 0x53, 0x93, 0x5b, 0x28, 0x7b, 0xa1, 0x0f, 0x2e, 0x9c, 0x32, 0xdd, 0xd9,
	0xcc, 0xeb, 0x94, 0x7d, 0x76, 0x72, 0x00, 0xaf, 0xdf, 0x21, 0x53, 0xc5, 0x2f, 0xc3, 0x38, 0xf3,
	0x4b, 0x5d, 0x6e, 0xe9, 0x87, 0x9a, 0x99, 0xcd, 0x12, 0x66, 0x97, 0x3d, 0xcc, 0x4a, 0x9a, 0xf9,
	0xdc, 0xb2, 0x2f, 0xb7, 0x31, 0xc6, 0x61, 0x85, 0x30, 0x10, 0x6f, 0x02, 0x90, 0xdd, 0xb1, 0x6e,
	0x3e, 0x6c, 0xa3, 0xec, 0x54, 0x41, 0x98, 0x1f, 0x5f, 0x9e, 0x70, 0xad, 0xc8, 0xda, 0xc3, 0xb6,
	0x57, 0xb7, 0x3d, 0x6b, 0x44, 0xac, 0x42, 0xa6, 0x21, 0x6b, 0x75, 0x03, 0x69, 0x4a, 0xbd, 0x85,
	0x0c, 0x43, 0xde, 0x43, 0xd9, 0x5c, 0x54, 0x15, 0xc7, 0x1b, 0xb2, 0x56, 0x45, 0x9a, 0xb2, 0x41,
	0x19, 0x88, 0x37, 0x20, 0x65, 0xb4, 0xe5, 0x06, 0xaa, 0xab, 0x4a, 0xf6, 0x32, 0x61, 0x66, 0xcb,
	0xb4, 0xbd, 0x5d, 0x5a, 0x23, 0x3c, 0x2a, 0xc3, 0x84, 0xa4, 0xa4, 0x48, 0xef, 0x25, 0x20, 0x4d,
	0x44, 0xbd, 0x7d, 0xd8, 0x6c, 0x86, 0xed, 0x05, 0x76, 0x68, 0xc5, 0x4e, 0x1c, 0x5a, 0xf1, 0x41,
	0x43, 0x6b, 0x01, 0xd2, 0xfa, 0x03, 0x8d, 0x6d, 0xcf, 0x09, 0x3f, 0x49, 0x53, 0x64, 0x7c, 0x9b,
	0x6e, 0xe6, 0xce, 0x05, 0x98, 0x0c, 0x5b, 0x80, 0xcc, 0x1f, 0x47, 0x2a, 0x7a, 0x50, 0xb7, 0x96,
	0x7c, 0x6a, 0x10, 0x7f, 0xdc, 0x57, 0xd1, 0x83, 0x0d, 0xb6, 0x0b, 0x6c, 0xc3, 0x04, 0x66, 0x4a,
	0xcf, 0x8c, 0x7a, 0x1b, 0xe9, 0xed, 0x26, 0xca, 0xa6, 0xa3, 0x72, 0x3d, 0xdf, 0x90, 0xb5, 0x12,
	0x61, 0xb1, 0x45, 0x38, 0x60, 0xb6, 0xaa, 0x51, 0x37, 0xf6, 0xe5, 0x0e, 0x52, 0xea, 0xfb, 0xaa,
	0x61, 0xea, 0x9d, 0x87, 0x64, 0x8b, 0x89, 0xc6, 0x56, 0x35, 0xaa, 0x84, 0xc5, 0x1d, 0xca, 0x01,
	0x9b, 0x00, 0xef, 0x41, 0xc6, 0x43, 0xad, 0x61, 0x9b, 0x60, 0x24, 0xb2, 0x09, 0x54, 0x63, 0x05,
	0x73, 0xb0, 0x4c, 0xe0, 0xd8, 0x41, 0x47, 0x7b, 0xed, 0xa0, 0xf6, 0x5e, 0xc6, 0xa8, 0xa5, 0x0e,
	0x5c, 0xac, 0xa0, 0x97, 0x0f, 0x91, 0x61, 0xde, 0xd3, 0x65, 0x05, 0x87, 0x28, 0x89, 0x55, 0x43,
	0x7c, 0x09, 0x92, 0x34, 0x31, 0xc9, 0x0a, 0x84, 0xe1, 0xa4, 0x6b, 0xd9, 0x6d, 0x1e, 0x9a, 0x5b,
	0xc8, 0xbb, 0x31, 0xb3, 0x29, 0x2f, 0x4e, 0x1f, 0xdf, 0x9c, 0x82, 0x4b, 0x6a, 0x6b, 0x51, 0x69,
	0xee, 0x2d, 0xee, 0x75, 0xda, 0x8d, 0xc5, 0xf5, 0x4e, 0xbb, 0xc1, 0x80, 0xa4, 0x1d, 0x78, 0xaa,
	0x82, 0x8c, 0xb6, 0xae, 0x19, 0x88, 0x03, 0xbd, 0xce, 0x81, 0xba, 0xd7, 0x3a, 0x26, 0xb4, 0x21,
	0x66, 0x8e, 0x6f, 0xe6, 0x20, 0xeb, 0x85, 0xa0, 0x7c, 0xa5, 0x3f, 0x0a, 0x20, 0x3a, 0x14, 0xb3,
	0xec, 0xf4, 0x02, 0x24, 0xc8, 0x7c, 0xb2, 0x02, 0x43, 0x94, 0xb2, 0x6c, 0x45, 0x67, 0x88, 0x73,
	0x90, 0x68, 0xaa, 0x2d, 0xd5, 0xf4, 0xcf, 0x58, 0xe8, 0x98, 0xf8, 0x05, 0x18, 0xd2, 0xd0, 0x2b,
	0xd6, 0xe2, 0xf3, 0xee, 0x7c, 0xab, 0x0f, 0x4d, 0x64, 0xf8, 0x7a, 0x94, 0xcc, 0x0b, 0x31, 0xdc,
	0xbb, 0x02, 0x5c, 0x70, 0x5a, 0xce, 0xd2, 0xea, 0x99, 0xae, 0xf7, 0xa9, 0xdd, 0x2e, 0xd8, 0xfb,
	0x91, 0x81, 0x3a, 0x4c, 0xad, 0xee, 0xa9, 0xb9, 0xc4, 0x84, 0x8c, 0x85, 0x0a, 0xc9, 0xa4, 0x0a,
	0xb1, 0xf5, 0x1e, 0x5c, 0xda, 0x6e, 0xe3, 0xf5, 0x4f, 0x77, 0x64, 0x9c, 0x81, 0xdc, 0xda, 0xc7,
	0x89, 0x8b, 0x22, 0xce, 0x43, 0x8a, 0x6e, 0xe0, 0x41, 0x9b, 0xde, 0x30, 0x19, 0x2e, 0x29, 0xdd,
	0xb4, 0x26, 0x16, 0x98, 0xd6, 0x48, 0x5f, 0x87, 0xac, 0x03, 0x88, 0xe6, 0x32, 0xd1, 0x91, 0xba,
	0xc9, 0x51, 0xac, 0x57, 0x72, 0x64, 0xcd, 0x63, 0xc4, 0xd2, 0x1b, 0x82, 0x5b, 0x4d, 0xbd, 0xad,
	0x36, 0xa2, 0x83, 0xe3, 0x0d, 0x1e, 0xcf, 0x1c, 0x68, 0x83, 0xc7, 0x13, 0x79, 0x39, 0x56, 0xf0,
	0x9e, 0x3d, 0x90, 0x1c, 0xf4, 0x98, 0x88, 0x0d, 0x78, 0x4c, 0x48, 0x07, 0x2e, 0x31, 0x36, 0xf1,
	0x89, 0x10, 0x5d, 0x8c, 0x6b, 0x30, 0x8c, 0xcb, 0x8b, 0x7a, 0x50, 0x21, 0x90, 0xc4, 0xa3, 0x25,
	0x45, 0x5a, 0x73, 0x79, 0x9e, 0x6d, 0xa5, 0x74, 0x5f, 0xed, 0x1f, 0x4d, 0x7a, 0x53, 0x80, 0x2b,
	0x0e, 0x36, 0xb7, 0x5c, 0xc7, 0xba, 0x11, 0x5d, 0xfa, 0x17, 0xe8, 0xc1, 0xe3, 0xcc, 0x2e, 0x0c,
	0xa2, 0x47, 0xca, 0xef, 0x70, 0x71, 0x62, 0x61, 0x2f, 0x16, 0xdc, 0xa2, 0x38, 0x4e, 0xb4, 0xe8,
	0x92, 0x3c, 0xef, 0x73, 0xae, 0xfa, 0x0a, 0xc2, 0x9d, 0x9d, 0xd2, 0x77, 0x04, 0x90, 0xdc, 0x72,
	0xd0, 0x33, 0x70, 0x60, 0x49, 0x5e, 0x02, 0xd1, 0x71, 0x18, 0xf7, 0x94, 0x25, 0xd3, 0xe0, 0xd0,
	0xa4, 0xb6, 0xcb, 0xcd, 0xf4, 0xd7, 0xe8, 0x22, 0x2c, 0x38, 0xcb, 0x18, 0x5f, 0x64, 0xbb, 0x54,
	0x91, 0x4a, 0x30, 0xe3, 0x41, 0x34, 0x56, 0x51, 0x43, 0x6e, 0x21, 0x72, 0xc0, 0x46, 0x88, 0xae,
	0xd7, 0x61, 0xca, 0xcb, 0x8a, 0xfe, 0x12, 0xcd, 0x95, 0xc3, 0x5d, 0xab, 0x45, 0x39, 0xca, 0x7f,
	0x27, 0xc0, 0x45, 0x8f, 0x00, 0x6b, 0xea, 0xee, 0xae, 0xb8, 0x0c, 0x63, 0x1d, 0xd4, 0xd2, 0x8f,
	0x90, 0x52, 0x27, 0xc5, 0x3c, 0x39, 0x25, 0x3c, 0x12, 0x8c, 0x32, 0x1a, 0x7c, 0x66, 0x18, 0xe2,
	0x2a, 0x8c, 0xc9, 0x8a, 0x82, 0x94, 0x7a, 0x24, 0x61, 0x46, 0xc9, 0x1c, 0xeb, 0x5c, 0x5a, 0x06,
	0x2b, 0x9f, 0xaf, 0x37, 0x48, 0x41, 0x10, 0xf7, 0xd3, 0x7c, 0x94, 0xd1, 0xdc, 0xc2, 0x24, 0xd2,
	0xeb, 0x90, 0xf7, 0x5a, 0x91, 0x0c, 0x45, 0x0f, 0x04, 0x0f, 0x7e, 0x2c, 0x1c, 0xff, 0x3d, 0xc1,
	0x27, 0x22, 0x48, 0xdd, 0x77, 0x66, 0xbb, 0x1b, 0xe6, 0x68, 0x97, 0xa5, 0x71, 0xbf, 0x78, 0xb5,
	0x4a, 0x4f, 0xe9, 0x37, 0x71, 0x3b, 0xad, 0xb9, 0x45, 0xb2, 0x6a, 0xda, 0x61, 0x98, 0x85, 0x78,
	0x87, 0x49, 0xe3, 0x49, 0xbf, 0xf1, 0x48, 0x3f, 0xa7, 0xab, 0xf8, 0x39, 0x48, 0xd0, 0xe8, 0x88,
	0x07, 0xe6, 0x10, 0x9e, 0xac, 0x87, 0x4c, 0xe0, 0xca, 0xb4, 0x64, 0xf4, 0x32, 0x6d, 0x13, 0xc6,
	0xf4, 0xb6, 0xa9, 0xb6, 0xd4, 0x57, 0x69, 0x1b, 0x2b, 0x3b, 0x4c, 0x9a, 0x2f, 0x39, 0x5b, 0x04,
	0xe2, 0x90, 0x4d, 0x07, 0x89, 0xa7, 0x70, 0x74, 0xcd, 0x17, 0xd7, 0x21, 0x85, 0x45, 0x23, 0xd5,
	0x71, 0x2a, 0x7a, 0x75, 0x6c, 0x4f, 0x76, 0xd5, 0x7a, 0xe9, 0xb0, 0x5a, 0x2f, 0x24, 0x7d, 0xfb,
	0xb3, 0x23, 0x7d, 0x73, 0x7a, 0x2f, 0x03, 0x71, 0x03, 0xbd, 0x4c, 0x63, 0xa9, 0x82, 0x3f, 0xc5,
	0x49, 0x48, 0x18, 0x26, 0x2e, 0xa8, 0xb0, 0xbb, 0x46, 0x2b, 0xf4, 0x1f, 0x9c, 0x81, 0xd2, 0xe4,
	0x95, 0x66, 0x97, 0x63, 0x2e, 0x0b, 0x5b, 0x69, 0xaa, 0x64, 0x79, 0x71, 0x88, 0x78, 0x71, 0xd4,
	0xe9, 0x45, 0xcb, 0x5f, 0xcb, 0x00, 0x24, 0x2e, 0x49, 0xf7, 0x8f, 0x34, 0xba, 0x02, 0x52, 0xc6,
	0x34, 0x26, 0xc3, 0x5f, 0xa1, 0xf9, 0xf6, 0xf7, 0x62, 0x76, 0x21, 0x51, 0x54, 0x54, 0xb3, 0x9b,
	0x09, 0x8a, 0xab, 0x56, 0x70, 0x60, 0xb4, 0x28, 0x79, 0x37, 0x8d, 0x0f, 0x3c, 0xd2, 0x57, 0xcf,
	0x8b, 0xad, 0x81, 0xa1, 0xc0, 0x35, 0xe0, 0x09, 0xb2, 0xc4, 0xc9, 0x82, 0x2c, 0xc4, 0xdb, 0x3f,
	0x16, 0x20, 0xcb, 0xbe, 0xab, 0x88, 0x1a, 0xa4, 0x6a, 0xf7, 0x5c, 0x9e, 0x87, 0xa1, 0xa8, 0xe6,
	0x20, 0x13, 0xc4, 0x4f, 0x3a, 0xfb, 0x3e, 0x74, 0x31, 0x07, 0x76, 0x76, 0x42, 0x04, 0xfc, 0x75,
	0x0c, 0xd7, 0x61, 0x6e, 0x97, 0xd1, 0x14, 0xf8, 0x54, 0x7c, 0x76, 0x07, 0xc6, 0x76, 0xd5, 0x26,
	0xaa, 0x37, 0xf5, 0x06, 0xb1, 0x17, 0x8b, 0x5a, 0x9b, 0xcd, 0x6d, 0xb5, 0x89, 0xee, 0xb1, 0x31,
	0xbe, 0x8e, 0x1c, 0xdd, 0x75, 0x0c, 0x3e, 0x71, 0x9e, 0xfd, 0xad, 0x00, 0x97, 0xac, 0xc0, 0xe7,
	0x2d, 0x77, 0xcd, 0x2e, 0x2e, 0x04, 0xbf, 0xe2, 0xc2, 0x6e, 0xb5, 0xb2, 0x35, 0x1f, 0xf3, 0x59,
	0xf3, 0x71, 0xe7, 0x9a, 0x17, 0x59, 0xf7, 0x9b, 0x28, 0xcf, 0xda, 0xdd, 0x73, 0x10, 0x6f, 0xb1,
	0xd6, 0x8c, 0xef, 0x76, 0x84, 0x47, 0xc3, 0xd6, 0xeb, 0x7f, 0xba, 0xd1, 0x59, 0x21, 0xc7, 0xfe,
	0x69, 0xbb, 0xff, 0x49, 0x73, 0xda, 0x2f, 0xfc, 0x36, 0x28, 0x5c, 0x50, 0x9d, 0xa6, 0xb6, 0xb1,
	0x40, 0x6d, 0xed, 0xba, 0x2f, 0x3e, 0x60, 0xdd, 0xe7, 0xb5, 0xd7, 0xd0, 0x63, 0xb7, 0x17, 0xa9,
	0x35, 0x1f, 0x9b, 0xbd, 0x4e, 0xd8, 0xc6, 0x7c, 0xcc, 0xf1, 0xf5, 0x93, 0x18, 0x4c, 0xb0, 0x6f,
	0x5a, 0xd3, 0xe0, 0x73, 0xf4, 0x54, 0x6c, 0xf5, 0x59, 0x18, 0xc2, 0xc7, 0x30, 0xb3, 0x44, 0x3f,
	0x69, 0x19, 0xa1, 0x7f, 0xe2, 0x56, 0xe0, 0x3f, 0x05, 0xdb, 0x42, 0xf7, 0x90, 0xcc, 0x76, 0x9c,
	0xc7, 0x13, 0x4d, 0x1e, 0x4d, 0xe3, 0x67, 0xaa, 0xe9, 0x8f, 0x62, 0x70, 0x9e, 0x7d, 0xdf, 0x55,
	0x1b, 0x07, 0xff, 0x8f, 0x04, 0xce, 0x3e, 0x6f, 0xc6, 0x60, 0x92, 0x7d, 0x6f, 0xc8, 0x07, 0x64,
	0xa5, 0xd0, 0x9b, 0xb5, 0xd3, 0x30, 0xd2, 0x4d, 0x48, 0xdb, 0xc9, 0x2d, 0xeb, 0x6e, 0xf5, 0x63,
	0xa9, 0x94, 0x95, 0xea, 0xf2, 0xf7, 0xc0, 0xf1, 0x93, 0xdd, 0x03, 0x87, 0x98, 0xe2, 0xbb, 0x02,
	0x5c, 0x74, 0x14, 0x9a, 0x5d, 0x9e, 0xce, 0xe2, 0x51, 0xe8, 0x55, 0x3c, 0xde, 0x73, 0x8b, 0x1b,
	0xeb, 0x43, 0x5c, 0xf7, 0x7e, 0xe9, 0xba, 0xb5, 0x7e, 0x57, 0x80, 0x02, 0x93, 0x6d, 0x9d, 0x65,
	0xad, 0xbc, 0x64, 0x46, 0x84, 0x0a, 0x78, 0x9e, 0xd6, 0x61, 0x75, 0x55, 0xa1, 0x92, 0x79, 0x29,
	0xa9, 0x16, 0x61, 0x66, 0xfa, 0xb6, 0x00, 0x57, 0xac, 0xdc, 0x25, 0x58, 0xae, 0x9b, 0x6e, 0x53,
	0xd0, 0x5e, 0xf8, 0x8c, 0xcb, 0x14, 0xfc, 0x24, 0xb7, 0xaf, 0x42, 0x92, 0xa6, 0xdf, 0x0b, 0x30,
	0xe7, 0xe9, 0x0d, 0x38, 0x04, 0x38, 0xbb, 0x0e, 0xc1, 0xe9, 0xc6, 0xa4, 0xf4, 0x7e, 0x37, 0xfb,
	0xab, 0x75, 0x64, 0xcd, 0xd8, 0x45, 0x1d, 0xd2, 0xc0, 0x35, 0xf6, 0xd5, 0xd3, 0xd9, 0x91, 0x17,
	0x20, 0xad, 0xa1, 0x07, 0x75, 0x72, 0x4f, 0xe8, 0xaf, 0x59, 0x4a, 0x43, 0x0f, 0x08, 0x66, 0x88,
	0xe7, 0xd7, 0xf0, 0xa1, 0x41, 0xed, 0xcf, 0xce, 0xd5, 0x4e, 0x13, 0x67, 0xcf, 0x87, 0x9d, 0x26,
	0x91, 0x2d, 0x5d, 0xc1, 0x9f, 0x61, 0x9e, 0x7b, 0xcd, 0xd6, 0xd7, 0x8a, 0x9e, 0x2e, 0xb3, 0x53,
	0xd0, 0x37, 0x44, 0x87, 0xcf, 0xc3, 0x74, 0x10, 0xfa, 0xaa, 0x6c, 0x84, 0xd5, 0x69, 0x5b, 0x30,
	0xc3, 0x87, 0xbe, 0x6b, 0x7a, 0x74, 0x6b, 0xbc, 0x6a, 0x17, 0x7e, 0x15, 0x74, 0xa4, 0x1f, 0xa0,
	0xc7, 0x69, 0x8b, 0x9f, 0x09, 0x90, 0x61, 0xdf, 0x5f, 0xd2, 0x55, 0x6d, 0xdd, 0xba, 0x5b, 0x33,
	0xf5, 0x03, 0xa4, 0x51, 0x1d, 0x3c, 0x5d, 0x26, 0x32, 0x26, 0x96, 0xf9, 0x43, 0x2a, 0x16, 0x7a,
	0x48, 0xb9, 0x37, 0xba, 0x48, 0x67, 0xd4, 0xdb, 0xb1, 0x6e, 0xe0, 0xb9, 0x04, 0x75, 0xde, 0x1f,
	0xfa, 0xb7, 0x60, 0x4e, 0x52, 0xdb, 0xd9, 0xed, 0x9b, 0x44, 0xbf, 0xed, 0x9b, 0xe1, 0x7e, 0xda,
	0x37, 0x56, 0xcd, 0x98, 0x3a, 0x49, 0xcd, 0xa8, 0xdb, 0x61, 0x63, 0x1b, 0x64, 0xf5, 0x21, 0x59,
	0xee, 0x83, 0xb6, 0x33, 0xc2, 0x0b, 0xed, 0x69, 0xbf, 0x3c, 0x61, 0x73, 0xc7, 0xd0, 0x9b, 0xc8,
	0x44, 0x4f, 0x44, 0xbe, 0x10, 0x16, 0x47, 0x42, 0x77, 0xf9, 0xfa, 0x2b, 0x31, 0xcf, 0xdf, 0xde,
	0x72, 0x3d, 0xf6, 0xee, 0xc5, 0x6d, 0x9f, 0x81, 0x15, 0xe6, 0xc7, 0xbf, 0x08, 0xae, 0x9b, 0x0a,
	0xba, 0xfa, 0x1d, 0xe2, 0xf4, 0x7b, 0x78, 0xdd, 0x00, 0xf6, 0x4e, 0x2f, 0xf8, 0xa5, 0x48, 0x9a,
	0x12, 0x38, 0xdf, 0xf1, 0xa5, 0x82, 0xdf, 0xf1, 0xb1, 0x3c, 0x35, 0x1d, 0x98, 0xa7, 0xb2, 0x28,
	0x86, 0x5e, 0x51, 0x2c, 0xbd, 0x13, 0x73, 0x5d, 0x21, 0x60, 0x83, 0x53, 0x15, 0x95, 0x01, 0x74,
	0x64, 0xcf, 0x19, 0x63, 0xfd, 0x3e, 0x67, 0x8c, 0xf7, 0xfb, 0x9c, 0x71, 0x28, 0xd4, 0x0c, 0x89,
	0x40, 0x33, 0x2c, 0x53, 0x33, 0x24, 0x03, 0xcc, 0xe0, 0x99, 0x83, 0xad, 0xf2, 0x4b, 0x01, 0xa6,
	0x39, 0xab, 0x90, 0x2a, 0xec, 0x2c, 0x6c, 0xd2, 0xc7, 0x93, 0xcd, 0x7e, 0x7a, 0x58, 0xd2, 0x5f,
	0x05, 0xb8, 0xcc, 0xc9, 0x8c, 0xeb, 0xa9, 0xb3, 0x10, 0xf9, 0x06, 0xc0, 0x81, 0xda, 0x38, 0xe8,
	0xe5, 0xc5, 0x34, 0x25, 0xe8, 0xd3, 0x89, 0x73, 0xbd, 0x7d, 0x44, 0x15, 0xe4, 0x6e, 0x81, 0x5d,
	0x77, 0x86, 0x03, 0x68, 0x39, 0xf0, 0xd5, 0xe1, 0x87, 0x02, 0xcc, 0x06, 0x3c, 0xe1, 0x38, 0x0b,
	0x63, 0xf7, 0xd3, 0xce, 0x3f, 0x2d, 0x13, 0xff, 0x97, 0x53, 0xcd, 0xf1, 0x6c, 0x63, 0x30, 0xd5,
	0x7a, 0x77, 0x1a, 0x98, 0xee, 0xf1, 0x40, 0xdd, 0xed, 0x46, 0xe0, 0xd0, 0xa0, 0x8d, 0x40, 0xcb,
	0x32, 0x89, 0x40, 0xcb, 0xe0, 0xaa, 0x72, 0x36, 0xe0, 0x8d, 0xc8, 0x00, 0x4a, 0x9f, 0xfc, 0xad,
	0xc8, 0xbf, 0xdd, 0x71, 0xee, 0x7a, 0xb9, 0x73, 0x16, 0x01, 0xd6, 0x7d, 0xe2, 0x13, 0x8f, 0xf2,
	0xfe, 0xf9, 0xb4, 0x62, 0xee, 0x07, 0xee, 0x7d, 0xcb, 0xbe, 0xf6, 0x89, 0x5e, 0x1f, 0x46, 0xb9,
	0xee, 0x09, 0x8d, 0xbd, 0x85, 0x32, 0x7b, 0x89, 0x4a, 0xee, 0x5c, 0x2f, 0xc2, 0xc4, 0x7a, 0x65,
	0x73, 0x7b, 0xab, 0xf6, 0xd5, 0xad, 0x62, 0x7d, 0xbb, 0x7c, 0xb7, 0xbc, 0xf9, 0x95, 0x72, 0xe6,
	0x9c, 0x78, 0x01, 0xce, 0x77, 0x7f, 0x26, 0x5f, 0x19, 0xc1, 0x4d, 0x7b, 0xeb, 0xce, 0x4a, 0xb9,
	0x5c, 0xbc, 0x97, 0x89, 0x2d, 0xfc, 0x2a, 0x0e, 0x93, 0x7e, 0xb5, 0xa7, 0x58, 0x80, 0x69, 0x42,
	0xbf, 0xb2, 0xb6, 0x51, 0x2a, 0x6f, 0x15, 0x2b, 0x1b, 0xa5, 0x6a, 0xb5, 0xb4, 0x59, 0x76, 0xc0,
	0x5c, 0x03, 0xc9, 0x97, 0xa2, 0xb8, 0x56, 0xaa, 0x55, 0xef, 0x6c, 0x56, 0x6a, 0xe5, 0x95, 0x8d,
	0x62, 0x46, 0x10, 0x67, 0xe1, 0xb2, 0x2f, 0x5d, 0xa9, 0x7c, 0xbf, 0x54, 0x2b, 0x66, 0x62, 0xe2,
	0x0c, 0x4c, 0xf9, 0x12, 0xdc, 0x2d, 0xdd, 0xba, 0x9b, 0x89, 0x8b, 0x73, 0x30, 0xeb, 0x2f, 0xc9,
	0xd6, 0xda, 0x4a, 0xad, 0x58, 0x2a, 0xdf, 0xde, 0xcc, 0x0c, 0x89, 0x9f, 0x80, 0x39, 0x5f, 0xa2,
	0x6a, 0xb1, 0xd6, 0xfd, 0xaf, 0x9a, 0x49, 0x88, 0x57, 0xa1, 0x10, 0x28, 0xf5, 0x46, 0xb1, 0x5a,
	0x5d, 0x59, 0x2f, 0x66, 0x92, 0x81, 0xba, 0xad, 0x15, 0xef, 0x15, 0x6b, 0x45, 0x8b, 0x6e, 0x58,
	0xbc, 0x01, 0xf3, 0xbe, 0x74, 0xeb, 0xc5, 0x5a, 0xa9, 0x5c, 0x2b, 0xae, 0x57, 0x56, 0x6a, 0xa5,
	0xcd, 0x72, 0x6d, 0xf3, 0x6e, 0xb1, 0x9c, 0x49, 0x05, 0x62, 0x57, 0x8b, 0xe5, 0x35, 0x8b, 0x67,
	0x3a, 0x50, 0xdf, 0xad, 0x52, 0xd9, 0x22, 0x82, 0xe5, 0x9f, 0x4e, 0x42, 0x92, 0xbd, 0xb8, 0x7c,
	0x15, 0xc6, 0xb9, 0x37, 0x98, 0x76, 0xbf, 0xc4, 0xf7, 0x5d, 0x68, 0x2e, 0xdf, 0x1d, 0xf6, 0x7b,
	0xc2, 0x29, 0x5d, 0xff, 0xd6, 0x9f, 0xfe, 0xf1, 0x4e, 0x6c, 0x4e, 0xca, 0x2f, 0x1d, 0x7d, 0x6a,
	0x09, 0xe7, 0x9e, 0x4b, 0x74, 0x60, 0xc9, 0x4d, 0xf7, 0xa2, 0xb0, 0x20, 0x6a, 0x30, 0xe2, 0x7c,
	0xc5, 0x98, 0xf3, 0x01, 0x66, 0x63, 0xb9, 0xcb, 0x7e, 0xa8, 0xd6, 0xab, 0xa1, 0x6b, 0x04, 0xb2,
	0x20, 0x5d, 0xf6, 0x83, 0x64, 0x44, 0x0c, 0xcf, 0x79, 0xed, 0xce, 0xe3, 0x39, 0xc6, 0xbc, 0x78,
	0x8e, 0xc1, 0x60, 0x3c, 0x07, 0x11, 0xc6, 0x3b, 0x82, 0x71, 0xee, 0x2e, 0x9c, 0xb7, 0xad, 0x7b,
	0x38, 0x97, 0xe3, 0x51, 0xab, 0xe8, 0xe5, 0x35, 0xd9, 0x44, 0x1b, 0xaa, 0x12, 0x6c, 0x57, 0x37,
	0x0f, 0x8c, 0xfb, 0x0a, 0x4c, 0x78, 0x6f, 0x9c, 0x0b, 0x1c, 0xb4, 0x87, 0x22, 0x77, 0xc1, 0x07,
	0x5d, 0xba, 0x41, 0x60, 0xaf, 0x49, 0x57, 0x78, 0x58, 0xcf, 0x7c, 0x8c, 0xfc, 0x3a, 0x9c, 0xe7,
	0x2f, 0x44, 0xf3, 0x41, 0x2a, 0xd3, 0xf1, 0xdc, 0x2c, 0x8f, 0xca, 0x11, 0x48, 0x0b, 0x44, 0x82,
	0xab, 0xd2, 0x6c, 0xa0, 0xe2, 0x94, 0x10, 0xe3, 0x7f, 0x03, 0xd7, 0xec, 0xfc, 0x6d, 0x26, 0xaf,
	0xb9, 0x87, 0xa2, 0xa7, 0xdd, 0x03, 0x0d, 0xe0, 0x61, 0x83, 0x05, 0x30, 0x9c, 0x2e, 0x27, 0xa7,
	0x75, 0xb0, 0xcb, 0xf1, 0x70, 0xee, 0x52, 0x00, 0x74, 0x3f, 0xfe, 0xc6, 0x0c, 0x78, 0x50, 0x7a,
	0x45, 0x17, 0x08, 0x4a, 0x86, 0x4f, 0x02, 0x4a, 0x18, 0x60, 0xd0, 0xaf, 0x01, 0x38, 0xee, 0xb9,
	0xa6, 0x38, 0xc0, 0xee, 0x50, 0x4f, 0xe3, 0x3e, 0x4d, 0xf0, 0x66, 0xa5, 0x1c, 0x8f, 0xd7, 0x9d,
	0xcf, 0xb0, 0x1c, 0x37, 0x46, 0x3c, 0x56, 0x77, 0x68, 0x30, 0xac, 0xee, 0x7c, 0x8c, 0xa5, 0x40,
	0xca, 0xbe, 0xb3, 0xb9, 0xc4, 0x21, 0x59, 0x03, 0x3d, 0x71, 0xe6, 0x08, 0xce, 0x8c, 0x94, 0xe5,
	0x71, 0xac, 0xd9, 0x18, 0xa5, 0x0d, 0x63, 0xee, 0x9b, 0x8f, 0x69, 0x0e, 0xca, 0x35, 0x1a, 0xec,
	0xb0, 0x79, 0x02, 0x26, 0x49, 0x33, 0x3c, 0x98, 0x6b, 0x3e, 0x46, 0xfc, 0xb9, 0x00, 0x53, 0x3d,
	0x3a, 0xfa, 0x1c, 0x7c, 0x20, 0x65, 0xee, 0x3a, 0x2f, 0x4a, 0x20, 0xa9, 0xf4, 0x69, 0x22, 0xdc,
	0xa2, 0x74, 0x9d, 0x17, 0x2e, 0x70, 0x0a, 0x16, 0xf4, 0x35, 0x98, 0xf0, 0xf6, 0xa4, 0xf9, 0x35,
	0xec, 0xa1, 0x08, 0x36, 0x51, 0xe0, 0x02, 0xf6, 0xf0, 0xa0, 0x3b, 0xd8, 0x84, 0xb7, 0x43, 0x5c,
	0x08, 0xb0, 0x8e, 0x4d, 0x91, 0x9b, 0xe2, 0xd1, 0xed, 0xa1, 0x60, 0x7c, 0x0f, 0x17, 0x8c, 0xff,
	0x43, 0x01, 0x2e, 0xfa, 0x77, 0x79, 0xaf, 0x86, 0x09, 0x81, 0xa9, 0x72, 0x4f, 0x07, 0xb9, 0xc7,
	0x45, 0x26, 0x3d, 0x4b, 0x84, 0x5a, 0x90, 0x9e, 0x0e, 0x15, 0x8a, 0x34, 0xa8, 0xc9, 0xa1, 0x72,
	0x9e, 0x6f, 0x16, 0xe7, 0x3d, 0x1b, 0xab, 0x6b, 0xbc, 0x97, 0x51, 0x02, 0x37, 0x75, 0x8e, 0x07,
	0x46, 0xde, 0x85, 0x74, 0xb7, 0x01, 0x9b, 0xe5, 0x30, 0xed, 0x11, 0x2f, 0x9a, 0x3d, 0x24, 0x5d,
	0x25, 0x68, 0x79, 0x69, 0x8a, 0x47, 0xb3, 0x49, 0xe8, 0x36, 0x7a, 0x9e, 0xef, 0x6b, 0xe6, 0x83,
	0xd0, 0xe8, 0x78, 0x6e, 0x92, 0xc7, 0xbc, 0xaf, 0xab, 0x4a, 0xb0, 0x72, 0xdc, 0x74, 0xcb, 0xdf,
	0xfe, 0x6d, 0xc1, 0xab, 0xbd, 0x76, 0x04, 0x8b, 0xca, 0xeb, 0x6f, 0x5f, 0xb2, 0x60, 0x7f, 0xfb,
	0x92, 0xbf, 0x28, 0x2c, 0xac, 0x16, 0x8f, 0x6f, 0x3e, 0x05, 0x93, 0xce, 0x1e, 0xa2, 0x81, 0x3a,
	0x47, 0x6a, 0x03, 0x19, 0x1f, 0x3c, 0xca, 0x9f, 0xfb, 0xf0, 0x51, 0xfe, 0xdc, 0xc7, 0x8f, 0xf2,
	0xc2, 0x37, 0x8f, 0xf3, 0xc2, 0xfb, 0xc7, 0x79, 0xe1, 0x0f, 0xc7, 0x79, 0xe1, 0x83, 0xe3, 0xbc,
	0xf0, 0xb7, 0xe3, 0xbc, 0xf0, 0xaf, 0xe3, 0xfc, 0xb9, 0x8f, 0x8f, 0xf3, 0xc2, 0xdb, 0x7f, 0xcf,
	0x9f, 0xdb, 0x49, 0x92, 0x22, 0xf1, 0xb9, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xce, 0x53, 0x2c,
	0x2f, 0xe6, 0x3c, 0x00, 0x00,
}
