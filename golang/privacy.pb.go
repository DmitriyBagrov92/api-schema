// Code generated by protoc-gen-gogo.
// source: privacy.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Block User
type RequestBlockUser struct {
	Peer *UserOutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *RequestBlockUser) Reset()                    { *m = RequestBlockUser{} }
func (*RequestBlockUser) ProtoMessage()               {}
func (*RequestBlockUser) Descriptor() ([]byte, []int) { return fileDescriptorPrivacy, []int{0} }

func (m *RequestBlockUser) GetPeer() *UserOutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Unblock User
type RequestUnblockUser struct {
	Peer *UserOutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *RequestUnblockUser) Reset()                    { *m = RequestUnblockUser{} }
func (*RequestUnblockUser) ProtoMessage()               {}
func (*RequestUnblockUser) Descriptor() ([]byte, []int) { return fileDescriptorPrivacy, []int{1} }

func (m *RequestUnblockUser) GetPeer() *UserOutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Load Blocked Users
type RequestLoadBlockedUsers struct {
}

func (m *RequestLoadBlockedUsers) Reset()                    { *m = RequestLoadBlockedUsers{} }
func (*RequestLoadBlockedUsers) ProtoMessage()               {}
func (*RequestLoadBlockedUsers) Descriptor() ([]byte, []int) { return fileDescriptorPrivacy, []int{2} }

type ResponseLoadBlockedUsers struct {
	UserPeers []*UserOutPeer `protobuf:"bytes,1,rep,name=user_peers,json=userPeers" json:"user_peers,omitempty"`
}

func (m *ResponseLoadBlockedUsers) Reset()                    { *m = ResponseLoadBlockedUsers{} }
func (*ResponseLoadBlockedUsers) ProtoMessage()               {}
func (*ResponseLoadBlockedUsers) Descriptor() ([]byte, []int) { return fileDescriptorPrivacy, []int{3} }

func (m *ResponseLoadBlockedUsers) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

// Update about User Blocked
type UpdateUserBlocked struct {
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *UpdateUserBlocked) Reset()                    { *m = UpdateUserBlocked{} }
func (*UpdateUserBlocked) ProtoMessage()               {}
func (*UpdateUserBlocked) Descriptor() ([]byte, []int) { return fileDescriptorPrivacy, []int{4} }

func (m *UpdateUserBlocked) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// Update about User Unblocked
type UpdateUserUnblocked struct {
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *UpdateUserUnblocked) Reset()                    { *m = UpdateUserUnblocked{} }
func (*UpdateUserUnblocked) ProtoMessage()               {}
func (*UpdateUserUnblocked) Descriptor() ([]byte, []int) { return fileDescriptorPrivacy, []int{5} }

func (m *UpdateUserUnblocked) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func init() {
	proto.RegisterType((*RequestBlockUser)(nil), "dialog.RequestBlockUser")
	proto.RegisterType((*RequestUnblockUser)(nil), "dialog.RequestUnblockUser")
	proto.RegisterType((*RequestLoadBlockedUsers)(nil), "dialog.RequestLoadBlockedUsers")
	proto.RegisterType((*ResponseLoadBlockedUsers)(nil), "dialog.ResponseLoadBlockedUsers")
	proto.RegisterType((*UpdateUserBlocked)(nil), "dialog.UpdateUserBlocked")
	proto.RegisterType((*UpdateUserUnblocked)(nil), "dialog.UpdateUserUnblocked")
}
func (this *RequestBlockUser) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestBlockUser)
	if !ok {
		that2, ok := that.(RequestBlockUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *RequestUnblockUser) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestUnblockUser)
	if !ok {
		that2, ok := that.(RequestUnblockUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *RequestLoadBlockedUsers) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestLoadBlockedUsers)
	if !ok {
		that2, ok := that.(RequestLoadBlockedUsers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResponseLoadBlockedUsers) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseLoadBlockedUsers)
	if !ok {
		that2, ok := that.(ResponseLoadBlockedUsers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateUserBlocked) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserBlocked)
	if !ok {
		that2, ok := that.(UpdateUserBlocked)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	return true
}
func (this *UpdateUserUnblocked) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserUnblocked)
	if !ok {
		that2, ok := that.(UpdateUserUnblocked)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	return true
}
func (this *RequestBlockUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestBlockUser{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestUnblockUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestUnblockUser{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadBlockedUsers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestLoadBlockedUsers{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadBlockedUsers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseLoadBlockedUsers{")
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserBlocked) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateUserBlocked{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserUnblocked) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateUserUnblocked{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPrivacy(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Privacy service

type PrivacyClient interface {
	BlockUser(ctx context.Context, in *RequestBlockUser, opts ...grpc.CallOption) (*ResponseSeq, error)
	UnblockUser(ctx context.Context, in *RequestUnblockUser, opts ...grpc.CallOption) (*ResponseSeq, error)
	LoadBlockedUsers(ctx context.Context, in *RequestLoadBlockedUsers, opts ...grpc.CallOption) (*ResponseLoadBlockedUsers, error)
}

type privacyClient struct {
	cc *grpc.ClientConn
}

func NewPrivacyClient(cc *grpc.ClientConn) PrivacyClient {
	return &privacyClient{cc}
}

func (c *privacyClient) BlockUser(ctx context.Context, in *RequestBlockUser, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Privacy/BlockUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privacyClient) UnblockUser(ctx context.Context, in *RequestUnblockUser, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Privacy/UnblockUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privacyClient) LoadBlockedUsers(ctx context.Context, in *RequestLoadBlockedUsers, opts ...grpc.CallOption) (*ResponseLoadBlockedUsers, error) {
	out := new(ResponseLoadBlockedUsers)
	err := grpc.Invoke(ctx, "/dialog.Privacy/LoadBlockedUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Privacy service

type PrivacyServer interface {
	BlockUser(context.Context, *RequestBlockUser) (*ResponseSeq, error)
	UnblockUser(context.Context, *RequestUnblockUser) (*ResponseSeq, error)
	LoadBlockedUsers(context.Context, *RequestLoadBlockedUsers) (*ResponseLoadBlockedUsers, error)
}

func RegisterPrivacyServer(s *grpc.Server, srv PrivacyServer) {
	s.RegisterService(&_Privacy_serviceDesc, srv)
}

func _Privacy_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBlockUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivacyServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Privacy/BlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivacyServer).BlockUser(ctx, req.(*RequestBlockUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Privacy_UnblockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUnblockUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivacyServer).UnblockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Privacy/UnblockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivacyServer).UnblockUser(ctx, req.(*RequestUnblockUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Privacy_LoadBlockedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadBlockedUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivacyServer).LoadBlockedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Privacy/LoadBlockedUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivacyServer).LoadBlockedUsers(ctx, req.(*RequestLoadBlockedUsers))
	}
	return interceptor(ctx, in, info, handler)
}

var _Privacy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Privacy",
	HandlerType: (*PrivacyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BlockUser",
			Handler:    _Privacy_BlockUser_Handler,
		},
		{
			MethodName: "UnblockUser",
			Handler:    _Privacy_UnblockUser_Handler,
		},
		{
			MethodName: "LoadBlockedUsers",
			Handler:    _Privacy_LoadBlockedUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "privacy.proto",
}

func (m *RequestBlockUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBlockUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPrivacy(dAtA, i, uint64(m.Peer.Size()))
		n1, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *RequestUnblockUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUnblockUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPrivacy(dAtA, i, uint64(m.Peer.Size()))
		n2, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RequestLoadBlockedUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadBlockedUsers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResponseLoadBlockedUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadBlockedUsers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserPeers) > 0 {
		for _, msg := range m.UserPeers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPrivacy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateUserBlocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserBlocked) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrivacy(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *UpdateUserUnblocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserUnblocked) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrivacy(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func encodeFixed64Privacy(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Privacy(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPrivacy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RequestBlockUser) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovPrivacy(uint64(l))
	}
	return n
}

func (m *RequestUnblockUser) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovPrivacy(uint64(l))
	}
	return n
}

func (m *RequestLoadBlockedUsers) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ResponseLoadBlockedUsers) Size() (n int) {
	var l int
	_ = l
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovPrivacy(uint64(l))
		}
	}
	return n
}

func (m *UpdateUserBlocked) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovPrivacy(uint64(m.Uid))
	}
	return n
}

func (m *UpdateUserUnblocked) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovPrivacy(uint64(m.Uid))
	}
	return n
}

func sovPrivacy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPrivacy(x uint64) (n int) {
	return sovPrivacy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestBlockUser) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestBlockUser{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestUnblockUser) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestUnblockUser{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadBlockedUsers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadBlockedUsers{`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadBlockedUsers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseLoadBlockedUsers{`,
		`UserPeers:` + strings.Replace(fmt.Sprintf("%v", this.UserPeers), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserBlocked) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserBlocked{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserUnblocked) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserUnblocked{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPrivacy(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestBlockUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBlockUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBlockUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivacy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &UserOutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUnblockUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUnblockUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUnblockUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivacy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &UserOutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadBlockedUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadBlockedUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadBlockedUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPrivacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadBlockedUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadBlockedUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadBlockedUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivacy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserBlocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserBlocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserBlocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrivacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserUnblocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserUnblocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserUnblocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrivacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivacy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivacy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPrivacy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPrivacy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPrivacy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPrivacy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivacy   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("privacy.proto", fileDescriptorPrivacy) }

var fileDescriptorPrivacy = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x93, 0xcf, 0x8b, 0xd3, 0x50,
	0x10, 0xc7, 0xfb, 0x76, 0x75, 0x97, 0x4e, 0x59, 0xd8, 0x4d, 0xd5, 0x8d, 0xa1, 0xbe, 0x76, 0x03,
	0xfe, 0x60, 0x91, 0x44, 0xab, 0x2c, 0xd8, 0x4b, 0xa1, 0x20, 0x5e, 0x04, 0x97, 0x6a, 0xcf, 0xf2,
	0x9a, 0x8c, 0xf1, 0x69, 0x9a, 0x97, 0xcd, 0x4b, 0x0a, 0xde, 0x44, 0x6f, 0x9e, 0x04, 0xff, 0x09,
	0xff, 0x14, 0x8f, 0x0b, 0x5e, 0x04, 0x2f, 0xf6, 0xe9, 0x41, 0x3c, 0xed, 0x9f, 0x20, 0xf9, 0x51,
	0x1b, 0x12, 0x5d, 0xbc, 0xec, 0xa9, 0xd3, 0x99, 0xf9, 0xce, 0x67, 0x66, 0xde, 0x04, 0xb6, 0xc2,
	0x88, 0xcf, 0x99, 0xf3, 0xca, 0x0a, 0x23, 0x11, 0x0b, 0x6d, 0xc3, 0xe5, 0xcc, 0x17, 0x9e, 0xd1,
	0xf1, 0x84, 0xf0, 0x7c, 0xb4, 0x59, 0xc8, 0x6d, 0x16, 0x04, 0x22, 0x66, 0x31, 0x17, 0x81, 0xcc,
	0xb3, 0x8c, 0x1d, 0x17, 0x9f, 0xf1, 0x80, 0x97, 0x5d, 0xed, 0x19, 0x97, 0x0e, 0xfa, 0x3e, 0x0b,
	0x50, 0x24, 0x4b, 0x67, 0x2b, 0x44, 0x8c, 0x96, 0x7f, 0x2e, 0x4a, 0x87, 0xf9, 0x2c, 0x9c, 0xda,
	0xc5, 0x6f, 0xee, 0x36, 0x9f, 0xc3, 0xf6, 0x18, 0x8f, 0x12, 0x94, 0xf1, 0xc8, 0x17, 0xce, 0xcb,
	0x89, 0xc4, 0x48, 0x3b, 0x80, 0x73, 0xa9, 0x52, 0x27, 0x3d, 0x72, 0xa3, 0xd5, 0x6f, 0x5b, 0x79,
	0x53, 0x56, 0x1a, 0x7b, 0x94, 0xc4, 0x87, 0x88, 0xd1, 0x68, 0xeb, 0xdd, 0xaf, 0x5b, 0x4d, 0xd8,
	0x9c, 0x73, 0xc9, 0xa7, 0x3e, 0x8e, 0xb3, 0xfc, 0x41, 0x47, 0x0d, 0x2f, 0xc3, 0x2e, 0x9f, 0x59,
	0xae, 0xef, 0x59, 0x5e, 0x14, 0x3a, 0xd6, 0x83, 0x28, 0x74, 0x8a, 0xf2, 0xe6, 0x0b, 0xd0, 0x0a,
	0x73, 0x12, 0x4c, 0xcf, 0x98, 0xf5, 0x04, 0x76, 0x0b, 0xf3, 0xa1, 0x60, 0x6e, 0x36, 0x19, 0xba,
	0x69, 0x4d, 0x39, 0xb8, 0x77, 0x9a, 0x50, 0x0d, 0x0d, 0xd0, 0xeb, 0x31, 0x19, 0x8a, 0x40, 0xa2,
	0x39, 0x03, 0x7d, 0x69, 0x57, 0xcb, 0x6a, 0x7d, 0x80, 0x44, 0x62, 0xf4, 0x34, 0x5b, 0xb9, 0x4e,
	0x7a, 0xeb, 0xff, 0x98, 0x66, 0xdc, 0x4c, 0xd3, 0x52, 0x4b, 0x0e, 0xae, 0x9c, 0x8e, 0xbb, 0x0b,
	0x3b, 0x93, 0xd0, 0x65, 0x31, 0xa6, 0xf2, 0x02, 0xa6, 0x75, 0x61, 0x3d, 0xe1, 0x6e, 0xb6, 0xae,
	0xf3, 0xd5, 0xcd, 0xa4, 0x11, 0xf3, 0x00, 0xda, 0x2b, 0x55, 0xb1, 0xe9, 0xff, 0xd0, 0xf5, 0xbf,
	0xae, 0xc1, 0xe6, 0x61, 0x7e, 0x8c, 0x1a, 0x83, 0xe6, 0xea, 0x1a, 0xf4, 0xe5, 0x14, 0xd5, 0x3b,
	0x31, 0xda, 0xab, 0x48, 0xde, 0xf2, 0x63, 0x3c, 0x32, 0xaf, 0xbe, 0xf9, 0xfc, 0xe3, 0xc3, 0x5a,
	0xd7, 0x34, 0xec, 0xf9, 0x6d, 0x3b, 0x1d, 0xca, 0x2e, 0xaa, 0xda, 0x7f, 0x84, 0x03, 0xb2, 0xaf,
	0x79, 0xd0, 0x2a, 0x9f, 0x81, 0x51, 0x81, 0x94, 0x62, 0x7f, 0xc7, 0x5c, 0xcf, 0x30, 0x7b, 0x66,
	0xa7, 0x86, 0x29, 0x49, 0x53, 0xd0, 0x5b, 0x02, 0xdb, 0xb5, 0xd7, 0xea, 0x56, 0x70, 0xd5, 0x04,
	0xa3, 0x57, 0x65, 0x56, 0x33, 0xcc, 0x9b, 0x59, 0x03, 0xd7, 0xcc, 0xbd, 0x5a, 0x03, 0xb5, 0x93,
	0x23, 0xfb, 0xa3, 0xfb, 0x6a, 0x78, 0x09, 0x2e, 0x94, 0x9f, 0x5a, 0x62, 0x34, 0xe7, 0x0e, 0xca,
	0xe3, 0x05, 0x6d, 0x7c, 0x59, 0xd0, 0xc6, 0xc9, 0x82, 0x92, 0xd7, 0x8a, 0x92, 0x8f, 0x8a, 0x92,
	0x4f, 0x8a, 0x92, 0x63, 0x45, 0xc9, 0x37, 0x45, 0xc9, 0x4f, 0x45, 0x1b, 0x27, 0x8a, 0x92, 0xf7,
	0xdf, 0x69, 0x63, 0xba, 0x91, 0x7d, 0xb4, 0x77, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x80,
	0xf3, 0xf5, 0x37, 0x04, 0x00, 0x00,
}
