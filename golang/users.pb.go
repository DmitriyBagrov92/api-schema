// Code generated by protoc-gen-gogo.
// source: users.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Sex int32

const (
	SEX_UNKNOWN Sex = 0
	SEX_MALE    Sex = 2
	SEX_FEMALE  Sex = 3
)

var Sex_name = map[int32]string{
	0: "SEX_UNKNOWN",
	2: "SEX_MALE",
	3: "SEX_FEMALE",
}
var Sex_value = map[string]int32{
	"SEX_UNKNOWN": 0,
	"SEX_MALE":    2,
	"SEX_FEMALE":  3,
}

func (Sex) EnumDescriptor() ([]byte, []int) { return fileDescriptorUsers, []int{0} }

type ContactType int32

const (
	CONTACTTYPE_UNKNOWN ContactType = 0
	CONTACTTYPE_PHONE   ContactType = 1
	CONTACTTYPE_EMAIL   ContactType = 2
	CONTACTTYPE_WEB     ContactType = 3
	CONTACTTYPE_SOCIAL  ContactType = 4
)

var ContactType_name = map[int32]string{
	0: "CONTACTTYPE_UNKNOWN",
	1: "CONTACTTYPE_PHONE",
	2: "CONTACTTYPE_EMAIL",
	3: "CONTACTTYPE_WEB",
	4: "CONTACTTYPE_SOCIAL",
}
var ContactType_value = map[string]int32{
	"CONTACTTYPE_UNKNOWN": 0,
	"CONTACTTYPE_PHONE":   1,
	"CONTACTTYPE_EMAIL":   2,
	"CONTACTTYPE_WEB":     3,
	"CONTACTTYPE_SOCIAL":  4,
}

func (ContactType) EnumDescriptor() ([]byte, []int) { return fileDescriptorUsers, []int{1} }

type UserStatusType int32

const (
	USERSTATUSTYPE_UNKNOWN      UserStatusType = 0
	USERSTATUSTYPE_UNSET        UserStatusType = 1
	USERSTATUSTYPE_AWAY         UserStatusType = 2
	USERSTATUSTYPE_DONOTDISTURB UserStatusType = 3
	USERSTATUSTYPE_INVISIBLE    UserStatusType = 4
)

var UserStatusType_name = map[int32]string{
	0: "USERSTATUSTYPE_UNKNOWN",
	1: "USERSTATUSTYPE_UNSET",
	2: "USERSTATUSTYPE_AWAY",
	3: "USERSTATUSTYPE_DONOTDISTURB",
	4: "USERSTATUSTYPE_INVISIBLE",
}
var UserStatusType_value = map[string]int32{
	"USERSTATUSTYPE_UNKNOWN":      0,
	"USERSTATUSTYPE_UNSET":        1,
	"USERSTATUSTYPE_AWAY":         2,
	"USERSTATUSTYPE_DONOTDISTURB": 3,
	"USERSTATUSTYPE_INVISIBLE":    4,
}

func (UserStatusType) EnumDescriptor() ([]byte, []int) { return fileDescriptorUsers, []int{2} }

// Contact information record
type ContactRecord struct {
	Type ContactType `protobuf:"varint,1,opt,name=type,proto3,enum=dialog.ContactType" json:"type,omitempty"`
	// *
	// Value for specification type of contact,
	// for example 'mobile/standalone/office' for phones or 'vk/fb/telegram'
	// for extenrnal networks.
	TypeSpec    *google_protobuf.StringValue `protobuf:"bytes,6,opt,name=type_spec,json=typeSpec" json:"type_spec,omitempty"`
	StringValue *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	LongValue   *google_protobuf.Int64Value  `protobuf:"bytes,3,opt,name=long_value,json=longValue" json:"long_value,omitempty"`
	Title       *google_protobuf.StringValue `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Subtitle    *google_protobuf.StringValue `protobuf:"bytes,5,opt,name=subtitle" json:"subtitle,omitempty"`
}

func (m *ContactRecord) Reset()                    { *m = ContactRecord{} }
func (*ContactRecord) ProtoMessage()               {}
func (*ContactRecord) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{0} }

func (m *ContactRecord) GetType() ContactType {
	if m != nil {
		return m.Type
	}
	return CONTACTTYPE_UNKNOWN
}

func (m *ContactRecord) GetTypeSpec() *google_protobuf.StringValue {
	if m != nil {
		return m.TypeSpec
	}
	return nil
}

func (m *ContactRecord) GetStringValue() *google_protobuf.StringValue {
	if m != nil {
		return m.StringValue
	}
	return nil
}

func (m *ContactRecord) GetLongValue() *google_protobuf.Int64Value {
	if m != nil {
		return m.LongValue
	}
	return nil
}

func (m *ContactRecord) GetTitle() *google_protobuf.StringValue {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *ContactRecord) GetSubtitle() *google_protobuf.StringValue {
	if m != nil {
		return m.Subtitle
	}
	return nil
}

// User's status
type UserStatus struct {
	Type UserStatusType `protobuf:"varint,1,opt,name=type,proto3,enum=dialog.UserStatusType" json:"type,omitempty"`
	// / Text supplied by user
	Text *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (m *UserStatus) Reset()                    { *m = UserStatus{} }
func (*UserStatus) ProtoMessage()               {}
func (*UserStatus) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{1} }

func (m *UserStatus) GetType() UserStatusType {
	if m != nil {
		return m.Type
	}
	return USERSTATUSTYPE_UNKNOWN
}

func (m *UserStatus) GetText() *google_protobuf.StringValue {
	if m != nil {
		return m.Text
	}
	return nil
}

// Main user object
type User struct {
	Id         int32                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash int64                        `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Name       string                       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	LocalName  *google_protobuf.StringValue `protobuf:"bytes,4,opt,name=local_name,json=localName" json:"local_name,omitempty"`
	Nick       *google_protobuf.StringValue `protobuf:"bytes,13,opt,name=nick" json:"nick,omitempty"`
	Sex        Sex                          `protobuf:"varint,5,opt,name=sex,proto3,enum=dialog.Sex" json:"sex,omitempty"`
	Avatar     *Avatar                      `protobuf:"bytes,8,opt,name=avatar" json:"avatar,omitempty"`
	IsBot      *google_protobuf.BoolValue   `protobuf:"bytes,11,opt,name=is_bot,json=isBot" json:"is_bot,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{2} }

func (m *User) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetLocalName() *google_protobuf.StringValue {
	if m != nil {
		return m.LocalName
	}
	return nil
}

func (m *User) GetNick() *google_protobuf.StringValue {
	if m != nil {
		return m.Nick
	}
	return nil
}

func (m *User) GetSex() Sex {
	if m != nil {
		return m.Sex
	}
	return SEX_UNKNOWN
}

func (m *User) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *User) GetIsBot() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsBot
	}
	return nil
}

// Full User representation - deprecated
type FullUser struct {
	Id                 int32                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ContactInfo        []*ContactRecord             `protobuf:"bytes,2,rep,name=contact_info,json=contactInfo" json:"contact_info,omitempty"`
	About              *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=about" json:"about,omitempty"`
	PreferredLanguages []string                     `protobuf:"bytes,4,rep,name=preferred_languages,json=preferredLanguages" json:"preferred_languages,omitempty"`
	// / Time Zone of user in TZ format
	TimeZone    *google_protobuf.StringValue `protobuf:"bytes,5,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`
	BotCommands []*BotCommand                `protobuf:"bytes,6,rep,name=bot_commands,json=botCommands" json:"bot_commands,omitempty"`
	IsBlocked   *google_protobuf.BoolValue   `protobuf:"bytes,8,opt,name=is_blocked,json=isBlocked" json:"is_blocked,omitempty"`
	// / custom user profile info in JSON format
	CustomProfile    string                       `protobuf:"bytes,9,opt,name=custom_profile,json=customProfile,proto3" json:"custom_profile,omitempty"`
	IntegrationToken *google_protobuf.StringValue `protobuf:"bytes,10,opt,name=integration_token,json=integrationToken" json:"integration_token,omitempty"`
	Status           *UserStatus                  `protobuf:"bytes,11,opt,name=status" json:"status,omitempty"`
}

func (m *FullUser) Reset()                    { *m = FullUser{} }
func (*FullUser) ProtoMessage()               {}
func (*FullUser) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{3} }

func (m *FullUser) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FullUser) GetContactInfo() []*ContactRecord {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *FullUser) GetAbout() *google_protobuf.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *FullUser) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

func (m *FullUser) GetTimeZone() *google_protobuf.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

func (m *FullUser) GetBotCommands() []*BotCommand {
	if m != nil {
		return m.BotCommands
	}
	return nil
}

func (m *FullUser) GetIsBlocked() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsBlocked
	}
	return nil
}

func (m *FullUser) GetCustomProfile() string {
	if m != nil {
		return m.CustomProfile
	}
	return ""
}

func (m *FullUser) GetIntegrationToken() *google_protobuf.StringValue {
	if m != nil {
		return m.IntegrationToken
	}
	return nil
}

func (m *FullUser) GetStatus() *UserStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Available bot commands
type BotCommand struct {
	// / Slash command name (wihtout slash)
	SlashCommand string `protobuf:"bytes,1,opt,name=slash_command,json=slashCommand,proto3" json:"slash_command,omitempty"`
	// / Slash command description
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// / Optional Localization Key for i18n
	LocKey *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=loc_key,json=locKey" json:"loc_key,omitempty"`
}

func (m *BotCommand) Reset()                    { *m = BotCommand{} }
func (*BotCommand) ProtoMessage()               {}
func (*BotCommand) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{4} }

func (m *BotCommand) GetSlashCommand() string {
	if m != nil {
		return m.SlashCommand
	}
	return ""
}

func (m *BotCommand) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BotCommand) GetLocKey() *google_protobuf.StringValue {
	if m != nil {
		return m.LocKey
	}
	return nil
}

// Renaming of user's visible name
type RequestEditUserLocalName struct {
	Uid        int32  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AccessHash int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RequestEditUserLocalName) Reset()                    { *m = RequestEditUserLocalName{} }
func (*RequestEditUserLocalName) ProtoMessage()               {}
func (*RequestEditUserLocalName) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{5} }

func (m *RequestEditUserLocalName) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RequestEditUserLocalName) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *RequestEditUserLocalName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Update about avatar changed
type UpdateUserAvatarChanged struct {
	Uid    int32   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Avatar *Avatar `protobuf:"bytes,2,opt,name=avatar" json:"avatar,omitempty"`
}

func (m *UpdateUserAvatarChanged) Reset()                    { *m = UpdateUserAvatarChanged{} }
func (*UpdateUserAvatarChanged) ProtoMessage()               {}
func (*UpdateUserAvatarChanged) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{6} }

func (m *UpdateUserAvatarChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserAvatarChanged) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

// Update about name changed
type UpdateUserNameChanged struct {
	Uid  int32  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *UpdateUserNameChanged) Reset()                    { *m = UpdateUserNameChanged{} }
func (*UpdateUserNameChanged) ProtoMessage()               {}
func (*UpdateUserNameChanged) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{7} }

func (m *UpdateUserNameChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserNameChanged) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Update about local name changed
type UpdateUserLocalNameChanged struct {
	Uid       int32                        `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	LocalName *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=local_name,json=localName" json:"local_name,omitempty"`
}

func (m *UpdateUserLocalNameChanged) Reset()                    { *m = UpdateUserLocalNameChanged{} }
func (*UpdateUserLocalNameChanged) ProtoMessage()               {}
func (*UpdateUserLocalNameChanged) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{8} }

func (m *UpdateUserLocalNameChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserLocalNameChanged) GetLocalName() *google_protobuf.StringValue {
	if m != nil {
		return m.LocalName
	}
	return nil
}

// Update about contact information change
type UpdateUserContactsChanged struct {
	Uid            int32            `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ContactRecords []*ContactRecord `protobuf:"bytes,4,rep,name=contact_records,json=contactRecords" json:"contact_records,omitempty"`
}

func (m *UpdateUserContactsChanged) Reset()                    { *m = UpdateUserContactsChanged{} }
func (*UpdateUserContactsChanged) ProtoMessage()               {}
func (*UpdateUserContactsChanged) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{9} }

func (m *UpdateUserContactsChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserContactsChanged) GetContactRecords() []*ContactRecord {
	if m != nil {
		return m.ContactRecords
	}
	return nil
}

// Update about nick changed
type UpdateUserNickChanged struct {
	Uid      int32                        `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nickname *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
}

func (m *UpdateUserNickChanged) Reset()                    { *m = UpdateUserNickChanged{} }
func (*UpdateUserNickChanged) ProtoMessage()               {}
func (*UpdateUserNickChanged) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{10} }

func (m *UpdateUserNickChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserNickChanged) GetNickname() *google_protobuf.StringValue {
	if m != nil {
		return m.Nickname
	}
	return nil
}

// Update about user's about changed
type UpdateUserAboutChanged struct {
	Uid   int32                        `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	About *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=about" json:"about,omitempty"`
}

func (m *UpdateUserAboutChanged) Reset()                    { *m = UpdateUserAboutChanged{} }
func (*UpdateUserAboutChanged) ProtoMessage()               {}
func (*UpdateUserAboutChanged) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{11} }

func (m *UpdateUserAboutChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserAboutChanged) GetAbout() *google_protobuf.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

// Update about user's preferred languages
type UpdateUserPreferredLanguagesChanged struct {
	Uid                int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	PreferredLanguages []string `protobuf:"bytes,2,rep,name=preferred_languages,json=preferredLanguages" json:"preferred_languages,omitempty"`
}

func (m *UpdateUserPreferredLanguagesChanged) Reset()      { *m = UpdateUserPreferredLanguagesChanged{} }
func (*UpdateUserPreferredLanguagesChanged) ProtoMessage() {}
func (*UpdateUserPreferredLanguagesChanged) Descriptor() ([]byte, []int) {
	return fileDescriptorUsers, []int{12}
}

func (m *UpdateUserPreferredLanguagesChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserPreferredLanguagesChanged) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

// User TimeZone changed
type UpdateUserTimeZoneChanged struct {
	Uid      int32                        `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	TimeZone *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`
}

func (m *UpdateUserTimeZoneChanged) Reset()                    { *m = UpdateUserTimeZoneChanged{} }
func (*UpdateUserTimeZoneChanged) ProtoMessage()               {}
func (*UpdateUserTimeZoneChanged) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{13} }

func (m *UpdateUserTimeZoneChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserTimeZoneChanged) GetTimeZone() *google_protobuf.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

// Update about bot commands changed
type UpdateUserBotCommandsChanged struct {
	Uid      int32         `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Commands []*BotCommand `protobuf:"bytes,2,rep,name=commands" json:"commands,omitempty"`
}

func (m *UpdateUserBotCommandsChanged) Reset()      { *m = UpdateUserBotCommandsChanged{} }
func (*UpdateUserBotCommandsChanged) ProtoMessage() {}
func (*UpdateUserBotCommandsChanged) Descriptor() ([]byte, []int) {
	return fileDescriptorUsers, []int{14}
}

func (m *UpdateUserBotCommandsChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserBotCommandsChanged) GetCommands() []*BotCommand {
	if m != nil {
		return m.Commands
	}
	return nil
}

// Update about user sex changed
type UpdateUserSexChanged struct {
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Sex Sex   `protobuf:"varint,2,opt,name=sex,proto3,enum=dialog.Sex" json:"sex,omitempty"`
}

func (m *UpdateUserSexChanged) Reset()                    { *m = UpdateUserSexChanged{} }
func (*UpdateUserSexChanged) ProtoMessage()               {}
func (*UpdateUserSexChanged) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{15} }

func (m *UpdateUserSexChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserSexChanged) GetSex() Sex {
	if m != nil {
		return m.Sex
	}
	return SEX_UNKNOWN
}

// Update about user custom profile changed
type UpdateUserCustomProfileChanged struct {
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// / custom user profile info in JSON format
	CustomProfile string `protobuf:"bytes,2,opt,name=custom_profile,json=customProfile,proto3" json:"custom_profile,omitempty"`
}

func (m *UpdateUserCustomProfileChanged) Reset()      { *m = UpdateUserCustomProfileChanged{} }
func (*UpdateUserCustomProfileChanged) ProtoMessage() {}
func (*UpdateUserCustomProfileChanged) Descriptor() ([]byte, []int) {
	return fileDescriptorUsers, []int{16}
}

func (m *UpdateUserCustomProfileChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserCustomProfileChanged) GetCustomProfile() string {
	if m != nil {
		return m.CustomProfile
	}
	return ""
}

// Update about user status change
type UpdateUserStatusChanged struct {
	Uid    int32       `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Status *UserStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *UpdateUserStatusChanged) Reset()                    { *m = UpdateUserStatusChanged{} }
func (*UpdateUserStatusChanged) ProtoMessage()               {}
func (*UpdateUserStatusChanged) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{17} }

func (m *UpdateUserStatusChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserStatusChanged) GetStatus() *UserStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type UpdateUserExtChanged struct {
	Uid int32              `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Ext *RecursiveMapValue `protobuf:"bytes,2,opt,name=ext" json:"ext,omitempty"`
}

func (m *UpdateUserExtChanged) Reset()                    { *m = UpdateUserExtChanged{} }
func (*UpdateUserExtChanged) ProtoMessage()               {}
func (*UpdateUserExtChanged) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{18} }

func (m *UpdateUserExtChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserExtChanged) GetExt() *RecursiveMapValue {
	if m != nil {
		return m.Ext
	}
	return nil
}

type UpdateUserFullExtChanged struct {
	Uid int32              `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Ext *RecursiveMapValue `protobuf:"bytes,2,opt,name=ext" json:"ext,omitempty"`
}

func (m *UpdateUserFullExtChanged) Reset()                    { *m = UpdateUserFullExtChanged{} }
func (*UpdateUserFullExtChanged) ProtoMessage()               {}
func (*UpdateUserFullExtChanged) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{19} }

func (m *UpdateUserFullExtChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserFullExtChanged) GetExt() *RecursiveMapValue {
	if m != nil {
		return m.Ext
	}
	return nil
}

// Loading Full User information
type RequestLoadFullUsers struct {
	UserPeers []*UserOutPeer `protobuf:"bytes,1,rep,name=user_peers,json=userPeers" json:"user_peers,omitempty"`
}

func (m *RequestLoadFullUsers) Reset()                    { *m = RequestLoadFullUsers{} }
func (*RequestLoadFullUsers) ProtoMessage()               {}
func (*RequestLoadFullUsers) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{20} }

func (m *RequestLoadFullUsers) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

type ResponseLoadFullUsers struct {
	FullUsers []*FullUser `protobuf:"bytes,1,rep,name=full_users,json=fullUsers" json:"full_users,omitempty"`
}

func (m *ResponseLoadFullUsers) Reset()                    { *m = ResponseLoadFullUsers{} }
func (*ResponseLoadFullUsers) ProtoMessage()               {}
func (*ResponseLoadFullUsers) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{21} }

func (m *ResponseLoadFullUsers) GetFullUsers() []*FullUser {
	if m != nil {
		return m.FullUsers
	}
	return nil
}

func init() {
	proto.RegisterType((*ContactRecord)(nil), "dialog.ContactRecord")
	proto.RegisterType((*UserStatus)(nil), "dialog.UserStatus")
	proto.RegisterType((*User)(nil), "dialog.User")
	proto.RegisterType((*FullUser)(nil), "dialog.FullUser")
	proto.RegisterType((*BotCommand)(nil), "dialog.BotCommand")
	proto.RegisterType((*RequestEditUserLocalName)(nil), "dialog.RequestEditUserLocalName")
	proto.RegisterType((*UpdateUserAvatarChanged)(nil), "dialog.UpdateUserAvatarChanged")
	proto.RegisterType((*UpdateUserNameChanged)(nil), "dialog.UpdateUserNameChanged")
	proto.RegisterType((*UpdateUserLocalNameChanged)(nil), "dialog.UpdateUserLocalNameChanged")
	proto.RegisterType((*UpdateUserContactsChanged)(nil), "dialog.UpdateUserContactsChanged")
	proto.RegisterType((*UpdateUserNickChanged)(nil), "dialog.UpdateUserNickChanged")
	proto.RegisterType((*UpdateUserAboutChanged)(nil), "dialog.UpdateUserAboutChanged")
	proto.RegisterType((*UpdateUserPreferredLanguagesChanged)(nil), "dialog.UpdateUserPreferredLanguagesChanged")
	proto.RegisterType((*UpdateUserTimeZoneChanged)(nil), "dialog.UpdateUserTimeZoneChanged")
	proto.RegisterType((*UpdateUserBotCommandsChanged)(nil), "dialog.UpdateUserBotCommandsChanged")
	proto.RegisterType((*UpdateUserSexChanged)(nil), "dialog.UpdateUserSexChanged")
	proto.RegisterType((*UpdateUserCustomProfileChanged)(nil), "dialog.UpdateUserCustomProfileChanged")
	proto.RegisterType((*UpdateUserStatusChanged)(nil), "dialog.UpdateUserStatusChanged")
	proto.RegisterType((*UpdateUserExtChanged)(nil), "dialog.UpdateUserExtChanged")
	proto.RegisterType((*UpdateUserFullExtChanged)(nil), "dialog.UpdateUserFullExtChanged")
	proto.RegisterType((*RequestLoadFullUsers)(nil), "dialog.RequestLoadFullUsers")
	proto.RegisterType((*ResponseLoadFullUsers)(nil), "dialog.ResponseLoadFullUsers")
	proto.RegisterEnum("dialog.Sex", Sex_name, Sex_value)
	proto.RegisterEnum("dialog.ContactType", ContactType_name, ContactType_value)
	proto.RegisterEnum("dialog.UserStatusType", UserStatusType_name, UserStatusType_value)
}
func (x Sex) String() string {
	s, ok := Sex_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ContactType) String() string {
	s, ok := ContactType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UserStatusType) String() string {
	s, ok := UserStatusType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ContactRecord) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ContactRecord)
	if !ok {
		that2, ok := that.(ContactRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.TypeSpec.Equal(that1.TypeSpec) {
		return false
	}
	if !this.StringValue.Equal(that1.StringValue) {
		return false
	}
	if !this.LongValue.Equal(that1.LongValue) {
		return false
	}
	if !this.Title.Equal(that1.Title) {
		return false
	}
	if !this.Subtitle.Equal(that1.Subtitle) {
		return false
	}
	return true
}
func (this *UserStatus) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UserStatus)
	if !ok {
		that2, ok := that.(UserStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Text.Equal(that1.Text) {
		return false
	}
	return true
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.AccessHash != that1.AccessHash {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.LocalName.Equal(that1.LocalName) {
		return false
	}
	if !this.Nick.Equal(that1.Nick) {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if !this.Avatar.Equal(that1.Avatar) {
		return false
	}
	if !this.IsBot.Equal(that1.IsBot) {
		return false
	}
	return true
}
func (this *FullUser) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FullUser)
	if !ok {
		that2, ok := that.(FullUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.ContactInfo) != len(that1.ContactInfo) {
		return false
	}
	for i := range this.ContactInfo {
		if !this.ContactInfo[i].Equal(that1.ContactInfo[i]) {
			return false
		}
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	if !this.TimeZone.Equal(that1.TimeZone) {
		return false
	}
	if len(this.BotCommands) != len(that1.BotCommands) {
		return false
	}
	for i := range this.BotCommands {
		if !this.BotCommands[i].Equal(that1.BotCommands[i]) {
			return false
		}
	}
	if !this.IsBlocked.Equal(that1.IsBlocked) {
		return false
	}
	if this.CustomProfile != that1.CustomProfile {
		return false
	}
	if !this.IntegrationToken.Equal(that1.IntegrationToken) {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *BotCommand) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BotCommand)
	if !ok {
		that2, ok := that.(BotCommand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SlashCommand != that1.SlashCommand {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.LocKey.Equal(that1.LocKey) {
		return false
	}
	return true
}
func (this *RequestEditUserLocalName) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestEditUserLocalName)
	if !ok {
		that2, ok := that.(RequestEditUserLocalName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.AccessHash != that1.AccessHash {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *UpdateUserAvatarChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserAvatarChanged)
	if !ok {
		that2, ok := that.(UpdateUserAvatarChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.Avatar.Equal(that1.Avatar) {
		return false
	}
	return true
}
func (this *UpdateUserNameChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserNameChanged)
	if !ok {
		that2, ok := that.(UpdateUserNameChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *UpdateUserLocalNameChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserLocalNameChanged)
	if !ok {
		that2, ok := that.(UpdateUserLocalNameChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.LocalName.Equal(that1.LocalName) {
		return false
	}
	return true
}
func (this *UpdateUserContactsChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserContactsChanged)
	if !ok {
		that2, ok := that.(UpdateUserContactsChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if len(this.ContactRecords) != len(that1.ContactRecords) {
		return false
	}
	for i := range this.ContactRecords {
		if !this.ContactRecords[i].Equal(that1.ContactRecords[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateUserNickChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserNickChanged)
	if !ok {
		that2, ok := that.(UpdateUserNickChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.Nickname.Equal(that1.Nickname) {
		return false
	}
	return true
}
func (this *UpdateUserAboutChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserAboutChanged)
	if !ok {
		that2, ok := that.(UpdateUserAboutChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	return true
}
func (this *UpdateUserPreferredLanguagesChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserPreferredLanguagesChanged)
	if !ok {
		that2, ok := that.(UpdateUserPreferredLanguagesChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	return true
}
func (this *UpdateUserTimeZoneChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserTimeZoneChanged)
	if !ok {
		that2, ok := that.(UpdateUserTimeZoneChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.TimeZone.Equal(that1.TimeZone) {
		return false
	}
	return true
}
func (this *UpdateUserBotCommandsChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserBotCommandsChanged)
	if !ok {
		that2, ok := that.(UpdateUserBotCommandsChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if len(this.Commands) != len(that1.Commands) {
		return false
	}
	for i := range this.Commands {
		if !this.Commands[i].Equal(that1.Commands[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateUserSexChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserSexChanged)
	if !ok {
		that2, ok := that.(UpdateUserSexChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	return true
}
func (this *UpdateUserCustomProfileChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserCustomProfileChanged)
	if !ok {
		that2, ok := that.(UpdateUserCustomProfileChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.CustomProfile != that1.CustomProfile {
		return false
	}
	return true
}
func (this *UpdateUserStatusChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserStatusChanged)
	if !ok {
		that2, ok := that.(UpdateUserStatusChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *UpdateUserExtChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserExtChanged)
	if !ok {
		that2, ok := that.(UpdateUserExtChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.Ext.Equal(that1.Ext) {
		return false
	}
	return true
}
func (this *UpdateUserFullExtChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserFullExtChanged)
	if !ok {
		that2, ok := that.(UpdateUserFullExtChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.Ext.Equal(that1.Ext) {
		return false
	}
	return true
}
func (this *RequestLoadFullUsers) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestLoadFullUsers)
	if !ok {
		that2, ok := that.(RequestLoadFullUsers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	return true
}
func (this *ResponseLoadFullUsers) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseLoadFullUsers)
	if !ok {
		that2, ok := that.(ResponseLoadFullUsers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.FullUsers) != len(that1.FullUsers) {
		return false
	}
	for i := range this.FullUsers {
		if !this.FullUsers[i].Equal(that1.FullUsers[i]) {
			return false
		}
	}
	return true
}
func (this *ContactRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.ContactRecord{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.TypeSpec != nil {
		s = append(s, "TypeSpec: "+fmt.Sprintf("%#v", this.TypeSpec)+",\n")
	}
	if this.StringValue != nil {
		s = append(s, "StringValue: "+fmt.Sprintf("%#v", this.StringValue)+",\n")
	}
	if this.LongValue != nil {
		s = append(s, "LongValue: "+fmt.Sprintf("%#v", this.LongValue)+",\n")
	}
	if this.Title != nil {
		s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	}
	if this.Subtitle != nil {
		s = append(s, "Subtitle: "+fmt.Sprintf("%#v", this.Subtitle)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UserStatus{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Text != nil {
		s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *User) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&dialog.User{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.LocalName != nil {
		s = append(s, "LocalName: "+fmt.Sprintf("%#v", this.LocalName)+",\n")
	}
	if this.Nick != nil {
		s = append(s, "Nick: "+fmt.Sprintf("%#v", this.Nick)+",\n")
	}
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	if this.Avatar != nil {
		s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	}
	if this.IsBot != nil {
		s = append(s, "IsBot: "+fmt.Sprintf("%#v", this.IsBot)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FullUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&dialog.FullUser{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.ContactInfo != nil {
		s = append(s, "ContactInfo: "+fmt.Sprintf("%#v", this.ContactInfo)+",\n")
	}
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	if this.TimeZone != nil {
		s = append(s, "TimeZone: "+fmt.Sprintf("%#v", this.TimeZone)+",\n")
	}
	if this.BotCommands != nil {
		s = append(s, "BotCommands: "+fmt.Sprintf("%#v", this.BotCommands)+",\n")
	}
	if this.IsBlocked != nil {
		s = append(s, "IsBlocked: "+fmt.Sprintf("%#v", this.IsBlocked)+",\n")
	}
	s = append(s, "CustomProfile: "+fmt.Sprintf("%#v", this.CustomProfile)+",\n")
	if this.IntegrationToken != nil {
		s = append(s, "IntegrationToken: "+fmt.Sprintf("%#v", this.IntegrationToken)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BotCommand) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.BotCommand{")
	s = append(s, "SlashCommand: "+fmt.Sprintf("%#v", this.SlashCommand)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	if this.LocKey != nil {
		s = append(s, "LocKey: "+fmt.Sprintf("%#v", this.LocKey)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditUserLocalName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestEditUserLocalName{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserAvatarChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserAvatarChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.Avatar != nil {
		s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserNameChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserNameChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserLocalNameChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserLocalNameChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.LocalName != nil {
		s = append(s, "LocalName: "+fmt.Sprintf("%#v", this.LocalName)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserContactsChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserContactsChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.ContactRecords != nil {
		s = append(s, "ContactRecords: "+fmt.Sprintf("%#v", this.ContactRecords)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserNickChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserNickChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.Nickname != nil {
		s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserAboutChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserAboutChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserPreferredLanguagesChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserPreferredLanguagesChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserTimeZoneChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserTimeZoneChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.TimeZone != nil {
		s = append(s, "TimeZone: "+fmt.Sprintf("%#v", this.TimeZone)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserBotCommandsChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserBotCommandsChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.Commands != nil {
		s = append(s, "Commands: "+fmt.Sprintf("%#v", this.Commands)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserSexChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserSexChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserCustomProfileChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserCustomProfileChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "CustomProfile: "+fmt.Sprintf("%#v", this.CustomProfile)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserStatusChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserStatusChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserExtChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserExtChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.Ext != nil {
		s = append(s, "Ext: "+fmt.Sprintf("%#v", this.Ext)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserFullExtChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserFullExtChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.Ext != nil {
		s = append(s, "Ext: "+fmt.Sprintf("%#v", this.Ext)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadFullUsers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestLoadFullUsers{")
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadFullUsers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseLoadFullUsers{")
	if this.FullUsers != nil {
		s = append(s, "FullUsers: "+fmt.Sprintf("%#v", this.FullUsers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUsers(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Users service

type UsersClient interface {
	EditUserLocalName(ctx context.Context, in *RequestEditUserLocalName, opts ...grpc.CallOption) (*ResponseSeq, error)
	// / Deprecated
	LoadFullUsers(ctx context.Context, in *RequestLoadFullUsers, opts ...grpc.CallOption) (*ResponseLoadFullUsers, error)
}

type usersClient struct {
	cc *grpc.ClientConn
}

func NewUsersClient(cc *grpc.ClientConn) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) EditUserLocalName(ctx context.Context, in *RequestEditUserLocalName, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Users/EditUserLocalName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) LoadFullUsers(ctx context.Context, in *RequestLoadFullUsers, opts ...grpc.CallOption) (*ResponseLoadFullUsers, error) {
	out := new(ResponseLoadFullUsers)
	err := grpc.Invoke(ctx, "/dialog.Users/LoadFullUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Users service

type UsersServer interface {
	EditUserLocalName(context.Context, *RequestEditUserLocalName) (*ResponseSeq, error)
	// / Deprecated
	LoadFullUsers(context.Context, *RequestLoadFullUsers) (*ResponseLoadFullUsers, error)
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_EditUserLocalName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditUserLocalName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).EditUserLocalName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Users/EditUserLocalName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).EditUserLocalName(ctx, req.(*RequestEditUserLocalName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_LoadFullUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadFullUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).LoadFullUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Users/LoadFullUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).LoadFullUsers(ctx, req.(*RequestLoadFullUsers))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EditUserLocalName",
			Handler:    _Users_EditUserLocalName_Handler,
		},
		{
			MethodName: "LoadFullUsers",
			Handler:    _Users_LoadFullUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}

func (m *ContactRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Type))
	}
	if m.StringValue != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.StringValue.Size()))
		n1, err := m.StringValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.LongValue != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.LongValue.Size()))
		n2, err := m.LongValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Title != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Title.Size()))
		n3, err := m.Title.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Subtitle != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Subtitle.Size()))
		n4, err := m.Subtitle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.TypeSpec != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.TypeSpec.Size()))
		n5, err := m.TypeSpec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *UserStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Type))
	}
	if m.Text != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Text.Size()))
		n6, err := m.Text.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Id))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.LocalName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.LocalName.Size()))
		n7, err := m.LocalName.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Sex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Sex))
	}
	if m.Avatar != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Avatar.Size()))
		n8, err := m.Avatar.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.IsBot != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.IsBot.Size()))
		n9, err := m.IsBot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Nick != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Nick.Size()))
		n10, err := m.Nick.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *FullUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FullUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Id))
	}
	if len(m.ContactInfo) > 0 {
		for _, msg := range m.ContactInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintUsers(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.About != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.About.Size()))
		n11, err := m.About.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.TimeZone != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.TimeZone.Size()))
		n12, err := m.TimeZone.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.BotCommands) > 0 {
		for _, msg := range m.BotCommands {
			dAtA[i] = 0x32
			i++
			i = encodeVarintUsers(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsBlocked != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.IsBlocked.Size()))
		n13, err := m.IsBlocked.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.CustomProfile) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.CustomProfile)))
		i += copy(dAtA[i:], m.CustomProfile)
	}
	if m.IntegrationToken != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.IntegrationToken.Size()))
		n14, err := m.IntegrationToken.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Status != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Status.Size()))
		n15, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *BotCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SlashCommand) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.SlashCommand)))
		i += copy(dAtA[i:], m.SlashCommand)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.LocKey != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.LocKey.Size()))
		n16, err := m.LocKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *RequestEditUserLocalName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditUserLocalName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *UpdateUserAvatarChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserAvatarChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
	}
	if m.Avatar != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Avatar.Size()))
		n17, err := m.Avatar.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *UpdateUserNameChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserNameChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *UpdateUserLocalNameChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserLocalNameChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
	}
	if m.LocalName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.LocalName.Size()))
		n18, err := m.LocalName.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *UpdateUserContactsChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserContactsChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
	}
	if len(m.ContactRecords) > 0 {
		for _, msg := range m.ContactRecords {
			dAtA[i] = 0x22
			i++
			i = encodeVarintUsers(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateUserNickChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserNickChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
	}
	if m.Nickname != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Nickname.Size()))
		n19, err := m.Nickname.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *UpdateUserAboutChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserAboutChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
	}
	if m.About != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.About.Size()))
		n20, err := m.About.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *UpdateUserPreferredLanguagesChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserPreferredLanguagesChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *UpdateUserTimeZoneChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserTimeZoneChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
	}
	if m.TimeZone != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.TimeZone.Size()))
		n21, err := m.TimeZone.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *UpdateUserBotCommandsChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserBotCommandsChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
	}
	if len(m.Commands) > 0 {
		for _, msg := range m.Commands {
			dAtA[i] = 0x12
			i++
			i = encodeVarintUsers(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateUserSexChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserSexChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
	}
	if m.Sex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Sex))
	}
	return i, nil
}

func (m *UpdateUserCustomProfileChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserCustomProfileChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
	}
	if len(m.CustomProfile) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.CustomProfile)))
		i += copy(dAtA[i:], m.CustomProfile)
	}
	return i, nil
}

func (m *UpdateUserStatusChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserStatusChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Status.Size()))
		n22, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *UpdateUserExtChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserExtChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
	}
	if m.Ext != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Ext.Size()))
		n23, err := m.Ext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *UpdateUserFullExtChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserFullExtChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
	}
	if m.Ext != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Ext.Size()))
		n24, err := m.Ext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *RequestLoadFullUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadFullUsers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserPeers) > 0 {
		for _, msg := range m.UserPeers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUsers(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ResponseLoadFullUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadFullUsers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FullUsers) > 0 {
		for _, msg := range m.FullUsers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUsers(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Users(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Users(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintUsers(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ContactRecord) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovUsers(uint64(m.Type))
	}
	if m.StringValue != nil {
		l = m.StringValue.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.LongValue != nil {
		l = m.LongValue.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Title != nil {
		l = m.Title.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Subtitle != nil {
		l = m.Subtitle.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.TypeSpec != nil {
		l = m.TypeSpec.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UserStatus) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovUsers(uint64(m.Type))
	}
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *User) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUsers(uint64(m.Id))
	}
	if m.AccessHash != 0 {
		n += 1 + sovUsers(uint64(m.AccessHash))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.LocalName != nil {
		l = m.LocalName.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovUsers(uint64(m.Sex))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.IsBot != nil {
		l = m.IsBot.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Nick != nil {
		l = m.Nick.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *FullUser) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUsers(uint64(m.Id))
	}
	if len(m.ContactInfo) > 0 {
		for _, e := range m.ContactInfo {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	if m.TimeZone != nil {
		l = m.TimeZone.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if len(m.BotCommands) > 0 {
		for _, e := range m.BotCommands {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	if m.IsBlocked != nil {
		l = m.IsBlocked.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.CustomProfile)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.IntegrationToken != nil {
		l = m.IntegrationToken.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *BotCommand) Size() (n int) {
	var l int
	_ = l
	l = len(m.SlashCommand)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.LocKey != nil {
		l = m.LocKey.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *RequestEditUserLocalName) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovUsers(uint64(m.AccessHash))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserAvatarChanged) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserNameChanged) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserLocalNameChanged) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.LocalName != nil {
		l = m.LocalName.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserContactsChanged) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if len(m.ContactRecords) > 0 {
		for _, e := range m.ContactRecords {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *UpdateUserNickChanged) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.Nickname != nil {
		l = m.Nickname.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserAboutChanged) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserPreferredLanguagesChanged) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *UpdateUserTimeZoneChanged) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.TimeZone != nil {
		l = m.TimeZone.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserBotCommandsChanged) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if len(m.Commands) > 0 {
		for _, e := range m.Commands {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *UpdateUserSexChanged) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.Sex != 0 {
		n += 1 + sovUsers(uint64(m.Sex))
	}
	return n
}

func (m *UpdateUserCustomProfileChanged) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	l = len(m.CustomProfile)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserStatusChanged) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserExtChanged) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.Ext != nil {
		l = m.Ext.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserFullExtChanged) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.Ext != nil {
		l = m.Ext.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *RequestLoadFullUsers) Size() (n int) {
	var l int
	_ = l
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *ResponseLoadFullUsers) Size() (n int) {
	var l int
	_ = l
	if len(m.FullUsers) > 0 {
		for _, e := range m.FullUsers {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func sovUsers(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUsers(x uint64) (n int) {
	return sovUsers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ContactRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContactRecord{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`StringValue:` + strings.Replace(fmt.Sprintf("%v", this.StringValue), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`LongValue:` + strings.Replace(fmt.Sprintf("%v", this.LongValue), "Int64Value", "google_protobuf.Int64Value", 1) + `,`,
		`Title:` + strings.Replace(fmt.Sprintf("%v", this.Title), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Subtitle:` + strings.Replace(fmt.Sprintf("%v", this.Subtitle), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`TypeSpec:` + strings.Replace(fmt.Sprintf("%v", this.TypeSpec), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserStatus{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Text:` + strings.Replace(fmt.Sprintf("%v", this.Text), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *User) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&User{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`AccessHash:` + fmt.Sprintf("%v", this.AccessHash) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`LocalName:` + strings.Replace(fmt.Sprintf("%v", this.LocalName), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`Avatar:` + strings.Replace(fmt.Sprintf("%v", this.Avatar), "Avatar", "Avatar", 1) + `,`,
		`IsBot:` + strings.Replace(fmt.Sprintf("%v", this.IsBot), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`Nick:` + strings.Replace(fmt.Sprintf("%v", this.Nick), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FullUser) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FullUser{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`ContactInfo:` + strings.Replace(fmt.Sprintf("%v", this.ContactInfo), "ContactRecord", "ContactRecord", 1) + `,`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`TimeZone:` + strings.Replace(fmt.Sprintf("%v", this.TimeZone), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`BotCommands:` + strings.Replace(fmt.Sprintf("%v", this.BotCommands), "BotCommand", "BotCommand", 1) + `,`,
		`IsBlocked:` + strings.Replace(fmt.Sprintf("%v", this.IsBlocked), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`CustomProfile:` + fmt.Sprintf("%v", this.CustomProfile) + `,`,
		`IntegrationToken:` + strings.Replace(fmt.Sprintf("%v", this.IntegrationToken), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "UserStatus", "UserStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BotCommand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BotCommand{`,
		`SlashCommand:` + fmt.Sprintf("%v", this.SlashCommand) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`LocKey:` + strings.Replace(fmt.Sprintf("%v", this.LocKey), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditUserLocalName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditUserLocalName{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`AccessHash:` + fmt.Sprintf("%v", this.AccessHash) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserAvatarChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserAvatarChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Avatar:` + strings.Replace(fmt.Sprintf("%v", this.Avatar), "Avatar", "Avatar", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserNameChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserNameChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserLocalNameChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserLocalNameChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`LocalName:` + strings.Replace(fmt.Sprintf("%v", this.LocalName), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserContactsChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserContactsChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`ContactRecords:` + strings.Replace(fmt.Sprintf("%v", this.ContactRecords), "ContactRecord", "ContactRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserNickChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserNickChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Nickname:` + strings.Replace(fmt.Sprintf("%v", this.Nickname), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserAboutChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserAboutChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserPreferredLanguagesChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserPreferredLanguagesChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserTimeZoneChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserTimeZoneChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`TimeZone:` + strings.Replace(fmt.Sprintf("%v", this.TimeZone), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserBotCommandsChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserBotCommandsChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Commands:` + strings.Replace(fmt.Sprintf("%v", this.Commands), "BotCommand", "BotCommand", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserSexChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserSexChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserCustomProfileChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserCustomProfileChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`CustomProfile:` + fmt.Sprintf("%v", this.CustomProfile) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserStatusChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserStatusChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "UserStatus", "UserStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserExtChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserExtChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Ext:` + strings.Replace(fmt.Sprintf("%v", this.Ext), "RecursiveMapValue", "RecursiveMapValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserFullExtChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserFullExtChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Ext:` + strings.Replace(fmt.Sprintf("%v", this.Ext), "RecursiveMapValue", "RecursiveMapValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadFullUsers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadFullUsers{`,
		`UserPeers:` + strings.Replace(fmt.Sprintf("%v", this.UserPeers), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadFullUsers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseLoadFullUsers{`,
		`FullUsers:` + strings.Replace(fmt.Sprintf("%v", this.FullUsers), "FullUser", "FullUser", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUsers(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ContactRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ContactType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StringValue == nil {
				m.StringValue = &google_protobuf.StringValue{}
			}
			if err := m.StringValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LongValue == nil {
				m.LongValue = &google_protobuf.Int64Value{}
			}
			if err := m.LongValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Title == nil {
				m.Title = &google_protobuf.StringValue{}
			}
			if err := m.Title.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtitle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subtitle == nil {
				m.Subtitle = &google_protobuf.StringValue{}
			}
			if err := m.Subtitle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TypeSpec == nil {
				m.TypeSpec = &google_protobuf.StringValue{}
			}
			if err := m.TypeSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (UserStatusType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &google_protobuf.StringValue{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalName == nil {
				m.LocalName = &google_protobuf.StringValue{}
			}
			if err := m.LocalName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (Sex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsBot == nil {
				m.IsBot = &google_protobuf.BoolValue{}
			}
			if err := m.IsBot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nick == nil {
				m.Nick = &google_protobuf.StringValue{}
			}
			if err := m.Nick.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FullUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FullUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FullUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactInfo = append(m.ContactInfo, &ContactRecord{})
			if err := m.ContactInfo[len(m.ContactInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &google_protobuf.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeZone == nil {
				m.TimeZone = &google_protobuf.StringValue{}
			}
			if err := m.TimeZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotCommands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotCommands = append(m.BotCommands, &BotCommand{})
			if err := m.BotCommands[len(m.BotCommands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBlocked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsBlocked == nil {
				m.IsBlocked = &google_protobuf.BoolValue{}
			}
			if err := m.IsBlocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomProfile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomProfile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegrationToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IntegrationToken == nil {
				m.IntegrationToken = &google_protobuf.StringValue{}
			}
			if err := m.IntegrationToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &UserStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashCommand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashCommand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocKey == nil {
				m.LocKey = &google_protobuf.StringValue{}
			}
			if err := m.LocKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditUserLocalName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditUserLocalName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditUserLocalName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserAvatarChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserAvatarChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserAvatarChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserNameChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserNameChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserNameChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserLocalNameChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserLocalNameChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserLocalNameChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalName == nil {
				m.LocalName = &google_protobuf.StringValue{}
			}
			if err := m.LocalName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserContactsChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserContactsChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserContactsChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactRecords = append(m.ContactRecords, &ContactRecord{})
			if err := m.ContactRecords[len(m.ContactRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserNickChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserNickChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserNickChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nickname == nil {
				m.Nickname = &google_protobuf.StringValue{}
			}
			if err := m.Nickname.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserAboutChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserAboutChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserAboutChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &google_protobuf.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserPreferredLanguagesChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserPreferredLanguagesChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserPreferredLanguagesChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserTimeZoneChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserTimeZoneChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserTimeZoneChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeZone == nil {
				m.TimeZone = &google_protobuf.StringValue{}
			}
			if err := m.TimeZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserBotCommandsChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserBotCommandsChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserBotCommandsChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commands = append(m.Commands, &BotCommand{})
			if err := m.Commands[len(m.Commands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserSexChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserSexChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserSexChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (Sex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserCustomProfileChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserCustomProfileChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserCustomProfileChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomProfile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomProfile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserStatusChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserStatusChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserStatusChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &UserStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserExtChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserExtChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserExtChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ext == nil {
				m.Ext = &RecursiveMapValue{}
			}
			if err := m.Ext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserFullExtChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserFullExtChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserFullExtChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ext == nil {
				m.Ext = &RecursiveMapValue{}
			}
			if err := m.Ext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadFullUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadFullUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadFullUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadFullUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadFullUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadFullUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullUsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullUsers = append(m.FullUsers, &FullUser{})
			if err := m.FullUsers[len(m.FullUsers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUsers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUsers
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUsers
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUsers(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUsers = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUsers   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("users.proto", fileDescriptorUsers) }

var fileDescriptorUsers = []byte{
	// 1560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x57, 0xcd, 0x6f, 0xdb, 0xc8,
	0x15, 0x37, 0x29, 0x59, 0x91, 0x9e, 0x6c, 0x47, 0x1e, 0x7f, 0x84, 0x51, 0x1c, 0xc5, 0x65, 0x11,
	0xd4, 0x70, 0x50, 0x29, 0x75, 0xd3, 0x00, 0x31, 0xd0, 0x3a, 0x92, 0xad, 0x38, 0x42, 0x6c, 0xd9,
	0x90, 0xe4, 0xa4, 0xc9, 0x85, 0xa0, 0xc8, 0x91, 0x4c, 0x98, 0xe2, 0x30, 0x1c, 0xd2, 0x1f, 0x2d,
	0x50, 0x34, 0x3d, 0x14, 0x45, 0x7a, 0x29, 0xd0, 0x7b, 0xcf, 0x41, 0xff, 0x80, 0xf6, 0x5f, 0xd8,
	0x63, 0x80, 0xbd, 0xec, 0x71, 0xa3, 0xdd, 0xc3, 0x22, 0xa7, 0xdc, 0xf6, 0xb0, 0x97, 0xc5, 0x90,
	0xa2, 0x48, 0x51, 0x36, 0x42, 0x27, 0x8b, 0x3d, 0x09, 0x7a, 0x5f, 0xbf, 0x37, 0xef, 0xbd, 0x79,
	0xbf, 0x21, 0x64, 0x1d, 0x8a, 0x2d, 0x5a, 0x34, 0x2d, 0x62, 0x13, 0x94, 0x52, 0x35, 0x59, 0x27,
	0xdd, 0x7c, 0xa1, 0x4b, 0x48, 0x57, 0xc7, 0x25, 0x57, 0xda, 0x76, 0x3a, 0xa5, 0x13, 0x4b, 0x36,
	0xcd, 0xa1, 0x5d, 0x7e, 0x69, 0xa0, 0x97, 0x4d, 0xad, 0x24, 0x1b, 0x06, 0xb1, 0x65, 0x5b, 0x23,
	0x86, 0xaf, 0x9d, 0x55, 0x71, 0x47, 0x33, 0xb4, 0xb0, 0x68, 0xae, 0xa7, 0x51, 0x05, 0xeb, 0xba,
	0x6c, 0x60, 0xe2, 0xf8, 0xc2, 0xac, 0x89, 0x83, 0x90, 0x0b, 0x3d, 0xac, 0x6a, 0xb2, 0x24, 0x1b,
	0xaa, 0xd4, 0xd1, 0x74, 0x3c, 0x14, 0x53, 0x45, 0xd6, 0x65, 0xb3, 0x5d, 0x1a, 0xfc, 0x7a, 0x62,
	0xf1, 0x7f, 0x09, 0x98, 0xde, 0x24, 0x86, 0x2d, 0x2b, 0x76, 0x03, 0x2b, 0xc4, 0x52, 0xd1, 0x7d,
	0x48, 0xda, 0x67, 0x26, 0x16, 0xb8, 0x65, 0x6e, 0x65, 0x66, 0x6d, 0xae, 0xe8, 0x9d, 0xa4, 0x38,
	0x30, 0x6a, 0x9d, 0x99, 0xb8, 0x32, 0xfd, 0xfa, 0xfd, 0xdd, 0x0c, 0x5c, 0x39, 0xd6, 0xa8, 0xd6,
	0xd6, 0x71, 0xc3, 0xb5, 0x47, 0x75, 0x98, 0xa2, 0xb6, 0xa5, 0x19, 0x5d, 0xe9, 0x58, 0xd6, 0x1d,
	0x2c, 0xf0, 0xcb, 0xdc, 0x4a, 0x76, 0x6d, 0xa9, 0xe8, 0x9d, 0xb0, 0xe8, 0x57, 0xa0, 0xd8, 0x74,
	0x8d, 0x9e, 0x32, 0x9b, 0x68, 0xa0, 0x2c, 0x0d, 0x74, 0xa8, 0x06, 0xa0, 0x93, 0x61, 0xb4, 0x84,
	0x1b, 0xed, 0xc6, 0x58, 0xb4, 0x9a, 0x61, 0xdf, 0xbf, 0x77, 0x6e, 0xb0, 0x0c, 0xf3, 0xf6, 0x42,
	0x95, 0x61, 0xd2, 0xd6, 0x6c, 0x1d, 0x0b, 0xc9, 0xcb, 0xe7, 0xe4, 0x79, 0xa2, 0x47, 0x90, 0xa6,
	0x4e, 0xdb, 0x8b, 0x32, 0x19, 0x23, 0xca, 0xd4, 0xeb, 0xf7, 0x77, 0xd3, 0x90, 0x3a, 0xd4, 0x54,
	0x15, 0x1b, 0x8d, 0xa1, 0x2f, 0xda, 0x86, 0x0c, 0xab, 0x96, 0x44, 0x4d, 0xac, 0x08, 0xa9, 0xcb,
	0x07, 0x62, 0xce, 0x4d, 0x13, 0x2b, 0xe2, 0x3f, 0x38, 0x80, 0x03, 0x8a, 0xad, 0xa6, 0x2d, 0xdb,
	0x0e, 0x45, 0x0f, 0x46, 0xba, 0xb6, 0xe8, 0x77, 0x2d, 0xb0, 0xb8, 0xb8, 0x71, 0x1b, 0x90, 0xb4,
	0xf1, 0xa9, 0xfd, 0x29, 0x0d, 0x73, 0x1d, 0xc5, 0x37, 0x09, 0x48, 0x32, 0x20, 0x74, 0x13, 0x78,
	0x4d, 0x75, 0x53, 0x98, 0x8c, 0x5a, 0xf2, 0x9a, 0x8a, 0x7e, 0x0d, 0x59, 0x59, 0x51, 0x30, 0xa5,
	0xd2, 0xa1, 0x4c, 0x0f, 0x5d, 0xbc, 0x84, 0x7f, 0x3e, 0x55, 0x36, 0xba, 0xd8, 0x6a, 0x80, 0x67,
	0xf0, 0x58, 0xa6, 0x87, 0x68, 0x19, 0x92, 0x86, 0xdc, 0xf3, 0x5a, 0x9f, 0x89, 0xd4, 0xc1, 0xd5,
	0x78, 0x23, 0xa2, 0xc8, 0xba, 0xe4, 0xda, 0x25, 0x2f, 0x5d, 0xcd, 0x8c, 0xeb, 0x5d, 0x67, 0xa1,
	0xee, 0x40, 0x82, 0xe2, 0x53, 0xb7, 0xb5, 0x33, 0x6b, 0x59, 0xbf, 0x7c, 0x4d, 0x7c, 0x1a, 0x71,
	0x61, 0x56, 0xe8, 0x77, 0x90, 0x92, 0x8f, 0x65, 0x5b, 0xb6, 0x84, 0xb4, 0x8b, 0x39, 0xe3, 0xdb,
	0x97, 0x5d, 0xa9, 0x7f, 0x76, 0x85, 0xf4, 0x4c, 0x76, 0xaf, 0x06, 0xc6, 0xe8, 0x21, 0xa4, 0x34,
	0x2a, 0xb5, 0x89, 0x2d, 0x64, 0x5d, 0xb7, 0xfc, 0x58, 0xaa, 0x15, 0x42, 0xf4, 0xf3, 0xa7, 0x50,
	0xa3, 0x15, 0x62, 0xb3, 0x56, 0x19, 0x9a, 0x72, 0x24, 0x4c, 0x7f, 0x42, 0xab, 0x98, 0xa3, 0xf8,
	0x43, 0x12, 0xd2, 0x8f, 0x1c, 0x5d, 0x8f, 0xd3, 0xae, 0x6d, 0x98, 0x52, 0xbc, 0x4b, 0x2f, 0x69,
	0x46, 0x87, 0x08, 0xfc, 0x72, 0x62, 0x25, 0xbb, 0xb6, 0x10, 0x59, 0x08, 0xde, 0xd6, 0x88, 0x1e,
	0x39, 0x3b, 0xf0, 0xac, 0x19, 0x1d, 0x82, 0x1e, 0xc2, 0xa4, 0xdc, 0x26, 0x8e, 0x3d, 0xb8, 0xc4,
	0x97, 0xe9, 0x90, 0xe7, 0x88, 0xfe, 0x00, 0x73, 0xa6, 0x85, 0x3b, 0xd8, 0xb2, 0xb0, 0x2a, 0xe9,
	0xb2, 0xd1, 0x75, 0xe4, 0x2e, 0xa6, 0x42, 0x72, 0x39, 0xb1, 0x92, 0x89, 0xa6, 0x8e, 0x86, 0x96,
	0x3b, 0xbe, 0x21, 0x7a, 0x0c, 0x19, 0x5b, 0xeb, 0x61, 0xe9, 0x4f, 0xc4, 0x88, 0x77, 0x7d, 0x23,
	0x31, 0xd3, 0xcc, 0xfb, 0x05, 0x31, 0x30, 0xda, 0x82, 0xa9, 0x36, 0xb1, 0x25, 0x85, 0xf4, 0x7a,
	0xb2, 0xa1, 0x52, 0x21, 0xe5, 0x16, 0x05, 0xf9, 0x45, 0xa9, 0x10, 0x7b, 0xd3, 0x53, 0x8d, 0xed,
	0xb6, 0xf6, 0x50, 0xc5, 0xf2, 0x01, 0x36, 0x09, 0x3a, 0x51, 0x8e, 0xb0, 0x3a, 0x18, 0xa2, 0x4b,
	0x4c, 0x43, 0x46, 0xa3, 0x15, 0xcf, 0x17, 0xdd, 0x86, 0x19, 0xc5, 0xa1, 0x36, 0xe9, 0x49, 0xa6,
	0x45, 0xd8, 0xbe, 0x17, 0x32, 0xec, 0xba, 0x34, 0xa6, 0x3d, 0xe9, 0xbe, 0x27, 0x44, 0x35, 0x98,
	0xd5, 0x0c, 0x1b, 0x77, 0x2d, 0x97, 0x5f, 0x24, 0x9b, 0x1c, 0x61, 0x43, 0x80, 0x8f, 0x17, 0xa2,
	0x91, 0x0b, 0xb9, 0xb5, 0x98, 0x17, 0x7a, 0x00, 0x29, 0xea, 0x6e, 0x94, 0xc1, 0x14, 0xa3, 0xf1,
	0x5d, 0x13, 0xcd, 0x77, 0xe0, 0x20, 0xfe, 0x9f, 0x03, 0x08, 0x2a, 0x84, 0xd6, 0x60, 0x9a, 0xea,
	0x32, 0x3d, 0xf4, 0xab, 0xe9, 0x8e, 0xe2, 0x58, 0x3f, 0xa7, 0x5c, 0x1b, 0xdf, 0xa7, 0x04, 0x59,
	0x15, 0x53, 0xc5, 0xd2, 0x4c, 0x96, 0x91, 0xbb, 0x43, 0xc6, 0x3c, 0xc2, 0x16, 0x68, 0x0b, 0xae,
	0xe8, 0x44, 0x91, 0x8e, 0xf0, 0x59, 0xac, 0xf1, 0x8b, 0x66, 0xae, 0x13, 0xe5, 0x09, 0x3e, 0x13,
	0xff, 0xcb, 0x81, 0xd0, 0xc0, 0x2f, 0x1d, 0x4c, 0xed, 0xaa, 0xaa, 0xd9, 0xec, 0xa8, 0x3b, 0xc3,
	0xdd, 0x71, 0x0b, 0x12, 0xce, 0x45, 0x17, 0x89, 0x69, 0x7e, 0xf2, 0xc5, 0xb7, 0xbe, 0xd4, 0xdf,
	0xb8, 0x0e, 0xd7, 0xb4, 0x5e, 0x51, 0xd5, 0xbb, 0xc5, 0xae, 0x65, 0x2a, 0xc5, 0x6d, 0xcb, 0x54,
	0x06, 0x09, 0x8a, 0x2f, 0xe1, 0xda, 0x81, 0xa9, 0xca, 0x36, 0x66, 0x69, 0x7a, 0x2b, 0x69, 0xf3,
	0x90, 0xc1, 0xa8, 0x1f, 0x4f, 0x35, 0x58, 0x6d, 0xfc, 0x25, 0x56, 0x9b, 0xf8, 0x02, 0x16, 0x02,
	0x48, 0x56, 0x94, 0xd8, 0x80, 0xfe, 0x61, 0xf9, 0x8b, 0x0e, 0xcb, 0x98, 0x2e, 0x1f, 0x04, 0x1f,
	0x96, 0x3d, 0x36, 0xc2, 0x28, 0x4b, 0xf0, 0x9f, 0xc1, 0x12, 0xe2, 0x3f, 0x39, 0xb8, 0x1e, 0xa4,
	0x32, 0xd8, 0x80, 0x34, 0x76, 0x26, 0xbb, 0x70, 0xd5, 0xdf, 0xa8, 0x96, 0xbb, 0x36, 0xbd, 0x15,
	0x16, 0x77, 0xa9, 0xce, 0x28, 0x61, 0x2d, 0x15, 0x5f, 0x71, 0x23, 0x55, 0xd7, 0x94, 0xa3, 0xd8,
	0x99, 0x6c, 0x43, 0x9a, 0xf1, 0x41, 0xec, 0x8a, 0x44, 0xf7, 0xa1, 0xef, 0x2c, 0xfe, 0x19, 0x16,
	0x43, 0xb3, 0xc6, 0x96, 0x75, 0xec, 0x1c, 0x86, 0xb4, 0xc0, 0x7f, 0x22, 0x2d, 0x88, 0x7f, 0xe7,
	0xe0, 0x97, 0x01, 0xfa, 0xfe, 0xd8, 0xde, 0x8f, 0x9d, 0xca, 0x05, 0xfc, 0xc2, 0xc7, 0xe4, 0x17,
	0x96, 0x48, 0x68, 0x2e, 0x5a, 0x03, 0xb2, 0x88, 0x0d, 0x3f, 0x42, 0x4f, 0xfc, 0x67, 0xd0, 0x93,
	0xf8, 0x17, 0x58, 0x0a, 0xf2, 0x08, 0x56, 0x6d, 0xfc, 0x4a, 0xfc, 0x1e, 0xd2, 0x43, 0x6e, 0xe3,
	0xe3, 0x72, 0xdb, 0xd0, 0x45, 0x54, 0x61, 0x3e, 0xc0, 0x6f, 0xe2, 0xd3, 0xd8, 0xb8, 0x83, 0xf7,
	0x17, 0x1f, 0xe7, 0xfd, 0x25, 0x9e, 0x40, 0x21, 0x74, 0x0b, 0xc3, 0x44, 0x17, 0x1b, 0xef, 0xde,
	0x18, 0x6f, 0x9e, 0x4b, 0x25, 0xa3, 0x34, 0x2a, 0x3a, 0xe1, 0xcd, 0xea, 0x71, 0x5d, 0x6c, 0xc4,
	0x80, 0x37, 0xf9, 0xcb, 0xf2, 0x26, 0x0d, 0x57, 0xb5, 0x7a, 0x1a, 0xff, 0x8a, 0xad, 0x43, 0x22,
	0x78, 0xd9, 0x5f, 0xf7, 0x01, 0x1b, 0x58, 0x71, 0x2c, 0xaa, 0x1d, 0xe3, 0x5d, 0xd9, 0x3c, 0x77,
	0x9e, 0x98, 0x93, 0x78, 0x02, 0x42, 0x00, 0xca, 0xde, 0x8c, 0x3f, 0x1f, 0xf0, 0xfc, 0x80, 0xc9,
	0x76, 0x88, 0xac, 0xfa, 0xaf, 0x55, 0x8a, 0xca, 0x00, 0xec, 0x13, 0x5b, 0x72, 0x3f, 0x76, 0x05,
	0xce, 0x1d, 0xce, 0xb9, 0x70, 0x11, 0xf7, 0x1c, 0x7b, 0x1f, 0xe3, 0x31, 0x8e, 0xca, 0x30, 0x2f,
	0xa6, 0xa0, 0x1f, 0xe1, 0xcd, 0x2e, 0x2c, 0x34, 0x30, 0x35, 0x89, 0x41, 0xf1, 0x28, 0x72, 0x09,
	0xa0, 0xe3, 0xe8, 0xba, 0xe4, 0x7e, 0xe1, 0x0f, 0x90, 0x73, 0x3e, 0xb2, 0x6f, 0xd6, 0xc8, 0x74,
	0x7c, 0x87, 0xf5, 0x9b, 0xfd, 0x8d, 0x3c, 0x08, 0xe3, 0x38, 0x5e, 0xf0, 0xd5, 0x7b, 0x90, 0x68,
	0xe2, 0x53, 0x74, 0x15, 0xb2, 0xcd, 0xea, 0x1f, 0xa5, 0x83, 0xfa, 0x93, 0xfa, 0xde, 0xb3, 0x7a,
	0x6e, 0x02, 0x4d, 0x41, 0x9a, 0x09, 0x76, 0xcb, 0x3b, 0xd5, 0x1c, 0x8f, 0x66, 0x00, 0xd8, 0xbf,
	0x47, 0x55, 0xf7, 0x7f, 0x62, 0xf5, 0x15, 0x07, 0xd9, 0xd0, 0x57, 0x38, 0xba, 0x06, 0x73, 0x9b,
	0x7b, 0xf5, 0x56, 0x79, 0xb3, 0xd5, 0x7a, 0xbe, 0x5f, 0x0d, 0x85, 0x59, 0x80, 0xd9, 0xb0, 0x62,
	0xff, 0xf1, 0x5e, 0xbd, 0x9a, 0xe3, 0xa2, 0xe2, 0xea, 0x6e, 0xb9, 0xb6, 0x93, 0xe3, 0xd1, 0x1c,
	0x5c, 0x0d, 0x8b, 0x9f, 0x55, 0x2b, 0xb9, 0x04, 0x5a, 0x04, 0x14, 0x16, 0x36, 0xf7, 0x36, 0x6b,
	0xe5, 0x9d, 0x5c, 0x72, 0xf5, 0x3f, 0x1c, 0xcc, 0x8c, 0x7e, 0x53, 0xa2, 0x3c, 0x2c, 0x1e, 0x34,
	0xab, 0x8d, 0x66, 0xab, 0xdc, 0x3a, 0x68, 0x46, 0x32, 0x11, 0x60, 0x7e, 0x4c, 0xd7, 0xac, 0xb6,
	0x72, 0x1c, 0x4b, 0x3e, 0xa2, 0x29, 0x3f, 0x2b, 0x3f, 0xcf, 0xf1, 0xe8, 0x16, 0xdc, 0x88, 0x28,
	0xb6, 0xf6, 0xea, 0x7b, 0xad, 0xad, 0x5a, 0xb3, 0x75, 0xd0, 0x60, 0xa9, 0x2d, 0x81, 0x10, 0x31,
	0xa8, 0xd5, 0x9f, 0xd6, 0x9a, 0xb5, 0xca, 0x4e, 0x35, 0x97, 0x5c, 0xfb, 0x9e, 0x83, 0x49, 0xaf,
	0x69, 0x27, 0x30, 0x3b, 0xfe, 0x54, 0x5b, 0x0e, 0x46, 0xf1, 0xfc, 0xc7, 0x5c, 0x7e, 0x2e, 0xb0,
	0xf0, 0xba, 0xd5, 0xc4, 0x2f, 0xc5, 0x3b, 0x7f, 0xfb, 0xf2, 0xdb, 0x7f, 0xf3, 0xb7, 0xc5, 0xe5,
	0xd2, 0xf1, 0x6f, 0x4a, 0xac, 0x9f, 0x25, 0x17, 0xa3, 0x34, 0xe6, 0xbe, 0xce, 0xad, 0x22, 0x07,
	0xa6, 0x47, 0xc7, 0x67, 0x29, 0x02, 0x3a, 0xa2, 0xcd, 0xdf, 0x8c, 0x02, 0x8e, 0xa8, 0xc5, 0x5f,
	0xb9, 0xd0, 0xbf, 0x10, 0x97, 0x22, 0xd0, 0x23, 0x56, 0xeb, 0xdc, 0x6a, 0xa5, 0xda, 0xdf, 0x58,
	0x84, 0xf9, 0xf0, 0xcc, 0x51, 0x6c, 0x1d, 0x6b, 0x0a, 0xa6, 0x6f, 0xdf, 0x15, 0x26, 0xbe, 0x7a,
	0x57, 0x98, 0xf8, 0xf0, 0xae, 0xc0, 0xfd, 0xb5, 0x5f, 0xe0, 0xde, 0xf4, 0x0b, 0xdc, 0x17, 0xfd,
	0x02, 0xf7, 0xb6, 0x5f, 0xe0, 0xbe, 0xee, 0x17, 0xb8, 0xef, 0xfa, 0x85, 0x89, 0x0f, 0xfd, 0x02,
	0xf7, 0xaf, 0x6f, 0x0a, 0x13, 0xed, 0x94, 0x4b, 0x38, 0xbf, 0xfd, 0x31, 0x00, 0x00, 0xff, 0xff,
	0x72, 0x4e, 0x23, 0x01, 0xcf, 0x12, 0x00, 0x00,
}
