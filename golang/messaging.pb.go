// Code generated by protoc-gen-gogo.
// source: messaging.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type InteractiveMediaStyle int32

const (
	INTERACTIVEMEDIASTYLE_UNKNOWN InteractiveMediaStyle = 0
	INTERACTIVEMEDIASTYLE_DEFAULT InteractiveMediaStyle = 1
	INTERACTIVEMEDIASTYLE_PRIMARY InteractiveMediaStyle = 2
	INTERACTIVEMEDIASTYLE_DANGER  InteractiveMediaStyle = 3
)

var InteractiveMediaStyle_name = map[int32]string{
	0: "INTERACTIVEMEDIASTYLE_UNKNOWN",
	1: "INTERACTIVEMEDIASTYLE_DEFAULT",
	2: "INTERACTIVEMEDIASTYLE_PRIMARY",
	3: "INTERACTIVEMEDIASTYLE_DANGER",
}
var InteractiveMediaStyle_value = map[string]int32{
	"INTERACTIVEMEDIASTYLE_UNKNOWN": 0,
	"INTERACTIVEMEDIASTYLE_DEFAULT": 1,
	"INTERACTIVEMEDIASTYLE_PRIMARY": 2,
	"INTERACTIVEMEDIASTYLE_DANGER":  3,
}

func (InteractiveMediaStyle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{0}
}

type MessageState int32

const (
	MESSAGESTATE_UNKNOWN  MessageState = 0
	MESSAGESTATE_SENT     MessageState = 1
	MESSAGESTATE_RECEIVED MessageState = 2
	MESSAGESTATE_READ     MessageState = 3
)

var MessageState_name = map[int32]string{
	0: "MESSAGESTATE_UNKNOWN",
	1: "MESSAGESTATE_SENT",
	2: "MESSAGESTATE_RECEIVED",
	3: "MESSAGESTATE_READ",
}
var MessageState_value = map[string]int32{
	"MESSAGESTATE_UNKNOWN":  0,
	"MESSAGESTATE_SENT":     1,
	"MESSAGESTATE_RECEIVED": 2,
	"MESSAGESTATE_READ":     3,
}

func (MessageState) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{1} }

type ListLoadMode int32

const (
	LISTLOADMODE_UNKNOWN  ListLoadMode = 0
	LISTLOADMODE_FORWARD  ListLoadMode = 1
	LISTLOADMODE_BACKWARD ListLoadMode = 2
	LISTLOADMODE_BOTH     ListLoadMode = 3
)

var ListLoadMode_name = map[int32]string{
	0: "LISTLOADMODE_UNKNOWN",
	1: "LISTLOADMODE_FORWARD",
	2: "LISTLOADMODE_BACKWARD",
	3: "LISTLOADMODE_BOTH",
}
var ListLoadMode_value = map[string]int32{
	"LISTLOADMODE_UNKNOWN":  0,
	"LISTLOADMODE_FORWARD":  1,
	"LISTLOADMODE_BACKWARD": 2,
	"LISTLOADMODE_BOTH":     3,
}

func (ListLoadMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{2} }

type DialogsFilter int32

const (
	DIALOGSFILTER_UNKNOWN           DialogsFilter = 0
	DIALOGSFILTER_EXCLUDEFAVOURITES DialogsFilter = 1
	DIALOGSFILTER_EXCLUDEARCHIVED   DialogsFilter = 2
)

var DialogsFilter_name = map[int32]string{
	0: "DIALOGSFILTER_UNKNOWN",
	1: "DIALOGSFILTER_EXCLUDEFAVOURITES",
	2: "DIALOGSFILTER_EXCLUDEARCHIVED",
}
var DialogsFilter_value = map[string]int32{
	"DIALOGSFILTER_UNKNOWN":           0,
	"DIALOGSFILTER_EXCLUDEFAVOURITES": 1,
	"DIALOGSFILTER_EXCLUDEARCHIVED":   2,
}

func (DialogsFilter) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{3} }

// Message Attributes
type MessageAttributes struct {
	// / Is mentioned. If set overrides built-in value.
	IsMentioned *google_protobuf.BoolValue `protobuf:"bytes,1,opt,name=is_mentioned,json=isMentioned" json:"is_mentioned,omitempty"`
	// / Is message highlighted. Default is false.
	IsHighlighted *google_protobuf.BoolValue `protobuf:"bytes,2,opt,name=is_highlighted,json=isHighlighted" json:"is_highlighted,omitempty"`
	// / Is notified. If set overrides built-in settings.
	IsNotified *google_protobuf.BoolValue `protobuf:"bytes,3,opt,name=is_notified,json=isNotified" json:"is_notified,omitempty"`
	// / If this message is only for you. Default is false
	IsOnlyForYou *google_protobuf.BoolValue `protobuf:"bytes,4,opt,name=is_only_for_you,json=isOnlyForYou" json:"is_only_for_you,omitempty"`
}

func (m *MessageAttributes) Reset()                    { *m = MessageAttributes{} }
func (*MessageAttributes) ProtoMessage()               {}
func (*MessageAttributes) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{0} }

func (m *MessageAttributes) GetIsMentioned() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsMentioned
	}
	return nil
}

func (m *MessageAttributes) GetIsHighlighted() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsHighlighted
	}
	return nil
}

func (m *MessageAttributes) GetIsNotified() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsNotified
	}
	return nil
}

func (m *MessageAttributes) GetIsOnlyForYou() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsOnlyForYou
	}
	return nil
}

// Quoted Message
// messageId
// publicGroupId
// senderUserId
// messageDate
// quotedMessageContent
type QuotedMessage struct {
	// / Message Id if present
	MessageId int64 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// / Public Group id if present
	PublicGroupId int32 `protobuf:"varint,2,opt,name=public_group_id,json=publicGroupId,proto3" json:"public_group_id,omitempty"`
	SenderUserId  int32 `protobuf:"varint,3,opt,name=sender_user_id,json=senderUserId,proto3" json:"sender_user_id,omitempty"`
	MessageDate   int64 `protobuf:"varint,4,opt,name=message_date,json=messageDate,proto3" json:"message_date,omitempty"`
	// *
	// Optional Quoted Message Content.
	// Can be empty if messageId is present and message is in current peer.
	QuotedMessageContent *MessageContent `protobuf:"bytes,5,opt,name=quoted_message_content,json=quotedMessageContent" json:"quoted_message_content,omitempty"`
}

func (m *QuotedMessage) Reset()                    { *m = QuotedMessage{} }
func (*QuotedMessage) ProtoMessage()               {}
func (*QuotedMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{1} }

func (m *QuotedMessage) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *QuotedMessage) GetPublicGroupId() int32 {
	if m != nil {
		return m.PublicGroupId
	}
	return 0
}

func (m *QuotedMessage) GetSenderUserId() int32 {
	if m != nil {
		return m.SenderUserId
	}
	return 0
}

func (m *QuotedMessage) GetMessageDate() int64 {
	if m != nil {
		return m.MessageDate
	}
	return 0
}

func (m *QuotedMessage) GetQuotedMessageContent() *MessageContent {
	if m != nil {
		return m.QuotedMessageContent
	}
	return nil
}

// Message media
type MessageMedia struct {
	Webpage *WebpageMedia            `protobuf:"bytes,1,opt,name=webpage" json:"webpage,omitempty"`
	Image   *ImageMedia              `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	Audio   *AudioMedia              `protobuf:"bytes,3,opt,name=audio" json:"audio,omitempty"`
	Actions []*InteractiveMediaGroup `protobuf:"bytes,6,rep,name=actions" json:"actions,omitempty"`
}

func (m *MessageMedia) Reset()                    { *m = MessageMedia{} }
func (*MessageMedia) ProtoMessage()               {}
func (*MessageMedia) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{2} }

func (m *MessageMedia) GetWebpage() *WebpageMedia {
	if m != nil {
		return m.Webpage
	}
	return nil
}

func (m *MessageMedia) GetImage() *ImageMedia {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *MessageMedia) GetAudio() *AudioMedia {
	if m != nil {
		return m.Audio
	}
	return nil
}

func (m *MessageMedia) GetActions() []*InteractiveMediaGroup {
	if m != nil {
		return m.Actions
	}
	return nil
}

// Webpage media
type WebpageMedia struct {
	Url         *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Title       *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Description *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Image       *ImageLocation               `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
}

func (m *WebpageMedia) Reset()                    { *m = WebpageMedia{} }
func (*WebpageMedia) ProtoMessage()               {}
func (*WebpageMedia) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{3} }

func (m *WebpageMedia) GetUrl() *google_protobuf.StringValue {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *WebpageMedia) GetTitle() *google_protobuf.StringValue {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *WebpageMedia) GetDescription() *google_protobuf.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *WebpageMedia) GetImage() *ImageLocation {
	if m != nil {
		return m.Image
	}
	return nil
}

// Image media
// image image
type ImageMedia struct {
	Image *ImageLocation `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
}

func (m *ImageMedia) Reset()                    { *m = ImageMedia{} }
func (*ImageMedia) ProtoMessage()               {}
func (*ImageMedia) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{4} }

func (m *ImageMedia) GetImage() *ImageLocation {
	if m != nil {
		return m.Image
	}
	return nil
}

// Audio media
type AudioMedia struct {
	Audio *AudioLocation `protobuf:"bytes,1,opt,name=audio" json:"audio,omitempty"`
}

func (m *AudioMedia) Reset()                    { *m = AudioMedia{} }
func (*AudioMedia) ProtoMessage()               {}
func (*AudioMedia) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{5} }

func (m *AudioMedia) GetAudio() *AudioLocation {
	if m != nil {
		return m.Audio
	}
	return nil
}

// / Some interactive element inside a message
type InteractiveMediaWidget struct {
	// Types that are valid to be assigned to Body:
	//	*InteractiveMediaWidget_InteractiveMediaButton
	//	*InteractiveMediaWidget_InteractiveMediaSelect
	Body isInteractiveMediaWidget_Body `protobuf_oneof:"body"`
}

func (m *InteractiveMediaWidget) Reset()                    { *m = InteractiveMediaWidget{} }
func (*InteractiveMediaWidget) ProtoMessage()               {}
func (*InteractiveMediaWidget) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{6} }

type isInteractiveMediaWidget_Body interface {
	isInteractiveMediaWidget_Body()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type InteractiveMediaWidget_InteractiveMediaButton struct {
	InteractiveMediaButton *InteractiveMediaButton `protobuf:"bytes,1,opt,name=interactiveMediaButton,oneof"`
}
type InteractiveMediaWidget_InteractiveMediaSelect struct {
	InteractiveMediaSelect *InteractiveMediaSelect `protobuf:"bytes,2,opt,name=interactiveMediaSelect,oneof"`
}

func (*InteractiveMediaWidget_InteractiveMediaButton) isInteractiveMediaWidget_Body() {}
func (*InteractiveMediaWidget_InteractiveMediaSelect) isInteractiveMediaWidget_Body() {}

func (m *InteractiveMediaWidget) GetBody() isInteractiveMediaWidget_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *InteractiveMediaWidget) GetInteractiveMediaButton() *InteractiveMediaButton {
	if x, ok := m.GetBody().(*InteractiveMediaWidget_InteractiveMediaButton); ok {
		return x.InteractiveMediaButton
	}
	return nil
}

func (m *InteractiveMediaWidget) GetInteractiveMediaSelect() *InteractiveMediaSelect {
	if x, ok := m.GetBody().(*InteractiveMediaWidget_InteractiveMediaSelect); ok {
		return x.InteractiveMediaSelect
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InteractiveMediaWidget) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InteractiveMediaWidget_OneofMarshaler, _InteractiveMediaWidget_OneofUnmarshaler, _InteractiveMediaWidget_OneofSizer, []interface{}{
		(*InteractiveMediaWidget_InteractiveMediaButton)(nil),
		(*InteractiveMediaWidget_InteractiveMediaSelect)(nil),
	}
}

func _InteractiveMediaWidget_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InteractiveMediaWidget)
	// body
	switch x := m.Body.(type) {
	case *InteractiveMediaWidget_InteractiveMediaButton:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InteractiveMediaButton); err != nil {
			return err
		}
	case *InteractiveMediaWidget_InteractiveMediaSelect:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InteractiveMediaSelect); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InteractiveMediaWidget.Body has unexpected type %T", x)
	}
	return nil
}

func _InteractiveMediaWidget_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InteractiveMediaWidget)
	switch tag {
	case 1: // body.interactiveMediaButton
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InteractiveMediaButton)
		err := b.DecodeMessage(msg)
		m.Body = &InteractiveMediaWidget_InteractiveMediaButton{msg}
		return true, err
	case 2: // body.interactiveMediaSelect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InteractiveMediaSelect)
		err := b.DecodeMessage(msg)
		m.Body = &InteractiveMediaWidget_InteractiveMediaSelect{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InteractiveMediaWidget_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InteractiveMediaWidget)
	// body
	switch x := m.Body.(type) {
	case *InteractiveMediaWidget_InteractiveMediaButton:
		s := proto.Size(x.InteractiveMediaButton)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InteractiveMediaWidget_InteractiveMediaSelect:
		s := proto.Size(x.InteractiveMediaSelect)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A 'Button' widget
type InteractiveMediaButton struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// / A user-visible description of this button
	Label *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
}

func (m *InteractiveMediaButton) Reset()                    { *m = InteractiveMediaButton{} }
func (*InteractiveMediaButton) ProtoMessage()               {}
func (*InteractiveMediaButton) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{7} }

func (m *InteractiveMediaButton) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *InteractiveMediaButton) GetLabel() *google_protobuf.StringValue {
	if m != nil {
		return m.Label
	}
	return nil
}

// A select from multiple values widget
type InteractiveMediaSelect struct {
	// / list of values to present to user
	Options []*InteractiveMediaSelectOption `protobuf:"bytes,1,rep,name=options" json:"options,omitempty"`
	// / A user-visible descripton of this select
	Label *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// / A value that will be selected by default
	DefaultValue *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
}

func (m *InteractiveMediaSelect) Reset()                    { *m = InteractiveMediaSelect{} }
func (*InteractiveMediaSelect) ProtoMessage()               {}
func (*InteractiveMediaSelect) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{8} }

func (m *InteractiveMediaSelect) GetOptions() []*InteractiveMediaSelectOption {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *InteractiveMediaSelect) GetLabel() *google_protobuf.StringValue {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *InteractiveMediaSelect) GetDefaultValue() *google_protobuf.StringValue {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

// A row in the select widget
type InteractiveMediaSelectOption struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (m *InteractiveMediaSelectOption) Reset()      { *m = InteractiveMediaSelectOption{} }
func (*InteractiveMediaSelectOption) ProtoMessage() {}
func (*InteractiveMediaSelectOption) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{9}
}

func (m *InteractiveMediaSelectOption) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *InteractiveMediaSelectOption) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

// A text message extension representing an interactive action.
// Can be used to add widgets (such as buttons, selects, etc) to messages.
type InteractiveMedia struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// / a widget to be shown to user
	Widget *InteractiveMediaWidget `protobuf:"bytes,2,opt,name=widget" json:"widget,omitempty"`
	// / a style of the widget, which is interpreted by the client
	Style InteractiveMediaStyle `protobuf:"varint,3,opt,name=style,proto3,enum=dialog.InteractiveMediaStyle" json:"style,omitempty"`
	// *
	// A content of the alert dialog that will be show to user
	// when they perform the media action
	Confirm *InteractiveMediaConfirm `protobuf:"bytes,4,opt,name=confirm" json:"confirm,omitempty"`
}

func (m *InteractiveMedia) Reset()                    { *m = InteractiveMedia{} }
func (*InteractiveMedia) ProtoMessage()               {}
func (*InteractiveMedia) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{10} }

func (m *InteractiveMedia) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InteractiveMedia) GetWidget() *InteractiveMediaWidget {
	if m != nil {
		return m.Widget
	}
	return nil
}

func (m *InteractiveMedia) GetStyle() InteractiveMediaStyle {
	if m != nil {
		return m.Style
	}
	return INTERACTIVEMEDIASTYLE_UNKNOWN
}

func (m *InteractiveMedia) GetConfirm() *InteractiveMediaConfirm {
	if m != nil {
		return m.Confirm
	}
	return nil
}

type InteractiveMediaTranslation struct {
	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *InteractiveMediaTranslation) Reset()      { *m = InteractiveMediaTranslation{} }
func (*InteractiveMediaTranslation) ProtoMessage() {}
func (*InteractiveMediaTranslation) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{11}
}

func (m *InteractiveMediaTranslation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InteractiveMediaTranslation) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type InteractiveMediaTranslationGroup struct {
	// / a translation group language
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	// / a list of translation mesages
	Messages []*InteractiveMediaTranslation `protobuf:"bytes,2,rep,name=messages" json:"messages,omitempty"`
}

func (m *InteractiveMediaTranslationGroup) Reset()      { *m = InteractiveMediaTranslationGroup{} }
func (*InteractiveMediaTranslationGroup) ProtoMessage() {}
func (*InteractiveMediaTranslationGroup) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{12}
}

func (m *InteractiveMediaTranslationGroup) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *InteractiveMediaTranslationGroup) GetMessages() []*InteractiveMediaTranslation {
	if m != nil {
		return m.Messages
	}
	return nil
}

// A group of interactive media actions
type InteractiveMediaGroup struct {
	// / the list of actions
	Actions []*InteractiveMedia `protobuf:"bytes,1,rep,name=actions" json:"actions,omitempty"`
	// / an optional title of the group
	Title *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	// / an optional description of the group
	Description *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// / a media content translations
	Translations []*InteractiveMediaTranslationGroup `protobuf:"bytes,4,rep,name=translations" json:"translations,omitempty"`
}

func (m *InteractiveMediaGroup) Reset()                    { *m = InteractiveMediaGroup{} }
func (*InteractiveMediaGroup) ProtoMessage()               {}
func (*InteractiveMediaGroup) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{13} }

func (m *InteractiveMediaGroup) GetActions() []*InteractiveMedia {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *InteractiveMediaGroup) GetTitle() *google_protobuf.StringValue {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *InteractiveMediaGroup) GetDescription() *google_protobuf.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *InteractiveMediaGroup) GetTranslations() []*InteractiveMediaTranslationGroup {
	if m != nil {
		return m.Translations
	}
	return nil
}

// An alert dialog content to show to user
type InteractiveMediaConfirm struct {
	// / the optional alert dialog prompt
	Text *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	// / the optional alert dialog title
	Title *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	// / the optional confirm button text
	Ok *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=ok" json:"ok,omitempty"`
	// / the optional cancel button text
	Dismiss *google_protobuf.StringValue `protobuf:"bytes,4,opt,name=dismiss" json:"dismiss,omitempty"`
}

func (m *InteractiveMediaConfirm) Reset()      { *m = InteractiveMediaConfirm{} }
func (*InteractiveMediaConfirm) ProtoMessage() {}
func (*InteractiveMediaConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{14}
}

func (m *InteractiveMediaConfirm) GetText() *google_protobuf.StringValue {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *InteractiveMediaConfirm) GetTitle() *google_protobuf.StringValue {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *InteractiveMediaConfirm) GetOk() *google_protobuf.StringValue {
	if m != nil {
		return m.Ok
	}
	return nil
}

func (m *InteractiveMediaConfirm) GetDismiss() *google_protobuf.StringValue {
	if m != nil {
		return m.Dismiss
	}
	return nil
}

// The update which will be received when the action is performed. Duplicated on all clients.
type UpdateInteractiveMediaEvent struct {
	// / Message id of the message that contains interactive media
	Mid *UUIDValue `protobuf:"bytes,1,opt,name=mid" json:"mid,omitempty"`
	// / identifier of the media action
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// / selected value of that action
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// / who interacted with that media
	Uid int32 `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *UpdateInteractiveMediaEvent) Reset()      { *m = UpdateInteractiveMediaEvent{} }
func (*UpdateInteractiveMediaEvent) ProtoMessage() {}
func (*UpdateInteractiveMediaEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{15}
}

func (m *UpdateInteractiveMediaEvent) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateInteractiveMediaEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateInteractiveMediaEvent) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UpdateInteractiveMediaEvent) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// Sends a request to do interactive media message
type RequestDoInteractiveMediaAction struct {
	// / Message id of the enclosed message
	Mid   *UUIDValue `protobuf:"bytes,1,opt,name=mid" json:"mid,omitempty"`
	Id    string     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Value string     `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *RequestDoInteractiveMediaAction) Reset()      { *m = RequestDoInteractiveMediaAction{} }
func (*RequestDoInteractiveMediaAction) ProtoMessage() {}
func (*RequestDoInteractiveMediaAction) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{16}
}

func (m *RequestDoInteractiveMediaAction) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *RequestDoInteractiveMediaAction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RequestDoInteractiveMediaAction) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MessageContent struct {
	// Types that are valid to be assigned to Body:
	//	*MessageContent_TextMessage
	//	*MessageContent_ServiceMessage
	//	*MessageContent_DocumentMessage
	//	*MessageContent_JsonMessage
	//	*MessageContent_UnsupportedMessage
	//	*MessageContent_StickerMessage
	//	*MessageContent_BinaryMessage
	//	*MessageContent_EmptyMessage
	//	*MessageContent_DeletedMessage
	Body isMessageContent_Body `protobuf_oneof:"body"`
}

func (m *MessageContent) Reset()                    { *m = MessageContent{} }
func (*MessageContent) ProtoMessage()               {}
func (*MessageContent) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{17} }

type isMessageContent_Body interface {
	isMessageContent_Body()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type MessageContent_TextMessage struct {
	TextMessage *TextMessage `protobuf:"bytes,1,opt,name=textMessage,oneof"`
}
type MessageContent_ServiceMessage struct {
	ServiceMessage *ServiceMessage `protobuf:"bytes,2,opt,name=serviceMessage,oneof"`
}
type MessageContent_DocumentMessage struct {
	DocumentMessage *DocumentMessage `protobuf:"bytes,3,opt,name=documentMessage,oneof"`
}
type MessageContent_JsonMessage struct {
	JsonMessage *JsonMessage `protobuf:"bytes,4,opt,name=jsonMessage,oneof"`
}
type MessageContent_UnsupportedMessage struct {
	UnsupportedMessage *UnsupportedMessage `protobuf:"bytes,5,opt,name=unsupportedMessage,oneof"`
}
type MessageContent_StickerMessage struct {
	StickerMessage *StickerMessage `protobuf:"bytes,6,opt,name=stickerMessage,oneof"`
}
type MessageContent_BinaryMessage struct {
	BinaryMessage *BinaryMessage `protobuf:"bytes,7,opt,name=binaryMessage,oneof"`
}
type MessageContent_EmptyMessage struct {
	EmptyMessage *EmptyMessage `protobuf:"bytes,8,opt,name=emptyMessage,oneof"`
}
type MessageContent_DeletedMessage struct {
	DeletedMessage *DeletedMessage `protobuf:"bytes,9,opt,name=deletedMessage,oneof"`
}

func (*MessageContent_TextMessage) isMessageContent_Body()        {}
func (*MessageContent_ServiceMessage) isMessageContent_Body()     {}
func (*MessageContent_DocumentMessage) isMessageContent_Body()    {}
func (*MessageContent_JsonMessage) isMessageContent_Body()        {}
func (*MessageContent_UnsupportedMessage) isMessageContent_Body() {}
func (*MessageContent_StickerMessage) isMessageContent_Body()     {}
func (*MessageContent_BinaryMessage) isMessageContent_Body()      {}
func (*MessageContent_EmptyMessage) isMessageContent_Body()       {}
func (*MessageContent_DeletedMessage) isMessageContent_Body()     {}

func (m *MessageContent) GetBody() isMessageContent_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *MessageContent) GetTextMessage() *TextMessage {
	if x, ok := m.GetBody().(*MessageContent_TextMessage); ok {
		return x.TextMessage
	}
	return nil
}

func (m *MessageContent) GetServiceMessage() *ServiceMessage {
	if x, ok := m.GetBody().(*MessageContent_ServiceMessage); ok {
		return x.ServiceMessage
	}
	return nil
}

func (m *MessageContent) GetDocumentMessage() *DocumentMessage {
	if x, ok := m.GetBody().(*MessageContent_DocumentMessage); ok {
		return x.DocumentMessage
	}
	return nil
}

func (m *MessageContent) GetJsonMessage() *JsonMessage {
	if x, ok := m.GetBody().(*MessageContent_JsonMessage); ok {
		return x.JsonMessage
	}
	return nil
}

func (m *MessageContent) GetUnsupportedMessage() *UnsupportedMessage {
	if x, ok := m.GetBody().(*MessageContent_UnsupportedMessage); ok {
		return x.UnsupportedMessage
	}
	return nil
}

func (m *MessageContent) GetStickerMessage() *StickerMessage {
	if x, ok := m.GetBody().(*MessageContent_StickerMessage); ok {
		return x.StickerMessage
	}
	return nil
}

func (m *MessageContent) GetBinaryMessage() *BinaryMessage {
	if x, ok := m.GetBody().(*MessageContent_BinaryMessage); ok {
		return x.BinaryMessage
	}
	return nil
}

func (m *MessageContent) GetEmptyMessage() *EmptyMessage {
	if x, ok := m.GetBody().(*MessageContent_EmptyMessage); ok {
		return x.EmptyMessage
	}
	return nil
}

func (m *MessageContent) GetDeletedMessage() *DeletedMessage {
	if x, ok := m.GetBody().(*MessageContent_DeletedMessage); ok {
		return x.DeletedMessage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MessageContent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MessageContent_OneofMarshaler, _MessageContent_OneofUnmarshaler, _MessageContent_OneofSizer, []interface{}{
		(*MessageContent_TextMessage)(nil),
		(*MessageContent_ServiceMessage)(nil),
		(*MessageContent_DocumentMessage)(nil),
		(*MessageContent_JsonMessage)(nil),
		(*MessageContent_UnsupportedMessage)(nil),
		(*MessageContent_StickerMessage)(nil),
		(*MessageContent_BinaryMessage)(nil),
		(*MessageContent_EmptyMessage)(nil),
		(*MessageContent_DeletedMessage)(nil),
	}
}

func _MessageContent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MessageContent)
	// body
	switch x := m.Body.(type) {
	case *MessageContent_TextMessage:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TextMessage); err != nil {
			return err
		}
	case *MessageContent_ServiceMessage:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ServiceMessage); err != nil {
			return err
		}
	case *MessageContent_DocumentMessage:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DocumentMessage); err != nil {
			return err
		}
	case *MessageContent_JsonMessage:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JsonMessage); err != nil {
			return err
		}
	case *MessageContent_UnsupportedMessage:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnsupportedMessage); err != nil {
			return err
		}
	case *MessageContent_StickerMessage:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StickerMessage); err != nil {
			return err
		}
	case *MessageContent_BinaryMessage:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BinaryMessage); err != nil {
			return err
		}
	case *MessageContent_EmptyMessage:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EmptyMessage); err != nil {
			return err
		}
	case *MessageContent_DeletedMessage:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeletedMessage); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("MessageContent.Body has unexpected type %T", x)
	}
	return nil
}

func _MessageContent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MessageContent)
	switch tag {
	case 1: // body.textMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TextMessage)
		err := b.DecodeMessage(msg)
		m.Body = &MessageContent_TextMessage{msg}
		return true, err
	case 2: // body.serviceMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceMessage)
		err := b.DecodeMessage(msg)
		m.Body = &MessageContent_ServiceMessage{msg}
		return true, err
	case 3: // body.documentMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DocumentMessage)
		err := b.DecodeMessage(msg)
		m.Body = &MessageContent_DocumentMessage{msg}
		return true, err
	case 4: // body.jsonMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JsonMessage)
		err := b.DecodeMessage(msg)
		m.Body = &MessageContent_JsonMessage{msg}
		return true, err
	case 5: // body.unsupportedMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UnsupportedMessage)
		err := b.DecodeMessage(msg)
		m.Body = &MessageContent_UnsupportedMessage{msg}
		return true, err
	case 6: // body.stickerMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StickerMessage)
		err := b.DecodeMessage(msg)
		m.Body = &MessageContent_StickerMessage{msg}
		return true, err
	case 7: // body.binaryMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BinaryMessage)
		err := b.DecodeMessage(msg)
		m.Body = &MessageContent_BinaryMessage{msg}
		return true, err
	case 8: // body.emptyMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EmptyMessage)
		err := b.DecodeMessage(msg)
		m.Body = &MessageContent_EmptyMessage{msg}
		return true, err
	case 9: // body.deletedMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeletedMessage)
		err := b.DecodeMessage(msg)
		m.Body = &MessageContent_DeletedMessage{msg}
		return true, err
	default:
		return false, nil
	}
}

func _MessageContent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MessageContent)
	// body
	switch x := m.Body.(type) {
	case *MessageContent_TextMessage:
		s := proto.Size(x.TextMessage)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MessageContent_ServiceMessage:
		s := proto.Size(x.ServiceMessage)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MessageContent_DocumentMessage:
		s := proto.Size(x.DocumentMessage)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MessageContent_JsonMessage:
		s := proto.Size(x.JsonMessage)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MessageContent_UnsupportedMessage:
		s := proto.Size(x.UnsupportedMessage)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MessageContent_StickerMessage:
		s := proto.Size(x.StickerMessage)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MessageContent_BinaryMessage:
		s := proto.Size(x.BinaryMessage)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MessageContent_EmptyMessage:
		s := proto.Size(x.EmptyMessage)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MessageContent_DeletedMessage:
		s := proto.Size(x.DeletedMessage)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Text message
type TextMessage struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// / User mentions in message
	Mentions []int32 `protobuf:"varint,2,rep,packed,name=mentions" json:"mentions,omitempty"`
	// / Optional bytes of extension
	Ext        *TextMessageEx  `protobuf:"bytes,3,opt,name=ext" json:"ext,omitempty"`
	Media      []*MessageMedia `protobuf:"bytes,4,rep,name=media" json:"media,omitempty"`
	Extensions []*Any          `protobuf:"bytes,5,rep,name=extensions" json:"extensions,omitempty"`
}

func (m *TextMessage) Reset()                    { *m = TextMessage{} }
func (*TextMessage) ProtoMessage()               {}
func (*TextMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{18} }

func (m *TextMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *TextMessage) GetMentions() []int32 {
	if m != nil {
		return m.Mentions
	}
	return nil
}

func (m *TextMessage) GetExt() *TextMessageEx {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (m *TextMessage) GetMedia() []*MessageMedia {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *TextMessage) GetExtensions() []*Any {
	if m != nil {
		return m.Extensions
	}
	return nil
}

type TextMessageEx struct {
	// Types that are valid to be assigned to Body:
	//	*TextMessageEx_TextExMarkdown
	//	*TextMessageEx_TextModernMessage
	//	*TextMessageEx_TextCommand
	Body isTextMessageEx_Body `protobuf_oneof:"body"`
}

func (m *TextMessageEx) Reset()                    { *m = TextMessageEx{} }
func (*TextMessageEx) ProtoMessage()               {}
func (*TextMessageEx) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{19} }

type isTextMessageEx_Body interface {
	isTextMessageEx_Body()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TextMessageEx_TextExMarkdown struct {
	TextExMarkdown *TextExMarkdown `protobuf:"bytes,1,opt,name=textExMarkdown,oneof"`
}
type TextMessageEx_TextModernMessage struct {
	TextModernMessage *TextModernMessage `protobuf:"bytes,2,opt,name=textModernMessage,oneof"`
}
type TextMessageEx_TextCommand struct {
	TextCommand *TextCommand `protobuf:"bytes,3,opt,name=textCommand,oneof"`
}

func (*TextMessageEx_TextExMarkdown) isTextMessageEx_Body()    {}
func (*TextMessageEx_TextModernMessage) isTextMessageEx_Body() {}
func (*TextMessageEx_TextCommand) isTextMessageEx_Body()       {}

func (m *TextMessageEx) GetBody() isTextMessageEx_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *TextMessageEx) GetTextExMarkdown() *TextExMarkdown {
	if x, ok := m.GetBody().(*TextMessageEx_TextExMarkdown); ok {
		return x.TextExMarkdown
	}
	return nil
}

func (m *TextMessageEx) GetTextModernMessage() *TextModernMessage {
	if x, ok := m.GetBody().(*TextMessageEx_TextModernMessage); ok {
		return x.TextModernMessage
	}
	return nil
}

func (m *TextMessageEx) GetTextCommand() *TextCommand {
	if x, ok := m.GetBody().(*TextMessageEx_TextCommand); ok {
		return x.TextCommand
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TextMessageEx) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TextMessageEx_OneofMarshaler, _TextMessageEx_OneofUnmarshaler, _TextMessageEx_OneofSizer, []interface{}{
		(*TextMessageEx_TextExMarkdown)(nil),
		(*TextMessageEx_TextModernMessage)(nil),
		(*TextMessageEx_TextCommand)(nil),
	}
}

func _TextMessageEx_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TextMessageEx)
	// body
	switch x := m.Body.(type) {
	case *TextMessageEx_TextExMarkdown:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TextExMarkdown); err != nil {
			return err
		}
	case *TextMessageEx_TextModernMessage:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TextModernMessage); err != nil {
			return err
		}
	case *TextMessageEx_TextCommand:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TextCommand); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TextMessageEx.Body has unexpected type %T", x)
	}
	return nil
}

func _TextMessageEx_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TextMessageEx)
	switch tag {
	case 1: // body.textExMarkdown
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TextExMarkdown)
		err := b.DecodeMessage(msg)
		m.Body = &TextMessageEx_TextExMarkdown{msg}
		return true, err
	case 2: // body.textModernMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TextModernMessage)
		err := b.DecodeMessage(msg)
		m.Body = &TextMessageEx_TextModernMessage{msg}
		return true, err
	case 3: // body.textCommand
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TextCommand)
		err := b.DecodeMessage(msg)
		m.Body = &TextMessageEx_TextCommand{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TextMessageEx_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TextMessageEx)
	// body
	switch x := m.Body.(type) {
	case *TextMessageEx_TextExMarkdown:
		s := proto.Size(x.TextExMarkdown)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TextMessageEx_TextModernMessage:
		s := proto.Size(x.TextModernMessage)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TextMessageEx_TextCommand:
		s := proto.Size(x.TextCommand)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Markdown extension
type TextExMarkdown struct {
	Markdown string `protobuf:"bytes,2,opt,name=markdown,proto3" json:"markdown,omitempty"`
}

func (m *TextExMarkdown) Reset()                    { *m = TextExMarkdown{} }
func (*TextExMarkdown) ProtoMessage()               {}
func (*TextExMarkdown) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{20} }

func (m *TextExMarkdown) GetMarkdown() string {
	if m != nil {
		return m.Markdown
	}
	return ""
}

// Modern text message
type TextModernMessage struct {
	Text                *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	SenderNameOverride  *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=sender_name_override,json=senderNameOverride" json:"sender_name_override,omitempty"`
	SenderPhotoOverride *Avatar                      `protobuf:"bytes,3,opt,name=sender_photo_override,json=senderPhotoOverride" json:"sender_photo_override,omitempty"`
	Style               *ParagraphStyle              `protobuf:"bytes,4,opt,name=style" json:"style,omitempty"`
	Attaches            []*TextModernAttach          `protobuf:"bytes,5,rep,name=attaches" json:"attaches,omitempty"`
}

func (m *TextModernMessage) Reset()                    { *m = TextModernMessage{} }
func (*TextModernMessage) ProtoMessage()               {}
func (*TextModernMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{21} }

func (m *TextModernMessage) GetText() *google_protobuf.StringValue {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *TextModernMessage) GetSenderNameOverride() *google_protobuf.StringValue {
	if m != nil {
		return m.SenderNameOverride
	}
	return nil
}

func (m *TextModernMessage) GetSenderPhotoOverride() *Avatar {
	if m != nil {
		return m.SenderPhotoOverride
	}
	return nil
}

func (m *TextModernMessage) GetStyle() *ParagraphStyle {
	if m != nil {
		return m.Style
	}
	return nil
}

func (m *TextModernMessage) GetAttaches() []*TextModernAttach {
	if m != nil {
		return m.Attaches
	}
	return nil
}

// Paragraph style
type ParagraphStyle struct {
	// / Show quote-like paragraph?
	ShowParagraph *google_protobuf.BoolValue `protobuf:"bytes,1,opt,name=show_paragraph,json=showParagraph" json:"show_paragraph,omitempty"`
	// / Override paragraph color
	ParagraphColor *Color `protobuf:"bytes,2,opt,name=paragraph_color,json=paragraphColor" json:"paragraph_color,omitempty"`
	// / Override background color
	BgColor *Color `protobuf:"bytes,3,opt,name=bg_color,json=bgColor" json:"bg_color,omitempty"`
}

func (m *ParagraphStyle) Reset()                    { *m = ParagraphStyle{} }
func (*ParagraphStyle) ProtoMessage()               {}
func (*ParagraphStyle) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{22} }

func (m *ParagraphStyle) GetShowParagraph() *google_protobuf.BoolValue {
	if m != nil {
		return m.ShowParagraph
	}
	return nil
}

func (m *ParagraphStyle) GetParagraphColor() *Color {
	if m != nil {
		return m.ParagraphColor
	}
	return nil
}

func (m *ParagraphStyle) GetBgColor() *Color {
	if m != nil {
		return m.BgColor
	}
	return nil
}

// Attaches to message
type TextModernAttach struct {
	Title     *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	TitleUrl  *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=title_url,json=titleUrl" json:"title_url,omitempty"`
	TitleIcon *ImageLocation               `protobuf:"bytes,3,opt,name=title_icon,json=titleIcon" json:"title_icon,omitempty"`
	Text      *google_protobuf.StringValue `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	Style     *ParagraphStyle              `protobuf:"bytes,5,opt,name=style" json:"style,omitempty"`
	Fields    []*TextModernField           `protobuf:"bytes,6,rep,name=fields" json:"fields,omitempty"`
}

func (m *TextModernAttach) Reset()                    { *m = TextModernAttach{} }
func (*TextModernAttach) ProtoMessage()               {}
func (*TextModernAttach) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{23} }

func (m *TextModernAttach) GetTitle() *google_protobuf.StringValue {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *TextModernAttach) GetTitleUrl() *google_protobuf.StringValue {
	if m != nil {
		return m.TitleUrl
	}
	return nil
}

func (m *TextModernAttach) GetTitleIcon() *ImageLocation {
	if m != nil {
		return m.TitleIcon
	}
	return nil
}

func (m *TextModernAttach) GetText() *google_protobuf.StringValue {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *TextModernAttach) GetStyle() *ParagraphStyle {
	if m != nil {
		return m.Style
	}
	return nil
}

func (m *TextModernAttach) GetFields() []*TextModernField {
	if m != nil {
		return m.Fields
	}
	return nil
}

// Modern message fields
type TextModernField struct {
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// / Is field can be shown in compact way (default is TRUE)
	IsShort *google_protobuf.BoolValue `protobuf:"bytes,3,opt,name=is_short,json=isShort" json:"is_short,omitempty"`
}

func (m *TextModernField) Reset()                    { *m = TextModernField{} }
func (*TextModernField) ProtoMessage()               {}
func (*TextModernField) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{24} }

func (m *TextModernField) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TextModernField) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TextModernField) GetIsShort() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsShort
	}
	return nil
}

// Text Command Message for bots
type TextCommand struct {
	// / Slash-Command For execution
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Args    string `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
}

func (m *TextCommand) Reset()                    { *m = TextCommand{} }
func (*TextCommand) ProtoMessage()               {}
func (*TextCommand) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{25} }

func (m *TextCommand) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *TextCommand) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

// Service message
type ServiceMessage struct {
	Text string     `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Ext  *ServiceEx `protobuf:"bytes,3,opt,name=ext" json:"ext,omitempty"`
}

func (m *ServiceMessage) Reset()                    { *m = ServiceMessage{} }
func (*ServiceMessage) ProtoMessage()               {}
func (*ServiceMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{26} }

func (m *ServiceMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ServiceMessage) GetExt() *ServiceEx {
	if m != nil {
		return m.Ext
	}
	return nil
}

type ServiceEx struct {
	// Types that are valid to be assigned to Body:
	//	*ServiceEx_UserInvited
	//	*ServiceEx_UserJoined
	//	*ServiceEx_UserKicked
	//	*ServiceEx_UserLeft
	//	*ServiceEx_GroupCreated
	//	*ServiceEx_ChangedTitle
	//	*ServiceEx_ChangedTopic
	//	*ServiceEx_ChangedAbout
	//	*ServiceEx_ChangedAvatar
	//	*ServiceEx_ContactRegistered
	//	*ServiceEx_PhoneMissed
	//	*ServiceEx_PhoneCall
	//	*ServiceEx_PhoneRejected
	//	*ServiceEx_ChatArchived
	//	*ServiceEx_ChatRestored
	Body isServiceEx_Body `protobuf_oneof:"body"`
}

func (m *ServiceEx) Reset()                    { *m = ServiceEx{} }
func (*ServiceEx) ProtoMessage()               {}
func (*ServiceEx) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{27} }

type isServiceEx_Body interface {
	isServiceEx_Body()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ServiceEx_UserInvited struct {
	UserInvited *ServiceExUserInvited `protobuf:"bytes,1,opt,name=userInvited,oneof"`
}
type ServiceEx_UserJoined struct {
	UserJoined *ServiceExUserJoined `protobuf:"bytes,2,opt,name=userJoined,oneof"`
}
type ServiceEx_UserKicked struct {
	UserKicked *ServiceExUserKicked `protobuf:"bytes,3,opt,name=userKicked,oneof"`
}
type ServiceEx_UserLeft struct {
	UserLeft *ServiceExUserLeft `protobuf:"bytes,4,opt,name=userLeft,oneof"`
}
type ServiceEx_GroupCreated struct {
	GroupCreated *ServiceExGroupCreated `protobuf:"bytes,5,opt,name=groupCreated,oneof"`
}
type ServiceEx_ChangedTitle struct {
	ChangedTitle *ServiceExChangedTitle `protobuf:"bytes,6,opt,name=changedTitle,oneof"`
}
type ServiceEx_ChangedTopic struct {
	ChangedTopic *ServiceExChangedTopic `protobuf:"bytes,7,opt,name=changedTopic,oneof"`
}
type ServiceEx_ChangedAbout struct {
	ChangedAbout *ServiceExChangedAbout `protobuf:"bytes,8,opt,name=changedAbout,oneof"`
}
type ServiceEx_ChangedAvatar struct {
	ChangedAvatar *ServiceExChangedAvatar `protobuf:"bytes,9,opt,name=changedAvatar,oneof"`
}
type ServiceEx_ContactRegistered struct {
	ContactRegistered *ServiceExContactRegistered `protobuf:"bytes,10,opt,name=contactRegistered,oneof"`
}
type ServiceEx_PhoneMissed struct {
	PhoneMissed *ServiceExPhoneMissed `protobuf:"bytes,11,opt,name=phoneMissed,oneof"`
}
type ServiceEx_PhoneCall struct {
	PhoneCall *ServiceExPhoneCall `protobuf:"bytes,12,opt,name=phoneCall,oneof"`
}
type ServiceEx_PhoneRejected struct {
	PhoneRejected *ServiceExPhoneRejected `protobuf:"bytes,13,opt,name=phoneRejected,oneof"`
}
type ServiceEx_ChatArchived struct {
	ChatArchived *ServiceExChatArchived `protobuf:"bytes,14,opt,name=chatArchived,oneof"`
}
type ServiceEx_ChatRestored struct {
	ChatRestored *ServiceExChatRestored `protobuf:"bytes,15,opt,name=chatRestored,oneof"`
}

func (*ServiceEx_UserInvited) isServiceEx_Body()       {}
func (*ServiceEx_UserJoined) isServiceEx_Body()        {}
func (*ServiceEx_UserKicked) isServiceEx_Body()        {}
func (*ServiceEx_UserLeft) isServiceEx_Body()          {}
func (*ServiceEx_GroupCreated) isServiceEx_Body()      {}
func (*ServiceEx_ChangedTitle) isServiceEx_Body()      {}
func (*ServiceEx_ChangedTopic) isServiceEx_Body()      {}
func (*ServiceEx_ChangedAbout) isServiceEx_Body()      {}
func (*ServiceEx_ChangedAvatar) isServiceEx_Body()     {}
func (*ServiceEx_ContactRegistered) isServiceEx_Body() {}
func (*ServiceEx_PhoneMissed) isServiceEx_Body()       {}
func (*ServiceEx_PhoneCall) isServiceEx_Body()         {}
func (*ServiceEx_PhoneRejected) isServiceEx_Body()     {}
func (*ServiceEx_ChatArchived) isServiceEx_Body()      {}
func (*ServiceEx_ChatRestored) isServiceEx_Body()      {}

func (m *ServiceEx) GetBody() isServiceEx_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ServiceEx) GetUserInvited() *ServiceExUserInvited {
	if x, ok := m.GetBody().(*ServiceEx_UserInvited); ok {
		return x.UserInvited
	}
	return nil
}

func (m *ServiceEx) GetUserJoined() *ServiceExUserJoined {
	if x, ok := m.GetBody().(*ServiceEx_UserJoined); ok {
		return x.UserJoined
	}
	return nil
}

func (m *ServiceEx) GetUserKicked() *ServiceExUserKicked {
	if x, ok := m.GetBody().(*ServiceEx_UserKicked); ok {
		return x.UserKicked
	}
	return nil
}

func (m *ServiceEx) GetUserLeft() *ServiceExUserLeft {
	if x, ok := m.GetBody().(*ServiceEx_UserLeft); ok {
		return x.UserLeft
	}
	return nil
}

func (m *ServiceEx) GetGroupCreated() *ServiceExGroupCreated {
	if x, ok := m.GetBody().(*ServiceEx_GroupCreated); ok {
		return x.GroupCreated
	}
	return nil
}

func (m *ServiceEx) GetChangedTitle() *ServiceExChangedTitle {
	if x, ok := m.GetBody().(*ServiceEx_ChangedTitle); ok {
		return x.ChangedTitle
	}
	return nil
}

func (m *ServiceEx) GetChangedTopic() *ServiceExChangedTopic {
	if x, ok := m.GetBody().(*ServiceEx_ChangedTopic); ok {
		return x.ChangedTopic
	}
	return nil
}

func (m *ServiceEx) GetChangedAbout() *ServiceExChangedAbout {
	if x, ok := m.GetBody().(*ServiceEx_ChangedAbout); ok {
		return x.ChangedAbout
	}
	return nil
}

func (m *ServiceEx) GetChangedAvatar() *ServiceExChangedAvatar {
	if x, ok := m.GetBody().(*ServiceEx_ChangedAvatar); ok {
		return x.ChangedAvatar
	}
	return nil
}

func (m *ServiceEx) GetContactRegistered() *ServiceExContactRegistered {
	if x, ok := m.GetBody().(*ServiceEx_ContactRegistered); ok {
		return x.ContactRegistered
	}
	return nil
}

func (m *ServiceEx) GetPhoneMissed() *ServiceExPhoneMissed {
	if x, ok := m.GetBody().(*ServiceEx_PhoneMissed); ok {
		return x.PhoneMissed
	}
	return nil
}

func (m *ServiceEx) GetPhoneCall() *ServiceExPhoneCall {
	if x, ok := m.GetBody().(*ServiceEx_PhoneCall); ok {
		return x.PhoneCall
	}
	return nil
}

func (m *ServiceEx) GetPhoneRejected() *ServiceExPhoneRejected {
	if x, ok := m.GetBody().(*ServiceEx_PhoneRejected); ok {
		return x.PhoneRejected
	}
	return nil
}

func (m *ServiceEx) GetChatArchived() *ServiceExChatArchived {
	if x, ok := m.GetBody().(*ServiceEx_ChatArchived); ok {
		return x.ChatArchived
	}
	return nil
}

func (m *ServiceEx) GetChatRestored() *ServiceExChatRestored {
	if x, ok := m.GetBody().(*ServiceEx_ChatRestored); ok {
		return x.ChatRestored
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ServiceEx) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ServiceEx_OneofMarshaler, _ServiceEx_OneofUnmarshaler, _ServiceEx_OneofSizer, []interface{}{
		(*ServiceEx_UserInvited)(nil),
		(*ServiceEx_UserJoined)(nil),
		(*ServiceEx_UserKicked)(nil),
		(*ServiceEx_UserLeft)(nil),
		(*ServiceEx_GroupCreated)(nil),
		(*ServiceEx_ChangedTitle)(nil),
		(*ServiceEx_ChangedTopic)(nil),
		(*ServiceEx_ChangedAbout)(nil),
		(*ServiceEx_ChangedAvatar)(nil),
		(*ServiceEx_ContactRegistered)(nil),
		(*ServiceEx_PhoneMissed)(nil),
		(*ServiceEx_PhoneCall)(nil),
		(*ServiceEx_PhoneRejected)(nil),
		(*ServiceEx_ChatArchived)(nil),
		(*ServiceEx_ChatRestored)(nil),
	}
}

func _ServiceEx_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ServiceEx)
	// body
	switch x := m.Body.(type) {
	case *ServiceEx_UserInvited:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserInvited); err != nil {
			return err
		}
	case *ServiceEx_UserJoined:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserJoined); err != nil {
			return err
		}
	case *ServiceEx_UserKicked:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserKicked); err != nil {
			return err
		}
	case *ServiceEx_UserLeft:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserLeft); err != nil {
			return err
		}
	case *ServiceEx_GroupCreated:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GroupCreated); err != nil {
			return err
		}
	case *ServiceEx_ChangedTitle:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChangedTitle); err != nil {
			return err
		}
	case *ServiceEx_ChangedTopic:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChangedTopic); err != nil {
			return err
		}
	case *ServiceEx_ChangedAbout:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChangedAbout); err != nil {
			return err
		}
	case *ServiceEx_ChangedAvatar:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChangedAvatar); err != nil {
			return err
		}
	case *ServiceEx_ContactRegistered:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ContactRegistered); err != nil {
			return err
		}
	case *ServiceEx_PhoneMissed:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PhoneMissed); err != nil {
			return err
		}
	case *ServiceEx_PhoneCall:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PhoneCall); err != nil {
			return err
		}
	case *ServiceEx_PhoneRejected:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PhoneRejected); err != nil {
			return err
		}
	case *ServiceEx_ChatArchived:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChatArchived); err != nil {
			return err
		}
	case *ServiceEx_ChatRestored:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChatRestored); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ServiceEx.Body has unexpected type %T", x)
	}
	return nil
}

func _ServiceEx_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ServiceEx)
	switch tag {
	case 1: // body.userInvited
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceExUserInvited)
		err := b.DecodeMessage(msg)
		m.Body = &ServiceEx_UserInvited{msg}
		return true, err
	case 2: // body.userJoined
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceExUserJoined)
		err := b.DecodeMessage(msg)
		m.Body = &ServiceEx_UserJoined{msg}
		return true, err
	case 3: // body.userKicked
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceExUserKicked)
		err := b.DecodeMessage(msg)
		m.Body = &ServiceEx_UserKicked{msg}
		return true, err
	case 4: // body.userLeft
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceExUserLeft)
		err := b.DecodeMessage(msg)
		m.Body = &ServiceEx_UserLeft{msg}
		return true, err
	case 5: // body.groupCreated
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceExGroupCreated)
		err := b.DecodeMessage(msg)
		m.Body = &ServiceEx_GroupCreated{msg}
		return true, err
	case 6: // body.changedTitle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceExChangedTitle)
		err := b.DecodeMessage(msg)
		m.Body = &ServiceEx_ChangedTitle{msg}
		return true, err
	case 7: // body.changedTopic
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceExChangedTopic)
		err := b.DecodeMessage(msg)
		m.Body = &ServiceEx_ChangedTopic{msg}
		return true, err
	case 8: // body.changedAbout
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceExChangedAbout)
		err := b.DecodeMessage(msg)
		m.Body = &ServiceEx_ChangedAbout{msg}
		return true, err
	case 9: // body.changedAvatar
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceExChangedAvatar)
		err := b.DecodeMessage(msg)
		m.Body = &ServiceEx_ChangedAvatar{msg}
		return true, err
	case 10: // body.contactRegistered
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceExContactRegistered)
		err := b.DecodeMessage(msg)
		m.Body = &ServiceEx_ContactRegistered{msg}
		return true, err
	case 11: // body.phoneMissed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceExPhoneMissed)
		err := b.DecodeMessage(msg)
		m.Body = &ServiceEx_PhoneMissed{msg}
		return true, err
	case 12: // body.phoneCall
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceExPhoneCall)
		err := b.DecodeMessage(msg)
		m.Body = &ServiceEx_PhoneCall{msg}
		return true, err
	case 13: // body.phoneRejected
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceExPhoneRejected)
		err := b.DecodeMessage(msg)
		m.Body = &ServiceEx_PhoneRejected{msg}
		return true, err
	case 14: // body.chatArchived
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceExChatArchived)
		err := b.DecodeMessage(msg)
		m.Body = &ServiceEx_ChatArchived{msg}
		return true, err
	case 15: // body.chatRestored
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceExChatRestored)
		err := b.DecodeMessage(msg)
		m.Body = &ServiceEx_ChatRestored{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ServiceEx_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ServiceEx)
	// body
	switch x := m.Body.(type) {
	case *ServiceEx_UserInvited:
		s := proto.Size(x.UserInvited)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServiceEx_UserJoined:
		s := proto.Size(x.UserJoined)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServiceEx_UserKicked:
		s := proto.Size(x.UserKicked)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServiceEx_UserLeft:
		s := proto.Size(x.UserLeft)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServiceEx_GroupCreated:
		s := proto.Size(x.GroupCreated)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServiceEx_ChangedTitle:
		s := proto.Size(x.ChangedTitle)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServiceEx_ChangedTopic:
		s := proto.Size(x.ChangedTopic)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServiceEx_ChangedAbout:
		s := proto.Size(x.ChangedAbout)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServiceEx_ChangedAvatar:
		s := proto.Size(x.ChangedAvatar)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServiceEx_ContactRegistered:
		s := proto.Size(x.ContactRegistered)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServiceEx_PhoneMissed:
		s := proto.Size(x.PhoneMissed)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServiceEx_PhoneCall:
		s := proto.Size(x.PhoneCall)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServiceEx_PhoneRejected:
		s := proto.Size(x.PhoneRejected)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServiceEx_ChatArchived:
		s := proto.Size(x.ChatArchived)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServiceEx_ChatRestored:
		s := proto.Size(x.ChatRestored)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Service message about adding user to group
type ServiceExUserInvited struct {
	InvitedUid int32 `protobuf:"varint,1,opt,name=invited_uid,json=invitedUid,proto3" json:"invited_uid,omitempty"`
}

func (m *ServiceExUserInvited) Reset()                    { *m = ServiceExUserInvited{} }
func (*ServiceExUserInvited) ProtoMessage()               {}
func (*ServiceExUserInvited) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{28} }

func (m *ServiceExUserInvited) GetInvitedUid() int32 {
	if m != nil {
		return m.InvitedUid
	}
	return 0
}

// Service message about user join to group
type ServiceExUserJoined struct {
}

func (m *ServiceExUserJoined) Reset()                    { *m = ServiceExUserJoined{} }
func (*ServiceExUserJoined) ProtoMessage()               {}
func (*ServiceExUserJoined) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{29} }

// Service message about kicking user from group
type ServiceExUserKicked struct {
	KickedUid int32 `protobuf:"varint,1,opt,name=kicked_uid,json=kickedUid,proto3" json:"kicked_uid,omitempty"`
}

func (m *ServiceExUserKicked) Reset()                    { *m = ServiceExUserKicked{} }
func (*ServiceExUserKicked) ProtoMessage()               {}
func (*ServiceExUserKicked) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{30} }

func (m *ServiceExUserKicked) GetKickedUid() int32 {
	if m != nil {
		return m.KickedUid
	}
	return 0
}

// Service message about user left group
type ServiceExUserLeft struct {
}

func (m *ServiceExUserLeft) Reset()                    { *m = ServiceExUserLeft{} }
func (*ServiceExUserLeft) ProtoMessage()               {}
func (*ServiceExUserLeft) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{31} }

// Service message about group creating
type ServiceExGroupCreated struct {
}

func (m *ServiceExGroupCreated) Reset()                    { *m = ServiceExGroupCreated{} }
func (*ServiceExGroupCreated) ProtoMessage()               {}
func (*ServiceExGroupCreated) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{32} }

// Service message about group title change
type ServiceExChangedTitle struct {
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *ServiceExChangedTitle) Reset()                    { *m = ServiceExChangedTitle{} }
func (*ServiceExChangedTitle) ProtoMessage()               {}
func (*ServiceExChangedTitle) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{33} }

func (m *ServiceExChangedTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

// Service message on group topic change
type ServiceExChangedTopic struct {
	// / New group topic
	Topic *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
}

func (m *ServiceExChangedTopic) Reset()                    { *m = ServiceExChangedTopic{} }
func (*ServiceExChangedTopic) ProtoMessage()               {}
func (*ServiceExChangedTopic) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{34} }

func (m *ServiceExChangedTopic) GetTopic() *google_protobuf.StringValue {
	if m != nil {
		return m.Topic
	}
	return nil
}

// Service message on group about change
type ServiceExChangedAbout struct {
	// / New group about
	About *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=about" json:"about,omitempty"`
}

func (m *ServiceExChangedAbout) Reset()                    { *m = ServiceExChangedAbout{} }
func (*ServiceExChangedAbout) ProtoMessage()               {}
func (*ServiceExChangedAbout) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{35} }

func (m *ServiceExChangedAbout) GetAbout() *google_protobuf.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

// Service message about avatar change
type ServiceExChangedAvatar struct {
	Avatar *Avatar `protobuf:"bytes,1,opt,name=avatar" json:"avatar,omitempty"`
}

func (m *ServiceExChangedAvatar) Reset()                    { *m = ServiceExChangedAvatar{} }
func (*ServiceExChangedAvatar) ProtoMessage()               {}
func (*ServiceExChangedAvatar) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{36} }

func (m *ServiceExChangedAvatar) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

// Service message about user registration
type ServiceExContactRegistered struct {
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *ServiceExContactRegistered) Reset()      { *m = ServiceExContactRegistered{} }
func (*ServiceExContactRegistered) ProtoMessage() {}
func (*ServiceExContactRegistered) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{37}
}

func (m *ServiceExContactRegistered) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// Update about missing phone call
type ServiceExPhoneMissed struct {
}

func (m *ServiceExPhoneMissed) Reset()                    { *m = ServiceExPhoneMissed{} }
func (*ServiceExPhoneMissed) ProtoMessage()               {}
func (*ServiceExPhoneMissed) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{38} }

// Update about phone call
type ServiceExPhoneCall struct {
	Duration int32 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *ServiceExPhoneCall) Reset()                    { *m = ServiceExPhoneCall{} }
func (*ServiceExPhoneCall) ProtoMessage()               {}
func (*ServiceExPhoneCall) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{39} }

func (m *ServiceExPhoneCall) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// Update about phone call rejected
type ServiceExPhoneRejected struct {
}

func (m *ServiceExPhoneRejected) Reset()                    { *m = ServiceExPhoneRejected{} }
func (*ServiceExPhoneRejected) ProtoMessage()               {}
func (*ServiceExPhoneRejected) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{40} }

// Message about chat archived
type ServiceExChatArchived struct {
}

func (m *ServiceExChatArchived) Reset()                    { *m = ServiceExChatArchived{} }
func (*ServiceExChatArchived) ProtoMessage()               {}
func (*ServiceExChatArchived) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{41} }

// Message about chat restored
type ServiceExChatRestored struct {
}

func (m *ServiceExChatRestored) Reset()                    { *m = ServiceExChatRestored{} }
func (*ServiceExChatRestored) ProtoMessage()               {}
func (*ServiceExChatRestored) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{42} }

// File message
type DocumentMessage struct {
	FileId     int64  `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	AccessHash int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FileSize   int32  `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	MimeType   string `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// / optional thumb of file. JPEG less that 90x90 with 60-70 quality.
	Thumb *FastThumb  `protobuf:"bytes,6,opt,name=thumb" json:"thumb,omitempty"`
	Ext   *DocumentEx `protobuf:"bytes,8,opt,name=ext" json:"ext,omitempty"`
}

func (m *DocumentMessage) Reset()                    { *m = DocumentMessage{} }
func (*DocumentMessage) ProtoMessage()               {}
func (*DocumentMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{43} }

func (m *DocumentMessage) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *DocumentMessage) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *DocumentMessage) GetFileSize() int32 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *DocumentMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DocumentMessage) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *DocumentMessage) GetThumb() *FastThumb {
	if m != nil {
		return m.Thumb
	}
	return nil
}

func (m *DocumentMessage) GetExt() *DocumentEx {
	if m != nil {
		return m.Ext
	}
	return nil
}

type DocumentEx struct {
	// Types that are valid to be assigned to Body:
	//	*DocumentEx_Photo
	//	*DocumentEx_Video
	//	*DocumentEx_Voice
	Body isDocumentEx_Body `protobuf_oneof:"body"`
}

func (m *DocumentEx) Reset()                    { *m = DocumentEx{} }
func (*DocumentEx) ProtoMessage()               {}
func (*DocumentEx) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{44} }

type isDocumentEx_Body interface {
	isDocumentEx_Body()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DocumentEx_Photo struct {
	Photo *DocumentExPhoto `protobuf:"bytes,1,opt,name=photo,oneof"`
}
type DocumentEx_Video struct {
	Video *DocumentExVideo `protobuf:"bytes,2,opt,name=video,oneof"`
}
type DocumentEx_Voice struct {
	Voice *DocumentExVoice `protobuf:"bytes,3,opt,name=voice,oneof"`
}

func (*DocumentEx_Photo) isDocumentEx_Body() {}
func (*DocumentEx_Video) isDocumentEx_Body() {}
func (*DocumentEx_Voice) isDocumentEx_Body() {}

func (m *DocumentEx) GetBody() isDocumentEx_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *DocumentEx) GetPhoto() *DocumentExPhoto {
	if x, ok := m.GetBody().(*DocumentEx_Photo); ok {
		return x.Photo
	}
	return nil
}

func (m *DocumentEx) GetVideo() *DocumentExVideo {
	if x, ok := m.GetBody().(*DocumentEx_Video); ok {
		return x.Video
	}
	return nil
}

func (m *DocumentEx) GetVoice() *DocumentExVoice {
	if x, ok := m.GetBody().(*DocumentEx_Voice); ok {
		return x.Voice
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DocumentEx) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DocumentEx_OneofMarshaler, _DocumentEx_OneofUnmarshaler, _DocumentEx_OneofSizer, []interface{}{
		(*DocumentEx_Photo)(nil),
		(*DocumentEx_Video)(nil),
		(*DocumentEx_Voice)(nil),
	}
}

func _DocumentEx_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DocumentEx)
	// body
	switch x := m.Body.(type) {
	case *DocumentEx_Photo:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Photo); err != nil {
			return err
		}
	case *DocumentEx_Video:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Video); err != nil {
			return err
		}
	case *DocumentEx_Voice:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Voice); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DocumentEx.Body has unexpected type %T", x)
	}
	return nil
}

func _DocumentEx_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DocumentEx)
	switch tag {
	case 1: // body.photo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DocumentExPhoto)
		err := b.DecodeMessage(msg)
		m.Body = &DocumentEx_Photo{msg}
		return true, err
	case 2: // body.video
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DocumentExVideo)
		err := b.DecodeMessage(msg)
		m.Body = &DocumentEx_Video{msg}
		return true, err
	case 3: // body.voice
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DocumentExVoice)
		err := b.DecodeMessage(msg)
		m.Body = &DocumentEx_Voice{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DocumentEx_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DocumentEx)
	// body
	switch x := m.Body.(type) {
	case *DocumentEx_Photo:
		s := proto.Size(x.Photo)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DocumentEx_Video:
		s := proto.Size(x.Video)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DocumentEx_Voice:
		s := proto.Size(x.Voice)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// File photo extension
type DocumentExPhoto struct {
	W int32 `protobuf:"varint,1,opt,name=w,proto3" json:"w,omitempty"`
	H int32 `protobuf:"varint,2,opt,name=h,proto3" json:"h,omitempty"`
}

func (m *DocumentExPhoto) Reset()                    { *m = DocumentExPhoto{} }
func (*DocumentExPhoto) ProtoMessage()               {}
func (*DocumentExPhoto) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{45} }

func (m *DocumentExPhoto) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *DocumentExPhoto) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

// File video extension
type DocumentExVideo struct {
	W        int32 `protobuf:"varint,1,opt,name=w,proto3" json:"w,omitempty"`
	H        int32 `protobuf:"varint,2,opt,name=h,proto3" json:"h,omitempty"`
	Duration int32 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *DocumentExVideo) Reset()                    { *m = DocumentExVideo{} }
func (*DocumentExVideo) ProtoMessage()               {}
func (*DocumentExVideo) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{46} }

func (m *DocumentExVideo) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *DocumentExVideo) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *DocumentExVideo) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// File voice extension
type DocumentExVoice struct {
	Duration int32 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *DocumentExVoice) Reset()                    { *m = DocumentExVoice{} }
func (*DocumentExVoice) ProtoMessage()               {}
func (*DocumentExVoice) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{47} }

func (m *DocumentExVoice) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// Custom-data JsonMessage
type JsonMessage struct {
	RawJson string `protobuf:"bytes,1,opt,name=raw_json,json=rawJson,proto3" json:"raw_json,omitempty"`
}

func (m *JsonMessage) Reset()                    { *m = JsonMessage{} }
func (*JsonMessage) ProtoMessage()               {}
func (*JsonMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{48} }

func (m *JsonMessage) GetRawJson() string {
	if m != nil {
		return m.RawJson
	}
	return ""
}

// Explicit type for unsupported message
type UnsupportedMessage struct {
}

func (m *UnsupportedMessage) Reset()                    { *m = UnsupportedMessage{} }
func (*UnsupportedMessage) ProtoMessage()               {}
func (*UnsupportedMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{49} }

// Sticker message
type StickerMessage struct {
	// / Optional Unique ID of sticker
	StickerId *google_protobuf.Int32Value `protobuf:"bytes,1,opt,name=sticker_id,json=stickerId" json:"sticker_id,omitempty"`
	// / Optional Fast preview of sticker in webp format
	FastPreview *google_protobuf.BytesValue `protobuf:"bytes,2,opt,name=fast_preview,json=fastPreview" json:"fast_preview,omitempty"`
	// / Optional 512x512 sticker image in webp format
	Image_512 *ImageLocation `protobuf:"bytes,3,opt,name=image_512,json=image512" json:"image_512,omitempty"`
	// / Optional 256x256 sticker image in webp format
	Image_256 *ImageLocation `protobuf:"bytes,4,opt,name=image_256,json=image256" json:"image_256,omitempty"`
	// / Optional Collection ID
	StickerCollectionId *google_protobuf.Int32Value `protobuf:"bytes,5,opt,name=sticker_collection_id,json=stickerCollectionId" json:"sticker_collection_id,omitempty"`
	// / Optional Collection Access Hash
	StickerCollectionAccessHash *google_protobuf.Int64Value `protobuf:"bytes,6,opt,name=sticker_collection_access_hash,json=stickerCollectionAccessHash" json:"sticker_collection_access_hash,omitempty"`
	// / Sticker emoji
	Emoji *google_protobuf.StringValue `protobuf:"bytes,7,opt,name=emoji" json:"emoji,omitempty"`
}

func (m *StickerMessage) Reset()                    { *m = StickerMessage{} }
func (*StickerMessage) ProtoMessage()               {}
func (*StickerMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{50} }

func (m *StickerMessage) GetStickerId() *google_protobuf.Int32Value {
	if m != nil {
		return m.StickerId
	}
	return nil
}

func (m *StickerMessage) GetFastPreview() *google_protobuf.BytesValue {
	if m != nil {
		return m.FastPreview
	}
	return nil
}

func (m *StickerMessage) GetImage_512() *ImageLocation {
	if m != nil {
		return m.Image_512
	}
	return nil
}

func (m *StickerMessage) GetImage_256() *ImageLocation {
	if m != nil {
		return m.Image_256
	}
	return nil
}

func (m *StickerMessage) GetStickerCollectionId() *google_protobuf.Int32Value {
	if m != nil {
		return m.StickerCollectionId
	}
	return nil
}

func (m *StickerMessage) GetStickerCollectionAccessHash() *google_protobuf.Int64Value {
	if m != nil {
		return m.StickerCollectionAccessHash
	}
	return nil
}

func (m *StickerMessage) GetEmoji() *google_protobuf.StringValue {
	if m != nil {
		return m.Emoji
	}
	return nil
}

// Binary Message. Useful for implementing your own content types
type BinaryMessage struct {
	ContentTag string `protobuf:"bytes,1,opt,name=content_tag,json=contentTag,proto3" json:"content_tag,omitempty"`
	Msg        []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *BinaryMessage) Reset()                    { *m = BinaryMessage{} }
func (*BinaryMessage) ProtoMessage()               {}
func (*BinaryMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{51} }

func (m *BinaryMessage) GetContentTag() string {
	if m != nil {
		return m.ContentTag
	}
	return ""
}

func (m *BinaryMessage) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

// Empty Message
type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{52} }

// Deleted message
type DeletedMessage struct {
	// / Deleted locally message
	IsLocal *google_protobuf.BoolValue `protobuf:"bytes,1,opt,name=is_local,json=isLocal" json:"is_local,omitempty"`
}

func (m *DeletedMessage) Reset()                    { *m = DeletedMessage{} }
func (*DeletedMessage) ProtoMessage()               {}
func (*DeletedMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{53} }

func (m *DeletedMessage) GetIsLocal() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsLocal
	}
	return nil
}

// Short Dialog from grouped conversation list
type DialogShort struct {
	Peer    *Peer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Counter int32 `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	Date    int64 `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *DialogShort) Reset()                    { *m = DialogShort{} }
func (*DialogShort) ProtoMessage()               {}
func (*DialogShort) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{54} }

func (m *DialogShort) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *DialogShort) GetCounter() int32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *DialogShort) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Grouped dialog list
type DialogGroup struct {
	Title   string         `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Key     string         `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Dialogs []*DialogShort `protobuf:"bytes,3,rep,name=dialogs" json:"dialogs,omitempty"`
}

func (m *DialogGroup) Reset()                    { *m = DialogGroup{} }
func (*DialogGroup) ProtoMessage()               {}
func (*DialogGroup) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{55} }

func (m *DialogGroup) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *DialogGroup) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DialogGroup) GetDialogs() []*DialogShort {
	if m != nil {
		return m.Dialogs
	}
	return nil
}

// Reaction to message
type MessageReaction struct {
	Users []int32 `protobuf:"varint,1,rep,packed,name=users" json:"users,omitempty"`
	Code  string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *MessageReaction) Reset()                    { *m = MessageReaction{} }
func (*MessageReaction) ProtoMessage()               {}
func (*MessageReaction) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{56} }

func (m *MessageReaction) GetUsers() []int32 {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *MessageReaction) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// Predicate for searching in custom profile
type SearchPredicate struct {
	Key    string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (m *SearchPredicate) Reset()                    { *m = SearchPredicate{} }
func (*SearchPredicate) ProtoMessage()               {}
func (*SearchPredicate) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{57} }

func (m *SearchPredicate) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SearchPredicate) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// Sending plain message
type RequestSendMessage struct {
	Peer    *OutPeer        `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Rid     int64           `protobuf:"varint,3,opt,name=rid,proto3" json:"rid,omitempty"`
	Message *MessageContent `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	// / if not empty, then message will be send to this user only
	IsOnlyForUser int32 `protobuf:"varint,5,opt,name=is_only_for_user,json=isOnlyForUser,proto3" json:"is_only_for_user,omitempty"`
	// / If current message forwards some other
	Forward *ReferencedMessages `protobuf:"bytes,8,opt,name=forward" json:"forward,omitempty"`
	// / If current message is a reply on some other
	Reply      *ReferencedMessages `protobuf:"bytes,9,opt,name=reply" json:"reply,omitempty"`
	Predicates []*SearchPredicate  `protobuf:"bytes,10,rep,name=predicates" json:"predicates,omitempty"`
	WhiteList  []int32             `protobuf:"varint,11,rep,packed,name=white_list,json=whiteList" json:"white_list,omitempty"`
	BlackList  []int32             `protobuf:"varint,12,rep,packed,name=black_list,json=blackList" json:"black_list,omitempty"`
}

func (m *RequestSendMessage) Reset()                    { *m = RequestSendMessage{} }
func (*RequestSendMessage) ProtoMessage()               {}
func (*RequestSendMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{58} }

func (m *RequestSendMessage) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestSendMessage) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestSendMessage) GetMessage() *MessageContent {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *RequestSendMessage) GetIsOnlyForUser() int32 {
	if m != nil {
		return m.IsOnlyForUser
	}
	return 0
}

func (m *RequestSendMessage) GetForward() *ReferencedMessages {
	if m != nil {
		return m.Forward
	}
	return nil
}

func (m *RequestSendMessage) GetReply() *ReferencedMessages {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *RequestSendMessage) GetPredicates() []*SearchPredicate {
	if m != nil {
		return m.Predicates
	}
	return nil
}

func (m *RequestSendMessage) GetWhiteList() []int32 {
	if m != nil {
		return m.WhiteList
	}
	return nil
}

func (m *RequestSendMessage) GetBlackList() []int32 {
	if m != nil {
		return m.BlackList
	}
	return nil
}

// Changing Message content
type RequestUpdateMessage struct {
	Mid            *UUIDValue      `protobuf:"bytes,2,opt,name=mid" json:"mid,omitempty"`
	UpdatedMessage *MessageContent `protobuf:"bytes,3,opt,name=updated_message,json=updatedMessage" json:"updated_message,omitempty"`
	// / Date from this message when it was changed last time
	LastEditedAt int64 `protobuf:"varint,4,opt,name=last_edited_at,json=lastEditedAt,proto3" json:"last_edited_at,omitempty"`
}

func (m *RequestUpdateMessage) Reset()                    { *m = RequestUpdateMessage{} }
func (*RequestUpdateMessage) ProtoMessage()               {}
func (*RequestUpdateMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{59} }

func (m *RequestUpdateMessage) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *RequestUpdateMessage) GetUpdatedMessage() *MessageContent {
	if m != nil {
		return m.UpdatedMessage
	}
	return nil
}

func (m *RequestUpdateMessage) GetLastEditedAt() int64 {
	if m != nil {
		return m.LastEditedAt
	}
	return 0
}

// Confirmation of plain message receive by device
type RequestMessageReceived struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Date int64    `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *RequestMessageReceived) Reset()                    { *m = RequestMessageReceived{} }
func (*RequestMessageReceived) ProtoMessage()               {}
func (*RequestMessageReceived) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{60} }

func (m *RequestMessageReceived) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestMessageReceived) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Marking plain messages as read
type RequestMessageRead struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Date int64    `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *RequestMessageRead) Reset()                    { *m = RequestMessageRead{} }
func (*RequestMessageRead) ProtoMessage()               {}
func (*RequestMessageRead) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{61} }

func (m *RequestMessageRead) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestMessageRead) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Deleting messages
type RequestDeleteMessageObsolete struct {
	Mids []*UUIDValue `protobuf:"bytes,3,rep,name=mids" json:"mids,omitempty"`
}

func (m *RequestDeleteMessageObsolete) Reset()      { *m = RequestDeleteMessageObsolete{} }
func (*RequestDeleteMessageObsolete) ProtoMessage() {}
func (*RequestDeleteMessageObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{62}
}

func (m *RequestDeleteMessageObsolete) GetMids() []*UUIDValue {
	if m != nil {
		return m.Mids
	}
	return nil
}

// Clearing of conversation (without removing dialog from dialogs list)
type RequestClearChat struct {
	Peer            *OutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	LastMessageDate int64    `protobuf:"varint,2,opt,name=last_message_date,json=lastMessageDate,proto3" json:"last_message_date,omitempty"`
}

func (m *RequestClearChat) Reset()                    { *m = RequestClearChat{} }
func (*RequestClearChat) ProtoMessage()               {}
func (*RequestClearChat) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{63} }

func (m *RequestClearChat) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestClearChat) GetLastMessageDate() int64 {
	if m != nil {
		return m.LastMessageDate
	}
	return 0
}

// Deleting of conversation (also leave group for group conversations)
type RequestDeleteChat struct {
	Peer            *OutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	LastMessageDate int64    `protobuf:"varint,2,opt,name=last_message_date,json=lastMessageDate,proto3" json:"last_message_date,omitempty"`
}

func (m *RequestDeleteChat) Reset()                    { *m = RequestDeleteChat{} }
func (*RequestDeleteChat) ProtoMessage()               {}
func (*RequestDeleteChat) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{64} }

func (m *RequestDeleteChat) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestDeleteChat) GetLastMessageDate() int64 {
	if m != nil {
		return m.LastMessageDate
	}
	return 0
}

// Archiving chat
type RequestArchiveChat struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *RequestArchiveChat) Reset()                    { *m = RequestArchiveChat{} }
func (*RequestArchiveChat) ProtoMessage()               {}
func (*RequestArchiveChat) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{65} }

func (m *RequestArchiveChat) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Setting Message reaction
type RequestMessageSetReaction struct {
	Peer *OutPeer   `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Mid  *UUIDValue `protobuf:"bytes,4,opt,name=mid" json:"mid,omitempty"`
	Code string     `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *RequestMessageSetReaction) Reset()      { *m = RequestMessageSetReaction{} }
func (*RequestMessageSetReaction) ProtoMessage() {}
func (*RequestMessageSetReaction) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{66}
}

func (m *RequestMessageSetReaction) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestMessageSetReaction) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *RequestMessageSetReaction) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// Removing Message reaction
type RequestMessageRemoveReaction struct {
	Peer *OutPeer   `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Mid  *UUIDValue `protobuf:"bytes,4,opt,name=mid" json:"mid,omitempty"`
	Code string     `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *RequestMessageRemoveReaction) Reset()      { *m = RequestMessageRemoveReaction{} }
func (*RequestMessageRemoveReaction) ProtoMessage() {}
func (*RequestMessageRemoveReaction) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{67}
}

func (m *RequestMessageRemoveReaction) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestMessageRemoveReaction) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *RequestMessageRemoveReaction) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// Response for reactions change
type ResponseReactionsResponse struct {
	Seq       int32              `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State     []byte             `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Reactions []*MessageReaction `protobuf:"bytes,3,rep,name=reactions" json:"reactions,omitempty"`
}

func (m *ResponseReactionsResponse) Reset()      { *m = ResponseReactionsResponse{} }
func (*ResponseReactionsResponse) ProtoMessage() {}
func (*ResponseReactionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{68}
}

func (m *ResponseReactionsResponse) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseReactionsResponse) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseReactionsResponse) GetReactions() []*MessageReaction {
	if m != nil {
		return m.Reactions
	}
	return nil
}

// Update about plain message
type UpdateMessage struct {
	Peer      *Peer           `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	SenderUid int32           `protobuf:"varint,2,opt,name=sender_uid,json=senderUid,proto3" json:"sender_uid,omitempty"`
	Date      int64           `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	Mid       *UUIDValue      `protobuf:"bytes,8,opt,name=mid" json:"mid,omitempty"`
	Message   *MessageContent `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	// / attributes to help reasoning about message
	Attributes *MessageAttributes `protobuf:"bytes,6,opt,name=attributes" json:"attributes,omitempty"`
	// Types that are valid to be assigned to Attach:
	//	*UpdateMessage_Forward
	//	*UpdateMessage_Reply
	Attach isUpdateMessage_Attach `protobuf_oneof:"attach"`
	// / Message id of previos message from current conversation
	PreviousMid *UUIDValue `protobuf:"bytes,11,opt,name=previous_mid,json=previousMid" json:"previous_mid,omitempty"`
	// / counter of unreads message
	Counter *google_protobuf.Int32Value `protobuf:"bytes,12,opt,name=counter" json:"counter,omitempty"`
}

func (m *UpdateMessage) Reset()                    { *m = UpdateMessage{} }
func (*UpdateMessage) ProtoMessage()               {}
func (*UpdateMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{69} }

type isUpdateMessage_Attach interface {
	isUpdateMessage_Attach()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type UpdateMessage_Forward struct {
	Forward *ReferencedMessages `protobuf:"bytes,9,opt,name=forward,oneof"`
}
type UpdateMessage_Reply struct {
	Reply *ReferencedMessages `protobuf:"bytes,10,opt,name=reply,oneof"`
}

func (*UpdateMessage_Forward) isUpdateMessage_Attach() {}
func (*UpdateMessage_Reply) isUpdateMessage_Attach()   {}

func (m *UpdateMessage) GetAttach() isUpdateMessage_Attach {
	if m != nil {
		return m.Attach
	}
	return nil
}

func (m *UpdateMessage) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateMessage) GetSenderUid() int32 {
	if m != nil {
		return m.SenderUid
	}
	return 0
}

func (m *UpdateMessage) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateMessage) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateMessage) GetMessage() *MessageContent {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *UpdateMessage) GetAttributes() *MessageAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *UpdateMessage) GetForward() *ReferencedMessages {
	if x, ok := m.GetAttach().(*UpdateMessage_Forward); ok {
		return x.Forward
	}
	return nil
}

func (m *UpdateMessage) GetReply() *ReferencedMessages {
	if x, ok := m.GetAttach().(*UpdateMessage_Reply); ok {
		return x.Reply
	}
	return nil
}

func (m *UpdateMessage) GetPreviousMid() *UUIDValue {
	if m != nil {
		return m.PreviousMid
	}
	return nil
}

func (m *UpdateMessage) GetCounter() *google_protobuf.Int32Value {
	if m != nil {
		return m.Counter
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UpdateMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UpdateMessage_OneofMarshaler, _UpdateMessage_OneofUnmarshaler, _UpdateMessage_OneofSizer, []interface{}{
		(*UpdateMessage_Forward)(nil),
		(*UpdateMessage_Reply)(nil),
	}
}

func _UpdateMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UpdateMessage)
	// attach
	switch x := m.Attach.(type) {
	case *UpdateMessage_Forward:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Forward); err != nil {
			return err
		}
	case *UpdateMessage_Reply:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reply); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UpdateMessage.Attach has unexpected type %T", x)
	}
	return nil
}

func _UpdateMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UpdateMessage)
	switch tag {
	case 9: // attach.forward
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferencedMessages)
		err := b.DecodeMessage(msg)
		m.Attach = &UpdateMessage_Forward{msg}
		return true, err
	case 10: // attach.reply
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferencedMessages)
		err := b.DecodeMessage(msg)
		m.Attach = &UpdateMessage_Reply{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UpdateMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UpdateMessage)
	// attach
	switch x := m.Attach.(type) {
	case *UpdateMessage_Forward:
		s := proto.Size(x.Forward)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateMessage_Reply:
		s := proto.Size(x.Reply)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Update about message change
type UpdateMessageContentChanged struct {
	Peer     *Peer           `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Mid      *UUIDValue      `protobuf:"bytes,4,opt,name=mid" json:"mid,omitempty"`
	Message  *MessageContent `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	EditedAt int64           `protobuf:"varint,5,opt,name=edited_at,json=editedAt,proto3" json:"edited_at,omitempty"`
}

func (m *UpdateMessageContentChanged) Reset()      { *m = UpdateMessageContentChanged{} }
func (*UpdateMessageContentChanged) ProtoMessage() {}
func (*UpdateMessageContentChanged) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{70}
}

func (m *UpdateMessageContentChanged) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateMessageContentChanged) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateMessageContentChanged) GetMessage() *MessageContent {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *UpdateMessageContentChanged) GetEditedAt() int64 {
	if m != nil {
		return m.EditedAt
	}
	return 0
}

// Update about message sent
type UpdateMessageSent struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Rid  int64 `protobuf:"varint,2,opt,name=rid,proto3" json:"rid,omitempty"`
	Date int64 `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	// / Message id
	Mid *UUIDValue `protobuf:"bytes,4,opt,name=mid" json:"mid,omitempty"`
	// / Previous message id in current conversation
	PrevMid *UUIDValue `protobuf:"bytes,5,opt,name=prev_mid,json=prevMid" json:"prev_mid,omitempty"`
	// / counter of unread messages
	UnreadCounter *google_protobuf.Int32Value `protobuf:"bytes,6,opt,name=unread_counter,json=unreadCounter" json:"unread_counter,omitempty"`
}

func (m *UpdateMessageSent) Reset()                    { *m = UpdateMessageSent{} }
func (*UpdateMessageSent) ProtoMessage()               {}
func (*UpdateMessageSent) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{71} }

func (m *UpdateMessageSent) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateMessageSent) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *UpdateMessageSent) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateMessageSent) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateMessageSent) GetPrevMid() *UUIDValue {
	if m != nil {
		return m.PrevMid
	}
	return nil
}

func (m *UpdateMessageSent) GetUnreadCounter() *google_protobuf.Int32Value {
	if m != nil {
		return m.UnreadCounter
	}
	return nil
}

// Update about message received
type UpdateMessageReceived struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	// / when message was receive
	StartDate    int64 `protobuf:"varint,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	ReceivedDate int64 `protobuf:"varint,3,opt,name=received_date,json=receivedDate,proto3" json:"received_date,omitempty"`
}

func (m *UpdateMessageReceived) Reset()                    { *m = UpdateMessageReceived{} }
func (*UpdateMessageReceived) ProtoMessage()               {}
func (*UpdateMessageReceived) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{72} }

func (m *UpdateMessageReceived) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateMessageReceived) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *UpdateMessageReceived) GetReceivedDate() int64 {
	if m != nil {
		return m.ReceivedDate
	}
	return 0
}

// Update about message read
type UpdateMessageRead struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	// / when message was read
	StartDate int64 `protobuf:"varint,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	ReadDate  int64 `protobuf:"varint,3,opt,name=read_date,json=readDate,proto3" json:"read_date,omitempty"`
}

func (m *UpdateMessageRead) Reset()                    { *m = UpdateMessageRead{} }
func (*UpdateMessageRead) ProtoMessage()               {}
func (*UpdateMessageRead) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{73} }

func (m *UpdateMessageRead) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateMessageRead) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *UpdateMessageRead) GetReadDate() int64 {
	if m != nil {
		return m.ReadDate
	}
	return 0
}

// Update about message read by me
type UpdateMessageReadByMe struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	// / when message was read
	StartDate int64 `protobuf:"varint,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// / counter of unread messages
	UnreadCounter *google_protobuf.Int32Value `protobuf:"bytes,3,opt,name=unread_counter,json=unreadCounter" json:"unread_counter,omitempty"`
}

func (m *UpdateMessageReadByMe) Reset()                    { *m = UpdateMessageReadByMe{} }
func (*UpdateMessageReadByMe) ProtoMessage()               {}
func (*UpdateMessageReadByMe) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{74} }

func (m *UpdateMessageReadByMe) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateMessageReadByMe) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *UpdateMessageReadByMe) GetUnreadCounter() *google_protobuf.Int32Value {
	if m != nil {
		return m.UnreadCounter
	}
	return nil
}

// Update about message delete
type UpdateMessageDelete struct {
	Peer *Peer        `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Mids []*UUIDValue `protobuf:"bytes,3,rep,name=mids" json:"mids,omitempty"`
	// / counter of unread messages
	Counter *google_protobuf.Int32Value `protobuf:"bytes,4,opt,name=counter" json:"counter,omitempty"`
	// / date? related for this unread counter
	ActionDate int64 `protobuf:"varint,5,opt,name=action_date,json=actionDate,proto3" json:"action_date,omitempty"`
}

func (m *UpdateMessageDelete) Reset()                    { *m = UpdateMessageDelete{} }
func (*UpdateMessageDelete) ProtoMessage()               {}
func (*UpdateMessageDelete) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{75} }

func (m *UpdateMessageDelete) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateMessageDelete) GetMids() []*UUIDValue {
	if m != nil {
		return m.Mids
	}
	return nil
}

func (m *UpdateMessageDelete) GetCounter() *google_protobuf.Int32Value {
	if m != nil {
		return m.Counter
	}
	return nil
}

func (m *UpdateMessageDelete) GetActionDate() int64 {
	if m != nil {
		return m.ActionDate
	}
	return 0
}

// Update about chat clear
type UpdateChatClear struct {
	Peer       *Peer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	ActionDate int64 `protobuf:"varint,2,opt,name=action_date,json=actionDate,proto3" json:"action_date,omitempty"`
}

func (m *UpdateChatClear) Reset()                    { *m = UpdateChatClear{} }
func (*UpdateChatClear) ProtoMessage()               {}
func (*UpdateChatClear) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{76} }

func (m *UpdateChatClear) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateChatClear) GetActionDate() int64 {
	if m != nil {
		return m.ActionDate
	}
	return 0
}

// Update about chat delete
type UpdateChatDelete struct {
	Peer       *Peer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	ActionDate int64 `protobuf:"varint,2,opt,name=action_date,json=actionDate,proto3" json:"action_date,omitempty"`
}

func (m *UpdateChatDelete) Reset()                    { *m = UpdateChatDelete{} }
func (*UpdateChatDelete) ProtoMessage()               {}
func (*UpdateChatDelete) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{77} }

func (m *UpdateChatDelete) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateChatDelete) GetActionDate() int64 {
	if m != nil {
		return m.ActionDate
	}
	return 0
}

// Update about chat archive
type UpdateChatArchive struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *UpdateChatArchive) Reset()                    { *m = UpdateChatArchive{} }
func (*UpdateChatArchive) ProtoMessage()               {}
func (*UpdateChatArchive) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{78} }

func (m *UpdateChatArchive) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Update about chat groups changed. Called only when adding, removing and reordering of grouped dialog.
type UpdateChatGroupsChanged struct {
	Dialogs []*DialogGroup `protobuf:"bytes,1,rep,name=dialogs" json:"dialogs,omitempty"`
}

func (m *UpdateChatGroupsChanged) Reset()      { *m = UpdateChatGroupsChanged{} }
func (*UpdateChatGroupsChanged) ProtoMessage() {}
func (*UpdateChatGroupsChanged) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{79}
}

func (m *UpdateChatGroupsChanged) GetDialogs() []*DialogGroup {
	if m != nil {
		return m.Dialogs
	}
	return nil
}

// Update about reactions change
type UpdateReactionsUpdate struct {
	Peer      *Peer              `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Mid       *UUIDValue         `protobuf:"bytes,4,opt,name=mid" json:"mid,omitempty"`
	Reactions []*MessageReaction `protobuf:"bytes,3,rep,name=reactions" json:"reactions,omitempty"`
}

func (m *UpdateReactionsUpdate) Reset()                    { *m = UpdateReactionsUpdate{} }
func (*UpdateReactionsUpdate) ProtoMessage()               {}
func (*UpdateReactionsUpdate) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{80} }

func (m *UpdateReactionsUpdate) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateReactionsUpdate) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateReactionsUpdate) GetReactions() []*MessageReaction {
	if m != nil {
		return m.Reactions
	}
	return nil
}

// Update about rejection of message send request
type UpdateMessageRejectedByHook struct {
	Peer   *Peer                        `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Rid    int64                        `protobuf:"varint,2,opt,name=rid,proto3" json:"rid,omitempty"`
	Date   int64                        `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	HookId string                       `protobuf:"bytes,4,opt,name=hookId,proto3" json:"hookId,omitempty"`
	Reason *google_protobuf.StringValue `protobuf:"bytes,5,opt,name=reason" json:"reason,omitempty"`
}

func (m *UpdateMessageRejectedByHook) Reset()      { *m = UpdateMessageRejectedByHook{} }
func (*UpdateMessageRejectedByHook) ProtoMessage() {}
func (*UpdateMessageRejectedByHook) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{81}
}

func (m *UpdateMessageRejectedByHook) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateMessageRejectedByHook) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *UpdateMessageRejectedByHook) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateMessageRejectedByHook) GetHookId() string {
	if m != nil {
		return m.HookId
	}
	return ""
}

func (m *UpdateMessageRejectedByHook) GetReason() *google_protobuf.StringValue {
	if m != nil {
		return m.Reason
	}
	return nil
}

// Update about rejection of message update request
type UpdateMessageEditRejectedByHook struct {
	Peer   *Peer                        `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Mid    *UUIDValue                   `protobuf:"bytes,2,opt,name=mid" json:"mid,omitempty"`
	Date   int64                        `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	HookId string                       `protobuf:"bytes,4,opt,name=hookId,proto3" json:"hookId,omitempty"`
	Reason *google_protobuf.StringValue `protobuf:"bytes,5,opt,name=reason" json:"reason,omitempty"`
}

func (m *UpdateMessageEditRejectedByHook) Reset()      { *m = UpdateMessageEditRejectedByHook{} }
func (*UpdateMessageEditRejectedByHook) ProtoMessage() {}
func (*UpdateMessageEditRejectedByHook) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{82}
}

func (m *UpdateMessageEditRejectedByHook) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateMessageEditRejectedByHook) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateMessageEditRejectedByHook) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateMessageEditRejectedByHook) GetHookId() string {
	if m != nil {
		return m.HookId
	}
	return ""
}

func (m *UpdateMessageEditRejectedByHook) GetReason() *google_protobuf.StringValue {
	if m != nil {
		return m.Reason
	}
	return nil
}

// mids Referenced messge ids
type ReferencedMessages struct {
	Mids []*UUIDValue `protobuf:"bytes,1,rep,name=mids" json:"mids,omitempty"`
}

func (m *ReferencedMessages) Reset()                    { *m = ReferencedMessages{} }
func (*ReferencedMessages) ProtoMessage()               {}
func (*ReferencedMessages) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{83} }

func (m *ReferencedMessages) GetMids() []*UUIDValue {
	if m != nil {
		return m.Mids
	}
	return nil
}

// Message from history
type HistoryMessage struct {
	SenderUid  int32    `protobuf:"varint,1,opt,name=sender_uid,json=senderUid,proto3" json:"sender_uid,omitempty"`
	SenderPeer *OutPeer `protobuf:"bytes,15,opt,name=sender_peer,json=senderPeer" json:"sender_peer,omitempty"`
	HostPeer   *OutPeer `protobuf:"bytes,12,opt,name=host_peer,json=hostPeer" json:"host_peer,omitempty"`
	// / Message id generated by server
	Mid       *UUIDValue         `protobuf:"bytes,10,opt,name=mid" json:"mid,omitempty"`
	PrevMid   *UUIDValue         `protobuf:"bytes,17,opt,name=prev_mid,json=prevMid" json:"prev_mid,omitempty"`
	Date      int64              `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	Message   *MessageContent    `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	State     MessageState       `protobuf:"varint,6,opt,name=state,proto3,enum=dialog.MessageState" json:"state,omitempty"`
	Reactions []*MessageReaction `protobuf:"bytes,7,rep,name=reactions" json:"reactions,omitempty"`
	Attribute *MessageAttributes `protobuf:"bytes,8,opt,name=attribute" json:"attribute,omitempty"`
	// Types that are valid to be assigned to Attach:
	//	*HistoryMessage_Forward
	//	*HistoryMessage_Reply
	Attach   isHistoryMessage_Attach     `protobuf_oneof:"attach"`
	EditedAt *google_protobuf.Int64Value `protobuf:"bytes,16,opt,name=edited_at,json=editedAt" json:"edited_at,omitempty"`
}

func (m *HistoryMessage) Reset()                    { *m = HistoryMessage{} }
func (*HistoryMessage) ProtoMessage()               {}
func (*HistoryMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{84} }

type isHistoryMessage_Attach interface {
	isHistoryMessage_Attach()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type HistoryMessage_Forward struct {
	Forward *ReferencedMessages `protobuf:"bytes,13,opt,name=forward,oneof"`
}
type HistoryMessage_Reply struct {
	Reply *ReferencedMessages `protobuf:"bytes,14,opt,name=reply,oneof"`
}

func (*HistoryMessage_Forward) isHistoryMessage_Attach() {}
func (*HistoryMessage_Reply) isHistoryMessage_Attach()   {}

func (m *HistoryMessage) GetAttach() isHistoryMessage_Attach {
	if m != nil {
		return m.Attach
	}
	return nil
}

func (m *HistoryMessage) GetSenderUid() int32 {
	if m != nil {
		return m.SenderUid
	}
	return 0
}

func (m *HistoryMessage) GetSenderPeer() *OutPeer {
	if m != nil {
		return m.SenderPeer
	}
	return nil
}

func (m *HistoryMessage) GetHostPeer() *OutPeer {
	if m != nil {
		return m.HostPeer
	}
	return nil
}

func (m *HistoryMessage) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *HistoryMessage) GetPrevMid() *UUIDValue {
	if m != nil {
		return m.PrevMid
	}
	return nil
}

func (m *HistoryMessage) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *HistoryMessage) GetMessage() *MessageContent {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *HistoryMessage) GetState() MessageState {
	if m != nil {
		return m.State
	}
	return MESSAGESTATE_UNKNOWN
}

func (m *HistoryMessage) GetReactions() []*MessageReaction {
	if m != nil {
		return m.Reactions
	}
	return nil
}

func (m *HistoryMessage) GetAttribute() *MessageAttributes {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (m *HistoryMessage) GetForward() *ReferencedMessages {
	if x, ok := m.GetAttach().(*HistoryMessage_Forward); ok {
		return x.Forward
	}
	return nil
}

func (m *HistoryMessage) GetReply() *ReferencedMessages {
	if x, ok := m.GetAttach().(*HistoryMessage_Reply); ok {
		return x.Reply
	}
	return nil
}

func (m *HistoryMessage) GetEditedAt() *google_protobuf.Int64Value {
	if m != nil {
		return m.EditedAt
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HistoryMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HistoryMessage_OneofMarshaler, _HistoryMessage_OneofUnmarshaler, _HistoryMessage_OneofSizer, []interface{}{
		(*HistoryMessage_Forward)(nil),
		(*HistoryMessage_Reply)(nil),
	}
}

func _HistoryMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HistoryMessage)
	// attach
	switch x := m.Attach.(type) {
	case *HistoryMessage_Forward:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Forward); err != nil {
			return err
		}
	case *HistoryMessage_Reply:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reply); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HistoryMessage.Attach has unexpected type %T", x)
	}
	return nil
}

func _HistoryMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HistoryMessage)
	switch tag {
	case 13: // attach.forward
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferencedMessages)
		err := b.DecodeMessage(msg)
		m.Attach = &HistoryMessage_Forward{msg}
		return true, err
	case 14: // attach.reply
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReferencedMessages)
		err := b.DecodeMessage(msg)
		m.Attach = &HistoryMessage_Reply{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HistoryMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HistoryMessage)
	// attach
	switch x := m.Attach.(type) {
	case *HistoryMessage_Forward:
		s := proto.Size(x.Forward)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HistoryMessage_Reply:
		s := proto.Size(x.Reply)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Loading history of chat
type RequestLoadHistory struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Date int64    `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	// / forward, backward or both
	LoadMode      ListLoadMode         `protobuf:"varint,5,opt,name=load_mode,json=loadMode,proto3,enum=dialog.ListLoadMode" json:"load_mode,omitempty"`
	Limit         int32                `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,6,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestLoadHistory) Reset()                    { *m = RequestLoadHistory{} }
func (*RequestLoadHistory) ProtoMessage()               {}
func (*RequestLoadHistory) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{85} }

func (m *RequestLoadHistory) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestLoadHistory) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *RequestLoadHistory) GetLoadMode() ListLoadMode {
	if m != nil {
		return m.LoadMode
	}
	return LISTLOADMODE_UNKNOWN
}

func (m *RequestLoadHistory) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RequestLoadHistory) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type ResponseLoadHistory struct {
	History    []*HistoryMessage `protobuf:"bytes,1,rep,name=history" json:"history,omitempty"`
	Users      []*User           `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	UserPeers  []*UserOutPeer    `protobuf:"bytes,4,rep,name=user_peers,json=userPeers" json:"user_peers,omitempty"`
	Groups     []*Group          `protobuf:"bytes,5,rep,name=groups" json:"groups,omitempty"`
	GroupPeers []*GroupOutPeer   `protobuf:"bytes,6,rep,name=group_peers,json=groupPeers" json:"group_peers,omitempty"`
	// / counter of unread messages
	Counter *google_protobuf.Int32Value `protobuf:"bytes,7,opt,name=counter" json:"counter,omitempty"`
	// / date, related to this unread counter
	CounterDate int64 `protobuf:"varint,8,opt,name=counter_date,json=counterDate,proto3" json:"counter_date,omitempty"`
}

func (m *ResponseLoadHistory) Reset()                    { *m = ResponseLoadHistory{} }
func (*ResponseLoadHistory) ProtoMessage()               {}
func (*ResponseLoadHistory) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{86} }

func (m *ResponseLoadHistory) GetHistory() []*HistoryMessage {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *ResponseLoadHistory) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseLoadHistory) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

func (m *ResponseLoadHistory) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ResponseLoadHistory) GetGroupPeers() []*GroupOutPeer {
	if m != nil {
		return m.GroupPeers
	}
	return nil
}

func (m *ResponseLoadHistory) GetCounter() *google_protobuf.Int32Value {
	if m != nil {
		return m.Counter
	}
	return nil
}

func (m *ResponseLoadHistory) GetCounterDate() int64 {
	if m != nil {
		return m.CounterDate
	}
	return 0
}

// Conversation from history
// peer
// unreadCount
// sortDate date of conversation for sorting
// senderUid Sender of top message (may be zero)
// isFavourite Is dialog favourite
// rid Random ID of top message (may be zero)
// mid Message id
// date Date of top message (can't be zero)
// message Content of message
// firstUnreadDate Date of first unread message
// attributes Optional top message attributes
// pinnedMessages Optional pinned messages
// historyMessage Optional last messages
type Dialog struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	// / counter of unread messages
	UnreadCount int32                      `protobuf:"varint,3,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	SortDate    int64                      `protobuf:"varint,4,opt,name=sort_date,json=sortDate,proto3" json:"sort_date,omitempty"`
	SenderUid   int32                      `protobuf:"varint,5,opt,name=sender_uid,json=senderUid,proto3" json:"sender_uid,omitempty"`
	IsFavourite *google_protobuf.BoolValue `protobuf:"bytes,13,opt,name=is_favourite,json=isFavourite" json:"is_favourite,omitempty"`
	// / Message id
	Mid *UUIDValue `protobuf:"bytes,12,opt,name=mid" json:"mid,omitempty"`
	// / last action date
	Date int64 `protobuf:"varint,7,opt,name=date,proto3" json:"date,omitempty"`
	// / last message content
	Message         *MessageContent    `protobuf:"bytes,8,opt,name=message" json:"message,omitempty"`
	State           MessageState       `protobuf:"varint,9,opt,name=state,proto3,enum=dialog.MessageState" json:"state,omitempty"`
	FirstUnreadDate int64              `protobuf:"varint,10,opt,name=first_unread_date,json=firstUnreadDate,proto3" json:"first_unread_date,omitempty"`
	Attributes      *MessageAttributes `protobuf:"bytes,11,opt,name=attributes" json:"attributes,omitempty"`
	PinnedMessages  *PinnedMessages    `protobuf:"bytes,14,opt,name=pinned_messages,json=pinnedMessages" json:"pinned_messages,omitempty"`
	// / last message in this dialog
	HistoryMessage *HistoryMessage `protobuf:"bytes,15,opt,name=history_message,json=historyMessage" json:"history_message,omitempty"`
}

func (m *Dialog) Reset()                    { *m = Dialog{} }
func (*Dialog) ProtoMessage()               {}
func (*Dialog) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{87} }

func (m *Dialog) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *Dialog) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *Dialog) GetSortDate() int64 {
	if m != nil {
		return m.SortDate
	}
	return 0
}

func (m *Dialog) GetSenderUid() int32 {
	if m != nil {
		return m.SenderUid
	}
	return 0
}

func (m *Dialog) GetIsFavourite() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsFavourite
	}
	return nil
}

func (m *Dialog) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *Dialog) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *Dialog) GetMessage() *MessageContent {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Dialog) GetState() MessageState {
	if m != nil {
		return m.State
	}
	return MESSAGESTATE_UNKNOWN
}

func (m *Dialog) GetFirstUnreadDate() int64 {
	if m != nil {
		return m.FirstUnreadDate
	}
	return 0
}

func (m *Dialog) GetAttributes() *MessageAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Dialog) GetPinnedMessages() *PinnedMessages {
	if m != nil {
		return m.PinnedMessages
	}
	return nil
}

func (m *Dialog) GetHistoryMessage() *HistoryMessage {
	if m != nil {
		return m.HistoryMessage
	}
	return nil
}

// Loading conversation history
type RequestLoadDialogs struct {
	MinDate       int64                `protobuf:"varint,1,opt,name=min_date,json=minDate,proto3" json:"min_date,omitempty"`
	Limit         int32                `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,3,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
	Filters       []DialogsFilter      `protobuf:"varint,4,rep,packed,name=filters,enum=dialog.DialogsFilter" json:"filters,omitempty"`
	PeersToLoad   []*Peer              `protobuf:"bytes,5,rep,name=peers_to_load,json=peersToLoad" json:"peers_to_load,omitempty"`
}

func (m *RequestLoadDialogs) Reset()                    { *m = RequestLoadDialogs{} }
func (*RequestLoadDialogs) ProtoMessage()               {}
func (*RequestLoadDialogs) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{88} }

func (m *RequestLoadDialogs) GetMinDate() int64 {
	if m != nil {
		return m.MinDate
	}
	return 0
}

func (m *RequestLoadDialogs) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RequestLoadDialogs) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

func (m *RequestLoadDialogs) GetFilters() []DialogsFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *RequestLoadDialogs) GetPeersToLoad() []*Peer {
	if m != nil {
		return m.PeersToLoad
	}
	return nil
}

// / Contains dialogs and related peers and entities
type ResponseLoadDialogs struct {
	Groups     []*Group        `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
	Users      []*User         `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	Dialogs    []*Dialog       `protobuf:"bytes,3,rep,name=dialogs" json:"dialogs,omitempty"`
	UserPeers  []*UserOutPeer  `protobuf:"bytes,4,rep,name=user_peers,json=userPeers" json:"user_peers,omitempty"`
	GroupPeers []*GroupOutPeer `protobuf:"bytes,5,rep,name=group_peers,json=groupPeers" json:"group_peers,omitempty"`
}

func (m *ResponseLoadDialogs) Reset()                    { *m = ResponseLoadDialogs{} }
func (*ResponseLoadDialogs) ProtoMessage()               {}
func (*ResponseLoadDialogs) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{89} }

func (m *ResponseLoadDialogs) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ResponseLoadDialogs) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseLoadDialogs) GetDialogs() []*Dialog {
	if m != nil {
		return m.Dialogs
	}
	return nil
}

func (m *ResponseLoadDialogs) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

func (m *ResponseLoadDialogs) GetGroupPeers() []*GroupOutPeer {
	if m != nil {
		return m.GroupPeers
	}
	return nil
}

// Dialog index from history. Used in client side pagination
type DialogIndex struct {
	// / The peer for the conversation
	Peer *Peer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	// / The timestamp for the top message
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *DialogIndex) Reset()                    { *m = DialogIndex{} }
func (*DialogIndex) ProtoMessage()               {}
func (*DialogIndex) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{90} }

func (m *DialogIndex) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *DialogIndex) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// *
// Fetches dialog index (short info about all user's dialogs).
// Used in client side pagination.
type RequestFetchDialogIndex struct {
}

func (m *RequestFetchDialogIndex) Reset()      { *m = RequestFetchDialogIndex{} }
func (*RequestFetchDialogIndex) ProtoMessage() {}
func (*RequestFetchDialogIndex) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{91}
}

type ResponseFetchDialogIndex struct {
	DialogIndices []*DialogIndex `protobuf:"bytes,1,rep,name=dialog_indices,json=dialogIndices" json:"dialog_indices,omitempty"`
}

func (m *ResponseFetchDialogIndex) Reset()      { *m = ResponseFetchDialogIndex{} }
func (*ResponseFetchDialogIndex) ProtoMessage() {}
func (*ResponseFetchDialogIndex) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{92}
}

func (m *ResponseFetchDialogIndex) GetDialogIndices() []*DialogIndex {
	if m != nil {
		return m.DialogIndices
	}
	return nil
}

// Loading archived messages - deprecated
type RequestLoadArchived struct {
	NextOffset    *google_protobuf.BytesValue `protobuf:"bytes,1,opt,name=next_offset,json=nextOffset" json:"next_offset,omitempty"`
	Limit         int32                       `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Optimizations []UpdateOptimization        `protobuf:"varint,3,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestLoadArchived) Reset()                    { *m = RequestLoadArchived{} }
func (*RequestLoadArchived) ProtoMessage()               {}
func (*RequestLoadArchived) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{93} }

func (m *RequestLoadArchived) GetNextOffset() *google_protobuf.BytesValue {
	if m != nil {
		return m.NextOffset
	}
	return nil
}

func (m *RequestLoadArchived) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RequestLoadArchived) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// / deprecated
type ResponseLoadArchived struct {
	Groups     []*Group                    `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
	Users      []*User                     `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	Dialogs    []*Dialog                   `protobuf:"bytes,3,rep,name=dialogs" json:"dialogs,omitempty"`
	UserPeers  []*UserOutPeer              `protobuf:"bytes,5,rep,name=user_peers,json=userPeers" json:"user_peers,omitempty"`
	GroupPeers []*GroupOutPeer             `protobuf:"bytes,6,rep,name=group_peers,json=groupPeers" json:"group_peers,omitempty"`
	NextOffset *google_protobuf.BytesValue `protobuf:"bytes,4,opt,name=next_offset,json=nextOffset" json:"next_offset,omitempty"`
}

func (m *ResponseLoadArchived) Reset()                    { *m = ResponseLoadArchived{} }
func (*ResponseLoadArchived) ProtoMessage()               {}
func (*ResponseLoadArchived) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{94} }

func (m *ResponseLoadArchived) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ResponseLoadArchived) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseLoadArchived) GetDialogs() []*Dialog {
	if m != nil {
		return m.Dialogs
	}
	return nil
}

func (m *ResponseLoadArchived) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

func (m *ResponseLoadArchived) GetGroupPeers() []*GroupOutPeer {
	if m != nil {
		return m.GroupPeers
	}
	return nil
}

func (m *ResponseLoadArchived) GetNextOffset() *google_protobuf.BytesValue {
	if m != nil {
		return m.NextOffset
	}
	return nil
}

// Load all dialogs from grouped list - deprecated
type RequestLoadGroupedDialogs struct {
	Optimizations []UpdateOptimization `protobuf:"varint,1,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestLoadGroupedDialogs) Reset()      { *m = RequestLoadGroupedDialogs{} }
func (*RequestLoadGroupedDialogs) ProtoMessage() {}
func (*RequestLoadGroupedDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{95}
}

func (m *RequestLoadGroupedDialogs) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// / deprecated
type ResponseLoadGroupedDialogs struct {
	Dialogs      []*DialogGroup             `protobuf:"bytes,1,rep,name=dialogs" json:"dialogs,omitempty"`
	Users        []*User                    `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	Groups       []*Group                   `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
	ShowArchived *google_protobuf.BoolValue `protobuf:"bytes,4,opt,name=show_archived,json=showArchived" json:"show_archived,omitempty"`
	ShowInvite   *google_protobuf.BoolValue `protobuf:"bytes,5,opt,name=show_invite,json=showInvite" json:"show_invite,omitempty"`
	UserPeers    []*UserOutPeer             `protobuf:"bytes,6,rep,name=user_peers,json=userPeers" json:"user_peers,omitempty"`
	GroupPeers   []*GroupOutPeer            `protobuf:"bytes,7,rep,name=group_peers,json=groupPeers" json:"group_peers,omitempty"`
}

func (m *ResponseLoadGroupedDialogs) Reset()      { *m = ResponseLoadGroupedDialogs{} }
func (*ResponseLoadGroupedDialogs) ProtoMessage() {}
func (*ResponseLoadGroupedDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{96}
}

func (m *ResponseLoadGroupedDialogs) GetDialogs() []*DialogGroup {
	if m != nil {
		return m.Dialogs
	}
	return nil
}

func (m *ResponseLoadGroupedDialogs) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseLoadGroupedDialogs) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ResponseLoadGroupedDialogs) GetShowArchived() *google_protobuf.BoolValue {
	if m != nil {
		return m.ShowArchived
	}
	return nil
}

func (m *ResponseLoadGroupedDialogs) GetShowInvite() *google_protobuf.BoolValue {
	if m != nil {
		return m.ShowInvite
	}
	return nil
}

func (m *ResponseLoadGroupedDialogs) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

func (m *ResponseLoadGroupedDialogs) GetGroupPeers() []*GroupOutPeer {
	if m != nil {
		return m.GroupPeers
	}
	return nil
}

// Dialogs order response - deprecated
type ResponseDialogsOrder struct {
	Seq    int32          `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State  []byte         `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Groups []*DialogGroup `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
}

func (m *ResponseDialogsOrder) Reset()                    { *m = ResponseDialogsOrder{} }
func (*ResponseDialogsOrder) ProtoMessage()               {}
func (*ResponseDialogsOrder) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{97} }

func (m *ResponseDialogsOrder) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseDialogsOrder) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseDialogsOrder) GetGroups() []*DialogGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Hide Dialog from grouped list
type RequestHideDialog struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *RequestHideDialog) Reset()                    { *m = RequestHideDialog{} }
func (*RequestHideDialog) ProtoMessage()               {}
func (*RequestHideDialog) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{98} }

func (m *RequestHideDialog) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Show Dialog in grouped list
type RequestShowDialog struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *RequestShowDialog) Reset()                    { *m = RequestShowDialog{} }
func (*RequestShowDialog) ProtoMessage()               {}
func (*RequestShowDialog) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{99} }

func (m *RequestShowDialog) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Marking dialog as favourite
type RequestFavouriteDialog struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *RequestFavouriteDialog) Reset()      { *m = RequestFavouriteDialog{} }
func (*RequestFavouriteDialog) ProtoMessage() {}
func (*RequestFavouriteDialog) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{100}
}

func (m *RequestFavouriteDialog) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Making dialog as unfavourite
type RequestUnfavouriteDialog struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *RequestUnfavouriteDialog) Reset()      { *m = RequestUnfavouriteDialog{} }
func (*RequestUnfavouriteDialog) ProtoMessage() {}
func (*RequestUnfavouriteDialog) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{101}
}

func (m *RequestUnfavouriteDialog) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Update about dialog favourite changed
type UpdateDialogFavouriteChanged struct {
	Peer        *Peer                      `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	IsFavourite *google_protobuf.BoolValue `protobuf:"bytes,2,opt,name=is_favourite,json=isFavourite" json:"is_favourite,omitempty"`
}

func (m *UpdateDialogFavouriteChanged) Reset()      { *m = UpdateDialogFavouriteChanged{} }
func (*UpdateDialogFavouriteChanged) ProtoMessage() {}
func (*UpdateDialogFavouriteChanged) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{102}
}

func (m *UpdateDialogFavouriteChanged) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateDialogFavouriteChanged) GetIsFavourite() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsFavourite
	}
	return nil
}

// Notifying about dialog open
type RequestNotifyDialogOpened struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *RequestNotifyDialogOpened) Reset()      { *m = RequestNotifyDialogOpened{} }
func (*RequestNotifyDialogOpened) ProtoMessage() {}
func (*RequestNotifyDialogOpened) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{103}
}

func (m *RequestNotifyDialogOpened) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Pinned messages
type PinnedMessages struct {
	// / Messages ids
	Mids []*UUIDValue `protobuf:"bytes,1,rep,name=mids" json:"mids,omitempty"`
}

func (m *PinnedMessages) Reset()                    { *m = PinnedMessages{} }
func (*PinnedMessages) ProtoMessage()               {}
func (*PinnedMessages) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{104} }

func (m *PinnedMessages) GetMids() []*UUIDValue {
	if m != nil {
		return m.Mids
	}
	return nil
}

// Pin message in conversation
type RequestPinMessage struct {
	Peer        *OutPeer   `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Mid         *UUIDValue `protobuf:"bytes,2,opt,name=mid" json:"mid,omitempty"`
	LastPinDate int64      `protobuf:"varint,3,opt,name=last_pin_date,json=lastPinDate,proto3" json:"last_pin_date,omitempty"`
}

func (m *RequestPinMessage) Reset()                    { *m = RequestPinMessage{} }
func (*RequestPinMessage) ProtoMessage()               {}
func (*RequestPinMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{105} }

func (m *RequestPinMessage) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestPinMessage) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *RequestPinMessage) GetLastPinDate() int64 {
	if m != nil {
		return m.LastPinDate
	}
	return 0
}

// Unpin message in conversation
type RequestUnpinMessage struct {
	Peer        *OutPeer   `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Mid         *UUIDValue `protobuf:"bytes,2,opt,name=mid" json:"mid,omitempty"`
	LastPinDate int64      `protobuf:"varint,3,opt,name=last_pin_date,json=lastPinDate,proto3" json:"last_pin_date,omitempty"`
}

func (m *RequestUnpinMessage) Reset()                    { *m = RequestUnpinMessage{} }
func (*RequestUnpinMessage) ProtoMessage()               {}
func (*RequestUnpinMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessaging, []int{106} }

func (m *RequestUnpinMessage) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestUnpinMessage) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *RequestUnpinMessage) GetLastPinDate() int64 {
	if m != nil {
		return m.LastPinDate
	}
	return 0
}

// Update about pinned messages changed in conversation
type UpdatePinnedMessagesChanged struct {
	Peer           *Peer           `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	PinnedMessages *PinnedMessages `protobuf:"bytes,2,opt,name=pinned_messages,json=pinnedMessages" json:"pinned_messages,omitempty"`
	ActionDate     int64           `protobuf:"varint,3,opt,name=action_date,json=actionDate,proto3" json:"action_date,omitempty"`
}

func (m *UpdatePinnedMessagesChanged) Reset()      { *m = UpdatePinnedMessagesChanged{} }
func (*UpdatePinnedMessagesChanged) ProtoMessage() {}
func (*UpdatePinnedMessagesChanged) Descriptor() ([]byte, []int) {
	return fileDescriptorMessaging, []int{107}
}

func (m *UpdatePinnedMessagesChanged) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdatePinnedMessagesChanged) GetPinnedMessages() *PinnedMessages {
	if m != nil {
		return m.PinnedMessages
	}
	return nil
}

func (m *UpdatePinnedMessagesChanged) GetActionDate() int64 {
	if m != nil {
		return m.ActionDate
	}
	return 0
}

func init() {
	proto.RegisterType((*MessageAttributes)(nil), "dialog.MessageAttributes")
	proto.RegisterType((*QuotedMessage)(nil), "dialog.QuotedMessage")
	proto.RegisterType((*MessageMedia)(nil), "dialog.MessageMedia")
	proto.RegisterType((*WebpageMedia)(nil), "dialog.WebpageMedia")
	proto.RegisterType((*ImageMedia)(nil), "dialog.ImageMedia")
	proto.RegisterType((*AudioMedia)(nil), "dialog.AudioMedia")
	proto.RegisterType((*InteractiveMediaWidget)(nil), "dialog.InteractiveMediaWidget")
	proto.RegisterType((*InteractiveMediaButton)(nil), "dialog.InteractiveMediaButton")
	proto.RegisterType((*InteractiveMediaSelect)(nil), "dialog.InteractiveMediaSelect")
	proto.RegisterType((*InteractiveMediaSelectOption)(nil), "dialog.InteractiveMediaSelectOption")
	proto.RegisterType((*InteractiveMedia)(nil), "dialog.InteractiveMedia")
	proto.RegisterType((*InteractiveMediaTranslation)(nil), "dialog.InteractiveMediaTranslation")
	proto.RegisterType((*InteractiveMediaTranslationGroup)(nil), "dialog.InteractiveMediaTranslationGroup")
	proto.RegisterType((*InteractiveMediaGroup)(nil), "dialog.InteractiveMediaGroup")
	proto.RegisterType((*InteractiveMediaConfirm)(nil), "dialog.InteractiveMediaConfirm")
	proto.RegisterType((*UpdateInteractiveMediaEvent)(nil), "dialog.UpdateInteractiveMediaEvent")
	proto.RegisterType((*RequestDoInteractiveMediaAction)(nil), "dialog.RequestDoInteractiveMediaAction")
	proto.RegisterType((*MessageContent)(nil), "dialog.MessageContent")
	proto.RegisterType((*TextMessage)(nil), "dialog.TextMessage")
	proto.RegisterType((*TextMessageEx)(nil), "dialog.TextMessageEx")
	proto.RegisterType((*TextExMarkdown)(nil), "dialog.TextExMarkdown")
	proto.RegisterType((*TextModernMessage)(nil), "dialog.TextModernMessage")
	proto.RegisterType((*ParagraphStyle)(nil), "dialog.ParagraphStyle")
	proto.RegisterType((*TextModernAttach)(nil), "dialog.TextModernAttach")
	proto.RegisterType((*TextModernField)(nil), "dialog.TextModernField")
	proto.RegisterType((*TextCommand)(nil), "dialog.TextCommand")
	proto.RegisterType((*ServiceMessage)(nil), "dialog.ServiceMessage")
	proto.RegisterType((*ServiceEx)(nil), "dialog.ServiceEx")
	proto.RegisterType((*ServiceExUserInvited)(nil), "dialog.ServiceExUserInvited")
	proto.RegisterType((*ServiceExUserJoined)(nil), "dialog.ServiceExUserJoined")
	proto.RegisterType((*ServiceExUserKicked)(nil), "dialog.ServiceExUserKicked")
	proto.RegisterType((*ServiceExUserLeft)(nil), "dialog.ServiceExUserLeft")
	proto.RegisterType((*ServiceExGroupCreated)(nil), "dialog.ServiceExGroupCreated")
	proto.RegisterType((*ServiceExChangedTitle)(nil), "dialog.ServiceExChangedTitle")
	proto.RegisterType((*ServiceExChangedTopic)(nil), "dialog.ServiceExChangedTopic")
	proto.RegisterType((*ServiceExChangedAbout)(nil), "dialog.ServiceExChangedAbout")
	proto.RegisterType((*ServiceExChangedAvatar)(nil), "dialog.ServiceExChangedAvatar")
	proto.RegisterType((*ServiceExContactRegistered)(nil), "dialog.ServiceExContactRegistered")
	proto.RegisterType((*ServiceExPhoneMissed)(nil), "dialog.ServiceExPhoneMissed")
	proto.RegisterType((*ServiceExPhoneCall)(nil), "dialog.ServiceExPhoneCall")
	proto.RegisterType((*ServiceExPhoneRejected)(nil), "dialog.ServiceExPhoneRejected")
	proto.RegisterType((*ServiceExChatArchived)(nil), "dialog.ServiceExChatArchived")
	proto.RegisterType((*ServiceExChatRestored)(nil), "dialog.ServiceExChatRestored")
	proto.RegisterType((*DocumentMessage)(nil), "dialog.DocumentMessage")
	proto.RegisterType((*DocumentEx)(nil), "dialog.DocumentEx")
	proto.RegisterType((*DocumentExPhoto)(nil), "dialog.DocumentExPhoto")
	proto.RegisterType((*DocumentExVideo)(nil), "dialog.DocumentExVideo")
	proto.RegisterType((*DocumentExVoice)(nil), "dialog.DocumentExVoice")
	proto.RegisterType((*JsonMessage)(nil), "dialog.JsonMessage")
	proto.RegisterType((*UnsupportedMessage)(nil), "dialog.UnsupportedMessage")
	proto.RegisterType((*StickerMessage)(nil), "dialog.StickerMessage")
	proto.RegisterType((*BinaryMessage)(nil), "dialog.BinaryMessage")
	proto.RegisterType((*EmptyMessage)(nil), "dialog.EmptyMessage")
	proto.RegisterType((*DeletedMessage)(nil), "dialog.DeletedMessage")
	proto.RegisterType((*DialogShort)(nil), "dialog.DialogShort")
	proto.RegisterType((*DialogGroup)(nil), "dialog.DialogGroup")
	proto.RegisterType((*MessageReaction)(nil), "dialog.MessageReaction")
	proto.RegisterType((*SearchPredicate)(nil), "dialog.SearchPredicate")
	proto.RegisterType((*RequestSendMessage)(nil), "dialog.RequestSendMessage")
	proto.RegisterType((*RequestUpdateMessage)(nil), "dialog.RequestUpdateMessage")
	proto.RegisterType((*RequestMessageReceived)(nil), "dialog.RequestMessageReceived")
	proto.RegisterType((*RequestMessageRead)(nil), "dialog.RequestMessageRead")
	proto.RegisterType((*RequestDeleteMessageObsolete)(nil), "dialog.RequestDeleteMessageObsolete")
	proto.RegisterType((*RequestClearChat)(nil), "dialog.RequestClearChat")
	proto.RegisterType((*RequestDeleteChat)(nil), "dialog.RequestDeleteChat")
	proto.RegisterType((*RequestArchiveChat)(nil), "dialog.RequestArchiveChat")
	proto.RegisterType((*RequestMessageSetReaction)(nil), "dialog.RequestMessageSetReaction")
	proto.RegisterType((*RequestMessageRemoveReaction)(nil), "dialog.RequestMessageRemoveReaction")
	proto.RegisterType((*ResponseReactionsResponse)(nil), "dialog.ResponseReactionsResponse")
	proto.RegisterType((*UpdateMessage)(nil), "dialog.UpdateMessage")
	proto.RegisterType((*UpdateMessageContentChanged)(nil), "dialog.UpdateMessageContentChanged")
	proto.RegisterType((*UpdateMessageSent)(nil), "dialog.UpdateMessageSent")
	proto.RegisterType((*UpdateMessageReceived)(nil), "dialog.UpdateMessageReceived")
	proto.RegisterType((*UpdateMessageRead)(nil), "dialog.UpdateMessageRead")
	proto.RegisterType((*UpdateMessageReadByMe)(nil), "dialog.UpdateMessageReadByMe")
	proto.RegisterType((*UpdateMessageDelete)(nil), "dialog.UpdateMessageDelete")
	proto.RegisterType((*UpdateChatClear)(nil), "dialog.UpdateChatClear")
	proto.RegisterType((*UpdateChatDelete)(nil), "dialog.UpdateChatDelete")
	proto.RegisterType((*UpdateChatArchive)(nil), "dialog.UpdateChatArchive")
	proto.RegisterType((*UpdateChatGroupsChanged)(nil), "dialog.UpdateChatGroupsChanged")
	proto.RegisterType((*UpdateReactionsUpdate)(nil), "dialog.UpdateReactionsUpdate")
	proto.RegisterType((*UpdateMessageRejectedByHook)(nil), "dialog.UpdateMessageRejectedByHook")
	proto.RegisterType((*UpdateMessageEditRejectedByHook)(nil), "dialog.UpdateMessageEditRejectedByHook")
	proto.RegisterType((*ReferencedMessages)(nil), "dialog.ReferencedMessages")
	proto.RegisterType((*HistoryMessage)(nil), "dialog.HistoryMessage")
	proto.RegisterType((*RequestLoadHistory)(nil), "dialog.RequestLoadHistory")
	proto.RegisterType((*ResponseLoadHistory)(nil), "dialog.ResponseLoadHistory")
	proto.RegisterType((*Dialog)(nil), "dialog.Dialog")
	proto.RegisterType((*RequestLoadDialogs)(nil), "dialog.RequestLoadDialogs")
	proto.RegisterType((*ResponseLoadDialogs)(nil), "dialog.ResponseLoadDialogs")
	proto.RegisterType((*DialogIndex)(nil), "dialog.DialogIndex")
	proto.RegisterType((*RequestFetchDialogIndex)(nil), "dialog.RequestFetchDialogIndex")
	proto.RegisterType((*ResponseFetchDialogIndex)(nil), "dialog.ResponseFetchDialogIndex")
	proto.RegisterType((*RequestLoadArchived)(nil), "dialog.RequestLoadArchived")
	proto.RegisterType((*ResponseLoadArchived)(nil), "dialog.ResponseLoadArchived")
	proto.RegisterType((*RequestLoadGroupedDialogs)(nil), "dialog.RequestLoadGroupedDialogs")
	proto.RegisterType((*ResponseLoadGroupedDialogs)(nil), "dialog.ResponseLoadGroupedDialogs")
	proto.RegisterType((*ResponseDialogsOrder)(nil), "dialog.ResponseDialogsOrder")
	proto.RegisterType((*RequestHideDialog)(nil), "dialog.RequestHideDialog")
	proto.RegisterType((*RequestShowDialog)(nil), "dialog.RequestShowDialog")
	proto.RegisterType((*RequestFavouriteDialog)(nil), "dialog.RequestFavouriteDialog")
	proto.RegisterType((*RequestUnfavouriteDialog)(nil), "dialog.RequestUnfavouriteDialog")
	proto.RegisterType((*UpdateDialogFavouriteChanged)(nil), "dialog.UpdateDialogFavouriteChanged")
	proto.RegisterType((*RequestNotifyDialogOpened)(nil), "dialog.RequestNotifyDialogOpened")
	proto.RegisterType((*PinnedMessages)(nil), "dialog.PinnedMessages")
	proto.RegisterType((*RequestPinMessage)(nil), "dialog.RequestPinMessage")
	proto.RegisterType((*RequestUnpinMessage)(nil), "dialog.RequestUnpinMessage")
	proto.RegisterType((*UpdatePinnedMessagesChanged)(nil), "dialog.UpdatePinnedMessagesChanged")
	proto.RegisterEnum("dialog.InteractiveMediaStyle", InteractiveMediaStyle_name, InteractiveMediaStyle_value)
	proto.RegisterEnum("dialog.MessageState", MessageState_name, MessageState_value)
	proto.RegisterEnum("dialog.ListLoadMode", ListLoadMode_name, ListLoadMode_value)
	proto.RegisterEnum("dialog.DialogsFilter", DialogsFilter_name, DialogsFilter_value)
}
func (x InteractiveMediaStyle) String() string {
	s, ok := InteractiveMediaStyle_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MessageState) String() string {
	s, ok := MessageState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ListLoadMode) String() string {
	s, ok := ListLoadMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DialogsFilter) String() string {
	s, ok := DialogsFilter_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MessageAttributes) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageAttributes)
	if !ok {
		that2, ok := that.(MessageAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.IsMentioned.Equal(that1.IsMentioned) {
		return false
	}
	if !this.IsHighlighted.Equal(that1.IsHighlighted) {
		return false
	}
	if !this.IsNotified.Equal(that1.IsNotified) {
		return false
	}
	if !this.IsOnlyForYou.Equal(that1.IsOnlyForYou) {
		return false
	}
	return true
}
func (this *QuotedMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QuotedMessage)
	if !ok {
		that2, ok := that.(QuotedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MessageId != that1.MessageId {
		return false
	}
	if this.PublicGroupId != that1.PublicGroupId {
		return false
	}
	if this.SenderUserId != that1.SenderUserId {
		return false
	}
	if this.MessageDate != that1.MessageDate {
		return false
	}
	if !this.QuotedMessageContent.Equal(that1.QuotedMessageContent) {
		return false
	}
	return true
}
func (this *MessageMedia) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageMedia)
	if !ok {
		that2, ok := that.(MessageMedia)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Webpage.Equal(that1.Webpage) {
		return false
	}
	if !this.Image.Equal(that1.Image) {
		return false
	}
	if !this.Audio.Equal(that1.Audio) {
		return false
	}
	if len(this.Actions) != len(that1.Actions) {
		return false
	}
	for i := range this.Actions {
		if !this.Actions[i].Equal(that1.Actions[i]) {
			return false
		}
	}
	return true
}
func (this *WebpageMedia) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*WebpageMedia)
	if !ok {
		that2, ok := that.(WebpageMedia)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Url.Equal(that1.Url) {
		return false
	}
	if !this.Title.Equal(that1.Title) {
		return false
	}
	if !this.Description.Equal(that1.Description) {
		return false
	}
	if !this.Image.Equal(that1.Image) {
		return false
	}
	return true
}
func (this *ImageMedia) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ImageMedia)
	if !ok {
		that2, ok := that.(ImageMedia)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Image.Equal(that1.Image) {
		return false
	}
	return true
}
func (this *AudioMedia) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AudioMedia)
	if !ok {
		that2, ok := that.(AudioMedia)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Audio.Equal(that1.Audio) {
		return false
	}
	return true
}
func (this *InteractiveMediaWidget) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InteractiveMediaWidget)
	if !ok {
		that2, ok := that.(InteractiveMediaWidget)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Body == nil {
		if this.Body != nil {
			return false
		}
	} else if this.Body == nil {
		return false
	} else if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *InteractiveMediaWidget_InteractiveMediaButton) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InteractiveMediaWidget_InteractiveMediaButton)
	if !ok {
		that2, ok := that.(InteractiveMediaWidget_InteractiveMediaButton)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.InteractiveMediaButton.Equal(that1.InteractiveMediaButton) {
		return false
	}
	return true
}
func (this *InteractiveMediaWidget_InteractiveMediaSelect) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InteractiveMediaWidget_InteractiveMediaSelect)
	if !ok {
		that2, ok := that.(InteractiveMediaWidget_InteractiveMediaSelect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.InteractiveMediaSelect.Equal(that1.InteractiveMediaSelect) {
		return false
	}
	return true
}
func (this *InteractiveMediaButton) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InteractiveMediaButton)
	if !ok {
		that2, ok := that.(InteractiveMediaButton)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !this.Label.Equal(that1.Label) {
		return false
	}
	return true
}
func (this *InteractiveMediaSelect) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InteractiveMediaSelect)
	if !ok {
		that2, ok := that.(InteractiveMediaSelect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Options) != len(that1.Options) {
		return false
	}
	for i := range this.Options {
		if !this.Options[i].Equal(that1.Options[i]) {
			return false
		}
	}
	if !this.Label.Equal(that1.Label) {
		return false
	}
	if !this.DefaultValue.Equal(that1.DefaultValue) {
		return false
	}
	return true
}
func (this *InteractiveMediaSelectOption) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InteractiveMediaSelectOption)
	if !ok {
		that2, ok := that.(InteractiveMediaSelectOption)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	return true
}
func (this *InteractiveMedia) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InteractiveMedia)
	if !ok {
		that2, ok := that.(InteractiveMedia)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Widget.Equal(that1.Widget) {
		return false
	}
	if this.Style != that1.Style {
		return false
	}
	if !this.Confirm.Equal(that1.Confirm) {
		return false
	}
	return true
}
func (this *InteractiveMediaTranslation) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InteractiveMediaTranslation)
	if !ok {
		that2, ok := that.(InteractiveMediaTranslation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *InteractiveMediaTranslationGroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InteractiveMediaTranslationGroup)
	if !ok {
		that2, ok := that.(InteractiveMediaTranslationGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Language != that1.Language {
		return false
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	return true
}
func (this *InteractiveMediaGroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InteractiveMediaGroup)
	if !ok {
		that2, ok := that.(InteractiveMediaGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Actions) != len(that1.Actions) {
		return false
	}
	for i := range this.Actions {
		if !this.Actions[i].Equal(that1.Actions[i]) {
			return false
		}
	}
	if !this.Title.Equal(that1.Title) {
		return false
	}
	if !this.Description.Equal(that1.Description) {
		return false
	}
	if len(this.Translations) != len(that1.Translations) {
		return false
	}
	for i := range this.Translations {
		if !this.Translations[i].Equal(that1.Translations[i]) {
			return false
		}
	}
	return true
}
func (this *InteractiveMediaConfirm) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InteractiveMediaConfirm)
	if !ok {
		that2, ok := that.(InteractiveMediaConfirm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Text.Equal(that1.Text) {
		return false
	}
	if !this.Title.Equal(that1.Title) {
		return false
	}
	if !this.Ok.Equal(that1.Ok) {
		return false
	}
	if !this.Dismiss.Equal(that1.Dismiss) {
		return false
	}
	return true
}
func (this *UpdateInteractiveMediaEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateInteractiveMediaEvent)
	if !ok {
		that2, ok := that.(UpdateInteractiveMediaEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	return true
}
func (this *RequestDoInteractiveMediaAction) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestDoInteractiveMediaAction)
	if !ok {
		that2, ok := that.(RequestDoInteractiveMediaAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *MessageContent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageContent)
	if !ok {
		that2, ok := that.(MessageContent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Body == nil {
		if this.Body != nil {
			return false
		}
	} else if this.Body == nil {
		return false
	} else if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *MessageContent_TextMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageContent_TextMessage)
	if !ok {
		that2, ok := that.(MessageContent_TextMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.TextMessage.Equal(that1.TextMessage) {
		return false
	}
	return true
}
func (this *MessageContent_ServiceMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageContent_ServiceMessage)
	if !ok {
		that2, ok := that.(MessageContent_ServiceMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ServiceMessage.Equal(that1.ServiceMessage) {
		return false
	}
	return true
}
func (this *MessageContent_DocumentMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageContent_DocumentMessage)
	if !ok {
		that2, ok := that.(MessageContent_DocumentMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DocumentMessage.Equal(that1.DocumentMessage) {
		return false
	}
	return true
}
func (this *MessageContent_JsonMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageContent_JsonMessage)
	if !ok {
		that2, ok := that.(MessageContent_JsonMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.JsonMessage.Equal(that1.JsonMessage) {
		return false
	}
	return true
}
func (this *MessageContent_UnsupportedMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageContent_UnsupportedMessage)
	if !ok {
		that2, ok := that.(MessageContent_UnsupportedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UnsupportedMessage.Equal(that1.UnsupportedMessage) {
		return false
	}
	return true
}
func (this *MessageContent_StickerMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageContent_StickerMessage)
	if !ok {
		that2, ok := that.(MessageContent_StickerMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.StickerMessage.Equal(that1.StickerMessage) {
		return false
	}
	return true
}
func (this *MessageContent_BinaryMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageContent_BinaryMessage)
	if !ok {
		that2, ok := that.(MessageContent_BinaryMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.BinaryMessage.Equal(that1.BinaryMessage) {
		return false
	}
	return true
}
func (this *MessageContent_EmptyMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageContent_EmptyMessage)
	if !ok {
		that2, ok := that.(MessageContent_EmptyMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.EmptyMessage.Equal(that1.EmptyMessage) {
		return false
	}
	return true
}
func (this *MessageContent_DeletedMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageContent_DeletedMessage)
	if !ok {
		that2, ok := that.(MessageContent_DeletedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DeletedMessage.Equal(that1.DeletedMessage) {
		return false
	}
	return true
}
func (this *TextMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TextMessage)
	if !ok {
		that2, ok := that.(TextMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if len(this.Mentions) != len(that1.Mentions) {
		return false
	}
	for i := range this.Mentions {
		if this.Mentions[i] != that1.Mentions[i] {
			return false
		}
	}
	if !this.Ext.Equal(that1.Ext) {
		return false
	}
	if len(this.Media) != len(that1.Media) {
		return false
	}
	for i := range this.Media {
		if !this.Media[i].Equal(that1.Media[i]) {
			return false
		}
	}
	if len(this.Extensions) != len(that1.Extensions) {
		return false
	}
	for i := range this.Extensions {
		if !this.Extensions[i].Equal(that1.Extensions[i]) {
			return false
		}
	}
	return true
}
func (this *TextMessageEx) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TextMessageEx)
	if !ok {
		that2, ok := that.(TextMessageEx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Body == nil {
		if this.Body != nil {
			return false
		}
	} else if this.Body == nil {
		return false
	} else if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *TextMessageEx_TextExMarkdown) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TextMessageEx_TextExMarkdown)
	if !ok {
		that2, ok := that.(TextMessageEx_TextExMarkdown)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.TextExMarkdown.Equal(that1.TextExMarkdown) {
		return false
	}
	return true
}
func (this *TextMessageEx_TextModernMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TextMessageEx_TextModernMessage)
	if !ok {
		that2, ok := that.(TextMessageEx_TextModernMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.TextModernMessage.Equal(that1.TextModernMessage) {
		return false
	}
	return true
}
func (this *TextMessageEx_TextCommand) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TextMessageEx_TextCommand)
	if !ok {
		that2, ok := that.(TextMessageEx_TextCommand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.TextCommand.Equal(that1.TextCommand) {
		return false
	}
	return true
}
func (this *TextExMarkdown) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TextExMarkdown)
	if !ok {
		that2, ok := that.(TextExMarkdown)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Markdown != that1.Markdown {
		return false
	}
	return true
}
func (this *TextModernMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TextModernMessage)
	if !ok {
		that2, ok := that.(TextModernMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Text.Equal(that1.Text) {
		return false
	}
	if !this.SenderNameOverride.Equal(that1.SenderNameOverride) {
		return false
	}
	if !this.SenderPhotoOverride.Equal(that1.SenderPhotoOverride) {
		return false
	}
	if !this.Style.Equal(that1.Style) {
		return false
	}
	if len(this.Attaches) != len(that1.Attaches) {
		return false
	}
	for i := range this.Attaches {
		if !this.Attaches[i].Equal(that1.Attaches[i]) {
			return false
		}
	}
	return true
}
func (this *ParagraphStyle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ParagraphStyle)
	if !ok {
		that2, ok := that.(ParagraphStyle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ShowParagraph.Equal(that1.ShowParagraph) {
		return false
	}
	if !this.ParagraphColor.Equal(that1.ParagraphColor) {
		return false
	}
	if !this.BgColor.Equal(that1.BgColor) {
		return false
	}
	return true
}
func (this *TextModernAttach) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TextModernAttach)
	if !ok {
		that2, ok := that.(TextModernAttach)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Title.Equal(that1.Title) {
		return false
	}
	if !this.TitleUrl.Equal(that1.TitleUrl) {
		return false
	}
	if !this.TitleIcon.Equal(that1.TitleIcon) {
		return false
	}
	if !this.Text.Equal(that1.Text) {
		return false
	}
	if !this.Style.Equal(that1.Style) {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	return true
}
func (this *TextModernField) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TextModernField)
	if !ok {
		that2, ok := that.(TextModernField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !this.IsShort.Equal(that1.IsShort) {
		return false
	}
	return true
}
func (this *TextCommand) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TextCommand)
	if !ok {
		that2, ok := that.(TextCommand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Command != that1.Command {
		return false
	}
	if this.Args != that1.Args {
		return false
	}
	return true
}
func (this *ServiceMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceMessage)
	if !ok {
		that2, ok := that.(ServiceMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if !this.Ext.Equal(that1.Ext) {
		return false
	}
	return true
}
func (this *ServiceEx) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceEx)
	if !ok {
		that2, ok := that.(ServiceEx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Body == nil {
		if this.Body != nil {
			return false
		}
	} else if this.Body == nil {
		return false
	} else if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *ServiceEx_UserInvited) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceEx_UserInvited)
	if !ok {
		that2, ok := that.(ServiceEx_UserInvited)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UserInvited.Equal(that1.UserInvited) {
		return false
	}
	return true
}
func (this *ServiceEx_UserJoined) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceEx_UserJoined)
	if !ok {
		that2, ok := that.(ServiceEx_UserJoined)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UserJoined.Equal(that1.UserJoined) {
		return false
	}
	return true
}
func (this *ServiceEx_UserKicked) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceEx_UserKicked)
	if !ok {
		that2, ok := that.(ServiceEx_UserKicked)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UserKicked.Equal(that1.UserKicked) {
		return false
	}
	return true
}
func (this *ServiceEx_UserLeft) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceEx_UserLeft)
	if !ok {
		that2, ok := that.(ServiceEx_UserLeft)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UserLeft.Equal(that1.UserLeft) {
		return false
	}
	return true
}
func (this *ServiceEx_GroupCreated) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceEx_GroupCreated)
	if !ok {
		that2, ok := that.(ServiceEx_GroupCreated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GroupCreated.Equal(that1.GroupCreated) {
		return false
	}
	return true
}
func (this *ServiceEx_ChangedTitle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceEx_ChangedTitle)
	if !ok {
		that2, ok := that.(ServiceEx_ChangedTitle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ChangedTitle.Equal(that1.ChangedTitle) {
		return false
	}
	return true
}
func (this *ServiceEx_ChangedTopic) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceEx_ChangedTopic)
	if !ok {
		that2, ok := that.(ServiceEx_ChangedTopic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ChangedTopic.Equal(that1.ChangedTopic) {
		return false
	}
	return true
}
func (this *ServiceEx_ChangedAbout) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceEx_ChangedAbout)
	if !ok {
		that2, ok := that.(ServiceEx_ChangedAbout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ChangedAbout.Equal(that1.ChangedAbout) {
		return false
	}
	return true
}
func (this *ServiceEx_ChangedAvatar) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceEx_ChangedAvatar)
	if !ok {
		that2, ok := that.(ServiceEx_ChangedAvatar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ChangedAvatar.Equal(that1.ChangedAvatar) {
		return false
	}
	return true
}
func (this *ServiceEx_ContactRegistered) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceEx_ContactRegistered)
	if !ok {
		that2, ok := that.(ServiceEx_ContactRegistered)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ContactRegistered.Equal(that1.ContactRegistered) {
		return false
	}
	return true
}
func (this *ServiceEx_PhoneMissed) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceEx_PhoneMissed)
	if !ok {
		that2, ok := that.(ServiceEx_PhoneMissed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.PhoneMissed.Equal(that1.PhoneMissed) {
		return false
	}
	return true
}
func (this *ServiceEx_PhoneCall) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceEx_PhoneCall)
	if !ok {
		that2, ok := that.(ServiceEx_PhoneCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.PhoneCall.Equal(that1.PhoneCall) {
		return false
	}
	return true
}
func (this *ServiceEx_PhoneRejected) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceEx_PhoneRejected)
	if !ok {
		that2, ok := that.(ServiceEx_PhoneRejected)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.PhoneRejected.Equal(that1.PhoneRejected) {
		return false
	}
	return true
}
func (this *ServiceEx_ChatArchived) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceEx_ChatArchived)
	if !ok {
		that2, ok := that.(ServiceEx_ChatArchived)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ChatArchived.Equal(that1.ChatArchived) {
		return false
	}
	return true
}
func (this *ServiceEx_ChatRestored) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceEx_ChatRestored)
	if !ok {
		that2, ok := that.(ServiceEx_ChatRestored)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ChatRestored.Equal(that1.ChatRestored) {
		return false
	}
	return true
}
func (this *ServiceExUserInvited) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceExUserInvited)
	if !ok {
		that2, ok := that.(ServiceExUserInvited)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.InvitedUid != that1.InvitedUid {
		return false
	}
	return true
}
func (this *ServiceExUserJoined) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceExUserJoined)
	if !ok {
		that2, ok := that.(ServiceExUserJoined)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ServiceExUserKicked) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceExUserKicked)
	if !ok {
		that2, ok := that.(ServiceExUserKicked)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.KickedUid != that1.KickedUid {
		return false
	}
	return true
}
func (this *ServiceExUserLeft) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceExUserLeft)
	if !ok {
		that2, ok := that.(ServiceExUserLeft)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ServiceExGroupCreated) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceExGroupCreated)
	if !ok {
		that2, ok := that.(ServiceExGroupCreated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ServiceExChangedTitle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceExChangedTitle)
	if !ok {
		that2, ok := that.(ServiceExChangedTitle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	return true
}
func (this *ServiceExChangedTopic) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceExChangedTopic)
	if !ok {
		that2, ok := that.(ServiceExChangedTopic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Topic.Equal(that1.Topic) {
		return false
	}
	return true
}
func (this *ServiceExChangedAbout) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceExChangedAbout)
	if !ok {
		that2, ok := that.(ServiceExChangedAbout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	return true
}
func (this *ServiceExChangedAvatar) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceExChangedAvatar)
	if !ok {
		that2, ok := that.(ServiceExChangedAvatar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Avatar.Equal(that1.Avatar) {
		return false
	}
	return true
}
func (this *ServiceExContactRegistered) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceExContactRegistered)
	if !ok {
		that2, ok := that.(ServiceExContactRegistered)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	return true
}
func (this *ServiceExPhoneMissed) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceExPhoneMissed)
	if !ok {
		that2, ok := that.(ServiceExPhoneMissed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ServiceExPhoneCall) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceExPhoneCall)
	if !ok {
		that2, ok := that.(ServiceExPhoneCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *ServiceExPhoneRejected) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceExPhoneRejected)
	if !ok {
		that2, ok := that.(ServiceExPhoneRejected)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ServiceExChatArchived) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceExChatArchived)
	if !ok {
		that2, ok := that.(ServiceExChatArchived)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ServiceExChatRestored) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceExChatRestored)
	if !ok {
		that2, ok := that.(ServiceExChatRestored)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *DocumentMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DocumentMessage)
	if !ok {
		that2, ok := that.(DocumentMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FileId != that1.FileId {
		return false
	}
	if this.AccessHash != that1.AccessHash {
		return false
	}
	if this.FileSize != that1.FileSize {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.MimeType != that1.MimeType {
		return false
	}
	if !this.Thumb.Equal(that1.Thumb) {
		return false
	}
	if !this.Ext.Equal(that1.Ext) {
		return false
	}
	return true
}
func (this *DocumentEx) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DocumentEx)
	if !ok {
		that2, ok := that.(DocumentEx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Body == nil {
		if this.Body != nil {
			return false
		}
	} else if this.Body == nil {
		return false
	} else if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *DocumentEx_Photo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DocumentEx_Photo)
	if !ok {
		that2, ok := that.(DocumentEx_Photo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Photo.Equal(that1.Photo) {
		return false
	}
	return true
}
func (this *DocumentEx_Video) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DocumentEx_Video)
	if !ok {
		that2, ok := that.(DocumentEx_Video)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Video.Equal(that1.Video) {
		return false
	}
	return true
}
func (this *DocumentEx_Voice) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DocumentEx_Voice)
	if !ok {
		that2, ok := that.(DocumentEx_Voice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Voice.Equal(that1.Voice) {
		return false
	}
	return true
}
func (this *DocumentExPhoto) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DocumentExPhoto)
	if !ok {
		that2, ok := that.(DocumentExPhoto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.W != that1.W {
		return false
	}
	if this.H != that1.H {
		return false
	}
	return true
}
func (this *DocumentExVideo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DocumentExVideo)
	if !ok {
		that2, ok := that.(DocumentExVideo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.W != that1.W {
		return false
	}
	if this.H != that1.H {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *DocumentExVoice) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DocumentExVoice)
	if !ok {
		that2, ok := that.(DocumentExVoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *JsonMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*JsonMessage)
	if !ok {
		that2, ok := that.(JsonMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.RawJson != that1.RawJson {
		return false
	}
	return true
}
func (this *UnsupportedMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnsupportedMessage)
	if !ok {
		that2, ok := that.(UnsupportedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *StickerMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StickerMessage)
	if !ok {
		that2, ok := that.(StickerMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.StickerId.Equal(that1.StickerId) {
		return false
	}
	if !this.FastPreview.Equal(that1.FastPreview) {
		return false
	}
	if !this.Image_512.Equal(that1.Image_512) {
		return false
	}
	if !this.Image_256.Equal(that1.Image_256) {
		return false
	}
	if !this.StickerCollectionId.Equal(that1.StickerCollectionId) {
		return false
	}
	if !this.StickerCollectionAccessHash.Equal(that1.StickerCollectionAccessHash) {
		return false
	}
	if !this.Emoji.Equal(that1.Emoji) {
		return false
	}
	return true
}
func (this *BinaryMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BinaryMessage)
	if !ok {
		that2, ok := that.(BinaryMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ContentTag != that1.ContentTag {
		return false
	}
	if !bytes.Equal(this.Msg, that1.Msg) {
		return false
	}
	return true
}
func (this *EmptyMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EmptyMessage)
	if !ok {
		that2, ok := that.(EmptyMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeletedMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeletedMessage)
	if !ok {
		that2, ok := that.(DeletedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.IsLocal.Equal(that1.IsLocal) {
		return false
	}
	return true
}
func (this *DialogShort) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DialogShort)
	if !ok {
		that2, ok := that.(DialogShort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Counter != that1.Counter {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	return true
}
func (this *DialogGroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DialogGroup)
	if !ok {
		that2, ok := that.(DialogGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if len(this.Dialogs) != len(that1.Dialogs) {
		return false
	}
	for i := range this.Dialogs {
		if !this.Dialogs[i].Equal(that1.Dialogs[i]) {
			return false
		}
	}
	return true
}
func (this *MessageReaction) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageReaction)
	if !ok {
		that2, ok := that.(MessageReaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if this.Users[i] != that1.Users[i] {
			return false
		}
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SearchPredicate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchPredicate)
	if !ok {
		that2, ok := that.(SearchPredicate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	return true
}
func (this *RequestSendMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSendMessage)
	if !ok {
		that2, ok := that.(RequestSendMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if this.IsOnlyForUser != that1.IsOnlyForUser {
		return false
	}
	if !this.Forward.Equal(that1.Forward) {
		return false
	}
	if !this.Reply.Equal(that1.Reply) {
		return false
	}
	if len(this.Predicates) != len(that1.Predicates) {
		return false
	}
	for i := range this.Predicates {
		if !this.Predicates[i].Equal(that1.Predicates[i]) {
			return false
		}
	}
	if len(this.WhiteList) != len(that1.WhiteList) {
		return false
	}
	for i := range this.WhiteList {
		if this.WhiteList[i] != that1.WhiteList[i] {
			return false
		}
	}
	if len(this.BlackList) != len(that1.BlackList) {
		return false
	}
	for i := range this.BlackList {
		if this.BlackList[i] != that1.BlackList[i] {
			return false
		}
	}
	return true
}
func (this *RequestUpdateMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestUpdateMessage)
	if !ok {
		that2, ok := that.(RequestUpdateMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if !this.UpdatedMessage.Equal(that1.UpdatedMessage) {
		return false
	}
	if this.LastEditedAt != that1.LastEditedAt {
		return false
	}
	return true
}
func (this *RequestMessageReceived) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestMessageReceived)
	if !ok {
		that2, ok := that.(RequestMessageReceived)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	return true
}
func (this *RequestMessageRead) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestMessageRead)
	if !ok {
		that2, ok := that.(RequestMessageRead)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	return true
}
func (this *RequestDeleteMessageObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestDeleteMessageObsolete)
	if !ok {
		that2, ok := that.(RequestDeleteMessageObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Mids) != len(that1.Mids) {
		return false
	}
	for i := range this.Mids {
		if !this.Mids[i].Equal(that1.Mids[i]) {
			return false
		}
	}
	return true
}
func (this *RequestClearChat) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestClearChat)
	if !ok {
		that2, ok := that.(RequestClearChat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.LastMessageDate != that1.LastMessageDate {
		return false
	}
	return true
}
func (this *RequestDeleteChat) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestDeleteChat)
	if !ok {
		that2, ok := that.(RequestDeleteChat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.LastMessageDate != that1.LastMessageDate {
		return false
	}
	return true
}
func (this *RequestArchiveChat) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestArchiveChat)
	if !ok {
		that2, ok := that.(RequestArchiveChat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *RequestMessageSetReaction) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestMessageSetReaction)
	if !ok {
		that2, ok := that.(RequestMessageSetReaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *RequestMessageRemoveReaction) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestMessageRemoveReaction)
	if !ok {
		that2, ok := that.(RequestMessageRemoveReaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *ResponseReactionsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseReactionsResponse)
	if !ok {
		that2, ok := that.(ResponseReactionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if len(this.Reactions) != len(that1.Reactions) {
		return false
	}
	for i := range this.Reactions {
		if !this.Reactions[i].Equal(that1.Reactions[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateMessage)
	if !ok {
		that2, ok := that.(UpdateMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.SenderUid != that1.SenderUid {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if !this.Attributes.Equal(that1.Attributes) {
		return false
	}
	if that1.Attach == nil {
		if this.Attach != nil {
			return false
		}
	} else if this.Attach == nil {
		return false
	} else if !this.Attach.Equal(that1.Attach) {
		return false
	}
	if !this.PreviousMid.Equal(that1.PreviousMid) {
		return false
	}
	if !this.Counter.Equal(that1.Counter) {
		return false
	}
	return true
}
func (this *UpdateMessage_Forward) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateMessage_Forward)
	if !ok {
		that2, ok := that.(UpdateMessage_Forward)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Forward.Equal(that1.Forward) {
		return false
	}
	return true
}
func (this *UpdateMessage_Reply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateMessage_Reply)
	if !ok {
		that2, ok := that.(UpdateMessage_Reply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Reply.Equal(that1.Reply) {
		return false
	}
	return true
}
func (this *UpdateMessageContentChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateMessageContentChanged)
	if !ok {
		that2, ok := that.(UpdateMessageContentChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if this.EditedAt != that1.EditedAt {
		return false
	}
	return true
}
func (this *UpdateMessageSent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateMessageSent)
	if !ok {
		that2, ok := that.(UpdateMessageSent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if !this.PrevMid.Equal(that1.PrevMid) {
		return false
	}
	if !this.UnreadCounter.Equal(that1.UnreadCounter) {
		return false
	}
	return true
}
func (this *UpdateMessageReceived) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateMessageReceived)
	if !ok {
		that2, ok := that.(UpdateMessageReceived)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.StartDate != that1.StartDate {
		return false
	}
	if this.ReceivedDate != that1.ReceivedDate {
		return false
	}
	return true
}
func (this *UpdateMessageRead) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateMessageRead)
	if !ok {
		that2, ok := that.(UpdateMessageRead)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.StartDate != that1.StartDate {
		return false
	}
	if this.ReadDate != that1.ReadDate {
		return false
	}
	return true
}
func (this *UpdateMessageReadByMe) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateMessageReadByMe)
	if !ok {
		that2, ok := that.(UpdateMessageReadByMe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.StartDate != that1.StartDate {
		return false
	}
	if !this.UnreadCounter.Equal(that1.UnreadCounter) {
		return false
	}
	return true
}
func (this *UpdateMessageDelete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateMessageDelete)
	if !ok {
		that2, ok := that.(UpdateMessageDelete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if len(this.Mids) != len(that1.Mids) {
		return false
	}
	for i := range this.Mids {
		if !this.Mids[i].Equal(that1.Mids[i]) {
			return false
		}
	}
	if !this.Counter.Equal(that1.Counter) {
		return false
	}
	if this.ActionDate != that1.ActionDate {
		return false
	}
	return true
}
func (this *UpdateChatClear) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateChatClear)
	if !ok {
		that2, ok := that.(UpdateChatClear)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.ActionDate != that1.ActionDate {
		return false
	}
	return true
}
func (this *UpdateChatDelete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateChatDelete)
	if !ok {
		that2, ok := that.(UpdateChatDelete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.ActionDate != that1.ActionDate {
		return false
	}
	return true
}
func (this *UpdateChatArchive) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateChatArchive)
	if !ok {
		that2, ok := that.(UpdateChatArchive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *UpdateChatGroupsChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateChatGroupsChanged)
	if !ok {
		that2, ok := that.(UpdateChatGroupsChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Dialogs) != len(that1.Dialogs) {
		return false
	}
	for i := range this.Dialogs {
		if !this.Dialogs[i].Equal(that1.Dialogs[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateReactionsUpdate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateReactionsUpdate)
	if !ok {
		that2, ok := that.(UpdateReactionsUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if len(this.Reactions) != len(that1.Reactions) {
		return false
	}
	for i := range this.Reactions {
		if !this.Reactions[i].Equal(that1.Reactions[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateMessageRejectedByHook) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateMessageRejectedByHook)
	if !ok {
		that2, ok := that.(UpdateMessageRejectedByHook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if this.HookId != that1.HookId {
		return false
	}
	if !this.Reason.Equal(that1.Reason) {
		return false
	}
	return true
}
func (this *UpdateMessageEditRejectedByHook) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateMessageEditRejectedByHook)
	if !ok {
		that2, ok := that.(UpdateMessageEditRejectedByHook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if this.HookId != that1.HookId {
		return false
	}
	if !this.Reason.Equal(that1.Reason) {
		return false
	}
	return true
}
func (this *ReferencedMessages) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReferencedMessages)
	if !ok {
		that2, ok := that.(ReferencedMessages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Mids) != len(that1.Mids) {
		return false
	}
	for i := range this.Mids {
		if !this.Mids[i].Equal(that1.Mids[i]) {
			return false
		}
	}
	return true
}
func (this *HistoryMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HistoryMessage)
	if !ok {
		that2, ok := that.(HistoryMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SenderUid != that1.SenderUid {
		return false
	}
	if !this.SenderPeer.Equal(that1.SenderPeer) {
		return false
	}
	if !this.HostPeer.Equal(that1.HostPeer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if !this.PrevMid.Equal(that1.PrevMid) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if len(this.Reactions) != len(that1.Reactions) {
		return false
	}
	for i := range this.Reactions {
		if !this.Reactions[i].Equal(that1.Reactions[i]) {
			return false
		}
	}
	if !this.Attribute.Equal(that1.Attribute) {
		return false
	}
	if that1.Attach == nil {
		if this.Attach != nil {
			return false
		}
	} else if this.Attach == nil {
		return false
	} else if !this.Attach.Equal(that1.Attach) {
		return false
	}
	if !this.EditedAt.Equal(that1.EditedAt) {
		return false
	}
	return true
}
func (this *HistoryMessage_Forward) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HistoryMessage_Forward)
	if !ok {
		that2, ok := that.(HistoryMessage_Forward)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Forward.Equal(that1.Forward) {
		return false
	}
	return true
}
func (this *HistoryMessage_Reply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HistoryMessage_Reply)
	if !ok {
		that2, ok := that.(HistoryMessage_Reply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Reply.Equal(that1.Reply) {
		return false
	}
	return true
}
func (this *RequestLoadHistory) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestLoadHistory)
	if !ok {
		that2, ok := that.(RequestLoadHistory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if this.LoadMode != that1.LoadMode {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *ResponseLoadHistory) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseLoadHistory)
	if !ok {
		that2, ok := that.(ResponseLoadHistory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.History) != len(that1.History) {
		return false
	}
	for i := range this.History {
		if !this.History[i].Equal(that1.History[i]) {
			return false
		}
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if len(this.GroupPeers) != len(that1.GroupPeers) {
		return false
	}
	for i := range this.GroupPeers {
		if !this.GroupPeers[i].Equal(that1.GroupPeers[i]) {
			return false
		}
	}
	if !this.Counter.Equal(that1.Counter) {
		return false
	}
	if this.CounterDate != that1.CounterDate {
		return false
	}
	return true
}
func (this *Dialog) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Dialog)
	if !ok {
		that2, ok := that.(Dialog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.UnreadCount != that1.UnreadCount {
		return false
	}
	if this.SortDate != that1.SortDate {
		return false
	}
	if this.SenderUid != that1.SenderUid {
		return false
	}
	if !this.IsFavourite.Equal(that1.IsFavourite) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.FirstUnreadDate != that1.FirstUnreadDate {
		return false
	}
	if !this.Attributes.Equal(that1.Attributes) {
		return false
	}
	if !this.PinnedMessages.Equal(that1.PinnedMessages) {
		return false
	}
	if !this.HistoryMessage.Equal(that1.HistoryMessage) {
		return false
	}
	return true
}
func (this *RequestLoadDialogs) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestLoadDialogs)
	if !ok {
		that2, ok := that.(RequestLoadDialogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MinDate != that1.MinDate {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	if len(this.Filters) != len(that1.Filters) {
		return false
	}
	for i := range this.Filters {
		if this.Filters[i] != that1.Filters[i] {
			return false
		}
	}
	if len(this.PeersToLoad) != len(that1.PeersToLoad) {
		return false
	}
	for i := range this.PeersToLoad {
		if !this.PeersToLoad[i].Equal(that1.PeersToLoad[i]) {
			return false
		}
	}
	return true
}
func (this *ResponseLoadDialogs) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseLoadDialogs)
	if !ok {
		that2, ok := that.(ResponseLoadDialogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Dialogs) != len(that1.Dialogs) {
		return false
	}
	for i := range this.Dialogs {
		if !this.Dialogs[i].Equal(that1.Dialogs[i]) {
			return false
		}
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	if len(this.GroupPeers) != len(that1.GroupPeers) {
		return false
	}
	for i := range this.GroupPeers {
		if !this.GroupPeers[i].Equal(that1.GroupPeers[i]) {
			return false
		}
	}
	return true
}
func (this *DialogIndex) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DialogIndex)
	if !ok {
		that2, ok := that.(DialogIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (this *RequestFetchDialogIndex) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestFetchDialogIndex)
	if !ok {
		that2, ok := that.(RequestFetchDialogIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResponseFetchDialogIndex) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseFetchDialogIndex)
	if !ok {
		that2, ok := that.(ResponseFetchDialogIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.DialogIndices) != len(that1.DialogIndices) {
		return false
	}
	for i := range this.DialogIndices {
		if !this.DialogIndices[i].Equal(that1.DialogIndices[i]) {
			return false
		}
	}
	return true
}
func (this *RequestLoadArchived) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestLoadArchived)
	if !ok {
		that2, ok := that.(RequestLoadArchived)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.NextOffset.Equal(that1.NextOffset) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *ResponseLoadArchived) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseLoadArchived)
	if !ok {
		that2, ok := that.(ResponseLoadArchived)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Dialogs) != len(that1.Dialogs) {
		return false
	}
	for i := range this.Dialogs {
		if !this.Dialogs[i].Equal(that1.Dialogs[i]) {
			return false
		}
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	if len(this.GroupPeers) != len(that1.GroupPeers) {
		return false
	}
	for i := range this.GroupPeers {
		if !this.GroupPeers[i].Equal(that1.GroupPeers[i]) {
			return false
		}
	}
	if !this.NextOffset.Equal(that1.NextOffset) {
		return false
	}
	return true
}
func (this *RequestLoadGroupedDialogs) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestLoadGroupedDialogs)
	if !ok {
		that2, ok := that.(RequestLoadGroupedDialogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *ResponseLoadGroupedDialogs) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseLoadGroupedDialogs)
	if !ok {
		that2, ok := that.(ResponseLoadGroupedDialogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Dialogs) != len(that1.Dialogs) {
		return false
	}
	for i := range this.Dialogs {
		if !this.Dialogs[i].Equal(that1.Dialogs[i]) {
			return false
		}
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if !this.ShowArchived.Equal(that1.ShowArchived) {
		return false
	}
	if !this.ShowInvite.Equal(that1.ShowInvite) {
		return false
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	if len(this.GroupPeers) != len(that1.GroupPeers) {
		return false
	}
	for i := range this.GroupPeers {
		if !this.GroupPeers[i].Equal(that1.GroupPeers[i]) {
			return false
		}
	}
	return true
}
func (this *ResponseDialogsOrder) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseDialogsOrder)
	if !ok {
		that2, ok := that.(ResponseDialogsOrder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *RequestHideDialog) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestHideDialog)
	if !ok {
		that2, ok := that.(RequestHideDialog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *RequestShowDialog) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestShowDialog)
	if !ok {
		that2, ok := that.(RequestShowDialog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *RequestFavouriteDialog) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestFavouriteDialog)
	if !ok {
		that2, ok := that.(RequestFavouriteDialog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *RequestUnfavouriteDialog) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestUnfavouriteDialog)
	if !ok {
		that2, ok := that.(RequestUnfavouriteDialog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *UpdateDialogFavouriteChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateDialogFavouriteChanged)
	if !ok {
		that2, ok := that.(UpdateDialogFavouriteChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.IsFavourite.Equal(that1.IsFavourite) {
		return false
	}
	return true
}
func (this *RequestNotifyDialogOpened) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestNotifyDialogOpened)
	if !ok {
		that2, ok := that.(RequestNotifyDialogOpened)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *PinnedMessages) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PinnedMessages)
	if !ok {
		that2, ok := that.(PinnedMessages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Mids) != len(that1.Mids) {
		return false
	}
	for i := range this.Mids {
		if !this.Mids[i].Equal(that1.Mids[i]) {
			return false
		}
	}
	return true
}
func (this *RequestPinMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestPinMessage)
	if !ok {
		that2, ok := that.(RequestPinMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.LastPinDate != that1.LastPinDate {
		return false
	}
	return true
}
func (this *RequestUnpinMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestUnpinMessage)
	if !ok {
		that2, ok := that.(RequestUnpinMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.LastPinDate != that1.LastPinDate {
		return false
	}
	return true
}
func (this *UpdatePinnedMessagesChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdatePinnedMessagesChanged)
	if !ok {
		that2, ok := that.(UpdatePinnedMessagesChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.PinnedMessages.Equal(that1.PinnedMessages) {
		return false
	}
	if this.ActionDate != that1.ActionDate {
		return false
	}
	return true
}
func (this *MessageAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.MessageAttributes{")
	if this.IsMentioned != nil {
		s = append(s, "IsMentioned: "+fmt.Sprintf("%#v", this.IsMentioned)+",\n")
	}
	if this.IsHighlighted != nil {
		s = append(s, "IsHighlighted: "+fmt.Sprintf("%#v", this.IsHighlighted)+",\n")
	}
	if this.IsNotified != nil {
		s = append(s, "IsNotified: "+fmt.Sprintf("%#v", this.IsNotified)+",\n")
	}
	if this.IsOnlyForYou != nil {
		s = append(s, "IsOnlyForYou: "+fmt.Sprintf("%#v", this.IsOnlyForYou)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QuotedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.QuotedMessage{")
	s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	s = append(s, "PublicGroupId: "+fmt.Sprintf("%#v", this.PublicGroupId)+",\n")
	s = append(s, "SenderUserId: "+fmt.Sprintf("%#v", this.SenderUserId)+",\n")
	s = append(s, "MessageDate: "+fmt.Sprintf("%#v", this.MessageDate)+",\n")
	if this.QuotedMessageContent != nil {
		s = append(s, "QuotedMessageContent: "+fmt.Sprintf("%#v", this.QuotedMessageContent)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageMedia) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.MessageMedia{")
	if this.Webpage != nil {
		s = append(s, "Webpage: "+fmt.Sprintf("%#v", this.Webpage)+",\n")
	}
	if this.Image != nil {
		s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	}
	if this.Audio != nil {
		s = append(s, "Audio: "+fmt.Sprintf("%#v", this.Audio)+",\n")
	}
	if this.Actions != nil {
		s = append(s, "Actions: "+fmt.Sprintf("%#v", this.Actions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WebpageMedia) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.WebpageMedia{")
	if this.Url != nil {
		s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	}
	if this.Title != nil {
		s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	}
	if this.Description != nil {
		s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	}
	if this.Image != nil {
		s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageMedia) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ImageMedia{")
	if this.Image != nil {
		s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AudioMedia) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.AudioMedia{")
	if this.Audio != nil {
		s = append(s, "Audio: "+fmt.Sprintf("%#v", this.Audio)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractiveMediaWidget) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.InteractiveMediaWidget{")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractiveMediaWidget_InteractiveMediaButton) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.InteractiveMediaWidget_InteractiveMediaButton{` +
		`InteractiveMediaButton:` + fmt.Sprintf("%#v", this.InteractiveMediaButton) + `}`}, ", ")
	return s
}
func (this *InteractiveMediaWidget_InteractiveMediaSelect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.InteractiveMediaWidget_InteractiveMediaSelect{` +
		`InteractiveMediaSelect:` + fmt.Sprintf("%#v", this.InteractiveMediaSelect) + `}`}, ", ")
	return s
}
func (this *InteractiveMediaButton) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.InteractiveMediaButton{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.Label != nil {
		s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractiveMediaSelect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.InteractiveMediaSelect{")
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	if this.Label != nil {
		s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	}
	if this.DefaultValue != nil {
		s = append(s, "DefaultValue: "+fmt.Sprintf("%#v", this.DefaultValue)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractiveMediaSelectOption) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.InteractiveMediaSelectOption{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractiveMedia) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.InteractiveMedia{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Widget != nil {
		s = append(s, "Widget: "+fmt.Sprintf("%#v", this.Widget)+",\n")
	}
	s = append(s, "Style: "+fmt.Sprintf("%#v", this.Style)+",\n")
	if this.Confirm != nil {
		s = append(s, "Confirm: "+fmt.Sprintf("%#v", this.Confirm)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractiveMediaTranslation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.InteractiveMediaTranslation{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractiveMediaTranslationGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.InteractiveMediaTranslationGroup{")
	s = append(s, "Language: "+fmt.Sprintf("%#v", this.Language)+",\n")
	if this.Messages != nil {
		s = append(s, "Messages: "+fmt.Sprintf("%#v", this.Messages)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractiveMediaGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.InteractiveMediaGroup{")
	if this.Actions != nil {
		s = append(s, "Actions: "+fmt.Sprintf("%#v", this.Actions)+",\n")
	}
	if this.Title != nil {
		s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	}
	if this.Description != nil {
		s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	}
	if this.Translations != nil {
		s = append(s, "Translations: "+fmt.Sprintf("%#v", this.Translations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractiveMediaConfirm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.InteractiveMediaConfirm{")
	if this.Text != nil {
		s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	}
	if this.Title != nil {
		s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	}
	if this.Ok != nil {
		s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	}
	if this.Dismiss != nil {
		s = append(s, "Dismiss: "+fmt.Sprintf("%#v", this.Dismiss)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateInteractiveMediaEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.UpdateInteractiveMediaEvent{")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestDoInteractiveMediaAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestDoInteractiveMediaAction{")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageContent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&dialog.MessageContent{")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageContent_TextMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.MessageContent_TextMessage{` +
		`TextMessage:` + fmt.Sprintf("%#v", this.TextMessage) + `}`}, ", ")
	return s
}
func (this *MessageContent_ServiceMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.MessageContent_ServiceMessage{` +
		`ServiceMessage:` + fmt.Sprintf("%#v", this.ServiceMessage) + `}`}, ", ")
	return s
}
func (this *MessageContent_DocumentMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.MessageContent_DocumentMessage{` +
		`DocumentMessage:` + fmt.Sprintf("%#v", this.DocumentMessage) + `}`}, ", ")
	return s
}
func (this *MessageContent_JsonMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.MessageContent_JsonMessage{` +
		`JsonMessage:` + fmt.Sprintf("%#v", this.JsonMessage) + `}`}, ", ")
	return s
}
func (this *MessageContent_UnsupportedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.MessageContent_UnsupportedMessage{` +
		`UnsupportedMessage:` + fmt.Sprintf("%#v", this.UnsupportedMessage) + `}`}, ", ")
	return s
}
func (this *MessageContent_StickerMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.MessageContent_StickerMessage{` +
		`StickerMessage:` + fmt.Sprintf("%#v", this.StickerMessage) + `}`}, ", ")
	return s
}
func (this *MessageContent_BinaryMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.MessageContent_BinaryMessage{` +
		`BinaryMessage:` + fmt.Sprintf("%#v", this.BinaryMessage) + `}`}, ", ")
	return s
}
func (this *MessageContent_EmptyMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.MessageContent_EmptyMessage{` +
		`EmptyMessage:` + fmt.Sprintf("%#v", this.EmptyMessage) + `}`}, ", ")
	return s
}
func (this *MessageContent_DeletedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.MessageContent_DeletedMessage{` +
		`DeletedMessage:` + fmt.Sprintf("%#v", this.DeletedMessage) + `}`}, ", ")
	return s
}
func (this *TextMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.TextMessage{")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "Mentions: "+fmt.Sprintf("%#v", this.Mentions)+",\n")
	if this.Ext != nil {
		s = append(s, "Ext: "+fmt.Sprintf("%#v", this.Ext)+",\n")
	}
	if this.Media != nil {
		s = append(s, "Media: "+fmt.Sprintf("%#v", this.Media)+",\n")
	}
	if this.Extensions != nil {
		s = append(s, "Extensions: "+fmt.Sprintf("%#v", this.Extensions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TextMessageEx) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.TextMessageEx{")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TextMessageEx_TextExMarkdown) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.TextMessageEx_TextExMarkdown{` +
		`TextExMarkdown:` + fmt.Sprintf("%#v", this.TextExMarkdown) + `}`}, ", ")
	return s
}
func (this *TextMessageEx_TextModernMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.TextMessageEx_TextModernMessage{` +
		`TextModernMessage:` + fmt.Sprintf("%#v", this.TextModernMessage) + `}`}, ", ")
	return s
}
func (this *TextMessageEx_TextCommand) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.TextMessageEx_TextCommand{` +
		`TextCommand:` + fmt.Sprintf("%#v", this.TextCommand) + `}`}, ", ")
	return s
}
func (this *TextExMarkdown) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.TextExMarkdown{")
	s = append(s, "Markdown: "+fmt.Sprintf("%#v", this.Markdown)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TextModernMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.TextModernMessage{")
	if this.Text != nil {
		s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	}
	if this.SenderNameOverride != nil {
		s = append(s, "SenderNameOverride: "+fmt.Sprintf("%#v", this.SenderNameOverride)+",\n")
	}
	if this.SenderPhotoOverride != nil {
		s = append(s, "SenderPhotoOverride: "+fmt.Sprintf("%#v", this.SenderPhotoOverride)+",\n")
	}
	if this.Style != nil {
		s = append(s, "Style: "+fmt.Sprintf("%#v", this.Style)+",\n")
	}
	if this.Attaches != nil {
		s = append(s, "Attaches: "+fmt.Sprintf("%#v", this.Attaches)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ParagraphStyle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ParagraphStyle{")
	if this.ShowParagraph != nil {
		s = append(s, "ShowParagraph: "+fmt.Sprintf("%#v", this.ShowParagraph)+",\n")
	}
	if this.ParagraphColor != nil {
		s = append(s, "ParagraphColor: "+fmt.Sprintf("%#v", this.ParagraphColor)+",\n")
	}
	if this.BgColor != nil {
		s = append(s, "BgColor: "+fmt.Sprintf("%#v", this.BgColor)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TextModernAttach) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.TextModernAttach{")
	if this.Title != nil {
		s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	}
	if this.TitleUrl != nil {
		s = append(s, "TitleUrl: "+fmt.Sprintf("%#v", this.TitleUrl)+",\n")
	}
	if this.TitleIcon != nil {
		s = append(s, "TitleIcon: "+fmt.Sprintf("%#v", this.TitleIcon)+",\n")
	}
	if this.Text != nil {
		s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	}
	if this.Style != nil {
		s = append(s, "Style: "+fmt.Sprintf("%#v", this.Style)+",\n")
	}
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TextModernField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.TextModernField{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.IsShort != nil {
		s = append(s, "IsShort: "+fmt.Sprintf("%#v", this.IsShort)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TextCommand) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.TextCommand{")
	s = append(s, "Command: "+fmt.Sprintf("%#v", this.Command)+",\n")
	s = append(s, "Args: "+fmt.Sprintf("%#v", this.Args)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ServiceMessage{")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	if this.Ext != nil {
		s = append(s, "Ext: "+fmt.Sprintf("%#v", this.Ext)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceEx) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&dialog.ServiceEx{")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceEx_UserInvited) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_UserInvited{` +
		`UserInvited:` + fmt.Sprintf("%#v", this.UserInvited) + `}`}, ", ")
	return s
}
func (this *ServiceEx_UserJoined) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_UserJoined{` +
		`UserJoined:` + fmt.Sprintf("%#v", this.UserJoined) + `}`}, ", ")
	return s
}
func (this *ServiceEx_UserKicked) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_UserKicked{` +
		`UserKicked:` + fmt.Sprintf("%#v", this.UserKicked) + `}`}, ", ")
	return s
}
func (this *ServiceEx_UserLeft) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_UserLeft{` +
		`UserLeft:` + fmt.Sprintf("%#v", this.UserLeft) + `}`}, ", ")
	return s
}
func (this *ServiceEx_GroupCreated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_GroupCreated{` +
		`GroupCreated:` + fmt.Sprintf("%#v", this.GroupCreated) + `}`}, ", ")
	return s
}
func (this *ServiceEx_ChangedTitle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_ChangedTitle{` +
		`ChangedTitle:` + fmt.Sprintf("%#v", this.ChangedTitle) + `}`}, ", ")
	return s
}
func (this *ServiceEx_ChangedTopic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_ChangedTopic{` +
		`ChangedTopic:` + fmt.Sprintf("%#v", this.ChangedTopic) + `}`}, ", ")
	return s
}
func (this *ServiceEx_ChangedAbout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_ChangedAbout{` +
		`ChangedAbout:` + fmt.Sprintf("%#v", this.ChangedAbout) + `}`}, ", ")
	return s
}
func (this *ServiceEx_ChangedAvatar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_ChangedAvatar{` +
		`ChangedAvatar:` + fmt.Sprintf("%#v", this.ChangedAvatar) + `}`}, ", ")
	return s
}
func (this *ServiceEx_ContactRegistered) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_ContactRegistered{` +
		`ContactRegistered:` + fmt.Sprintf("%#v", this.ContactRegistered) + `}`}, ", ")
	return s
}
func (this *ServiceEx_PhoneMissed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_PhoneMissed{` +
		`PhoneMissed:` + fmt.Sprintf("%#v", this.PhoneMissed) + `}`}, ", ")
	return s
}
func (this *ServiceEx_PhoneCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_PhoneCall{` +
		`PhoneCall:` + fmt.Sprintf("%#v", this.PhoneCall) + `}`}, ", ")
	return s
}
func (this *ServiceEx_PhoneRejected) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_PhoneRejected{` +
		`PhoneRejected:` + fmt.Sprintf("%#v", this.PhoneRejected) + `}`}, ", ")
	return s
}
func (this *ServiceEx_ChatArchived) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_ChatArchived{` +
		`ChatArchived:` + fmt.Sprintf("%#v", this.ChatArchived) + `}`}, ", ")
	return s
}
func (this *ServiceEx_ChatRestored) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_ChatRestored{` +
		`ChatRestored:` + fmt.Sprintf("%#v", this.ChatRestored) + `}`}, ", ")
	return s
}
func (this *ServiceExUserInvited) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExUserInvited{")
	s = append(s, "InvitedUid: "+fmt.Sprintf("%#v", this.InvitedUid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExUserJoined) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ServiceExUserJoined{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExUserKicked) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExUserKicked{")
	s = append(s, "KickedUid: "+fmt.Sprintf("%#v", this.KickedUid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExUserLeft) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ServiceExUserLeft{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExGroupCreated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ServiceExGroupCreated{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExChangedTitle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExChangedTitle{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExChangedTopic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExChangedTopic{")
	if this.Topic != nil {
		s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExChangedAbout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExChangedAbout{")
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExChangedAvatar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExChangedAvatar{")
	if this.Avatar != nil {
		s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExContactRegistered) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExContactRegistered{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExPhoneMissed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ServiceExPhoneMissed{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExPhoneCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExPhoneCall{")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExPhoneRejected) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ServiceExPhoneRejected{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExChatArchived) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ServiceExChatArchived{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExChatRestored) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ServiceExChatRestored{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DocumentMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.DocumentMessage{")
	s = append(s, "FileId: "+fmt.Sprintf("%#v", this.FileId)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "FileSize: "+fmt.Sprintf("%#v", this.FileSize)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "MimeType: "+fmt.Sprintf("%#v", this.MimeType)+",\n")
	if this.Thumb != nil {
		s = append(s, "Thumb: "+fmt.Sprintf("%#v", this.Thumb)+",\n")
	}
	if this.Ext != nil {
		s = append(s, "Ext: "+fmt.Sprintf("%#v", this.Ext)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DocumentEx) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.DocumentEx{")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DocumentEx_Photo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.DocumentEx_Photo{` +
		`Photo:` + fmt.Sprintf("%#v", this.Photo) + `}`}, ", ")
	return s
}
func (this *DocumentEx_Video) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.DocumentEx_Video{` +
		`Video:` + fmt.Sprintf("%#v", this.Video) + `}`}, ", ")
	return s
}
func (this *DocumentEx_Voice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.DocumentEx_Voice{` +
		`Voice:` + fmt.Sprintf("%#v", this.Voice) + `}`}, ", ")
	return s
}
func (this *DocumentExPhoto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.DocumentExPhoto{")
	s = append(s, "W: "+fmt.Sprintf("%#v", this.W)+",\n")
	s = append(s, "H: "+fmt.Sprintf("%#v", this.H)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DocumentExVideo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.DocumentExVideo{")
	s = append(s, "W: "+fmt.Sprintf("%#v", this.W)+",\n")
	s = append(s, "H: "+fmt.Sprintf("%#v", this.H)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DocumentExVoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.DocumentExVoice{")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JsonMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.JsonMessage{")
	s = append(s, "RawJson: "+fmt.Sprintf("%#v", this.RawJson)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnsupportedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.UnsupportedMessage{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StickerMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.StickerMessage{")
	if this.StickerId != nil {
		s = append(s, "StickerId: "+fmt.Sprintf("%#v", this.StickerId)+",\n")
	}
	if this.FastPreview != nil {
		s = append(s, "FastPreview: "+fmt.Sprintf("%#v", this.FastPreview)+",\n")
	}
	if this.Image_512 != nil {
		s = append(s, "Image_512: "+fmt.Sprintf("%#v", this.Image_512)+",\n")
	}
	if this.Image_256 != nil {
		s = append(s, "Image_256: "+fmt.Sprintf("%#v", this.Image_256)+",\n")
	}
	if this.StickerCollectionId != nil {
		s = append(s, "StickerCollectionId: "+fmt.Sprintf("%#v", this.StickerCollectionId)+",\n")
	}
	if this.StickerCollectionAccessHash != nil {
		s = append(s, "StickerCollectionAccessHash: "+fmt.Sprintf("%#v", this.StickerCollectionAccessHash)+",\n")
	}
	if this.Emoji != nil {
		s = append(s, "Emoji: "+fmt.Sprintf("%#v", this.Emoji)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BinaryMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.BinaryMessage{")
	s = append(s, "ContentTag: "+fmt.Sprintf("%#v", this.ContentTag)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EmptyMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.EmptyMessage{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeletedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.DeletedMessage{")
	if this.IsLocal != nil {
		s = append(s, "IsLocal: "+fmt.Sprintf("%#v", this.IsLocal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DialogShort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.DialogShort{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Counter: "+fmt.Sprintf("%#v", this.Counter)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DialogGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.DialogGroup{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.Dialogs != nil {
		s = append(s, "Dialogs: "+fmt.Sprintf("%#v", this.Dialogs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageReaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.MessageReaction{")
	s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchPredicate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.SearchPredicate{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSendMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&dialog.RequestSendMessage{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "IsOnlyForUser: "+fmt.Sprintf("%#v", this.IsOnlyForUser)+",\n")
	if this.Forward != nil {
		s = append(s, "Forward: "+fmt.Sprintf("%#v", this.Forward)+",\n")
	}
	if this.Reply != nil {
		s = append(s, "Reply: "+fmt.Sprintf("%#v", this.Reply)+",\n")
	}
	if this.Predicates != nil {
		s = append(s, "Predicates: "+fmt.Sprintf("%#v", this.Predicates)+",\n")
	}
	s = append(s, "WhiteList: "+fmt.Sprintf("%#v", this.WhiteList)+",\n")
	s = append(s, "BlackList: "+fmt.Sprintf("%#v", this.BlackList)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestUpdateMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestUpdateMessage{")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	if this.UpdatedMessage != nil {
		s = append(s, "UpdatedMessage: "+fmt.Sprintf("%#v", this.UpdatedMessage)+",\n")
	}
	s = append(s, "LastEditedAt: "+fmt.Sprintf("%#v", this.LastEditedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestMessageReceived) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestMessageReceived{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestMessageRead) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestMessageRead{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestDeleteMessageObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestDeleteMessageObsolete{")
	if this.Mids != nil {
		s = append(s, "Mids: "+fmt.Sprintf("%#v", this.Mids)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestClearChat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestClearChat{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "LastMessageDate: "+fmt.Sprintf("%#v", this.LastMessageDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestDeleteChat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestDeleteChat{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "LastMessageDate: "+fmt.Sprintf("%#v", this.LastMessageDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestArchiveChat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestArchiveChat{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestMessageSetReaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestMessageSetReaction{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestMessageRemoveReaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestMessageRemoveReaction{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseReactionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseReactionsResponse{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Reactions != nil {
		s = append(s, "Reactions: "+fmt.Sprintf("%#v", this.Reactions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&dialog.UpdateMessage{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "SenderUid: "+fmt.Sprintf("%#v", this.SenderUid)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	if this.Attributes != nil {
		s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	}
	if this.Attach != nil {
		s = append(s, "Attach: "+fmt.Sprintf("%#v", this.Attach)+",\n")
	}
	if this.PreviousMid != nil {
		s = append(s, "PreviousMid: "+fmt.Sprintf("%#v", this.PreviousMid)+",\n")
	}
	if this.Counter != nil {
		s = append(s, "Counter: "+fmt.Sprintf("%#v", this.Counter)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessage_Forward) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateMessage_Forward{` +
		`Forward:` + fmt.Sprintf("%#v", this.Forward) + `}`}, ", ")
	return s
}
func (this *UpdateMessage_Reply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateMessage_Reply{` +
		`Reply:` + fmt.Sprintf("%#v", this.Reply) + `}`}, ", ")
	return s
}
func (this *UpdateMessageContentChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.UpdateMessageContentChanged{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "EditedAt: "+fmt.Sprintf("%#v", this.EditedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessageSent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.UpdateMessageSent{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	if this.PrevMid != nil {
		s = append(s, "PrevMid: "+fmt.Sprintf("%#v", this.PrevMid)+",\n")
	}
	if this.UnreadCounter != nil {
		s = append(s, "UnreadCounter: "+fmt.Sprintf("%#v", this.UnreadCounter)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessageReceived) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateMessageReceived{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	s = append(s, "ReceivedDate: "+fmt.Sprintf("%#v", this.ReceivedDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessageRead) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateMessageRead{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	s = append(s, "ReadDate: "+fmt.Sprintf("%#v", this.ReadDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessageReadByMe) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateMessageReadByMe{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	if this.UnreadCounter != nil {
		s = append(s, "UnreadCounter: "+fmt.Sprintf("%#v", this.UnreadCounter)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessageDelete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.UpdateMessageDelete{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mids != nil {
		s = append(s, "Mids: "+fmt.Sprintf("%#v", this.Mids)+",\n")
	}
	if this.Counter != nil {
		s = append(s, "Counter: "+fmt.Sprintf("%#v", this.Counter)+",\n")
	}
	s = append(s, "ActionDate: "+fmt.Sprintf("%#v", this.ActionDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateChatClear) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateChatClear{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "ActionDate: "+fmt.Sprintf("%#v", this.ActionDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateChatDelete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateChatDelete{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "ActionDate: "+fmt.Sprintf("%#v", this.ActionDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateChatArchive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateChatArchive{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateChatGroupsChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateChatGroupsChanged{")
	if this.Dialogs != nil {
		s = append(s, "Dialogs: "+fmt.Sprintf("%#v", this.Dialogs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateReactionsUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateReactionsUpdate{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	if this.Reactions != nil {
		s = append(s, "Reactions: "+fmt.Sprintf("%#v", this.Reactions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessageRejectedByHook) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.UpdateMessageRejectedByHook{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "HookId: "+fmt.Sprintf("%#v", this.HookId)+",\n")
	if this.Reason != nil {
		s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessageEditRejectedByHook) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.UpdateMessageEditRejectedByHook{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "HookId: "+fmt.Sprintf("%#v", this.HookId)+",\n")
	if this.Reason != nil {
		s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReferencedMessages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ReferencedMessages{")
	if this.Mids != nil {
		s = append(s, "Mids: "+fmt.Sprintf("%#v", this.Mids)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HistoryMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&dialog.HistoryMessage{")
	s = append(s, "SenderUid: "+fmt.Sprintf("%#v", this.SenderUid)+",\n")
	if this.SenderPeer != nil {
		s = append(s, "SenderPeer: "+fmt.Sprintf("%#v", this.SenderPeer)+",\n")
	}
	if this.HostPeer != nil {
		s = append(s, "HostPeer: "+fmt.Sprintf("%#v", this.HostPeer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	if this.PrevMid != nil {
		s = append(s, "PrevMid: "+fmt.Sprintf("%#v", this.PrevMid)+",\n")
	}
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Reactions != nil {
		s = append(s, "Reactions: "+fmt.Sprintf("%#v", this.Reactions)+",\n")
	}
	if this.Attribute != nil {
		s = append(s, "Attribute: "+fmt.Sprintf("%#v", this.Attribute)+",\n")
	}
	if this.Attach != nil {
		s = append(s, "Attach: "+fmt.Sprintf("%#v", this.Attach)+",\n")
	}
	if this.EditedAt != nil {
		s = append(s, "EditedAt: "+fmt.Sprintf("%#v", this.EditedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HistoryMessage_Forward) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.HistoryMessage_Forward{` +
		`Forward:` + fmt.Sprintf("%#v", this.Forward) + `}`}, ", ")
	return s
}
func (this *HistoryMessage_Reply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.HistoryMessage_Reply{` +
		`Reply:` + fmt.Sprintf("%#v", this.Reply) + `}`}, ", ")
	return s
}
func (this *RequestLoadHistory) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.RequestLoadHistory{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "LoadMode: "+fmt.Sprintf("%#v", this.LoadMode)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadHistory) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.ResponseLoadHistory{")
	if this.History != nil {
		s = append(s, "History: "+fmt.Sprintf("%#v", this.History)+",\n")
	}
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	if this.GroupPeers != nil {
		s = append(s, "GroupPeers: "+fmt.Sprintf("%#v", this.GroupPeers)+",\n")
	}
	if this.Counter != nil {
		s = append(s, "Counter: "+fmt.Sprintf("%#v", this.Counter)+",\n")
	}
	s = append(s, "CounterDate: "+fmt.Sprintf("%#v", this.CounterDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Dialog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&dialog.Dialog{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "UnreadCount: "+fmt.Sprintf("%#v", this.UnreadCount)+",\n")
	s = append(s, "SortDate: "+fmt.Sprintf("%#v", this.SortDate)+",\n")
	s = append(s, "SenderUid: "+fmt.Sprintf("%#v", this.SenderUid)+",\n")
	if this.IsFavourite != nil {
		s = append(s, "IsFavourite: "+fmt.Sprintf("%#v", this.IsFavourite)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "FirstUnreadDate: "+fmt.Sprintf("%#v", this.FirstUnreadDate)+",\n")
	if this.Attributes != nil {
		s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	}
	if this.PinnedMessages != nil {
		s = append(s, "PinnedMessages: "+fmt.Sprintf("%#v", this.PinnedMessages)+",\n")
	}
	if this.HistoryMessage != nil {
		s = append(s, "HistoryMessage: "+fmt.Sprintf("%#v", this.HistoryMessage)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.RequestLoadDialogs{")
	s = append(s, "MinDate: "+fmt.Sprintf("%#v", this.MinDate)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "Filters: "+fmt.Sprintf("%#v", this.Filters)+",\n")
	if this.PeersToLoad != nil {
		s = append(s, "PeersToLoad: "+fmt.Sprintf("%#v", this.PeersToLoad)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.ResponseLoadDialogs{")
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Dialogs != nil {
		s = append(s, "Dialogs: "+fmt.Sprintf("%#v", this.Dialogs)+",\n")
	}
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	if this.GroupPeers != nil {
		s = append(s, "GroupPeers: "+fmt.Sprintf("%#v", this.GroupPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DialogIndex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.DialogIndex{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestFetchDialogIndex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestFetchDialogIndex{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseFetchDialogIndex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseFetchDialogIndex{")
	if this.DialogIndices != nil {
		s = append(s, "DialogIndices: "+fmt.Sprintf("%#v", this.DialogIndices)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadArchived) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestLoadArchived{")
	if this.NextOffset != nil {
		s = append(s, "NextOffset: "+fmt.Sprintf("%#v", this.NextOffset)+",\n")
	}
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadArchived) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.ResponseLoadArchived{")
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Dialogs != nil {
		s = append(s, "Dialogs: "+fmt.Sprintf("%#v", this.Dialogs)+",\n")
	}
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	if this.GroupPeers != nil {
		s = append(s, "GroupPeers: "+fmt.Sprintf("%#v", this.GroupPeers)+",\n")
	}
	if this.NextOffset != nil {
		s = append(s, "NextOffset: "+fmt.Sprintf("%#v", this.NextOffset)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadGroupedDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestLoadGroupedDialogs{")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadGroupedDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.ResponseLoadGroupedDialogs{")
	if this.Dialogs != nil {
		s = append(s, "Dialogs: "+fmt.Sprintf("%#v", this.Dialogs)+",\n")
	}
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	if this.ShowArchived != nil {
		s = append(s, "ShowArchived: "+fmt.Sprintf("%#v", this.ShowArchived)+",\n")
	}
	if this.ShowInvite != nil {
		s = append(s, "ShowInvite: "+fmt.Sprintf("%#v", this.ShowInvite)+",\n")
	}
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	if this.GroupPeers != nil {
		s = append(s, "GroupPeers: "+fmt.Sprintf("%#v", this.GroupPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseDialogsOrder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseDialogsOrder{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestHideDialog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestHideDialog{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestShowDialog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestShowDialog{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestFavouriteDialog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestFavouriteDialog{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestUnfavouriteDialog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestUnfavouriteDialog{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateDialogFavouriteChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateDialogFavouriteChanged{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.IsFavourite != nil {
		s = append(s, "IsFavourite: "+fmt.Sprintf("%#v", this.IsFavourite)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestNotifyDialogOpened) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestNotifyDialogOpened{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PinnedMessages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.PinnedMessages{")
	if this.Mids != nil {
		s = append(s, "Mids: "+fmt.Sprintf("%#v", this.Mids)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestPinMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestPinMessage{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "LastPinDate: "+fmt.Sprintf("%#v", this.LastPinDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestUnpinMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestUnpinMessage{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "LastPinDate: "+fmt.Sprintf("%#v", this.LastPinDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdatePinnedMessagesChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdatePinnedMessagesChanged{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.PinnedMessages != nil {
		s = append(s, "PinnedMessages: "+fmt.Sprintf("%#v", this.PinnedMessages)+",\n")
	}
	s = append(s, "ActionDate: "+fmt.Sprintf("%#v", this.ActionDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessaging(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Messaging service

type MessagingClient interface {
	// / Interact with a message media (click on button for example)
	DoInteractiveMediaAction(ctx context.Context, in *RequestDoInteractiveMediaAction, opts ...grpc.CallOption) (*ResponseVoid, error)
	SendMessage(ctx context.Context, in *RequestSendMessage, opts ...grpc.CallOption) (*ResponseSeqDate, error)
	UpdateMessage(ctx context.Context, in *RequestUpdateMessage, opts ...grpc.CallOption) (*ResponseSeqDate, error)
	// / Mark message as received by self
	MessageReceived(ctx context.Context, in *RequestMessageReceived, opts ...grpc.CallOption) (*ResponseVoid, error)
	// / Mark message as read by self
	MessageRead(ctx context.Context, in *RequestMessageRead, opts ...grpc.CallOption) (*ResponseVoid, error)
	// / deprecated
	DeleteMessageObsolete(ctx context.Context, in *RequestDeleteMessageObsolete, opts ...grpc.CallOption) (*ResponseSeq, error)
	// / Clear chat history
	ClearChat(ctx context.Context, in *RequestClearChat, opts ...grpc.CallOption) (*ResponseSeq, error)
	DeleteChat(ctx context.Context, in *RequestDeleteChat, opts ...grpc.CallOption) (*ResponseSeq, error)
	// / deprecated
	ArchiveChat(ctx context.Context, in *RequestArchiveChat, opts ...grpc.CallOption) (*ResponseSeq, error)
	// / Add reaction on message (emoji)
	MessageSetReaction(ctx context.Context, in *RequestMessageSetReaction, opts ...grpc.CallOption) (*ResponseReactionsResponse, error)
	MessageRemoveReaction(ctx context.Context, in *RequestMessageRemoveReaction, opts ...grpc.CallOption) (*ResponseReactionsResponse, error)
	// / Load conversation history
	LoadHistory(ctx context.Context, in *RequestLoadHistory, opts ...grpc.CallOption) (*ResponseLoadHistory, error)
	// / Load user's dialogs
	LoadDialogs(ctx context.Context, in *RequestLoadDialogs, opts ...grpc.CallOption) (*ResponseLoadDialogs, error)
	// / Load short info about all user's dialogs
	FetchDialogIndex(ctx context.Context, in *RequestFetchDialogIndex, opts ...grpc.CallOption) (*ResponseFetchDialogIndex, error)
	// / deprecated
	LoadArchived(ctx context.Context, in *RequestLoadArchived, opts ...grpc.CallOption) (*ResponseLoadArchived, error)
	// / deprecated
	LoadGroupedDialogs(ctx context.Context, in *RequestLoadGroupedDialogs, opts ...grpc.CallOption) (*ResponseLoadGroupedDialogs, error)
	// / deprecated
	HideDialog(ctx context.Context, in *RequestHideDialog, opts ...grpc.CallOption) (*ResponseDialogsOrder, error)
	// / deprecated
	ShowDialog(ctx context.Context, in *RequestShowDialog, opts ...grpc.CallOption) (*ResponseDialogsOrder, error)
	FavouriteDialog(ctx context.Context, in *RequestFavouriteDialog, opts ...grpc.CallOption) (*ResponseDialogsOrder, error)
	UnfavouriteDialog(ctx context.Context, in *RequestUnfavouriteDialog, opts ...grpc.CallOption) (*ResponseDialogsOrder, error)
	NotifyDialogOpened(ctx context.Context, in *RequestNotifyDialogOpened, opts ...grpc.CallOption) (*ResponseVoid, error)
	PinMessage(ctx context.Context, in *RequestPinMessage, opts ...grpc.CallOption) (*ResponseSeqDate, error)
	UnpinMessage(ctx context.Context, in *RequestUnpinMessage, opts ...grpc.CallOption) (*ResponseSeqDate, error)
}

type messagingClient struct {
	cc *grpc.ClientConn
}

func NewMessagingClient(cc *grpc.ClientConn) MessagingClient {
	return &messagingClient{cc}
}

func (c *messagingClient) DoInteractiveMediaAction(ctx context.Context, in *RequestDoInteractiveMediaAction, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Messaging/DoInteractiveMediaAction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) SendMessage(ctx context.Context, in *RequestSendMessage, opts ...grpc.CallOption) (*ResponseSeqDate, error) {
	out := new(ResponseSeqDate)
	err := grpc.Invoke(ctx, "/dialog.Messaging/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) UpdateMessage(ctx context.Context, in *RequestUpdateMessage, opts ...grpc.CallOption) (*ResponseSeqDate, error) {
	out := new(ResponseSeqDate)
	err := grpc.Invoke(ctx, "/dialog.Messaging/UpdateMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) MessageReceived(ctx context.Context, in *RequestMessageReceived, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Messaging/MessageReceived", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) MessageRead(ctx context.Context, in *RequestMessageRead, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Messaging/MessageRead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) DeleteMessageObsolete(ctx context.Context, in *RequestDeleteMessageObsolete, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Messaging/DeleteMessageObsolete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) ClearChat(ctx context.Context, in *RequestClearChat, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Messaging/ClearChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) DeleteChat(ctx context.Context, in *RequestDeleteChat, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Messaging/DeleteChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) ArchiveChat(ctx context.Context, in *RequestArchiveChat, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Messaging/ArchiveChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) MessageSetReaction(ctx context.Context, in *RequestMessageSetReaction, opts ...grpc.CallOption) (*ResponseReactionsResponse, error) {
	out := new(ResponseReactionsResponse)
	err := grpc.Invoke(ctx, "/dialog.Messaging/MessageSetReaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) MessageRemoveReaction(ctx context.Context, in *RequestMessageRemoveReaction, opts ...grpc.CallOption) (*ResponseReactionsResponse, error) {
	out := new(ResponseReactionsResponse)
	err := grpc.Invoke(ctx, "/dialog.Messaging/MessageRemoveReaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) LoadHistory(ctx context.Context, in *RequestLoadHistory, opts ...grpc.CallOption) (*ResponseLoadHistory, error) {
	out := new(ResponseLoadHistory)
	err := grpc.Invoke(ctx, "/dialog.Messaging/LoadHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) LoadDialogs(ctx context.Context, in *RequestLoadDialogs, opts ...grpc.CallOption) (*ResponseLoadDialogs, error) {
	out := new(ResponseLoadDialogs)
	err := grpc.Invoke(ctx, "/dialog.Messaging/LoadDialogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) FetchDialogIndex(ctx context.Context, in *RequestFetchDialogIndex, opts ...grpc.CallOption) (*ResponseFetchDialogIndex, error) {
	out := new(ResponseFetchDialogIndex)
	err := grpc.Invoke(ctx, "/dialog.Messaging/FetchDialogIndex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) LoadArchived(ctx context.Context, in *RequestLoadArchived, opts ...grpc.CallOption) (*ResponseLoadArchived, error) {
	out := new(ResponseLoadArchived)
	err := grpc.Invoke(ctx, "/dialog.Messaging/LoadArchived", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) LoadGroupedDialogs(ctx context.Context, in *RequestLoadGroupedDialogs, opts ...grpc.CallOption) (*ResponseLoadGroupedDialogs, error) {
	out := new(ResponseLoadGroupedDialogs)
	err := grpc.Invoke(ctx, "/dialog.Messaging/LoadGroupedDialogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) HideDialog(ctx context.Context, in *RequestHideDialog, opts ...grpc.CallOption) (*ResponseDialogsOrder, error) {
	out := new(ResponseDialogsOrder)
	err := grpc.Invoke(ctx, "/dialog.Messaging/HideDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) ShowDialog(ctx context.Context, in *RequestShowDialog, opts ...grpc.CallOption) (*ResponseDialogsOrder, error) {
	out := new(ResponseDialogsOrder)
	err := grpc.Invoke(ctx, "/dialog.Messaging/ShowDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) FavouriteDialog(ctx context.Context, in *RequestFavouriteDialog, opts ...grpc.CallOption) (*ResponseDialogsOrder, error) {
	out := new(ResponseDialogsOrder)
	err := grpc.Invoke(ctx, "/dialog.Messaging/FavouriteDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) UnfavouriteDialog(ctx context.Context, in *RequestUnfavouriteDialog, opts ...grpc.CallOption) (*ResponseDialogsOrder, error) {
	out := new(ResponseDialogsOrder)
	err := grpc.Invoke(ctx, "/dialog.Messaging/UnfavouriteDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) NotifyDialogOpened(ctx context.Context, in *RequestNotifyDialogOpened, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Messaging/NotifyDialogOpened", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) PinMessage(ctx context.Context, in *RequestPinMessage, opts ...grpc.CallOption) (*ResponseSeqDate, error) {
	out := new(ResponseSeqDate)
	err := grpc.Invoke(ctx, "/dialog.Messaging/PinMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) UnpinMessage(ctx context.Context, in *RequestUnpinMessage, opts ...grpc.CallOption) (*ResponseSeqDate, error) {
	out := new(ResponseSeqDate)
	err := grpc.Invoke(ctx, "/dialog.Messaging/UnpinMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Messaging service

type MessagingServer interface {
	// / Interact with a message media (click on button for example)
	DoInteractiveMediaAction(context.Context, *RequestDoInteractiveMediaAction) (*ResponseVoid, error)
	SendMessage(context.Context, *RequestSendMessage) (*ResponseSeqDate, error)
	UpdateMessage(context.Context, *RequestUpdateMessage) (*ResponseSeqDate, error)
	// / Mark message as received by self
	MessageReceived(context.Context, *RequestMessageReceived) (*ResponseVoid, error)
	// / Mark message as read by self
	MessageRead(context.Context, *RequestMessageRead) (*ResponseVoid, error)
	// / deprecated
	DeleteMessageObsolete(context.Context, *RequestDeleteMessageObsolete) (*ResponseSeq, error)
	// / Clear chat history
	ClearChat(context.Context, *RequestClearChat) (*ResponseSeq, error)
	DeleteChat(context.Context, *RequestDeleteChat) (*ResponseSeq, error)
	// / deprecated
	ArchiveChat(context.Context, *RequestArchiveChat) (*ResponseSeq, error)
	// / Add reaction on message (emoji)
	MessageSetReaction(context.Context, *RequestMessageSetReaction) (*ResponseReactionsResponse, error)
	MessageRemoveReaction(context.Context, *RequestMessageRemoveReaction) (*ResponseReactionsResponse, error)
	// / Load conversation history
	LoadHistory(context.Context, *RequestLoadHistory) (*ResponseLoadHistory, error)
	// / Load user's dialogs
	LoadDialogs(context.Context, *RequestLoadDialogs) (*ResponseLoadDialogs, error)
	// / Load short info about all user's dialogs
	FetchDialogIndex(context.Context, *RequestFetchDialogIndex) (*ResponseFetchDialogIndex, error)
	// / deprecated
	LoadArchived(context.Context, *RequestLoadArchived) (*ResponseLoadArchived, error)
	// / deprecated
	LoadGroupedDialogs(context.Context, *RequestLoadGroupedDialogs) (*ResponseLoadGroupedDialogs, error)
	// / deprecated
	HideDialog(context.Context, *RequestHideDialog) (*ResponseDialogsOrder, error)
	// / deprecated
	ShowDialog(context.Context, *RequestShowDialog) (*ResponseDialogsOrder, error)
	FavouriteDialog(context.Context, *RequestFavouriteDialog) (*ResponseDialogsOrder, error)
	UnfavouriteDialog(context.Context, *RequestUnfavouriteDialog) (*ResponseDialogsOrder, error)
	NotifyDialogOpened(context.Context, *RequestNotifyDialogOpened) (*ResponseVoid, error)
	PinMessage(context.Context, *RequestPinMessage) (*ResponseSeqDate, error)
	UnpinMessage(context.Context, *RequestUnpinMessage) (*ResponseSeqDate, error)
}

func RegisterMessagingServer(s *grpc.Server, srv MessagingServer) {
	s.RegisterService(&_Messaging_serviceDesc, srv)
}

func _Messaging_DoInteractiveMediaAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDoInteractiveMediaAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).DoInteractiveMediaAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/DoInteractiveMediaAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).DoInteractiveMediaAction(ctx, req.(*RequestDoInteractiveMediaAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).SendMessage(ctx, req.(*RequestSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUpdateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/UpdateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).UpdateMessage(ctx, req.(*RequestUpdateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_MessageReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessageReceived)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).MessageReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/MessageReceived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).MessageReceived(ctx, req.(*RequestMessageReceived))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_MessageRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessageRead)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).MessageRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/MessageRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).MessageRead(ctx, req.(*RequestMessageRead))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_DeleteMessageObsolete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteMessageObsolete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).DeleteMessageObsolete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/DeleteMessageObsolete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).DeleteMessageObsolete(ctx, req.(*RequestDeleteMessageObsolete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_ClearChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestClearChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).ClearChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/ClearChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).ClearChat(ctx, req.(*RequestClearChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_DeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).DeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/DeleteChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).DeleteChat(ctx, req.(*RequestDeleteChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_ArchiveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestArchiveChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).ArchiveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/ArchiveChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).ArchiveChat(ctx, req.(*RequestArchiveChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_MessageSetReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessageSetReaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).MessageSetReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/MessageSetReaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).MessageSetReaction(ctx, req.(*RequestMessageSetReaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_MessageRemoveReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessageRemoveReaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).MessageRemoveReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/MessageRemoveReaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).MessageRemoveReaction(ctx, req.(*RequestMessageRemoveReaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_LoadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).LoadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/LoadHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).LoadHistory(ctx, req.(*RequestLoadHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_LoadDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).LoadDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/LoadDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).LoadDialogs(ctx, req.(*RequestLoadDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_FetchDialogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFetchDialogIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).FetchDialogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/FetchDialogIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).FetchDialogIndex(ctx, req.(*RequestFetchDialogIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_LoadArchived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadArchived)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).LoadArchived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/LoadArchived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).LoadArchived(ctx, req.(*RequestLoadArchived))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_LoadGroupedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadGroupedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).LoadGroupedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/LoadGroupedDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).LoadGroupedDialogs(ctx, req.(*RequestLoadGroupedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_HideDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestHideDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).HideDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/HideDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).HideDialog(ctx, req.(*RequestHideDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_ShowDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestShowDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).ShowDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/ShowDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).ShowDialog(ctx, req.(*RequestShowDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_FavouriteDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFavouriteDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).FavouriteDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/FavouriteDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).FavouriteDialog(ctx, req.(*RequestFavouriteDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_UnfavouriteDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUnfavouriteDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).UnfavouriteDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/UnfavouriteDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).UnfavouriteDialog(ctx, req.(*RequestUnfavouriteDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_NotifyDialogOpened_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNotifyDialogOpened)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).NotifyDialogOpened(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/NotifyDialogOpened",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).NotifyDialogOpened(ctx, req.(*RequestNotifyDialogOpened))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_PinMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPinMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).PinMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/PinMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).PinMessage(ctx, req.(*RequestPinMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_UnpinMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUnpinMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).UnpinMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/UnpinMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).UnpinMessage(ctx, req.(*RequestUnpinMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Messaging_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Messaging",
	HandlerType: (*MessagingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoInteractiveMediaAction",
			Handler:    _Messaging_DoInteractiveMediaAction_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Messaging_SendMessage_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _Messaging_UpdateMessage_Handler,
		},
		{
			MethodName: "MessageReceived",
			Handler:    _Messaging_MessageReceived_Handler,
		},
		{
			MethodName: "MessageRead",
			Handler:    _Messaging_MessageRead_Handler,
		},
		{
			MethodName: "DeleteMessageObsolete",
			Handler:    _Messaging_DeleteMessageObsolete_Handler,
		},
		{
			MethodName: "ClearChat",
			Handler:    _Messaging_ClearChat_Handler,
		},
		{
			MethodName: "DeleteChat",
			Handler:    _Messaging_DeleteChat_Handler,
		},
		{
			MethodName: "ArchiveChat",
			Handler:    _Messaging_ArchiveChat_Handler,
		},
		{
			MethodName: "MessageSetReaction",
			Handler:    _Messaging_MessageSetReaction_Handler,
		},
		{
			MethodName: "MessageRemoveReaction",
			Handler:    _Messaging_MessageRemoveReaction_Handler,
		},
		{
			MethodName: "LoadHistory",
			Handler:    _Messaging_LoadHistory_Handler,
		},
		{
			MethodName: "LoadDialogs",
			Handler:    _Messaging_LoadDialogs_Handler,
		},
		{
			MethodName: "FetchDialogIndex",
			Handler:    _Messaging_FetchDialogIndex_Handler,
		},
		{
			MethodName: "LoadArchived",
			Handler:    _Messaging_LoadArchived_Handler,
		},
		{
			MethodName: "LoadGroupedDialogs",
			Handler:    _Messaging_LoadGroupedDialogs_Handler,
		},
		{
			MethodName: "HideDialog",
			Handler:    _Messaging_HideDialog_Handler,
		},
		{
			MethodName: "ShowDialog",
			Handler:    _Messaging_ShowDialog_Handler,
		},
		{
			MethodName: "FavouriteDialog",
			Handler:    _Messaging_FavouriteDialog_Handler,
		},
		{
			MethodName: "UnfavouriteDialog",
			Handler:    _Messaging_UnfavouriteDialog_Handler,
		},
		{
			MethodName: "NotifyDialogOpened",
			Handler:    _Messaging_NotifyDialogOpened_Handler,
		},
		{
			MethodName: "PinMessage",
			Handler:    _Messaging_PinMessage_Handler,
		},
		{
			MethodName: "UnpinMessage",
			Handler:    _Messaging_UnpinMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messaging.proto",
}

func (m *MessageAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageAttributes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsMentioned != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.IsMentioned.Size()))
		n1, err := m.IsMentioned.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.IsHighlighted != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.IsHighlighted.Size()))
		n2, err := m.IsHighlighted.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.IsNotified != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.IsNotified.Size()))
		n3, err := m.IsNotified.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.IsOnlyForYou != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.IsOnlyForYou.Size()))
		n4, err := m.IsOnlyForYou.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *QuotedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuotedMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MessageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.MessageId))
	}
	if m.PublicGroupId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.PublicGroupId))
	}
	if m.SenderUserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.SenderUserId))
	}
	if m.MessageDate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.MessageDate))
	}
	if m.QuotedMessageContent != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.QuotedMessageContent.Size()))
		n5, err := m.QuotedMessageContent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *MessageMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Webpage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Webpage.Size()))
		n6, err := m.Webpage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Image != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Image.Size()))
		n7, err := m.Image.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Audio != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Audio.Size()))
		n8, err := m.Audio.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.Actions) > 0 {
		for _, msg := range m.Actions {
			dAtA[i] = 0x32
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WebpageMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebpageMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Url != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Url.Size()))
		n9, err := m.Url.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Title.Size()))
		n10, err := m.Title.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Description != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Description.Size()))
		n11, err := m.Description.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Image != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Image.Size()))
		n12, err := m.Image.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *ImageMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Image != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Image.Size()))
		n13, err := m.Image.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *AudioMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Audio != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Audio.Size()))
		n14, err := m.Audio.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *InteractiveMediaWidget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractiveMediaWidget) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		nn15, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn15
	}
	return i, nil
}

func (m *InteractiveMediaWidget_InteractiveMediaButton) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InteractiveMediaButton != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.InteractiveMediaButton.Size()))
		n16, err := m.InteractiveMediaButton.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *InteractiveMediaWidget_InteractiveMediaSelect) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InteractiveMediaSelect != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.InteractiveMediaSelect.Size()))
		n17, err := m.InteractiveMediaSelect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *InteractiveMediaButton) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractiveMediaButton) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Label != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Label.Size()))
		n18, err := m.Label.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *InteractiveMediaSelect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractiveMediaSelect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		for _, msg := range m.Options {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Label != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Label.Size()))
		n19, err := m.Label.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.DefaultValue != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.DefaultValue.Size()))
		n20, err := m.DefaultValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *InteractiveMediaSelectOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractiveMediaSelectOption) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	return i, nil
}

func (m *InteractiveMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractiveMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Widget != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Widget.Size()))
		n21, err := m.Widget.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.Style != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Style))
	}
	if m.Confirm != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Confirm.Size()))
		n22, err := m.Confirm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *InteractiveMediaTranslation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractiveMediaTranslation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *InteractiveMediaTranslationGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractiveMediaTranslationGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Language) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Language)))
		i += copy(dAtA[i:], m.Language)
	}
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InteractiveMediaGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractiveMediaGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, msg := range m.Actions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Title.Size()))
		n23, err := m.Title.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.Description != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Description.Size()))
		n24, err := m.Description.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if len(m.Translations) > 0 {
		for _, msg := range m.Translations {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InteractiveMediaConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractiveMediaConfirm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Text != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Text.Size()))
		n25, err := m.Text.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Title.Size()))
		n26, err := m.Title.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.Ok != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Ok.Size()))
		n27, err := m.Ok.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.Dismiss != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Dismiss.Size()))
		n28, err := m.Dismiss.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *UpdateInteractiveMediaEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateInteractiveMediaEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Mid.Size()))
		n29, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *RequestDoInteractiveMediaAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDoInteractiveMediaAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Mid.Size()))
		n30, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *MessageContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageContent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		nn31, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn31
	}
	return i, nil
}

func (m *MessageContent_TextMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TextMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.TextMessage.Size()))
		n32, err := m.TextMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *MessageContent_ServiceMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ServiceMessage != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.ServiceMessage.Size()))
		n33, err := m.ServiceMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *MessageContent_DocumentMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DocumentMessage != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.DocumentMessage.Size()))
		n34, err := m.DocumentMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func (m *MessageContent_JsonMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JsonMessage != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.JsonMessage.Size()))
		n35, err := m.JsonMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}
func (m *MessageContent_UnsupportedMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UnsupportedMessage != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.UnsupportedMessage.Size()))
		n36, err := m.UnsupportedMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}
func (m *MessageContent_StickerMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StickerMessage != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.StickerMessage.Size()))
		n37, err := m.StickerMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *MessageContent_BinaryMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BinaryMessage != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.BinaryMessage.Size()))
		n38, err := m.BinaryMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *MessageContent_EmptyMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EmptyMessage != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.EmptyMessage.Size()))
		n39, err := m.EmptyMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *MessageContent_DeletedMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeletedMessage != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.DeletedMessage.Size()))
		n40, err := m.DeletedMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *TextMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.Mentions) > 0 {
		dAtA42 := make([]byte, len(m.Mentions)*10)
		var j41 int
		for _, num1 := range m.Mentions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA42[j41] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j41++
			}
			dAtA42[j41] = uint8(num)
			j41++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(j41))
		i += copy(dAtA[i:], dAtA42[:j41])
	}
	if m.Ext != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Ext.Size()))
		n43, err := m.Ext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if len(m.Media) > 0 {
		for _, msg := range m.Media {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Extensions) > 0 {
		for _, msg := range m.Extensions {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TextMessageEx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextMessageEx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		nn44, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn44
	}
	return i, nil
}

func (m *TextMessageEx_TextExMarkdown) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TextExMarkdown != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.TextExMarkdown.Size()))
		n45, err := m.TextExMarkdown.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}
func (m *TextMessageEx_TextModernMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TextModernMessage != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.TextModernMessage.Size()))
		n46, err := m.TextModernMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}
func (m *TextMessageEx_TextCommand) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TextCommand != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.TextCommand.Size()))
		n47, err := m.TextCommand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}
func (m *TextExMarkdown) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextExMarkdown) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Markdown) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Markdown)))
		i += copy(dAtA[i:], m.Markdown)
	}
	return i, nil
}

func (m *TextModernMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextModernMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Text != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Text.Size()))
		n48, err := m.Text.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	if m.SenderNameOverride != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.SenderNameOverride.Size()))
		n49, err := m.SenderNameOverride.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	if m.SenderPhotoOverride != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.SenderPhotoOverride.Size()))
		n50, err := m.SenderPhotoOverride.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	if m.Style != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Style.Size()))
		n51, err := m.Style.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	if len(m.Attaches) > 0 {
		for _, msg := range m.Attaches {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ParagraphStyle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParagraphStyle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShowParagraph != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.ShowParagraph.Size()))
		n52, err := m.ShowParagraph.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	if m.ParagraphColor != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.ParagraphColor.Size()))
		n53, err := m.ParagraphColor.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	if m.BgColor != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.BgColor.Size()))
		n54, err := m.BgColor.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}

func (m *TextModernAttach) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextModernAttach) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Title != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Title.Size()))
		n55, err := m.Title.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	if m.TitleUrl != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.TitleUrl.Size()))
		n56, err := m.TitleUrl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	if m.TitleIcon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.TitleIcon.Size()))
		n57, err := m.TitleIcon.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	if m.Text != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Text.Size()))
		n58, err := m.Text.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	if m.Style != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Style.Size()))
		n59, err := m.Style.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	if len(m.Fields) > 0 {
		for _, msg := range m.Fields {
			dAtA[i] = 0x32
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TextModernField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextModernField) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.IsShort != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.IsShort.Size()))
		n60, err := m.IsShort.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	return i, nil
}

func (m *TextCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Command) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Command)))
		i += copy(dAtA[i:], m.Command)
	}
	if len(m.Args) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Args)))
		i += copy(dAtA[i:], m.Args)
	}
	return i, nil
}

func (m *ServiceMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if m.Ext != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Ext.Size()))
		n61, err := m.Ext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	return i, nil
}

func (m *ServiceEx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceEx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		nn62, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn62
	}
	return i, nil
}

func (m *ServiceEx_UserInvited) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UserInvited != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.UserInvited.Size()))
		n63, err := m.UserInvited.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	return i, nil
}
func (m *ServiceEx_UserJoined) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UserJoined != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.UserJoined.Size()))
		n64, err := m.UserJoined.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}
func (m *ServiceEx_UserKicked) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UserKicked != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.UserKicked.Size()))
		n65, err := m.UserKicked.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	return i, nil
}
func (m *ServiceEx_UserLeft) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UserLeft != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.UserLeft.Size()))
		n66, err := m.UserLeft.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	return i, nil
}
func (m *ServiceEx_GroupCreated) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GroupCreated != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.GroupCreated.Size()))
		n67, err := m.GroupCreated.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	return i, nil
}
func (m *ServiceEx_ChangedTitle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ChangedTitle != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.ChangedTitle.Size()))
		n68, err := m.ChangedTitle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	return i, nil
}
func (m *ServiceEx_ChangedTopic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ChangedTopic != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.ChangedTopic.Size()))
		n69, err := m.ChangedTopic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	return i, nil
}
func (m *ServiceEx_ChangedAbout) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ChangedAbout != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.ChangedAbout.Size()))
		n70, err := m.ChangedAbout.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	return i, nil
}
func (m *ServiceEx_ChangedAvatar) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ChangedAvatar != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.ChangedAvatar.Size()))
		n71, err := m.ChangedAvatar.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	return i, nil
}
func (m *ServiceEx_ContactRegistered) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ContactRegistered != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.ContactRegistered.Size()))
		n72, err := m.ContactRegistered.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	return i, nil
}
func (m *ServiceEx_PhoneMissed) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PhoneMissed != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.PhoneMissed.Size()))
		n73, err := m.PhoneMissed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	return i, nil
}
func (m *ServiceEx_PhoneCall) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PhoneCall != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.PhoneCall.Size()))
		n74, err := m.PhoneCall.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	return i, nil
}
func (m *ServiceEx_PhoneRejected) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PhoneRejected != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.PhoneRejected.Size()))
		n75, err := m.PhoneRejected.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}
func (m *ServiceEx_ChatArchived) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ChatArchived != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.ChatArchived.Size()))
		n76, err := m.ChatArchived.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}
func (m *ServiceEx_ChatRestored) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ChatRestored != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.ChatRestored.Size()))
		n77, err := m.ChatRestored.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}
func (m *ServiceExUserInvited) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExUserInvited) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InvitedUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.InvitedUid))
	}
	return i, nil
}

func (m *ServiceExUserJoined) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExUserJoined) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ServiceExUserKicked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExUserKicked) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KickedUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.KickedUid))
	}
	return i, nil
}

func (m *ServiceExUserLeft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExUserLeft) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ServiceExGroupCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExGroupCreated) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ServiceExChangedTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExChangedTitle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	return i, nil
}

func (m *ServiceExChangedTopic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExChangedTopic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Topic != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Topic.Size()))
		n78, err := m.Topic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}

func (m *ServiceExChangedAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExChangedAbout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.About != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.About.Size()))
		n79, err := m.About.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n79
	}
	return i, nil
}

func (m *ServiceExChangedAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExChangedAvatar) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Avatar != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Avatar.Size()))
		n80, err := m.Avatar.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	return i, nil
}

func (m *ServiceExContactRegistered) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExContactRegistered) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *ServiceExPhoneMissed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExPhoneMissed) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ServiceExPhoneCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExPhoneCall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Duration))
	}
	return i, nil
}

func (m *ServiceExPhoneRejected) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExPhoneRejected) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ServiceExChatArchived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExChatArchived) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ServiceExChatRestored) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExChatRestored) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DocumentMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FileId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.FileId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.AccessHash))
	}
	if m.FileSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.FileSize))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.MimeType) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.MimeType)))
		i += copy(dAtA[i:], m.MimeType)
	}
	if m.Thumb != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Thumb.Size()))
		n81, err := m.Thumb.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	if m.Ext != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Ext.Size()))
		n82, err := m.Ext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	return i, nil
}

func (m *DocumentEx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentEx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		nn83, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn83
	}
	return i, nil
}

func (m *DocumentEx_Photo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Photo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Photo.Size()))
		n84, err := m.Photo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	return i, nil
}
func (m *DocumentEx_Video) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Video != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Video.Size()))
		n85, err := m.Video.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n85
	}
	return i, nil
}
func (m *DocumentEx_Voice) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Voice != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Voice.Size()))
		n86, err := m.Voice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n86
	}
	return i, nil
}
func (m *DocumentExPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentExPhoto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.W != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.W))
	}
	if m.H != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.H))
	}
	return i, nil
}

func (m *DocumentExVideo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentExVideo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.W != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.W))
	}
	if m.H != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.H))
	}
	if m.Duration != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Duration))
	}
	return i, nil
}

func (m *DocumentExVoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentExVoice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Duration))
	}
	return i, nil
}

func (m *JsonMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JsonMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RawJson) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.RawJson)))
		i += copy(dAtA[i:], m.RawJson)
	}
	return i, nil
}

func (m *UnsupportedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsupportedMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StickerMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StickerId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.StickerId.Size()))
		n87, err := m.StickerId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n87
	}
	if m.FastPreview != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.FastPreview.Size()))
		n88, err := m.FastPreview.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	if m.Image_512 != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Image_512.Size()))
		n89, err := m.Image_512.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n89
	}
	if m.Image_256 != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Image_256.Size()))
		n90, err := m.Image_256.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n90
	}
	if m.StickerCollectionId != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.StickerCollectionId.Size()))
		n91, err := m.StickerCollectionId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n91
	}
	if m.StickerCollectionAccessHash != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.StickerCollectionAccessHash.Size()))
		n92, err := m.StickerCollectionAccessHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n92
	}
	if m.Emoji != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Emoji.Size()))
		n93, err := m.Emoji.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n93
	}
	return i, nil
}

func (m *BinaryMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BinaryMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContentTag) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.ContentTag)))
		i += copy(dAtA[i:], m.ContentTag)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *EmptyMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeletedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletedMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsLocal != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.IsLocal.Size()))
		n94, err := m.IsLocal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n94
	}
	return i, nil
}

func (m *DialogShort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialogShort) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n95, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n95
	}
	if m.Counter != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Counter))
	}
	if m.Date != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
	}
	return i, nil
}

func (m *DialogGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialogGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Dialogs) > 0 {
		for _, msg := range m.Dialogs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MessageReaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageReaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		dAtA97 := make([]byte, len(m.Users)*10)
		var j96 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA97[j96] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j96++
			}
			dAtA97[j96] = uint8(num)
			j96++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(j96))
		i += copy(dAtA[i:], dAtA97[:j96])
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	return i, nil
}

func (m *SearchPredicate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchPredicate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *RequestSendMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSendMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n98, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n98
	}
	if m.Rid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Rid))
	}
	if m.Message != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Message.Size()))
		n99, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n99
	}
	if m.IsOnlyForUser != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.IsOnlyForUser))
	}
	if m.Forward != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Forward.Size()))
		n100, err := m.Forward.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n100
	}
	if m.Reply != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Reply.Size()))
		n101, err := m.Reply.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n101
	}
	if len(m.Predicates) > 0 {
		for _, msg := range m.Predicates {
			dAtA[i] = 0x52
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.WhiteList) > 0 {
		dAtA103 := make([]byte, len(m.WhiteList)*10)
		var j102 int
		for _, num1 := range m.WhiteList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA103[j102] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j102++
			}
			dAtA103[j102] = uint8(num)
			j102++
		}
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(j102))
		i += copy(dAtA[i:], dAtA103[:j102])
	}
	if len(m.BlackList) > 0 {
		dAtA105 := make([]byte, len(m.BlackList)*10)
		var j104 int
		for _, num1 := range m.BlackList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA105[j104] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j104++
			}
			dAtA105[j104] = uint8(num)
			j104++
		}
		dAtA[i] = 0x62
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(j104))
		i += copy(dAtA[i:], dAtA105[:j104])
	}
	return i, nil
}

func (m *RequestUpdateMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUpdateMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Mid.Size()))
		n106, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n106
	}
	if m.UpdatedMessage != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.UpdatedMessage.Size()))
		n107, err := m.UpdatedMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n107
	}
	if m.LastEditedAt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.LastEditedAt))
	}
	return i, nil
}

func (m *RequestMessageReceived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMessageReceived) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n108, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n108
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
	}
	return i, nil
}

func (m *RequestMessageRead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMessageRead) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n109, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n109
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
	}
	return i, nil
}

func (m *RequestDeleteMessageObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDeleteMessageObsolete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		for _, msg := range m.Mids {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestClearChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestClearChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n110, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n110
	}
	if m.LastMessageDate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.LastMessageDate))
	}
	return i, nil
}

func (m *RequestDeleteChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDeleteChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n111, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n111
	}
	if m.LastMessageDate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.LastMessageDate))
	}
	return i, nil
}

func (m *RequestArchiveChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestArchiveChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n112, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n112
	}
	return i, nil
}

func (m *RequestMessageSetReaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMessageSetReaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n113, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n113
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Mid != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Mid.Size()))
		n114, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n114
	}
	return i, nil
}

func (m *RequestMessageRemoveReaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMessageRemoveReaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n115, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n115
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Mid != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Mid.Size()))
		n116, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n116
	}
	return i, nil
}

func (m *ResponseReactionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseReactionsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Seq))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if len(m.Reactions) > 0 {
		for _, msg := range m.Reactions {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n117, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n117
	}
	if m.SenderUid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.SenderUid))
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
	}
	if m.Message != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Message.Size()))
		n118, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n118
	}
	if m.Attributes != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Attributes.Size()))
		n119, err := m.Attributes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n119
	}
	if m.Mid != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Mid.Size()))
		n120, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n120
	}
	if m.Attach != nil {
		nn121, err := m.Attach.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn121
	}
	if m.PreviousMid != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.PreviousMid.Size()))
		n122, err := m.PreviousMid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n122
	}
	if m.Counter != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Counter.Size()))
		n123, err := m.Counter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n123
	}
	return i, nil
}

func (m *UpdateMessage_Forward) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Forward != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Forward.Size()))
		n124, err := m.Forward.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n124
	}
	return i, nil
}
func (m *UpdateMessage_Reply) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Reply != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Reply.Size()))
		n125, err := m.Reply.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n125
	}
	return i, nil
}
func (m *UpdateMessageContentChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageContentChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n126, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n126
	}
	if m.Message != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Message.Size()))
		n127, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n127
	}
	if m.Mid != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Mid.Size()))
		n128, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n128
	}
	if m.EditedAt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.EditedAt))
	}
	return i, nil
}

func (m *UpdateMessageSent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageSent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n129, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n129
	}
	if m.Rid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Rid))
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
	}
	if m.Mid != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Mid.Size()))
		n130, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n130
	}
	if m.PrevMid != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.PrevMid.Size()))
		n131, err := m.PrevMid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n131
	}
	if m.UnreadCounter != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.UnreadCounter.Size()))
		n132, err := m.UnreadCounter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n132
	}
	return i, nil
}

func (m *UpdateMessageReceived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageReceived) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n133, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n133
	}
	if m.StartDate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.StartDate))
	}
	if m.ReceivedDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.ReceivedDate))
	}
	return i, nil
}

func (m *UpdateMessageRead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageRead) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n134, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n134
	}
	if m.StartDate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.StartDate))
	}
	if m.ReadDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.ReadDate))
	}
	return i, nil
}

func (m *UpdateMessageReadByMe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageReadByMe) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n135, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n135
	}
	if m.StartDate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.StartDate))
	}
	if m.UnreadCounter != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.UnreadCounter.Size()))
		n136, err := m.UnreadCounter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n136
	}
	return i, nil
}

func (m *UpdateMessageDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageDelete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n137, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n137
	}
	if len(m.Mids) > 0 {
		for _, msg := range m.Mids {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Counter != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Counter.Size()))
		n138, err := m.Counter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n138
	}
	if m.ActionDate != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.ActionDate))
	}
	return i, nil
}

func (m *UpdateChatClear) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChatClear) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n139, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n139
	}
	if m.ActionDate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.ActionDate))
	}
	return i, nil
}

func (m *UpdateChatDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChatDelete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n140, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n140
	}
	if m.ActionDate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.ActionDate))
	}
	return i, nil
}

func (m *UpdateChatArchive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChatArchive) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n141, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n141
	}
	return i, nil
}

func (m *UpdateChatGroupsChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChatGroupsChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Dialogs) > 0 {
		for _, msg := range m.Dialogs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateReactionsUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateReactionsUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n142, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n142
	}
	if len(m.Reactions) > 0 {
		for _, msg := range m.Reactions {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Mid != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Mid.Size()))
		n143, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n143
	}
	return i, nil
}

func (m *UpdateMessageRejectedByHook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageRejectedByHook) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n144, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n144
	}
	if m.Rid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Rid))
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
	}
	if len(m.HookId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.HookId)))
		i += copy(dAtA[i:], m.HookId)
	}
	if m.Reason != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Reason.Size()))
		n145, err := m.Reason.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n145
	}
	return i, nil
}

func (m *UpdateMessageEditRejectedByHook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageEditRejectedByHook) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n146, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n146
	}
	if m.Mid != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Mid.Size()))
		n147, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n147
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
	}
	if len(m.HookId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.HookId)))
		i += copy(dAtA[i:], m.HookId)
	}
	if m.Reason != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Reason.Size()))
		n148, err := m.Reason.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n148
	}
	return i, nil
}

func (m *ReferencedMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReferencedMessages) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		for _, msg := range m.Mids {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HistoryMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SenderUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.SenderUid))
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
	}
	if m.Message != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Message.Size()))
		n149, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n149
	}
	if m.State != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.State))
	}
	if len(m.Reactions) > 0 {
		for _, msg := range m.Reactions {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Attribute != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Attribute.Size()))
		n150, err := m.Attribute.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n150
	}
	if m.Mid != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Mid.Size()))
		n151, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n151
	}
	if m.HostPeer != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.HostPeer.Size()))
		n152, err := m.HostPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n152
	}
	if m.Attach != nil {
		nn153, err := m.Attach.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn153
	}
	if m.SenderPeer != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.SenderPeer.Size()))
		n154, err := m.SenderPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n154
	}
	if m.EditedAt != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.EditedAt.Size()))
		n155, err := m.EditedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n155
	}
	if m.PrevMid != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.PrevMid.Size()))
		n156, err := m.PrevMid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n156
	}
	return i, nil
}

func (m *HistoryMessage_Forward) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Forward != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Forward.Size()))
		n157, err := m.Forward.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n157
	}
	return i, nil
}
func (m *HistoryMessage_Reply) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Reply != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Reply.Size()))
		n158, err := m.Reply.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n158
	}
	return i, nil
}
func (m *RequestLoadHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n159, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n159
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Limit))
	}
	if m.LoadMode != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.LoadMode))
	}
	if len(m.Optimizations) > 0 {
		dAtA161 := make([]byte, len(m.Optimizations)*10)
		var j160 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA161[j160] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j160++
			}
			dAtA161[j160] = uint8(num)
			j160++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(j160))
		i += copy(dAtA[i:], dAtA161[:j160])
	}
	return i, nil
}

func (m *ResponseLoadHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.History) > 0 {
		for _, msg := range m.History {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UserPeers) > 0 {
		for _, msg := range m.UserPeers {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, msg := range m.GroupPeers {
			dAtA[i] = 0x32
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Counter != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Counter.Size()))
		n162, err := m.Counter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n162
	}
	if m.CounterDate != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.CounterDate))
	}
	return i, nil
}

func (m *Dialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n163, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n163
	}
	if m.UnreadCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.UnreadCount))
	}
	if m.SortDate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.SortDate))
	}
	if m.SenderUid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.SenderUid))
	}
	if m.Date != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
	}
	if m.Message != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Message.Size()))
		n164, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n164
	}
	if m.State != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.State))
	}
	if m.FirstUnreadDate != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.FirstUnreadDate))
	}
	if m.Attributes != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Attributes.Size()))
		n165, err := m.Attributes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n165
	}
	if m.Mid != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Mid.Size()))
		n166, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n166
	}
	if m.IsFavourite != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.IsFavourite.Size()))
		n167, err := m.IsFavourite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n167
	}
	if m.PinnedMessages != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.PinnedMessages.Size()))
		n168, err := m.PinnedMessages.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n168
	}
	if m.HistoryMessage != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.HistoryMessage.Size()))
		n169, err := m.HistoryMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n169
	}
	return i, nil
}

func (m *RequestLoadDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadDialogs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinDate != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.MinDate))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Limit))
	}
	if len(m.Optimizations) > 0 {
		dAtA171 := make([]byte, len(m.Optimizations)*10)
		var j170 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA171[j170] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j170++
			}
			dAtA171[j170] = uint8(num)
			j170++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(j170))
		i += copy(dAtA[i:], dAtA171[:j170])
	}
	if len(m.Filters) > 0 {
		dAtA173 := make([]byte, len(m.Filters)*10)
		var j172 int
		for _, num := range m.Filters {
			for num >= 1<<7 {
				dAtA173[j172] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j172++
			}
			dAtA173[j172] = uint8(num)
			j172++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(j172))
		i += copy(dAtA[i:], dAtA173[:j172])
	}
	if len(m.PeersToLoad) > 0 {
		for _, msg := range m.PeersToLoad {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ResponseLoadDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadDialogs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Dialogs) > 0 {
		for _, msg := range m.Dialogs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UserPeers) > 0 {
		for _, msg := range m.UserPeers {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, msg := range m.GroupPeers {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DialogIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialogIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n174, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n174
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Timestamp))
	}
	return i, nil
}

func (m *RequestFetchDialogIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestFetchDialogIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResponseFetchDialogIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseFetchDialogIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DialogIndices) > 0 {
		for _, msg := range m.DialogIndices {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestLoadArchived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadArchived) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NextOffset != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.NextOffset.Size()))
		n175, err := m.NextOffset.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n175
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Limit))
	}
	if len(m.Optimizations) > 0 {
		dAtA177 := make([]byte, len(m.Optimizations)*10)
		var j176 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA177[j176] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j176++
			}
			dAtA177[j176] = uint8(num)
			j176++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(j176))
		i += copy(dAtA[i:], dAtA177[:j176])
	}
	return i, nil
}

func (m *ResponseLoadArchived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadArchived) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Dialogs) > 0 {
		for _, msg := range m.Dialogs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NextOffset != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.NextOffset.Size()))
		n178, err := m.NextOffset.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n178
	}
	if len(m.UserPeers) > 0 {
		for _, msg := range m.UserPeers {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, msg := range m.GroupPeers {
			dAtA[i] = 0x32
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestLoadGroupedDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadGroupedDialogs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Optimizations) > 0 {
		dAtA180 := make([]byte, len(m.Optimizations)*10)
		var j179 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA180[j179] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j179++
			}
			dAtA180[j179] = uint8(num)
			j179++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(j179))
		i += copy(dAtA[i:], dAtA180[:j179])
	}
	return i, nil
}

func (m *ResponseLoadGroupedDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadGroupedDialogs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Dialogs) > 0 {
		for _, msg := range m.Dialogs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ShowArchived != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.ShowArchived.Size()))
		n181, err := m.ShowArchived.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n181
	}
	if m.ShowInvite != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.ShowInvite.Size()))
		n182, err := m.ShowInvite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n182
	}
	if len(m.UserPeers) > 0 {
		for _, msg := range m.UserPeers {
			dAtA[i] = 0x32
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, msg := range m.GroupPeers {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ResponseDialogsOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseDialogsOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Seq))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestHideDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHideDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n183, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n183
	}
	return i, nil
}

func (m *RequestShowDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestShowDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n184, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n184
	}
	return i, nil
}

func (m *RequestFavouriteDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestFavouriteDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n185, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n185
	}
	return i, nil
}

func (m *RequestUnfavouriteDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUnfavouriteDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n186, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n186
	}
	return i, nil
}

func (m *UpdateDialogFavouriteChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDialogFavouriteChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n187, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n187
	}
	if m.IsFavourite != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.IsFavourite.Size()))
		n188, err := m.IsFavourite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n188
	}
	return i, nil
}

func (m *RequestNotifyDialogOpened) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestNotifyDialogOpened) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n189, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n189
	}
	return i, nil
}

func (m *PinnedMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PinnedMessages) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		for _, msg := range m.Mids {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestPinMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPinMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n190, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n190
	}
	if m.Mid != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Mid.Size()))
		n191, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n191
	}
	if m.LastPinDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.LastPinDate))
	}
	return i, nil
}

func (m *RequestUnpinMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUnpinMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n192, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n192
	}
	if m.Mid != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Mid.Size()))
		n193, err := m.Mid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n193
	}
	if m.LastPinDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.LastPinDate))
	}
	return i, nil
}

func (m *UpdatePinnedMessagesChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePinnedMessagesChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.Peer.Size()))
		n194, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n194
	}
	if m.PinnedMessages != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.PinnedMessages.Size()))
		n195, err := m.PinnedMessages.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n195
	}
	if m.ActionDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessaging(dAtA, i, uint64(m.ActionDate))
	}
	return i, nil
}

func encodeFixed64Messaging(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Messaging(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMessaging(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MessageAttributes) Size() (n int) {
	var l int
	_ = l
	if m.IsMentioned != nil {
		l = m.IsMentioned.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.IsHighlighted != nil {
		l = m.IsHighlighted.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.IsNotified != nil {
		l = m.IsNotified.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.IsOnlyForYou != nil {
		l = m.IsOnlyForYou.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *QuotedMessage) Size() (n int) {
	var l int
	_ = l
	if m.MessageId != 0 {
		n += 1 + sovMessaging(uint64(m.MessageId))
	}
	if m.PublicGroupId != 0 {
		n += 1 + sovMessaging(uint64(m.PublicGroupId))
	}
	if m.SenderUserId != 0 {
		n += 1 + sovMessaging(uint64(m.SenderUserId))
	}
	if m.MessageDate != 0 {
		n += 1 + sovMessaging(uint64(m.MessageDate))
	}
	if m.QuotedMessageContent != nil {
		l = m.QuotedMessageContent.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *MessageMedia) Size() (n int) {
	var l int
	_ = l
	if m.Webpage != nil {
		l = m.Webpage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Audio != nil {
		l = m.Audio.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *WebpageMedia) Size() (n int) {
	var l int
	_ = l
	if m.Url != nil {
		l = m.Url.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Title != nil {
		l = m.Title.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ImageMedia) Size() (n int) {
	var l int
	_ = l
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *AudioMedia) Size() (n int) {
	var l int
	_ = l
	if m.Audio != nil {
		l = m.Audio.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *InteractiveMediaWidget) Size() (n int) {
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *InteractiveMediaWidget_InteractiveMediaButton) Size() (n int) {
	var l int
	_ = l
	if m.InteractiveMediaButton != nil {
		l = m.InteractiveMediaButton.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *InteractiveMediaWidget_InteractiveMediaSelect) Size() (n int) {
	var l int
	_ = l
	if m.InteractiveMediaSelect != nil {
		l = m.InteractiveMediaSelect.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *InteractiveMediaButton) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Label != nil {
		l = m.Label.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *InteractiveMediaSelect) Size() (n int) {
	var l int
	_ = l
	if len(m.Options) > 0 {
		for _, e := range m.Options {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.Label != nil {
		l = m.Label.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.DefaultValue != nil {
		l = m.DefaultValue.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *InteractiveMediaSelectOption) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *InteractiveMedia) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Widget != nil {
		l = m.Widget.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Style != 0 {
		n += 1 + sovMessaging(uint64(m.Style))
	}
	if m.Confirm != nil {
		l = m.Confirm.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *InteractiveMediaTranslation) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *InteractiveMediaTranslationGroup) Size() (n int) {
	var l int
	_ = l
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *InteractiveMediaGroup) Size() (n int) {
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.Title != nil {
		l = m.Title.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Translations) > 0 {
		for _, e := range m.Translations {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *InteractiveMediaConfirm) Size() (n int) {
	var l int
	_ = l
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Title != nil {
		l = m.Title.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Ok != nil {
		l = m.Ok.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Dismiss != nil {
		l = m.Dismiss.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UpdateInteractiveMediaEvent) Size() (n int) {
	var l int
	_ = l
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovMessaging(uint64(m.Uid))
	}
	return n
}

func (m *RequestDoInteractiveMediaAction) Size() (n int) {
	var l int
	_ = l
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *MessageContent) Size() (n int) {
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *MessageContent_TextMessage) Size() (n int) {
	var l int
	_ = l
	if m.TextMessage != nil {
		l = m.TextMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *MessageContent_ServiceMessage) Size() (n int) {
	var l int
	_ = l
	if m.ServiceMessage != nil {
		l = m.ServiceMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *MessageContent_DocumentMessage) Size() (n int) {
	var l int
	_ = l
	if m.DocumentMessage != nil {
		l = m.DocumentMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *MessageContent_JsonMessage) Size() (n int) {
	var l int
	_ = l
	if m.JsonMessage != nil {
		l = m.JsonMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *MessageContent_UnsupportedMessage) Size() (n int) {
	var l int
	_ = l
	if m.UnsupportedMessage != nil {
		l = m.UnsupportedMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *MessageContent_StickerMessage) Size() (n int) {
	var l int
	_ = l
	if m.StickerMessage != nil {
		l = m.StickerMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *MessageContent_BinaryMessage) Size() (n int) {
	var l int
	_ = l
	if m.BinaryMessage != nil {
		l = m.BinaryMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *MessageContent_EmptyMessage) Size() (n int) {
	var l int
	_ = l
	if m.EmptyMessage != nil {
		l = m.EmptyMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *MessageContent_DeletedMessage) Size() (n int) {
	var l int
	_ = l
	if m.DeletedMessage != nil {
		l = m.DeletedMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *TextMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Mentions) > 0 {
		l = 0
		for _, e := range m.Mentions {
			l += sovMessaging(uint64(e))
		}
		n += 1 + sovMessaging(uint64(l)) + l
	}
	if m.Ext != nil {
		l = m.Ext.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Media) > 0 {
		for _, e := range m.Media {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.Extensions) > 0 {
		for _, e := range m.Extensions {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *TextMessageEx) Size() (n int) {
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *TextMessageEx_TextExMarkdown) Size() (n int) {
	var l int
	_ = l
	if m.TextExMarkdown != nil {
		l = m.TextExMarkdown.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *TextMessageEx_TextModernMessage) Size() (n int) {
	var l int
	_ = l
	if m.TextModernMessage != nil {
		l = m.TextModernMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *TextMessageEx_TextCommand) Size() (n int) {
	var l int
	_ = l
	if m.TextCommand != nil {
		l = m.TextCommand.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *TextExMarkdown) Size() (n int) {
	var l int
	_ = l
	l = len(m.Markdown)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *TextModernMessage) Size() (n int) {
	var l int
	_ = l
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.SenderNameOverride != nil {
		l = m.SenderNameOverride.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.SenderPhotoOverride != nil {
		l = m.SenderPhotoOverride.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Style != nil {
		l = m.Style.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Attaches) > 0 {
		for _, e := range m.Attaches {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *ParagraphStyle) Size() (n int) {
	var l int
	_ = l
	if m.ShowParagraph != nil {
		l = m.ShowParagraph.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.ParagraphColor != nil {
		l = m.ParagraphColor.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.BgColor != nil {
		l = m.BgColor.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *TextModernAttach) Size() (n int) {
	var l int
	_ = l
	if m.Title != nil {
		l = m.Title.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.TitleUrl != nil {
		l = m.TitleUrl.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.TitleIcon != nil {
		l = m.TitleIcon.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Style != nil {
		l = m.Style.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *TextModernField) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.IsShort != nil {
		l = m.IsShort.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *TextCommand) Size() (n int) {
	var l int
	_ = l
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Args)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ServiceMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Ext != nil {
		l = m.Ext.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ServiceEx) Size() (n int) {
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *ServiceEx_UserInvited) Size() (n int) {
	var l int
	_ = l
	if m.UserInvited != nil {
		l = m.UserInvited.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_UserJoined) Size() (n int) {
	var l int
	_ = l
	if m.UserJoined != nil {
		l = m.UserJoined.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_UserKicked) Size() (n int) {
	var l int
	_ = l
	if m.UserKicked != nil {
		l = m.UserKicked.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_UserLeft) Size() (n int) {
	var l int
	_ = l
	if m.UserLeft != nil {
		l = m.UserLeft.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_GroupCreated) Size() (n int) {
	var l int
	_ = l
	if m.GroupCreated != nil {
		l = m.GroupCreated.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_ChangedTitle) Size() (n int) {
	var l int
	_ = l
	if m.ChangedTitle != nil {
		l = m.ChangedTitle.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_ChangedTopic) Size() (n int) {
	var l int
	_ = l
	if m.ChangedTopic != nil {
		l = m.ChangedTopic.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_ChangedAbout) Size() (n int) {
	var l int
	_ = l
	if m.ChangedAbout != nil {
		l = m.ChangedAbout.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_ChangedAvatar) Size() (n int) {
	var l int
	_ = l
	if m.ChangedAvatar != nil {
		l = m.ChangedAvatar.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_ContactRegistered) Size() (n int) {
	var l int
	_ = l
	if m.ContactRegistered != nil {
		l = m.ContactRegistered.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_PhoneMissed) Size() (n int) {
	var l int
	_ = l
	if m.PhoneMissed != nil {
		l = m.PhoneMissed.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_PhoneCall) Size() (n int) {
	var l int
	_ = l
	if m.PhoneCall != nil {
		l = m.PhoneCall.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_PhoneRejected) Size() (n int) {
	var l int
	_ = l
	if m.PhoneRejected != nil {
		l = m.PhoneRejected.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_ChatArchived) Size() (n int) {
	var l int
	_ = l
	if m.ChatArchived != nil {
		l = m.ChatArchived.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_ChatRestored) Size() (n int) {
	var l int
	_ = l
	if m.ChatRestored != nil {
		l = m.ChatRestored.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceExUserInvited) Size() (n int) {
	var l int
	_ = l
	if m.InvitedUid != 0 {
		n += 1 + sovMessaging(uint64(m.InvitedUid))
	}
	return n
}

func (m *ServiceExUserJoined) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ServiceExUserKicked) Size() (n int) {
	var l int
	_ = l
	if m.KickedUid != 0 {
		n += 1 + sovMessaging(uint64(m.KickedUid))
	}
	return n
}

func (m *ServiceExUserLeft) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ServiceExGroupCreated) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ServiceExChangedTitle) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ServiceExChangedTopic) Size() (n int) {
	var l int
	_ = l
	if m.Topic != nil {
		l = m.Topic.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ServiceExChangedAbout) Size() (n int) {
	var l int
	_ = l
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ServiceExChangedAvatar) Size() (n int) {
	var l int
	_ = l
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ServiceExContactRegistered) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMessaging(uint64(m.Uid))
	}
	return n
}

func (m *ServiceExPhoneMissed) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ServiceExPhoneCall) Size() (n int) {
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovMessaging(uint64(m.Duration))
	}
	return n
}

func (m *ServiceExPhoneRejected) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ServiceExChatArchived) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ServiceExChatRestored) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DocumentMessage) Size() (n int) {
	var l int
	_ = l
	if m.FileId != 0 {
		n += 1 + sovMessaging(uint64(m.FileId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovMessaging(uint64(m.AccessHash))
	}
	if m.FileSize != 0 {
		n += 1 + sovMessaging(uint64(m.FileSize))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Thumb != nil {
		l = m.Thumb.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Ext != nil {
		l = m.Ext.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *DocumentEx) Size() (n int) {
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *DocumentEx_Photo) Size() (n int) {
	var l int
	_ = l
	if m.Photo != nil {
		l = m.Photo.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *DocumentEx_Video) Size() (n int) {
	var l int
	_ = l
	if m.Video != nil {
		l = m.Video.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *DocumentEx_Voice) Size() (n int) {
	var l int
	_ = l
	if m.Voice != nil {
		l = m.Voice.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *DocumentExPhoto) Size() (n int) {
	var l int
	_ = l
	if m.W != 0 {
		n += 1 + sovMessaging(uint64(m.W))
	}
	if m.H != 0 {
		n += 1 + sovMessaging(uint64(m.H))
	}
	return n
}

func (m *DocumentExVideo) Size() (n int) {
	var l int
	_ = l
	if m.W != 0 {
		n += 1 + sovMessaging(uint64(m.W))
	}
	if m.H != 0 {
		n += 1 + sovMessaging(uint64(m.H))
	}
	if m.Duration != 0 {
		n += 1 + sovMessaging(uint64(m.Duration))
	}
	return n
}

func (m *DocumentExVoice) Size() (n int) {
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovMessaging(uint64(m.Duration))
	}
	return n
}

func (m *JsonMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.RawJson)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UnsupportedMessage) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StickerMessage) Size() (n int) {
	var l int
	_ = l
	if m.StickerId != nil {
		l = m.StickerId.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.FastPreview != nil {
		l = m.FastPreview.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Image_512 != nil {
		l = m.Image_512.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Image_256 != nil {
		l = m.Image_256.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.StickerCollectionId != nil {
		l = m.StickerCollectionId.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.StickerCollectionAccessHash != nil {
		l = m.StickerCollectionAccessHash.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Emoji != nil {
		l = m.Emoji.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *BinaryMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.ContentTag)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *EmptyMessage) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeletedMessage) Size() (n int) {
	var l int
	_ = l
	if m.IsLocal != nil {
		l = m.IsLocal.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *DialogShort) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Counter != 0 {
		n += 1 + sovMessaging(uint64(m.Counter))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	return n
}

func (m *DialogGroup) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Dialogs) > 0 {
		for _, e := range m.Dialogs {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *MessageReaction) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovMessaging(uint64(e))
		}
		n += 1 + sovMessaging(uint64(l)) + l
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *SearchPredicate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *RequestSendMessage) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Rid != 0 {
		n += 1 + sovMessaging(uint64(m.Rid))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.IsOnlyForUser != 0 {
		n += 1 + sovMessaging(uint64(m.IsOnlyForUser))
	}
	if m.Forward != nil {
		l = m.Forward.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Reply != nil {
		l = m.Reply.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Predicates) > 0 {
		for _, e := range m.Predicates {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.WhiteList) > 0 {
		l = 0
		for _, e := range m.WhiteList {
			l += sovMessaging(uint64(e))
		}
		n += 1 + sovMessaging(uint64(l)) + l
	}
	if len(m.BlackList) > 0 {
		l = 0
		for _, e := range m.BlackList {
			l += sovMessaging(uint64(e))
		}
		n += 1 + sovMessaging(uint64(l)) + l
	}
	return n
}

func (m *RequestUpdateMessage) Size() (n int) {
	var l int
	_ = l
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.UpdatedMessage != nil {
		l = m.UpdatedMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.LastEditedAt != 0 {
		n += 1 + sovMessaging(uint64(m.LastEditedAt))
	}
	return n
}

func (m *RequestMessageReceived) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	return n
}

func (m *RequestMessageRead) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	return n
}

func (m *RequestDeleteMessageObsolete) Size() (n int) {
	var l int
	_ = l
	if len(m.Mids) > 0 {
		for _, e := range m.Mids {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *RequestClearChat) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.LastMessageDate != 0 {
		n += 1 + sovMessaging(uint64(m.LastMessageDate))
	}
	return n
}

func (m *RequestDeleteChat) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.LastMessageDate != 0 {
		n += 1 + sovMessaging(uint64(m.LastMessageDate))
	}
	return n
}

func (m *RequestArchiveChat) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *RequestMessageSetReaction) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *RequestMessageRemoveReaction) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ResponseReactionsResponse) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovMessaging(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Reactions) > 0 {
		for _, e := range m.Reactions {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *UpdateMessage) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.SenderUid != 0 {
		n += 1 + sovMessaging(uint64(m.SenderUid))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Attributes != nil {
		l = m.Attributes.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Attach != nil {
		n += m.Attach.Size()
	}
	if m.PreviousMid != nil {
		l = m.PreviousMid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Counter != nil {
		l = m.Counter.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UpdateMessage_Forward) Size() (n int) {
	var l int
	_ = l
	if m.Forward != nil {
		l = m.Forward.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *UpdateMessage_Reply) Size() (n int) {
	var l int
	_ = l
	if m.Reply != nil {
		l = m.Reply.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *UpdateMessageContentChanged) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.EditedAt != 0 {
		n += 1 + sovMessaging(uint64(m.EditedAt))
	}
	return n
}

func (m *UpdateMessageSent) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Rid != 0 {
		n += 1 + sovMessaging(uint64(m.Rid))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.PrevMid != nil {
		l = m.PrevMid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.UnreadCounter != nil {
		l = m.UnreadCounter.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UpdateMessageReceived) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.StartDate != 0 {
		n += 1 + sovMessaging(uint64(m.StartDate))
	}
	if m.ReceivedDate != 0 {
		n += 1 + sovMessaging(uint64(m.ReceivedDate))
	}
	return n
}

func (m *UpdateMessageRead) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.StartDate != 0 {
		n += 1 + sovMessaging(uint64(m.StartDate))
	}
	if m.ReadDate != 0 {
		n += 1 + sovMessaging(uint64(m.ReadDate))
	}
	return n
}

func (m *UpdateMessageReadByMe) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.StartDate != 0 {
		n += 1 + sovMessaging(uint64(m.StartDate))
	}
	if m.UnreadCounter != nil {
		l = m.UnreadCounter.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UpdateMessageDelete) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Mids) > 0 {
		for _, e := range m.Mids {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.Counter != nil {
		l = m.Counter.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.ActionDate != 0 {
		n += 1 + sovMessaging(uint64(m.ActionDate))
	}
	return n
}

func (m *UpdateChatClear) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.ActionDate != 0 {
		n += 1 + sovMessaging(uint64(m.ActionDate))
	}
	return n
}

func (m *UpdateChatDelete) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.ActionDate != 0 {
		n += 1 + sovMessaging(uint64(m.ActionDate))
	}
	return n
}

func (m *UpdateChatArchive) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UpdateChatGroupsChanged) Size() (n int) {
	var l int
	_ = l
	if len(m.Dialogs) > 0 {
		for _, e := range m.Dialogs {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *UpdateReactionsUpdate) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Reactions) > 0 {
		for _, e := range m.Reactions {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UpdateMessageRejectedByHook) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Rid != 0 {
		n += 1 + sovMessaging(uint64(m.Rid))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	l = len(m.HookId)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Reason != nil {
		l = m.Reason.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UpdateMessageEditRejectedByHook) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	l = len(m.HookId)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Reason != nil {
		l = m.Reason.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ReferencedMessages) Size() (n int) {
	var l int
	_ = l
	if len(m.Mids) > 0 {
		for _, e := range m.Mids {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *HistoryMessage) Size() (n int) {
	var l int
	_ = l
	if m.SenderUid != 0 {
		n += 1 + sovMessaging(uint64(m.SenderUid))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMessaging(uint64(m.State))
	}
	if len(m.Reactions) > 0 {
		for _, e := range m.Reactions {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.Attribute != nil {
		l = m.Attribute.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.HostPeer != nil {
		l = m.HostPeer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Attach != nil {
		n += m.Attach.Size()
	}
	if m.SenderPeer != nil {
		l = m.SenderPeer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.EditedAt != nil {
		l = m.EditedAt.Size()
		n += 2 + l + sovMessaging(uint64(l))
	}
	if m.PrevMid != nil {
		l = m.PrevMid.Size()
		n += 2 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *HistoryMessage_Forward) Size() (n int) {
	var l int
	_ = l
	if m.Forward != nil {
		l = m.Forward.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *HistoryMessage_Reply) Size() (n int) {
	var l int
	_ = l
	if m.Reply != nil {
		l = m.Reply.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *RequestLoadHistory) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	if m.Limit != 0 {
		n += 1 + sovMessaging(uint64(m.Limit))
	}
	if m.LoadMode != 0 {
		n += 1 + sovMessaging(uint64(m.LoadMode))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovMessaging(uint64(e))
		}
		n += 1 + sovMessaging(uint64(l)) + l
	}
	return n
}

func (m *ResponseLoadHistory) Size() (n int) {
	var l int
	_ = l
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, e := range m.GroupPeers {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.Counter != nil {
		l = m.Counter.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.CounterDate != 0 {
		n += 1 + sovMessaging(uint64(m.CounterDate))
	}
	return n
}

func (m *Dialog) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovMessaging(uint64(m.UnreadCount))
	}
	if m.SortDate != 0 {
		n += 1 + sovMessaging(uint64(m.SortDate))
	}
	if m.SenderUid != 0 {
		n += 1 + sovMessaging(uint64(m.SenderUid))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMessaging(uint64(m.State))
	}
	if m.FirstUnreadDate != 0 {
		n += 1 + sovMessaging(uint64(m.FirstUnreadDate))
	}
	if m.Attributes != nil {
		l = m.Attributes.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.IsFavourite != nil {
		l = m.IsFavourite.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.PinnedMessages != nil {
		l = m.PinnedMessages.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.HistoryMessage != nil {
		l = m.HistoryMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *RequestLoadDialogs) Size() (n int) {
	var l int
	_ = l
	if m.MinDate != 0 {
		n += 1 + sovMessaging(uint64(m.MinDate))
	}
	if m.Limit != 0 {
		n += 1 + sovMessaging(uint64(m.Limit))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovMessaging(uint64(e))
		}
		n += 1 + sovMessaging(uint64(l)) + l
	}
	if len(m.Filters) > 0 {
		l = 0
		for _, e := range m.Filters {
			l += sovMessaging(uint64(e))
		}
		n += 1 + sovMessaging(uint64(l)) + l
	}
	if len(m.PeersToLoad) > 0 {
		for _, e := range m.PeersToLoad {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *ResponseLoadDialogs) Size() (n int) {
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.Dialogs) > 0 {
		for _, e := range m.Dialogs {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, e := range m.GroupPeers {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *DialogIndex) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovMessaging(uint64(m.Timestamp))
	}
	return n
}

func (m *RequestFetchDialogIndex) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ResponseFetchDialogIndex) Size() (n int) {
	var l int
	_ = l
	if len(m.DialogIndices) > 0 {
		for _, e := range m.DialogIndices {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *RequestLoadArchived) Size() (n int) {
	var l int
	_ = l
	if m.NextOffset != nil {
		l = m.NextOffset.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovMessaging(uint64(m.Limit))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovMessaging(uint64(e))
		}
		n += 1 + sovMessaging(uint64(l)) + l
	}
	return n
}

func (m *ResponseLoadArchived) Size() (n int) {
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.Dialogs) > 0 {
		for _, e := range m.Dialogs {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.NextOffset != nil {
		l = m.NextOffset.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, e := range m.GroupPeers {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *RequestLoadGroupedDialogs) Size() (n int) {
	var l int
	_ = l
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovMessaging(uint64(e))
		}
		n += 1 + sovMessaging(uint64(l)) + l
	}
	return n
}

func (m *ResponseLoadGroupedDialogs) Size() (n int) {
	var l int
	_ = l
	if len(m.Dialogs) > 0 {
		for _, e := range m.Dialogs {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.ShowArchived != nil {
		l = m.ShowArchived.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.ShowInvite != nil {
		l = m.ShowInvite.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, e := range m.GroupPeers {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *ResponseDialogsOrder) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovMessaging(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *RequestHideDialog) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *RequestShowDialog) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *RequestFavouriteDialog) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *RequestUnfavouriteDialog) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UpdateDialogFavouriteChanged) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.IsFavourite != nil {
		l = m.IsFavourite.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *RequestNotifyDialogOpened) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *PinnedMessages) Size() (n int) {
	var l int
	_ = l
	if len(m.Mids) > 0 {
		for _, e := range m.Mids {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *RequestPinMessage) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.LastPinDate != 0 {
		n += 1 + sovMessaging(uint64(m.LastPinDate))
	}
	return n
}

func (m *RequestUnpinMessage) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.LastPinDate != 0 {
		n += 1 + sovMessaging(uint64(m.LastPinDate))
	}
	return n
}

func (m *UpdatePinnedMessagesChanged) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.PinnedMessages != nil {
		l = m.PinnedMessages.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.ActionDate != 0 {
		n += 1 + sovMessaging(uint64(m.ActionDate))
	}
	return n
}

func sovMessaging(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessaging(x uint64) (n int) {
	return sovMessaging(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MessageAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageAttributes{`,
		`IsMentioned:` + strings.Replace(fmt.Sprintf("%v", this.IsMentioned), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`IsHighlighted:` + strings.Replace(fmt.Sprintf("%v", this.IsHighlighted), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`IsNotified:` + strings.Replace(fmt.Sprintf("%v", this.IsNotified), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`IsOnlyForYou:` + strings.Replace(fmt.Sprintf("%v", this.IsOnlyForYou), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuotedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuotedMessage{`,
		`MessageId:` + fmt.Sprintf("%v", this.MessageId) + `,`,
		`PublicGroupId:` + fmt.Sprintf("%v", this.PublicGroupId) + `,`,
		`SenderUserId:` + fmt.Sprintf("%v", this.SenderUserId) + `,`,
		`MessageDate:` + fmt.Sprintf("%v", this.MessageDate) + `,`,
		`QuotedMessageContent:` + strings.Replace(fmt.Sprintf("%v", this.QuotedMessageContent), "MessageContent", "MessageContent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageMedia) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageMedia{`,
		`Webpage:` + strings.Replace(fmt.Sprintf("%v", this.Webpage), "WebpageMedia", "WebpageMedia", 1) + `,`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "ImageMedia", "ImageMedia", 1) + `,`,
		`Audio:` + strings.Replace(fmt.Sprintf("%v", this.Audio), "AudioMedia", "AudioMedia", 1) + `,`,
		`Actions:` + strings.Replace(fmt.Sprintf("%v", this.Actions), "InteractiveMediaGroup", "InteractiveMediaGroup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebpageMedia) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebpageMedia{`,
		`Url:` + strings.Replace(fmt.Sprintf("%v", this.Url), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Title:` + strings.Replace(fmt.Sprintf("%v", this.Title), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Description:` + strings.Replace(fmt.Sprintf("%v", this.Description), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "ImageLocation", "ImageLocation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageMedia) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageMedia{`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "ImageLocation", "ImageLocation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AudioMedia) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AudioMedia{`,
		`Audio:` + strings.Replace(fmt.Sprintf("%v", this.Audio), "AudioLocation", "AudioLocation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaWidget) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMediaWidget{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaWidget_InteractiveMediaButton) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMediaWidget_InteractiveMediaButton{`,
		`InteractiveMediaButton:` + strings.Replace(fmt.Sprintf("%v", this.InteractiveMediaButton), "InteractiveMediaButton", "InteractiveMediaButton", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaWidget_InteractiveMediaSelect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMediaWidget_InteractiveMediaSelect{`,
		`InteractiveMediaSelect:` + strings.Replace(fmt.Sprintf("%v", this.InteractiveMediaSelect), "InteractiveMediaSelect", "InteractiveMediaSelect", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaButton) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMediaButton{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Label:` + strings.Replace(fmt.Sprintf("%v", this.Label), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaSelect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMediaSelect{`,
		`Options:` + strings.Replace(fmt.Sprintf("%v", this.Options), "InteractiveMediaSelectOption", "InteractiveMediaSelectOption", 1) + `,`,
		`Label:` + strings.Replace(fmt.Sprintf("%v", this.Label), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`DefaultValue:` + strings.Replace(fmt.Sprintf("%v", this.DefaultValue), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaSelectOption) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMediaSelectOption{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMedia) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMedia{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Widget:` + strings.Replace(fmt.Sprintf("%v", this.Widget), "InteractiveMediaWidget", "InteractiveMediaWidget", 1) + `,`,
		`Style:` + fmt.Sprintf("%v", this.Style) + `,`,
		`Confirm:` + strings.Replace(fmt.Sprintf("%v", this.Confirm), "InteractiveMediaConfirm", "InteractiveMediaConfirm", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaTranslation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMediaTranslation{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaTranslationGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMediaTranslationGroup{`,
		`Language:` + fmt.Sprintf("%v", this.Language) + `,`,
		`Messages:` + strings.Replace(fmt.Sprintf("%v", this.Messages), "InteractiveMediaTranslation", "InteractiveMediaTranslation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMediaGroup{`,
		`Actions:` + strings.Replace(fmt.Sprintf("%v", this.Actions), "InteractiveMedia", "InteractiveMedia", 1) + `,`,
		`Title:` + strings.Replace(fmt.Sprintf("%v", this.Title), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Description:` + strings.Replace(fmt.Sprintf("%v", this.Description), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Translations:` + strings.Replace(fmt.Sprintf("%v", this.Translations), "InteractiveMediaTranslationGroup", "InteractiveMediaTranslationGroup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaConfirm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMediaConfirm{`,
		`Text:` + strings.Replace(fmt.Sprintf("%v", this.Text), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Title:` + strings.Replace(fmt.Sprintf("%v", this.Title), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Ok:` + strings.Replace(fmt.Sprintf("%v", this.Ok), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Dismiss:` + strings.Replace(fmt.Sprintf("%v", this.Dismiss), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateInteractiveMediaEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateInteractiveMediaEvent{`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestDoInteractiveMediaAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestDoInteractiveMediaAction{`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent_TextMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent_TextMessage{`,
		`TextMessage:` + strings.Replace(fmt.Sprintf("%v", this.TextMessage), "TextMessage", "TextMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent_ServiceMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent_ServiceMessage{`,
		`ServiceMessage:` + strings.Replace(fmt.Sprintf("%v", this.ServiceMessage), "ServiceMessage", "ServiceMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent_DocumentMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent_DocumentMessage{`,
		`DocumentMessage:` + strings.Replace(fmt.Sprintf("%v", this.DocumentMessage), "DocumentMessage", "DocumentMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent_JsonMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent_JsonMessage{`,
		`JsonMessage:` + strings.Replace(fmt.Sprintf("%v", this.JsonMessage), "JsonMessage", "JsonMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent_UnsupportedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent_UnsupportedMessage{`,
		`UnsupportedMessage:` + strings.Replace(fmt.Sprintf("%v", this.UnsupportedMessage), "UnsupportedMessage", "UnsupportedMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent_StickerMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent_StickerMessage{`,
		`StickerMessage:` + strings.Replace(fmt.Sprintf("%v", this.StickerMessage), "StickerMessage", "StickerMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent_BinaryMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent_BinaryMessage{`,
		`BinaryMessage:` + strings.Replace(fmt.Sprintf("%v", this.BinaryMessage), "BinaryMessage", "BinaryMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent_EmptyMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent_EmptyMessage{`,
		`EmptyMessage:` + strings.Replace(fmt.Sprintf("%v", this.EmptyMessage), "EmptyMessage", "EmptyMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent_DeletedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent_DeletedMessage{`,
		`DeletedMessage:` + strings.Replace(fmt.Sprintf("%v", this.DeletedMessage), "DeletedMessage", "DeletedMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextMessage{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Mentions:` + fmt.Sprintf("%v", this.Mentions) + `,`,
		`Ext:` + strings.Replace(fmt.Sprintf("%v", this.Ext), "TextMessageEx", "TextMessageEx", 1) + `,`,
		`Media:` + strings.Replace(fmt.Sprintf("%v", this.Media), "MessageMedia", "MessageMedia", 1) + `,`,
		`Extensions:` + strings.Replace(fmt.Sprintf("%v", this.Extensions), "Any", "Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextMessageEx) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextMessageEx{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextMessageEx_TextExMarkdown) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextMessageEx_TextExMarkdown{`,
		`TextExMarkdown:` + strings.Replace(fmt.Sprintf("%v", this.TextExMarkdown), "TextExMarkdown", "TextExMarkdown", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextMessageEx_TextModernMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextMessageEx_TextModernMessage{`,
		`TextModernMessage:` + strings.Replace(fmt.Sprintf("%v", this.TextModernMessage), "TextModernMessage", "TextModernMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextMessageEx_TextCommand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextMessageEx_TextCommand{`,
		`TextCommand:` + strings.Replace(fmt.Sprintf("%v", this.TextCommand), "TextCommand", "TextCommand", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextExMarkdown) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextExMarkdown{`,
		`Markdown:` + fmt.Sprintf("%v", this.Markdown) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextModernMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextModernMessage{`,
		`Text:` + strings.Replace(fmt.Sprintf("%v", this.Text), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`SenderNameOverride:` + strings.Replace(fmt.Sprintf("%v", this.SenderNameOverride), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`SenderPhotoOverride:` + strings.Replace(fmt.Sprintf("%v", this.SenderPhotoOverride), "Avatar", "Avatar", 1) + `,`,
		`Style:` + strings.Replace(fmt.Sprintf("%v", this.Style), "ParagraphStyle", "ParagraphStyle", 1) + `,`,
		`Attaches:` + strings.Replace(fmt.Sprintf("%v", this.Attaches), "TextModernAttach", "TextModernAttach", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ParagraphStyle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ParagraphStyle{`,
		`ShowParagraph:` + strings.Replace(fmt.Sprintf("%v", this.ShowParagraph), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`ParagraphColor:` + strings.Replace(fmt.Sprintf("%v", this.ParagraphColor), "Color", "Color", 1) + `,`,
		`BgColor:` + strings.Replace(fmt.Sprintf("%v", this.BgColor), "Color", "Color", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextModernAttach) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextModernAttach{`,
		`Title:` + strings.Replace(fmt.Sprintf("%v", this.Title), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`TitleUrl:` + strings.Replace(fmt.Sprintf("%v", this.TitleUrl), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`TitleIcon:` + strings.Replace(fmt.Sprintf("%v", this.TitleIcon), "ImageLocation", "ImageLocation", 1) + `,`,
		`Text:` + strings.Replace(fmt.Sprintf("%v", this.Text), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Style:` + strings.Replace(fmt.Sprintf("%v", this.Style), "ParagraphStyle", "ParagraphStyle", 1) + `,`,
		`Fields:` + strings.Replace(fmt.Sprintf("%v", this.Fields), "TextModernField", "TextModernField", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextModernField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextModernField{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`IsShort:` + strings.Replace(fmt.Sprintf("%v", this.IsShort), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextCommand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextCommand{`,
		`Command:` + fmt.Sprintf("%v", this.Command) + `,`,
		`Args:` + fmt.Sprintf("%v", this.Args) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceMessage{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Ext:` + strings.Replace(fmt.Sprintf("%v", this.Ext), "ServiceEx", "ServiceEx", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_UserInvited) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_UserInvited{`,
		`UserInvited:` + strings.Replace(fmt.Sprintf("%v", this.UserInvited), "ServiceExUserInvited", "ServiceExUserInvited", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_UserJoined) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_UserJoined{`,
		`UserJoined:` + strings.Replace(fmt.Sprintf("%v", this.UserJoined), "ServiceExUserJoined", "ServiceExUserJoined", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_UserKicked) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_UserKicked{`,
		`UserKicked:` + strings.Replace(fmt.Sprintf("%v", this.UserKicked), "ServiceExUserKicked", "ServiceExUserKicked", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_UserLeft) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_UserLeft{`,
		`UserLeft:` + strings.Replace(fmt.Sprintf("%v", this.UserLeft), "ServiceExUserLeft", "ServiceExUserLeft", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_GroupCreated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_GroupCreated{`,
		`GroupCreated:` + strings.Replace(fmt.Sprintf("%v", this.GroupCreated), "ServiceExGroupCreated", "ServiceExGroupCreated", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_ChangedTitle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_ChangedTitle{`,
		`ChangedTitle:` + strings.Replace(fmt.Sprintf("%v", this.ChangedTitle), "ServiceExChangedTitle", "ServiceExChangedTitle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_ChangedTopic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_ChangedTopic{`,
		`ChangedTopic:` + strings.Replace(fmt.Sprintf("%v", this.ChangedTopic), "ServiceExChangedTopic", "ServiceExChangedTopic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_ChangedAbout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_ChangedAbout{`,
		`ChangedAbout:` + strings.Replace(fmt.Sprintf("%v", this.ChangedAbout), "ServiceExChangedAbout", "ServiceExChangedAbout", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_ChangedAvatar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_ChangedAvatar{`,
		`ChangedAvatar:` + strings.Replace(fmt.Sprintf("%v", this.ChangedAvatar), "ServiceExChangedAvatar", "ServiceExChangedAvatar", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_ContactRegistered) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_ContactRegistered{`,
		`ContactRegistered:` + strings.Replace(fmt.Sprintf("%v", this.ContactRegistered), "ServiceExContactRegistered", "ServiceExContactRegistered", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_PhoneMissed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_PhoneMissed{`,
		`PhoneMissed:` + strings.Replace(fmt.Sprintf("%v", this.PhoneMissed), "ServiceExPhoneMissed", "ServiceExPhoneMissed", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_PhoneCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_PhoneCall{`,
		`PhoneCall:` + strings.Replace(fmt.Sprintf("%v", this.PhoneCall), "ServiceExPhoneCall", "ServiceExPhoneCall", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_PhoneRejected) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_PhoneRejected{`,
		`PhoneRejected:` + strings.Replace(fmt.Sprintf("%v", this.PhoneRejected), "ServiceExPhoneRejected", "ServiceExPhoneRejected", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_ChatArchived) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_ChatArchived{`,
		`ChatArchived:` + strings.Replace(fmt.Sprintf("%v", this.ChatArchived), "ServiceExChatArchived", "ServiceExChatArchived", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_ChatRestored) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_ChatRestored{`,
		`ChatRestored:` + strings.Replace(fmt.Sprintf("%v", this.ChatRestored), "ServiceExChatRestored", "ServiceExChatRestored", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExUserInvited) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExUserInvited{`,
		`InvitedUid:` + fmt.Sprintf("%v", this.InvitedUid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExUserJoined) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExUserJoined{`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExUserKicked) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExUserKicked{`,
		`KickedUid:` + fmt.Sprintf("%v", this.KickedUid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExUserLeft) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExUserLeft{`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExGroupCreated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExGroupCreated{`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExChangedTitle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExChangedTitle{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExChangedTopic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExChangedTopic{`,
		`Topic:` + strings.Replace(fmt.Sprintf("%v", this.Topic), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExChangedAbout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExChangedAbout{`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExChangedAvatar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExChangedAvatar{`,
		`Avatar:` + strings.Replace(fmt.Sprintf("%v", this.Avatar), "Avatar", "Avatar", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExContactRegistered) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExContactRegistered{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExPhoneMissed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExPhoneMissed{`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExPhoneCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExPhoneCall{`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExPhoneRejected) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExPhoneRejected{`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExChatArchived) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExChatArchived{`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExChatRestored) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExChatRestored{`,
		`}`,
	}, "")
	return s
}
func (this *DocumentMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentMessage{`,
		`FileId:` + fmt.Sprintf("%v", this.FileId) + `,`,
		`AccessHash:` + fmt.Sprintf("%v", this.AccessHash) + `,`,
		`FileSize:` + fmt.Sprintf("%v", this.FileSize) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`MimeType:` + fmt.Sprintf("%v", this.MimeType) + `,`,
		`Thumb:` + strings.Replace(fmt.Sprintf("%v", this.Thumb), "FastThumb", "FastThumb", 1) + `,`,
		`Ext:` + strings.Replace(fmt.Sprintf("%v", this.Ext), "DocumentEx", "DocumentEx", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentEx) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentEx{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentEx_Photo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentEx_Photo{`,
		`Photo:` + strings.Replace(fmt.Sprintf("%v", this.Photo), "DocumentExPhoto", "DocumentExPhoto", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentEx_Video) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentEx_Video{`,
		`Video:` + strings.Replace(fmt.Sprintf("%v", this.Video), "DocumentExVideo", "DocumentExVideo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentEx_Voice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentEx_Voice{`,
		`Voice:` + strings.Replace(fmt.Sprintf("%v", this.Voice), "DocumentExVoice", "DocumentExVoice", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentExPhoto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentExPhoto{`,
		`W:` + fmt.Sprintf("%v", this.W) + `,`,
		`H:` + fmt.Sprintf("%v", this.H) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentExVideo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentExVideo{`,
		`W:` + fmt.Sprintf("%v", this.W) + `,`,
		`H:` + fmt.Sprintf("%v", this.H) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentExVoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentExVoice{`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JsonMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JsonMessage{`,
		`RawJson:` + fmt.Sprintf("%v", this.RawJson) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnsupportedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnsupportedMessage{`,
		`}`,
	}, "")
	return s
}
func (this *StickerMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StickerMessage{`,
		`StickerId:` + strings.Replace(fmt.Sprintf("%v", this.StickerId), "Int32Value", "google_protobuf.Int32Value", 1) + `,`,
		`FastPreview:` + strings.Replace(fmt.Sprintf("%v", this.FastPreview), "BytesValue", "google_protobuf.BytesValue", 1) + `,`,
		`Image_512:` + strings.Replace(fmt.Sprintf("%v", this.Image_512), "ImageLocation", "ImageLocation", 1) + `,`,
		`Image_256:` + strings.Replace(fmt.Sprintf("%v", this.Image_256), "ImageLocation", "ImageLocation", 1) + `,`,
		`StickerCollectionId:` + strings.Replace(fmt.Sprintf("%v", this.StickerCollectionId), "Int32Value", "google_protobuf.Int32Value", 1) + `,`,
		`StickerCollectionAccessHash:` + strings.Replace(fmt.Sprintf("%v", this.StickerCollectionAccessHash), "Int64Value", "google_protobuf.Int64Value", 1) + `,`,
		`Emoji:` + strings.Replace(fmt.Sprintf("%v", this.Emoji), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BinaryMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BinaryMessage{`,
		`ContentTag:` + fmt.Sprintf("%v", this.ContentTag) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmptyMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmptyMessage{`,
		`}`,
	}, "")
	return s
}
func (this *DeletedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeletedMessage{`,
		`IsLocal:` + strings.Replace(fmt.Sprintf("%v", this.IsLocal), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DialogShort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DialogShort{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Counter:` + fmt.Sprintf("%v", this.Counter) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DialogGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DialogGroup{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Dialogs:` + strings.Replace(fmt.Sprintf("%v", this.Dialogs), "DialogShort", "DialogShort", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageReaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageReaction{`,
		`Users:` + fmt.Sprintf("%v", this.Users) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchPredicate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchPredicate{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSendMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSendMessage{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "MessageContent", "MessageContent", 1) + `,`,
		`IsOnlyForUser:` + fmt.Sprintf("%v", this.IsOnlyForUser) + `,`,
		`Forward:` + strings.Replace(fmt.Sprintf("%v", this.Forward), "ReferencedMessages", "ReferencedMessages", 1) + `,`,
		`Reply:` + strings.Replace(fmt.Sprintf("%v", this.Reply), "ReferencedMessages", "ReferencedMessages", 1) + `,`,
		`Predicates:` + strings.Replace(fmt.Sprintf("%v", this.Predicates), "SearchPredicate", "SearchPredicate", 1) + `,`,
		`WhiteList:` + fmt.Sprintf("%v", this.WhiteList) + `,`,
		`BlackList:` + fmt.Sprintf("%v", this.BlackList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestUpdateMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestUpdateMessage{`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`UpdatedMessage:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedMessage), "MessageContent", "MessageContent", 1) + `,`,
		`LastEditedAt:` + fmt.Sprintf("%v", this.LastEditedAt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestMessageReceived) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestMessageReceived{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestMessageRead) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestMessageRead{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestDeleteMessageObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestDeleteMessageObsolete{`,
		`Mids:` + strings.Replace(fmt.Sprintf("%v", this.Mids), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestClearChat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestClearChat{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`LastMessageDate:` + fmt.Sprintf("%v", this.LastMessageDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestDeleteChat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestDeleteChat{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`LastMessageDate:` + fmt.Sprintf("%v", this.LastMessageDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestArchiveChat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestArchiveChat{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestMessageSetReaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestMessageSetReaction{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestMessageRemoveReaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestMessageRemoveReaction{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseReactionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseReactionsResponse{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Reactions:` + strings.Replace(fmt.Sprintf("%v", this.Reactions), "MessageReaction", "MessageReaction", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessage{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`SenderUid:` + fmt.Sprintf("%v", this.SenderUid) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "MessageContent", "MessageContent", 1) + `,`,
		`Attributes:` + strings.Replace(fmt.Sprintf("%v", this.Attributes), "MessageAttributes", "MessageAttributes", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`Attach:` + fmt.Sprintf("%v", this.Attach) + `,`,
		`PreviousMid:` + strings.Replace(fmt.Sprintf("%v", this.PreviousMid), "UUIDValue", "UUIDValue", 1) + `,`,
		`Counter:` + strings.Replace(fmt.Sprintf("%v", this.Counter), "Int32Value", "google_protobuf.Int32Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessage_Forward) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessage_Forward{`,
		`Forward:` + strings.Replace(fmt.Sprintf("%v", this.Forward), "ReferencedMessages", "ReferencedMessages", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessage_Reply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessage_Reply{`,
		`Reply:` + strings.Replace(fmt.Sprintf("%v", this.Reply), "ReferencedMessages", "ReferencedMessages", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageContentChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageContentChanged{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "MessageContent", "MessageContent", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`EditedAt:` + fmt.Sprintf("%v", this.EditedAt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageSent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageSent{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`PrevMid:` + strings.Replace(fmt.Sprintf("%v", this.PrevMid), "UUIDValue", "UUIDValue", 1) + `,`,
		`UnreadCounter:` + strings.Replace(fmt.Sprintf("%v", this.UnreadCounter), "Int32Value", "google_protobuf.Int32Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageReceived) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageReceived{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`StartDate:` + fmt.Sprintf("%v", this.StartDate) + `,`,
		`ReceivedDate:` + fmt.Sprintf("%v", this.ReceivedDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageRead) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageRead{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`StartDate:` + fmt.Sprintf("%v", this.StartDate) + `,`,
		`ReadDate:` + fmt.Sprintf("%v", this.ReadDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageReadByMe) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageReadByMe{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`StartDate:` + fmt.Sprintf("%v", this.StartDate) + `,`,
		`UnreadCounter:` + strings.Replace(fmt.Sprintf("%v", this.UnreadCounter), "Int32Value", "google_protobuf.Int32Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageDelete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageDelete{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Mids:` + strings.Replace(fmt.Sprintf("%v", this.Mids), "UUIDValue", "UUIDValue", 1) + `,`,
		`Counter:` + strings.Replace(fmt.Sprintf("%v", this.Counter), "Int32Value", "google_protobuf.Int32Value", 1) + `,`,
		`ActionDate:` + fmt.Sprintf("%v", this.ActionDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateChatClear) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateChatClear{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`ActionDate:` + fmt.Sprintf("%v", this.ActionDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateChatDelete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateChatDelete{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`ActionDate:` + fmt.Sprintf("%v", this.ActionDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateChatArchive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateChatArchive{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateChatGroupsChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateChatGroupsChanged{`,
		`Dialogs:` + strings.Replace(fmt.Sprintf("%v", this.Dialogs), "DialogGroup", "DialogGroup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateReactionsUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateReactionsUpdate{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Reactions:` + strings.Replace(fmt.Sprintf("%v", this.Reactions), "MessageReaction", "MessageReaction", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageRejectedByHook) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageRejectedByHook{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`HookId:` + fmt.Sprintf("%v", this.HookId) + `,`,
		`Reason:` + strings.Replace(fmt.Sprintf("%v", this.Reason), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageEditRejectedByHook) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageEditRejectedByHook{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`HookId:` + fmt.Sprintf("%v", this.HookId) + `,`,
		`Reason:` + strings.Replace(fmt.Sprintf("%v", this.Reason), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReferencedMessages) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReferencedMessages{`,
		`Mids:` + strings.Replace(fmt.Sprintf("%v", this.Mids), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryMessage{`,
		`SenderUid:` + fmt.Sprintf("%v", this.SenderUid) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "MessageContent", "MessageContent", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Reactions:` + strings.Replace(fmt.Sprintf("%v", this.Reactions), "MessageReaction", "MessageReaction", 1) + `,`,
		`Attribute:` + strings.Replace(fmt.Sprintf("%v", this.Attribute), "MessageAttributes", "MessageAttributes", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`HostPeer:` + strings.Replace(fmt.Sprintf("%v", this.HostPeer), "OutPeer", "OutPeer", 1) + `,`,
		`Attach:` + fmt.Sprintf("%v", this.Attach) + `,`,
		`SenderPeer:` + strings.Replace(fmt.Sprintf("%v", this.SenderPeer), "OutPeer", "OutPeer", 1) + `,`,
		`EditedAt:` + strings.Replace(fmt.Sprintf("%v", this.EditedAt), "Int64Value", "google_protobuf.Int64Value", 1) + `,`,
		`PrevMid:` + strings.Replace(fmt.Sprintf("%v", this.PrevMid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryMessage_Forward) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryMessage_Forward{`,
		`Forward:` + strings.Replace(fmt.Sprintf("%v", this.Forward), "ReferencedMessages", "ReferencedMessages", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryMessage_Reply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryMessage_Reply{`,
		`Reply:` + strings.Replace(fmt.Sprintf("%v", this.Reply), "ReferencedMessages", "ReferencedMessages", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadHistory) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadHistory{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`LoadMode:` + fmt.Sprintf("%v", this.LoadMode) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadHistory) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseLoadHistory{`,
		`History:` + strings.Replace(fmt.Sprintf("%v", this.History), "HistoryMessage", "HistoryMessage", 1) + `,`,
		`Users:` + strings.Replace(fmt.Sprintf("%v", this.Users), "User", "User", 1) + `,`,
		`UserPeers:` + strings.Replace(fmt.Sprintf("%v", this.UserPeers), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "Group", "Group", 1) + `,`,
		`GroupPeers:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeers), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`Counter:` + strings.Replace(fmt.Sprintf("%v", this.Counter), "Int32Value", "google_protobuf.Int32Value", 1) + `,`,
		`CounterDate:` + fmt.Sprintf("%v", this.CounterDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Dialog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Dialog{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`UnreadCount:` + fmt.Sprintf("%v", this.UnreadCount) + `,`,
		`SortDate:` + fmt.Sprintf("%v", this.SortDate) + `,`,
		`SenderUid:` + fmt.Sprintf("%v", this.SenderUid) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "MessageContent", "MessageContent", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`FirstUnreadDate:` + fmt.Sprintf("%v", this.FirstUnreadDate) + `,`,
		`Attributes:` + strings.Replace(fmt.Sprintf("%v", this.Attributes), "MessageAttributes", "MessageAttributes", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`IsFavourite:` + strings.Replace(fmt.Sprintf("%v", this.IsFavourite), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`PinnedMessages:` + strings.Replace(fmt.Sprintf("%v", this.PinnedMessages), "PinnedMessages", "PinnedMessages", 1) + `,`,
		`HistoryMessage:` + strings.Replace(fmt.Sprintf("%v", this.HistoryMessage), "HistoryMessage", "HistoryMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadDialogs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadDialogs{`,
		`MinDate:` + fmt.Sprintf("%v", this.MinDate) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`Filters:` + fmt.Sprintf("%v", this.Filters) + `,`,
		`PeersToLoad:` + strings.Replace(fmt.Sprintf("%v", this.PeersToLoad), "Peer", "Peer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadDialogs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseLoadDialogs{`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "Group", "Group", 1) + `,`,
		`Users:` + strings.Replace(fmt.Sprintf("%v", this.Users), "User", "User", 1) + `,`,
		`Dialogs:` + strings.Replace(fmt.Sprintf("%v", this.Dialogs), "Dialog", "Dialog", 1) + `,`,
		`UserPeers:` + strings.Replace(fmt.Sprintf("%v", this.UserPeers), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`GroupPeers:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeers), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DialogIndex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DialogIndex{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestFetchDialogIndex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestFetchDialogIndex{`,
		`}`,
	}, "")
	return s
}
func (this *ResponseFetchDialogIndex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseFetchDialogIndex{`,
		`DialogIndices:` + strings.Replace(fmt.Sprintf("%v", this.DialogIndices), "DialogIndex", "DialogIndex", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadArchived) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadArchived{`,
		`NextOffset:` + strings.Replace(fmt.Sprintf("%v", this.NextOffset), "BytesValue", "google_protobuf.BytesValue", 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadArchived) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseLoadArchived{`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "Group", "Group", 1) + `,`,
		`Users:` + strings.Replace(fmt.Sprintf("%v", this.Users), "User", "User", 1) + `,`,
		`Dialogs:` + strings.Replace(fmt.Sprintf("%v", this.Dialogs), "Dialog", "Dialog", 1) + `,`,
		`NextOffset:` + strings.Replace(fmt.Sprintf("%v", this.NextOffset), "BytesValue", "google_protobuf.BytesValue", 1) + `,`,
		`UserPeers:` + strings.Replace(fmt.Sprintf("%v", this.UserPeers), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`GroupPeers:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeers), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadGroupedDialogs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadGroupedDialogs{`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadGroupedDialogs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseLoadGroupedDialogs{`,
		`Dialogs:` + strings.Replace(fmt.Sprintf("%v", this.Dialogs), "DialogGroup", "DialogGroup", 1) + `,`,
		`Users:` + strings.Replace(fmt.Sprintf("%v", this.Users), "User", "User", 1) + `,`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "Group", "Group", 1) + `,`,
		`ShowArchived:` + strings.Replace(fmt.Sprintf("%v", this.ShowArchived), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`ShowInvite:` + strings.Replace(fmt.Sprintf("%v", this.ShowInvite), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`UserPeers:` + strings.Replace(fmt.Sprintf("%v", this.UserPeers), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`GroupPeers:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeers), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseDialogsOrder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseDialogsOrder{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "DialogGroup", "DialogGroup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestHideDialog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestHideDialog{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestShowDialog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestShowDialog{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestFavouriteDialog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestFavouriteDialog{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestUnfavouriteDialog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestUnfavouriteDialog{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateDialogFavouriteChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateDialogFavouriteChanged{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`IsFavourite:` + strings.Replace(fmt.Sprintf("%v", this.IsFavourite), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestNotifyDialogOpened) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestNotifyDialogOpened{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PinnedMessages) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PinnedMessages{`,
		`Mids:` + strings.Replace(fmt.Sprintf("%v", this.Mids), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestPinMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestPinMessage{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`LastPinDate:` + fmt.Sprintf("%v", this.LastPinDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestUnpinMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestUnpinMessage{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`LastPinDate:` + fmt.Sprintf("%v", this.LastPinDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdatePinnedMessagesChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdatePinnedMessagesChanged{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`PinnedMessages:` + strings.Replace(fmt.Sprintf("%v", this.PinnedMessages), "PinnedMessages", "PinnedMessages", 1) + `,`,
		`ActionDate:` + fmt.Sprintf("%v", this.ActionDate) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessaging(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MessageAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMentioned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsMentioned == nil {
				m.IsMentioned = &google_protobuf.BoolValue{}
			}
			if err := m.IsMentioned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHighlighted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsHighlighted == nil {
				m.IsHighlighted = &google_protobuf.BoolValue{}
			}
			if err := m.IsHighlighted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNotified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsNotified == nil {
				m.IsNotified = &google_protobuf.BoolValue{}
			}
			if err := m.IsNotified.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnlyForYou", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsOnlyForYou == nil {
				m.IsOnlyForYou = &google_protobuf.BoolValue{}
			}
			if err := m.IsOnlyForYou.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuotedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuotedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuotedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicGroupId", wireType)
			}
			m.PublicGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicGroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderUserId", wireType)
			}
			m.SenderUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageDate", wireType)
			}
			m.MessageDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuotedMessageContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuotedMessageContent == nil {
				m.QuotedMessageContent = &MessageContent{}
			}
			if err := m.QuotedMessageContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webpage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Webpage == nil {
				m.Webpage = &WebpageMedia{}
			}
			if err := m.Webpage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &ImageMedia{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Audio == nil {
				m.Audio = &AudioMedia{}
			}
			if err := m.Audio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &InteractiveMediaGroup{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebpageMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebpageMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebpageMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Url == nil {
				m.Url = &google_protobuf.StringValue{}
			}
			if err := m.Url.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Title == nil {
				m.Title = &google_protobuf.StringValue{}
			}
			if err := m.Title.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &google_protobuf.StringValue{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &ImageLocation{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &ImageLocation{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Audio == nil {
				m.Audio = &AudioLocation{}
			}
			if err := m.Audio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractiveMediaWidget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractiveMediaWidget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractiveMediaWidget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InteractiveMediaButton", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InteractiveMediaButton{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &InteractiveMediaWidget_InteractiveMediaButton{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InteractiveMediaSelect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InteractiveMediaSelect{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &InteractiveMediaWidget_InteractiveMediaSelect{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractiveMediaButton) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractiveMediaButton: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractiveMediaButton: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Label == nil {
				m.Label = &google_protobuf.StringValue{}
			}
			if err := m.Label.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractiveMediaSelect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractiveMediaSelect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractiveMediaSelect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, &InteractiveMediaSelectOption{})
			if err := m.Options[len(m.Options)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Label == nil {
				m.Label = &google_protobuf.StringValue{}
			}
			if err := m.Label.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultValue == nil {
				m.DefaultValue = &google_protobuf.StringValue{}
			}
			if err := m.DefaultValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractiveMediaSelectOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractiveMediaSelectOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractiveMediaSelectOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractiveMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractiveMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractiveMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Widget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Widget == nil {
				m.Widget = &InteractiveMediaWidget{}
			}
			if err := m.Widget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			m.Style = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Style |= (InteractiveMediaStyle(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirm == nil {
				m.Confirm = &InteractiveMediaConfirm{}
			}
			if err := m.Confirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractiveMediaTranslation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractiveMediaTranslation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractiveMediaTranslation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractiveMediaTranslationGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractiveMediaTranslationGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractiveMediaTranslationGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &InteractiveMediaTranslation{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractiveMediaGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractiveMediaGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractiveMediaGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &InteractiveMedia{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Title == nil {
				m.Title = &google_protobuf.StringValue{}
			}
			if err := m.Title.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &google_protobuf.StringValue{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Translations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Translations = append(m.Translations, &InteractiveMediaTranslationGroup{})
			if err := m.Translations[len(m.Translations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractiveMediaConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractiveMediaConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractiveMediaConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &google_protobuf.StringValue{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Title == nil {
				m.Title = &google_protobuf.StringValue{}
			}
			if err := m.Title.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ok == nil {
				m.Ok = &google_protobuf.StringValue{}
			}
			if err := m.Ok.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dismiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dismiss == nil {
				m.Dismiss = &google_protobuf.StringValue{}
			}
			if err := m.Dismiss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateInteractiveMediaEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateInteractiveMediaEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateInteractiveMediaEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDoInteractiveMediaAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDoInteractiveMediaAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDoInteractiveMediaAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TextMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageContent_TextMessage{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageContent_ServiceMessage{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DocumentMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageContent_DocumentMessage{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JsonMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageContent_JsonMessage{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsupportedMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UnsupportedMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageContent_UnsupportedMessage{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StickerMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageContent_StickerMessage{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BinaryMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageContent_BinaryMessage{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmptyMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmptyMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageContent_EmptyMessage{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeletedMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageContent_DeletedMessage{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mentions = append(m.Mentions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessaging
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessaging
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mentions = append(m.Mentions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mentions", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ext == nil {
				m.Ext = &TextMessageEx{}
			}
			if err := m.Ext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media, &MessageMedia{})
			if err := m.Media[len(m.Media)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = append(m.Extensions, &Any{})
			if err := m.Extensions[len(m.Extensions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextMessageEx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextMessageEx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextMessageEx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextExMarkdown", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TextExMarkdown{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &TextMessageEx_TextExMarkdown{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextModernMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TextModernMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &TextMessageEx_TextModernMessage{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TextCommand{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &TextMessageEx_TextCommand{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextExMarkdown) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextExMarkdown: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextExMarkdown: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markdown", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markdown = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextModernMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextModernMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextModernMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &google_protobuf.StringValue{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderNameOverride", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SenderNameOverride == nil {
				m.SenderNameOverride = &google_protobuf.StringValue{}
			}
			if err := m.SenderNameOverride.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderPhotoOverride", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SenderPhotoOverride == nil {
				m.SenderPhotoOverride = &Avatar{}
			}
			if err := m.SenderPhotoOverride.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Style == nil {
				m.Style = &ParagraphStyle{}
			}
			if err := m.Style.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attaches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attaches = append(m.Attaches, &TextModernAttach{})
			if err := m.Attaches[len(m.Attaches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParagraphStyle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParagraphStyle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParagraphStyle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowParagraph", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShowParagraph == nil {
				m.ShowParagraph = &google_protobuf.BoolValue{}
			}
			if err := m.ShowParagraph.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParagraphColor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParagraphColor == nil {
				m.ParagraphColor = &Color{}
			}
			if err := m.ParagraphColor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BgColor == nil {
				m.BgColor = &Color{}
			}
			if err := m.BgColor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextModernAttach) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextModernAttach: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextModernAttach: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Title == nil {
				m.Title = &google_protobuf.StringValue{}
			}
			if err := m.Title.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleUrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TitleUrl == nil {
				m.TitleUrl = &google_protobuf.StringValue{}
			}
			if err := m.TitleUrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleIcon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TitleIcon == nil {
				m.TitleIcon = &ImageLocation{}
			}
			if err := m.TitleIcon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &google_protobuf.StringValue{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Style == nil {
				m.Style = &ParagraphStyle{}
			}
			if err := m.Style.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &TextModernField{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextModernField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextModernField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextModernField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsShort == nil {
				m.IsShort = &google_protobuf.BoolValue{}
			}
			if err := m.IsShort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ext == nil {
				m.Ext = &ServiceEx{}
			}
			if err := m.Ext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceEx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceEx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceEx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInvited", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExUserInvited{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_UserInvited{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserJoined", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExUserJoined{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_UserJoined{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserKicked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExUserKicked{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_UserKicked{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLeft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExUserLeft{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_UserLeft{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCreated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExGroupCreated{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_GroupCreated{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangedTitle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExChangedTitle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_ChangedTitle{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangedTopic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExChangedTopic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_ChangedTopic{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangedAbout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExChangedAbout{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_ChangedAbout{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangedAvatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExChangedAvatar{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_ChangedAvatar{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactRegistered", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExContactRegistered{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_ContactRegistered{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneMissed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExPhoneMissed{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_PhoneMissed{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExPhoneCall{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_PhoneCall{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneRejected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExPhoneRejected{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_PhoneRejected{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatArchived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExChatArchived{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_ChatArchived{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatRestored", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExChatRestored{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_ChatRestored{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExUserInvited) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExUserInvited: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExUserInvited: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitedUid", wireType)
			}
			m.InvitedUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvitedUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExUserJoined) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExUserJoined: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExUserJoined: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExUserKicked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExUserKicked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExUserKicked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedUid", wireType)
			}
			m.KickedUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExUserLeft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExUserLeft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExUserLeft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExGroupCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExGroupCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExGroupCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExChangedTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExChangedTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExChangedTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExChangedTopic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExChangedTopic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExChangedTopic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topic == nil {
				m.Topic = &google_protobuf.StringValue{}
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExChangedAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExChangedAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExChangedAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &google_protobuf.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExChangedAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExChangedAvatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExChangedAvatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExContactRegistered) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExContactRegistered: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExContactRegistered: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExPhoneMissed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExPhoneMissed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExPhoneMissed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExPhoneCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExPhoneCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExPhoneCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExPhoneRejected) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExPhoneRejected: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExPhoneRejected: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExChatArchived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExChatArchived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExChatArchived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExChatRestored) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExChatRestored: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExChatRestored: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			m.FileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thumb == nil {
				m.Thumb = &FastThumb{}
			}
			if err := m.Thumb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ext == nil {
				m.Ext = &DocumentEx{}
			}
			if err := m.Ext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentEx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentEx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentEx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DocumentExPhoto{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &DocumentEx_Photo{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DocumentExVideo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &DocumentEx_Video{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DocumentExVoice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &DocumentEx_Voice{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentExPhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentExPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentExPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field W", wireType)
			}
			m.W = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.W |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			m.H = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.H |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentExVideo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentExVideo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentExVideo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field W", wireType)
			}
			m.W = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.W |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			m.H = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.H |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentExVoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentExVoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentExVoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JsonMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JsonMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JsonMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsupportedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsupportedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsupportedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StickerId == nil {
				m.StickerId = &google_protobuf.Int32Value{}
			}
			if err := m.StickerId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastPreview", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FastPreview == nil {
				m.FastPreview = &google_protobuf.BytesValue{}
			}
			if err := m.FastPreview.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image_512", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image_512 == nil {
				m.Image_512 = &ImageLocation{}
			}
			if err := m.Image_512.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image_256", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image_256 == nil {
				m.Image_256 = &ImageLocation{}
			}
			if err := m.Image_256.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerCollectionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StickerCollectionId == nil {
				m.StickerCollectionId = &google_protobuf.Int32Value{}
			}
			if err := m.StickerCollectionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerCollectionAccessHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StickerCollectionAccessHash == nil {
				m.StickerCollectionAccessHash = &google_protobuf.Int64Value{}
			}
			if err := m.StickerCollectionAccessHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoji", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Emoji == nil {
				m.Emoji = &google_protobuf.StringValue{}
			}
			if err := m.Emoji.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BinaryMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BinaryMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BinaryMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLocal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsLocal == nil {
				m.IsLocal = &google_protobuf.BoolValue{}
			}
			if err := m.IsLocal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialogShort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialogShort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialogShort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialogGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialogGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialogGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dialogs = append(m.Dialogs, &DialogShort{})
			if err := m.Dialogs[len(m.Dialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageReaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageReaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageReaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessaging
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessaging
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchPredicate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchPredicate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchPredicate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSendMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSendMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSendMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &MessageContent{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnlyForUser", wireType)
			}
			m.IsOnlyForUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsOnlyForUser |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Forward == nil {
				m.Forward = &ReferencedMessages{}
			}
			if err := m.Forward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reply == nil {
				m.Reply = &ReferencedMessages{}
			}
			if err := m.Reply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Predicates = append(m.Predicates, &SearchPredicate{})
			if err := m.Predicates[len(m.Predicates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WhiteList = append(m.WhiteList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessaging
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessaging
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WhiteList = append(m.WhiteList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteList", wireType)
			}
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BlackList = append(m.BlackList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessaging
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessaging
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BlackList = append(m.BlackList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BlackList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUpdateMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUpdateMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUpdateMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedMessage == nil {
				m.UpdatedMessage = &MessageContent{}
			}
			if err := m.UpdatedMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastEditedAt", wireType)
			}
			m.LastEditedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastEditedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMessageReceived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMessageReceived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMessageReceived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMessageRead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMessageRead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMessageRead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDeleteMessageObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDeleteMessageObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDeleteMessageObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mids = append(m.Mids, &UUIDValue{})
			if err := m.Mids[len(m.Mids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestClearChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestClearChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestClearChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessageDate", wireType)
			}
			m.LastMessageDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMessageDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDeleteChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDeleteChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDeleteChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessageDate", wireType)
			}
			m.LastMessageDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMessageDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestArchiveChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestArchiveChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestArchiveChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMessageSetReaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMessageSetReaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMessageSetReaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMessageRemoveReaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMessageRemoveReaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMessageRemoveReaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseReactionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseReactionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseReactionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reactions = append(m.Reactions, &MessageReaction{})
			if err := m.Reactions[len(m.Reactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderUid", wireType)
			}
			m.SenderUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &MessageContent{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = &MessageAttributes{}
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReferencedMessages{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attach = &UpdateMessage_Forward{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReferencedMessages{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attach = &UpdateMessage_Reply{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousMid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousMid == nil {
				m.PreviousMid = &UUIDValue{}
			}
			if err := m.PreviousMid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counter == nil {
				m.Counter = &google_protobuf.Int32Value{}
			}
			if err := m.Counter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageContentChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageContentChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageContentChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &MessageContent{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditedAt", wireType)
			}
			m.EditedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageSent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageSent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageSent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevMid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrevMid == nil {
				m.PrevMid = &UUIDValue{}
			}
			if err := m.PrevMid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnreadCounter == nil {
				m.UnreadCounter = &google_protobuf.Int32Value{}
			}
			if err := m.UnreadCounter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageReceived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageReceived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageReceived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			m.StartDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedDate", wireType)
			}
			m.ReceivedDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageRead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageRead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageRead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			m.StartDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadDate", wireType)
			}
			m.ReadDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageReadByMe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageReadByMe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageReadByMe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			m.StartDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnreadCounter == nil {
				m.UnreadCounter = &google_protobuf.Int32Value{}
			}
			if err := m.UnreadCounter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mids = append(m.Mids, &UUIDValue{})
			if err := m.Mids[len(m.Mids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counter == nil {
				m.Counter = &google_protobuf.Int32Value{}
			}
			if err := m.Counter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionDate", wireType)
			}
			m.ActionDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChatClear) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChatClear: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChatClear: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionDate", wireType)
			}
			m.ActionDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChatDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChatDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChatDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionDate", wireType)
			}
			m.ActionDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChatArchive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChatArchive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChatArchive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChatGroupsChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChatGroupsChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChatGroupsChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dialogs = append(m.Dialogs, &DialogGroup{})
			if err := m.Dialogs[len(m.Dialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateReactionsUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateReactionsUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateReactionsUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reactions = append(m.Reactions, &MessageReaction{})
			if err := m.Reactions[len(m.Reactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageRejectedByHook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageRejectedByHook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageRejectedByHook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HookId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reason == nil {
				m.Reason = &google_protobuf.StringValue{}
			}
			if err := m.Reason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageEditRejectedByHook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageEditRejectedByHook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageEditRejectedByHook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HookId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reason == nil {
				m.Reason = &google_protobuf.StringValue{}
			}
			if err := m.Reason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReferencedMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReferencedMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReferencedMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mids = append(m.Mids, &UUIDValue{})
			if err := m.Mids[len(m.Mids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderUid", wireType)
			}
			m.SenderUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &MessageContent{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (MessageState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reactions = append(m.Reactions, &MessageReaction{})
			if err := m.Reactions[len(m.Reactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attribute == nil {
				m.Attribute = &MessageAttributes{}
			}
			if err := m.Attribute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostPeer == nil {
				m.HostPeer = &OutPeer{}
			}
			if err := m.HostPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReferencedMessages{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attach = &HistoryMessage_Forward{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReferencedMessages{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attach = &HistoryMessage_Reply{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SenderPeer == nil {
				m.SenderPeer = &OutPeer{}
			}
			if err := m.SenderPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EditedAt == nil {
				m.EditedAt = &google_protobuf.Int64Value{}
			}
			if err := m.EditedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevMid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrevMid == nil {
				m.PrevMid = &UUIDValue{}
			}
			if err := m.PrevMid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadMode", wireType)
			}
			m.LoadMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadMode |= (ListLoadMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessaging
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessaging
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, &HistoryMessage{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPeers = append(m.GroupPeers, &GroupOutPeer{})
			if err := m.GroupPeers[len(m.GroupPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counter == nil {
				m.Counter = &google_protobuf.Int32Value{}
			}
			if err := m.Counter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterDate", wireType)
			}
			m.CounterDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CounterDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortDate", wireType)
			}
			m.SortDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderUid", wireType)
			}
			m.SenderUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &MessageContent{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (MessageState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstUnreadDate", wireType)
			}
			m.FirstUnreadDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstUnreadDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = &MessageAttributes{}
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFavourite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsFavourite == nil {
				m.IsFavourite = &google_protobuf.BoolValue{}
			}
			if err := m.IsFavourite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinnedMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PinnedMessages == nil {
				m.PinnedMessages = &PinnedMessages{}
			}
			if err := m.PinnedMessages.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HistoryMessage == nil {
				m.HistoryMessage = &HistoryMessage{}
			}
			if err := m.HistoryMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDate", wireType)
			}
			m.MinDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessaging
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessaging
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		case 4:
			if wireType == 0 {
				var v DialogsFilter
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (DialogsFilter(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Filters = append(m.Filters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessaging
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v DialogsFilter
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessaging
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (DialogsFilter(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Filters = append(m.Filters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeersToLoad", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeersToLoad = append(m.PeersToLoad, &Peer{})
			if err := m.PeersToLoad[len(m.PeersToLoad)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dialogs = append(m.Dialogs, &Dialog{})
			if err := m.Dialogs[len(m.Dialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPeers = append(m.GroupPeers, &GroupOutPeer{})
			if err := m.GroupPeers[len(m.GroupPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialogIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialogIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialogIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestFetchDialogIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestFetchDialogIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestFetchDialogIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseFetchDialogIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseFetchDialogIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseFetchDialogIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialogIndices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DialogIndices = append(m.DialogIndices, &DialogIndex{})
			if err := m.DialogIndices[len(m.DialogIndices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadArchived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadArchived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadArchived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextOffset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextOffset == nil {
				m.NextOffset = &google_protobuf.BytesValue{}
			}
			if err := m.NextOffset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessaging
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessaging
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadArchived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadArchived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadArchived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dialogs = append(m.Dialogs, &Dialog{})
			if err := m.Dialogs[len(m.Dialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextOffset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextOffset == nil {
				m.NextOffset = &google_protobuf.BytesValue{}
			}
			if err := m.NextOffset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPeers = append(m.GroupPeers, &GroupOutPeer{})
			if err := m.GroupPeers[len(m.GroupPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadGroupedDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadGroupedDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadGroupedDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessaging
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessaging
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadGroupedDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadGroupedDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadGroupedDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dialogs = append(m.Dialogs, &DialogGroup{})
			if err := m.Dialogs[len(m.Dialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowArchived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShowArchived == nil {
				m.ShowArchived = &google_protobuf.BoolValue{}
			}
			if err := m.ShowArchived.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowInvite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShowInvite == nil {
				m.ShowInvite = &google_protobuf.BoolValue{}
			}
			if err := m.ShowInvite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPeers = append(m.GroupPeers, &GroupOutPeer{})
			if err := m.GroupPeers[len(m.GroupPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseDialogsOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDialogsOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDialogsOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &DialogGroup{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestHideDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHideDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHideDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestShowDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestShowDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestShowDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestFavouriteDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestFavouriteDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestFavouriteDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUnfavouriteDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUnfavouriteDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUnfavouriteDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDialogFavouriteChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDialogFavouriteChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDialogFavouriteChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFavourite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsFavourite == nil {
				m.IsFavourite = &google_protobuf.BoolValue{}
			}
			if err := m.IsFavourite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestNotifyDialogOpened) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestNotifyDialogOpened: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestNotifyDialogOpened: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PinnedMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PinnedMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PinnedMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mids = append(m.Mids, &UUIDValue{})
			if err := m.Mids[len(m.Mids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestPinMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPinMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPinMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPinDate", wireType)
			}
			m.LastPinDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPinDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUnpinMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUnpinMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUnpinMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPinDate", wireType)
			}
			m.LastPinDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPinDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePinnedMessagesChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePinnedMessagesChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePinnedMessagesChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinnedMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PinnedMessages == nil {
				m.PinnedMessages = &PinnedMessages{}
			}
			if err := m.PinnedMessages.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionDate", wireType)
			}
			m.ActionDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessaging(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessaging
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessaging(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessaging = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessaging   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("messaging.proto", fileDescriptorMessaging) }

var fileDescriptorMessaging = []byte{
	// 5769 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x3c, 0x5d, 0x6f, 0x1b, 0xd9,
	0x75, 0x1a, 0x52, 0x94, 0xc4, 0x43, 0x8a, 0x92, 0xae, 0x25, 0x9b, 0x96, 0x6d, 0xd9, 0x1e, 0xef,
	0x76, 0xbd, 0xca, 0xae, 0xe4, 0x95, 0x63, 0x2f, 0xd6, 0xbb, 0x1b, 0x9b, 0xa6, 0x28, 0x93, 0xbb,
	0x92, 0xa5, 0x50, 0x92, 0x37, 0x46, 0xd0, 0xb2, 0x23, 0xce, 0x15, 0x39, 0x36, 0x39, 0x43, 0xcf,
	0x0c, 0x25, 0x2b, 0x05, 0xda, 0xa0, 0x68, 0x1b, 0x24, 0x48, 0x80, 0x04, 0x6d, 0x80, 0xf6, 0x21,
	0x69, 0xd3, 0x97, 0x16, 0xf9, 0x01, 0x4d, 0x5f, 0xfb, 0x01, 0xa4, 0x05, 0x82, 0x36, 0xc5, 0xf6,
	0xa1, 0x2f, 0x2d, 0xba, 0x6e, 0x1f, 0x8a, 0x00, 0x45, 0x82, 0x3e, 0xe4, 0xa5, 0x41, 0x51, 0xdc,
	0xaf, 0xf9, 0x1e, 0x7e, 0x79, 0x8d, 0xdd, 0xf6, 0x49, 0x9a, 0x39, 0x9f, 0xf7, 0xdc, 0x73, 0xce,
	0x3d, 0xe7, 0xde, 0x3b, 0x84, 0x99, 0x36, 0xb6, 0x2c, 0xa5, 0xa1, 0xe9, 0x8d, 0x95, 0x8e, 0x69,
	0xd8, 0x06, 0x9a, 0x50, 0x35, 0xa5, 0x65, 0x34, 0x16, 0x97, 0x1a, 0x86, 0xd1, 0x68, 0xe1, 0x55,
	0xfa, 0xf6, 0xa0, 0x7b, 0xb8, 0x7a, 0x6c, 0x2a, 0x9d, 0x0e, 0x36, 0x2d, 0x86, 0xb7, 0x78, 0x9e,
	0xc3, 0x95, 0x8e, 0xb6, 0xaa, 0xe8, 0xba, 0x61, 0x2b, 0xb6, 0x66, 0xe8, 0x02, 0x3a, 0xa7, 0xe2,
	0x43, 0x4d, 0xd7, 0xbc, 0xaf, 0x4e, 0xb5, 0x35, 0xab, 0x8e, 0x5b, 0x2d, 0x45, 0xc7, 0x46, 0x57,
	0xbc, 0xcc, 0x36, 0x4c, 0xa3, 0xdb, 0x11, 0x4f, 0x99, 0x0e, 0x76, 0x05, 0x2c, 0xb4, 0xb1, 0xaa,
	0x29, 0x35, 0x45, 0x57, 0x6b, 0x87, 0x5a, 0x0b, 0x3b, 0x38, 0x5d, 0xcb, 0x83, 0x63, 0xd5, 0x95,
	0x96, 0xd2, 0x39, 0x58, 0xe5, 0x7f, 0xd9, 0x6b, 0xf9, 0x1f, 0x12, 0x30, 0xb7, 0x45, 0xc7, 0x85,
	0x0b, 0xb6, 0x6d, 0x6a, 0x07, 0x5d, 0x1b, 0x5b, 0x68, 0x13, 0xb2, 0x9a, 0x55, 0x6b, 0x63, 0x9d,
	0x68, 0x85, 0xd5, 0xbc, 0x74, 0x49, 0xba, 0x9a, 0x59, 0x5b, 0x5c, 0x61, 0x03, 0x59, 0x11, 0x03,
	0x5d, 0xb9, 0x6b, 0x18, 0xad, 0x07, 0x4a, 0xab, 0x8b, 0xef, 0x4e, 0x7f, 0xed, 0x27, 0xd7, 0xd2,
	0x30, 0x79, 0xa4, 0x59, 0xda, 0x41, 0x0b, 0x57, 0x33, 0x9a, 0xb5, 0x25, 0xa8, 0xd1, 0x0e, 0xe4,
	0x34, 0xab, 0xd6, 0xd4, 0x1a, 0xcd, 0x96, 0xd6, 0x68, 0xda, 0x58, 0xcd, 0x27, 0x86, 0xe5, 0x37,
	0xad, 0x59, 0x65, 0x97, 0x1e, 0xbd, 0x07, 0x19, 0xcd, 0xaa, 0xe9, 0x86, 0xad, 0x1d, 0x6a, 0x58,
	0xcd, 0x27, 0x87, 0x65, 0x07, 0x9a, 0x75, 0x9f, 0x13, 0xa3, 0x1d, 0x98, 0xd1, 0xac, 0x9a, 0xa1,
	0xb7, 0x4e, 0x6a, 0x87, 0x86, 0x59, 0x3b, 0x31, 0xba, 0xf9, 0xf1, 0x61, 0xf9, 0x65, 0x35, 0x6b,
	0x5b, 0x6f, 0x9d, 0x6c, 0x18, 0xe6, 0x43, 0xa3, 0x2b, 0xff, 0x79, 0x02, 0xa6, 0x3f, 0xdf, 0x35,
	0x6c, 0xac, 0x72, 0xcb, 0xa2, 0xd7, 0x00, 0x98, 0xf3, 0xe0, 0x9a, 0xc6, 0xac, 0x99, 0x0c, 0xb2,
	0x48, 0x73, 0x84, 0x8a, 0x8a, 0x6e, 0xc0, 0x4c, 0xa7, 0x7b, 0xd0, 0xd2, 0xea, 0x35, 0x3a, 0xe5,
	0x84, 0x84, 0x18, 0x2c, 0x15, 0x32, 0x0a, 0xc3, 0xba, 0x47, 0x90, 0x2a, 0x2a, 0xba, 0x0e, 0x39,
	0x0b, 0xeb, 0x2a, 0x36, 0x6b, 0x64, 0xde, 0x09, 0x55, 0x32, 0x8a, 0x2a, 0xcb, 0x90, 0xf6, 0x2d,
	0x6c, 0x56, 0x54, 0x74, 0x0d, 0xb2, 0x42, 0x33, 0x55, 0xb1, 0x31, 0x1d, 0x7a, 0x48, 0xb7, 0x0c,
	0x47, 0x59, 0x57, 0x6c, 0x8c, 0xbe, 0x08, 0xa7, 0x9f, 0xd0, 0xc1, 0xd5, 0x04, 0x61, 0xdd, 0xd0,
	0x6d, 0xac, 0xdb, 0xf9, 0x14, 0x35, 0xdb, 0xe9, 0x15, 0x16, 0x16, 0x2b, 0x7c, 0xf0, 0x45, 0x06,
	0x0d, 0xf2, 0x9c, 0x7f, 0xe2, 0xb5, 0x10, 0x47, 0x92, 0xbf, 0x92, 0x80, 0x2c, 0x7f, 0xb5, 0x45,
	0x7c, 0x1a, 0xbd, 0x0b, 0x93, 0xc7, 0xf8, 0xa0, 0xa3, 0x34, 0x30, 0x77, 0xc2, 0x79, 0xc1, 0xfe,
	0x03, 0xf6, 0x9a, 0xa2, 0x05, 0x99, 0x0b, 0x1a, 0xf4, 0x26, 0xa4, 0xb4, 0x36, 0x21, 0x66, 0x1e,
	0x87, 0x04, 0x71, 0xa5, 0x1d, 0x47, 0xca, 0xf0, 0x09, 0xa1, 0xd2, 0x55, 0x35, 0x83, 0xfb, 0x96,
	0x43, 0x58, 0x20, 0x2f, 0xa3, 0x09, 0x29, 0x3e, 0xda, 0x80, 0x49, 0xa5, 0x4e, 0x83, 0x39, 0x3f,
	0x71, 0x29, 0x79, 0x35, 0xb3, 0x76, 0xc1, 0x91, 0xa9, 0xdb, 0xd8, 0x24, 0xb0, 0x23, 0x26, 0x99,
	0xce, 0x5b, 0x48, 0x73, 0x4e, 0x2c, 0xff, 0x7e, 0x02, 0xb2, 0xde, 0x21, 0xa2, 0x77, 0x20, 0xd9,
	0x35, 0x5b, 0xdc, 0x0a, 0xe7, 0x43, 0xbe, 0xb9, 0x6b, 0x9b, 0x9a, 0xde, 0x60, 0xde, 0x99, 0xfd,
	0xda, 0x4f, 0xae, 0x4d, 0xc1, 0x44, 0x53, 0x53, 0x55, 0xac, 0x57, 0x09, 0x19, 0xba, 0x03, 0x29,
	0x5b, 0xb3, 0x5b, 0xc2, 0x10, 0xc3, 0xd0, 0x33, 0x42, 0xb4, 0x09, 0x19, 0x15, 0x5b, 0x75, 0x53,
	0xeb, 0x10, 0x05, 0xb9, 0x5d, 0x86, 0xe1, 0xe3, 0x25, 0x47, 0xb7, 0xc4, 0xc4, 0xb0, 0x58, 0x5b,
	0xf0, 0x4d, 0xcc, 0xa6, 0x51, 0xa7, 0x29, 0x32, 0x7a, 0x6e, 0xe4, 0x32, 0x80, 0x3b, 0x7f, 0x2e,
	0x27, 0x69, 0x24, 0x4e, 0xee, 0x84, 0x12, 0x4e, 0x6c, 0xce, 0x03, 0x9c, 0x28, 0x4a, 0x2c, 0x27,
	0x4a, 0x22, 0xff, 0xa3, 0x04, 0xa7, 0x83, 0x13, 0xfc, 0x81, 0xa6, 0x36, 0xb0, 0x8d, 0xbe, 0x00,
	0xa7, 0xb5, 0x00, 0xe4, 0x6e, 0xd7, 0xb6, 0x0d, 0x9d, 0xcb, 0x59, 0x8a, 0x73, 0x10, 0x86, 0x55,
	0x1e, 0xab, 0xc6, 0xd0, 0x47, 0x71, 0xde, 0xc5, 0x2d, 0x5c, 0xb7, 0xf9, 0x2c, 0xc7, 0x72, 0x66,
	0x58, 0x51, 0x9c, 0x19, 0xe4, 0xee, 0x04, 0x8c, 0x1f, 0x18, 0xea, 0x89, 0xfc, 0xe5, 0x88, 0x61,
	0x71, 0xe1, 0x57, 0x20, 0x75, 0x44, 0x66, 0x99, 0x8e, 0x22, 0x1d, 0x32, 0x0b, 0x85, 0xa1, 0x02,
	0xa4, 0x5a, 0xca, 0x01, 0x6e, 0x0d, 0xe4, 0x76, 0x41, 0x16, 0x94, 0x52, 0xfe, 0x45, 0x84, 0x0a,
	0x4c, 0x4b, 0xb4, 0x05, 0x93, 0x46, 0x87, 0xc5, 0x9a, 0x44, 0x63, 0xed, 0xa5, 0xde, 0x03, 0xde,
	0xee, 0x44, 0xcd, 0xa0, 0xe0, 0xf1, 0x31, 0x28, 0x8b, 0x76, 0x60, 0x5a, 0xc5, 0x87, 0x4a, 0xb7,
	0x65, 0xd7, 0x98, 0x71, 0x92, 0xc3, 0xb3, 0xca, 0x72, 0x0e, 0x14, 0x28, 0x37, 0xe1, 0x7c, 0xaf,
	0xc1, 0x0c, 0x36, 0x0d, 0x57, 0xbc, 0x23, 0x4b, 0xc7, 0x18, 0xfa, 0x77, 0x12, 0x30, 0x1b, 0x14,
	0x85, 0x2e, 0x40, 0x82, 0xaf, 0x58, 0x21, 0xb2, 0x84, 0xa6, 0xa2, 0x12, 0x4c, 0x1c, 0x53, 0x2f,
	0xef, 0xe7, 0x71, 0x2c, 0x16, 0x82, 0x2c, 0x38, 0x31, 0xba, 0x0b, 0x29, 0xcb, 0x3e, 0x69, 0x31,
	0x73, 0xe5, 0xe2, 0x53, 0xe6, 0x2e, 0x41, 0x0a, 0xa9, 0x4f, 0x49, 0x51, 0x19, 0x26, 0xeb, 0x86,
	0x7e, 0xa8, 0x99, 0x6d, 0x9e, 0x53, 0x2e, 0xc6, 0x71, 0x29, 0x32, 0xb4, 0x90, 0x1f, 0x70, 0x72,
	0x59, 0x81, 0x73, 0x41, 0x92, 0x3d, 0x53, 0xd1, 0xad, 0x16, 0x4d, 0x00, 0xfd, 0x4c, 0xe2, 0x4c,
	0x48, 0x22, 0x7e, 0x42, 0xe4, 0xef, 0x48, 0x70, 0xa9, 0x87, 0x0c, 0xba, 0x34, 0xa0, 0x57, 0x61,
	0xaa, 0xa5, 0xe8, 0x8d, 0xae, 0x48, 0x6e, 0x21, 0x66, 0x0e, 0x18, 0xdd, 0x87, 0x29, 0xbe, 0x1a,
	0x5b, 0xf9, 0x04, 0x0d, 0x85, 0x2b, 0x71, 0xa3, 0xf7, 0x88, 0x09, 0xf1, 0x13, 0x3c, 0xe4, 0x1f,
	0x26, 0x60, 0x21, 0x72, 0xbd, 0x42, 0x05, 0x77, 0x7d, 0x63, 0x31, 0x97, 0x8f, 0x4d, 0x5f, 0x31,
	0x4b, 0xdb, 0xa7, 0x6e, 0x2d, 0xfa, 0x22, 0x64, 0x6d, 0xd7, 0x28, 0x56, 0x7e, 0x9c, 0x8e, 0xeb,
	0xea, 0x00, 0x06, 0x8c, 0x5c, 0xc2, 0x7d, 0xcc, 0xe4, 0xef, 0x25, 0xe0, 0x4c, 0x8c, 0x03, 0xa2,
	0xdb, 0x30, 0x6e, 0xe3, 0xa7, 0xf6, 0x40, 0x6b, 0x7a, 0x40, 0x08, 0x25, 0x24, 0x19, 0x6b, 0x70,
	0x4b, 0x06, 0x3d, 0x91, 0x99, 0xf2, 0x6d, 0x48, 0x18, 0x8f, 0x47, 0x49, 0x53, 0x09, 0xe3, 0x31,
	0x2a, 0xc1, 0xa4, 0xaa, 0x59, 0x6d, 0xcd, 0xb2, 0x78, 0xcc, 0x0d, 0xc5, 0x41, 0xd0, 0xca, 0x7f,
	0x26, 0xc1, 0xb9, 0xfd, 0x0e, 0xa9, 0x3f, 0x83, 0x96, 0x2a, 0x1d, 0x61, 0xdd, 0x46, 0x6b, 0x90,
	0x6c, 0x6b, 0xa2, 0x0b, 0x99, 0x13, 0xf3, 0xb2, 0xbf, 0x5f, 0x59, 0x8f, 0xe4, 0x4b, 0x90, 0x79,
	0x94, 0x26, 0xfa, 0x46, 0x69, 0xb2, 0x47, 0xda, 0xbc, 0x08, 0xc9, 0xae, 0xa6, 0xd2, 0xa1, 0x85,
	0xca, 0x68, 0x02, 0x91, 0x7f, 0x20, 0xc1, 0xc5, 0x2a, 0x7e, 0xd2, 0xc5, 0x96, 0xbd, 0x6e, 0x04,
	0x75, 0x2f, 0x50, 0x77, 0xff, 0xa4, 0x94, 0xbf, 0x75, 0xfe, 0xd9, 0xed, 0xb3, 0x70, 0x46, 0x6b,
	0xaf, 0xa8, 0xad, 0xc6, 0x4a, 0xc3, 0xec, 0xd4, 0x57, 0xee, 0x99, 0x9d, 0x3a, 0xd7, 0x56, 0xfe,
	0x97, 0x71, 0xc8, 0xf9, 0x6b, 0x6f, 0xf4, 0x26, 0x64, 0x88, 0x53, 0xf1, 0xb7, 0x5c, 0xe1, 0x53,
	0x42, 0xe1, 0x3d, 0x17, 0x54, 0x1e, 0xab, 0x7a, 0x31, 0xd1, 0x1d, 0xd2, 0x78, 0x98, 0x47, 0x5a,
	0x1d, 0x0b, 0xda, 0x84, 0xbf, 0x13, 0xd8, 0xf5, 0x41, 0xcb, 0x63, 0xd5, 0x00, 0x3e, 0x2a, 0xc2,
	0x8c, 0x6a, 0xd4, 0xbb, 0xa4, 0xe1, 0x14, 0x2c, 0x98, 0x47, 0x9e, 0x11, 0x2c, 0xd6, 0xfd, 0xe0,
	0xf2, 0x58, 0x35, 0x48, 0x41, 0xf4, 0x7f, 0x64, 0x19, 0xba, 0x60, 0x30, 0xee, 0xd7, 0xff, 0x3d,
	0x17, 0x44, 0xf4, 0xf7, 0x60, 0xa2, 0x4d, 0x40, 0x5d, 0xdd, 0xea, 0x76, 0x3a, 0x86, 0xe9, 0x76,
	0x24, 0xbc, 0x9b, 0x59, 0x74, 0x26, 0x2c, 0x84, 0x51, 0x1e, 0xab, 0x46, 0xd0, 0x51, 0x6b, 0xd8,
	0x5a, 0xfd, 0x31, 0x36, 0x05, 0xa7, 0x89, 0x80, 0x35, 0x7c, 0x50, 0x6a, 0x0d, 0xdf, 0x1b, 0xf4,
	0x2e, 0x4c, 0x1f, 0x68, 0xba, 0x62, 0x9e, 0x08, 0x06, 0x93, 0xfe, 0x7a, 0xf4, 0xae, 0x17, 0x58,
	0x1e, 0xab, 0xfa, 0xb1, 0xd1, 0x2d, 0xc8, 0xe2, 0x76, 0xc7, 0x76, 0xa8, 0xa7, 0xfc, 0x7d, 0x53,
	0xc9, 0x03, 0x2b, 0x8f, 0x55, 0x7d, 0xb8, 0x44, 0x79, 0x15, 0xb7, 0xb0, 0xc7, 0x0c, 0x69, 0xbf,
	0xf2, 0xeb, 0x3e, 0x28, 0x51, 0xde, 0x8f, 0xef, 0x54, 0x8e, 0x5f, 0x4d, 0x40, 0xc6, 0xe3, 0x33,
	0xe8, 0x92, 0x27, 0xd7, 0xa5, 0x03, 0xd9, 0x98, 0x25, 0xb3, 0x57, 0xc9, 0x1a, 0xa6, 0xb3, 0x14,
	0x4c, 0xd6, 0xb0, 0x54, 0xc4, 0xf2, 0xc4, 0xc0, 0xe8, 0x26, 0x24, 0x09, 0xaf, 0xa4, 0xdf, 0x2e,
	0x1e, 0x71, 0xa5, 0xa7, 0xa1, 0xb8, 0x22, 0x22, 0xde, 0x82, 0x14, 0xdd, 0x2a, 0xe1, 0x29, 0x7e,
	0x3e, 0xd0, 0xaa, 0x46, 0xf7, 0x75, 0x6d, 0xde, 0x1c, 0x00, 0x7e, 0x6a, 0x63, 0xdd, 0xa2, 0xfa,
	0xa5, 0x28, 0x7d, 0xc6, 0xe9, 0x10, 0xf4, 0x93, 0xd0, 0x16, 0x83, 0x8b, 0x2d, 0xff, 0xb3, 0x04,
	0xd3, 0x3e, 0xe5, 0x88, 0x9d, 0xc9, 0x98, 0x4b, 0x4f, 0xb7, 0x14, 0xf3, 0xb1, 0x6a, 0x1c, 0x8b,
	0x5e, 0xe0, 0xb4, 0x77, 0x2c, 0x2e, 0x94, 0xd8, 0xd9, 0x8f, 0x8f, 0x2a, 0x30, 0x47, 0x63, 0xd0,
	0x50, 0xb1, 0xa9, 0xfb, 0xe3, 0xee, 0xac, 0xcf, 0x20, 0x5e, 0x84, 0xf2, 0x58, 0x35, 0x4c, 0x25,
	0x02, 0xbf, 0x68, 0xb4, 0xdb, 0x8a, 0x2e, 0x76, 0x53, 0x7c, 0x81, 0xcf, 0x41, 0x22, 0xf0, 0xf9,
	0xa3, 0x33, 0xd7, 0xb7, 0x20, 0xe7, 0xd7, 0x17, 0x5d, 0x85, 0xa9, 0xb6, 0x18, 0x59, 0x22, 0x62,
	0xc6, 0x1d, 0xa8, 0xfc, 0x95, 0x24, 0xcc, 0x85, 0xf4, 0x44, 0x9f, 0x1b, 0x62, 0x65, 0x8c, 0xf2,
	0xa5, 0x5f, 0x86, 0x79, 0xbe, 0x17, 0xa2, 0x2b, 0x6d, 0x5c, 0x33, 0x8e, 0xb0, 0x69, 0x6a, 0xea,
	0x48, 0xeb, 0x24, 0x62, 0x8c, 0xee, 0x2b, 0x6d, 0xbc, 0xcd, 0xd9, 0xa0, 0xcf, 0xc3, 0x02, 0x67,
	0xdf, 0x69, 0x1a, 0xb6, 0xe1, 0xf2, 0x67, 0xb6, 0xcb, 0x39, 0x7e, 0x71, 0xa4, 0xd8, 0x8a, 0x19,
	0xe4, 0x78, 0x8a, 0xd1, 0xee, 0x10, 0x52, 0x87, 0xe5, 0xdb, 0xa2, 0x04, 0x1e, 0xf7, 0x3b, 0xc2,
	0x8e, 0x62, 0x2a, 0x0d, 0x53, 0xe9, 0x34, 0x7b, 0xd5, 0xbe, 0x45, 0x98, 0x52, 0x6c, 0x5b, 0xa9,
	0x37, 0xb1, 0x70, 0xcd, 0x7c, 0xd8, 0x07, 0x0a, 0x14, 0x23, 0x14, 0x54, 0x82, 0x50, 0x7e, 0x26,
	0x41, 0xce, 0x2f, 0x0d, 0xed, 0x40, 0xce, 0x6a, 0x1a, 0xc7, 0xb5, 0x8e, 0x78, 0x3d, 0xfc, 0x4e,
	0xe0, 0x34, 0x61, 0xe0, 0xb0, 0x45, 0x25, 0x98, 0x71, 0x98, 0xd5, 0xea, 0x46, 0xcb, 0x30, 0xf9,
	0x9c, 0x4c, 0x0b, 0x85, 0x8b, 0xe4, 0x65, 0x90, 0x4b, 0xce, 0x21, 0xa2, 0x60, 0xf4, 0x26, 0x4c,
	0x1d, 0x34, 0x38, 0x7d, 0x72, 0x00, 0xfa, 0xc9, 0x83, 0x06, 0x7d, 0x2f, 0x7f, 0x2b, 0x09, 0xb3,
	0x41, 0x93, 0xb8, 0x05, 0xa9, 0x34, 0x6a, 0x41, 0x5a, 0x86, 0x34, 0xfd, 0xa7, 0xd6, 0x35, 0x47,
	0x6a, 0x1f, 0xa7, 0x28, 0xf5, 0xbe, 0xd9, 0x42, 0x45, 0x00, 0xc6, 0x49, 0xab, 0x3b, 0x95, 0xed,
	0x60, 0x7b, 0x1a, 0x4c, 0x83, 0x4a, 0xdd, 0xd0, 0x9d, 0xf0, 0x19, 0x1f, 0x31, 0x7c, 0x1c, 0x67,
	0x4c, 0x8d, 0xe0, 0x8c, 0xab, 0x30, 0x71, 0xa8, 0xe1, 0x96, 0x2a, 0x36, 0xc0, 0xce, 0x84, 0x5d,
	0x71, 0x83, 0xc0, 0xab, 0x1c, 0x4d, 0xfe, 0x9e, 0x04, 0x33, 0x01, 0x18, 0x29, 0x71, 0xdc, 0x29,
	0x49, 0xc7, 0xd4, 0xae, 0x83, 0xb4, 0x5a, 0x68, 0x1d, 0xa6, 0x34, 0xab, 0x66, 0x35, 0x0d, 0xd3,
	0x1e, 0x7e, 0xa3, 0x78, 0x52, 0xb3, 0x76, 0x09, 0xa5, 0xfc, 0x90, 0xad, 0x66, 0x3c, 0xf3, 0xa1,
	0x57, 0x48, 0xb3, 0xc9, 0xd2, 0x65, 0xa4, 0x82, 0x02, 0x8a, 0x2e, 0xc3, 0xb8, 0x62, 0x36, 0xac,
	0x68, 0x0d, 0x29, 0x48, 0x3e, 0x84, 0x9c, 0xbf, 0x40, 0x1a, 0x60, 0xad, 0x5c, 0xf3, 0x2e, 0x80,
	0x73, 0x81, 0x3a, 0xcb, 0x5d, 0xfc, 0xea, 0x46, 0xbb, 0xa3, 0xd4, 0x6d, 0xba, 0xf8, 0xc9, 0x5f,
	0x9f, 0x82, 0xb4, 0x83, 0x81, 0xee, 0x00, 0x3d, 0x1e, 0xa8, 0xe8, 0x47, 0x9a, 0xed, 0xec, 0xf0,
	0x9f, 0x0f, 0x71, 0xda, 0x77, 0x71, 0x48, 0xf6, 0xf7, 0x90, 0xa0, 0x77, 0x01, 0xc8, 0xe3, 0x7b,
	0x86, 0xa6, 0x3b, 0x5b, 0xfa, 0xe7, 0x22, 0x19, 0x30, 0x94, 0xf2, 0x58, 0xd5, 0x43, 0x20, 0xc8,
	0xdf, 0x27, 0xa5, 0x8f, 0x58, 0x74, 0xa2, 0xc9, 0x19, 0x8a, 0x20, 0x67, 0x4f, 0x24, 0x03, 0x90,
	0xa7, 0x4d, 0x7c, 0x28, 0xdc, 0xfc, 0x6c, 0x24, 0x31, 0x41, 0x28, 0x8f, 0x55, 0x1d, 0x64, 0x54,
	0x04, 0x76, 0x92, 0x52, 0x34, 0xb1, 0x42, 0x46, 0xce, 0x5c, 0xfc, 0x42, 0x88, 0xf8, 0x9e, 0x07,
	0x89, 0xd4, 0x49, 0x5e, 0x22, 0xc2, 0xa4, 0xde, 0x54, 0xf4, 0x06, 0x56, 0xf7, 0xa8, 0x97, 0x4e,
	0xc4, 0x30, 0x29, 0x7a, 0x90, 0x08, 0x13, 0x2f, 0x91, 0x97, 0x89, 0xd1, 0xd1, 0xea, 0xbc, 0xcc,
	0x8b, 0x67, 0x42, 0x90, 0xbc, 0x4c, 0xc8, 0xb3, 0x87, 0x49, 0xe1, 0xc0, 0xe8, 0xda, 0xbc, 0xda,
	0x8b, 0x65, 0x42, 0x91, 0x3c, 0x4c, 0xe8, 0x33, 0xda, 0x80, 0x69, 0xf1, 0x4c, 0x57, 0x2c, 0x5e,
	0xf5, 0x2d, 0xc5, 0x72, 0xa1, 0x58, 0xa4, 0xf4, 0xf4, 0x91, 0xa1, 0x2a, 0xcc, 0xd5, 0x0d, 0xdd,
	0x26, 0x2e, 0x87, 0x1b, 0x9a, 0x65, 0x63, 0x13, 0xab, 0x79, 0xa0, 0xbc, 0xe4, 0x30, 0xaf, 0x20,
	0x26, 0xa9, 0x4e, 0x42, 0xe4, 0xc4, 0x51, 0x3b, 0x4d, 0x43, 0xc7, 0x5b, 0x9a, 0x65, 0x61, 0x35,
	0x9f, 0x89, 0x71, 0xd4, 0x1d, 0x17, 0x87, 0x38, 0xaa, 0x87, 0x04, 0xdd, 0x82, 0x34, 0x7d, 0x2c,
	0x2a, 0xad, 0x56, 0x3e, 0xeb, 0x2f, 0xeb, 0xfd, 0xf4, 0x04, 0xa3, 0x3c, 0x56, 0x75, 0xd1, 0x89,
	0x65, 0xe8, 0x43, 0x15, 0x3f, 0xc2, 0x75, 0xe2, 0x2e, 0xd3, 0x31, 0x96, 0xd9, 0xf1, 0x62, 0x11,
	0xcb, 0xf8, 0xc8, 0xf8, 0x34, 0xd9, 0x05, 0xb3, 0xde, 0xd4, 0x8e, 0xb0, 0x9a, 0xcf, 0xc5, 0x4f,
	0x93, 0x83, 0xc4, 0xa7, 0xc9, 0x79, 0x16, 0x4c, 0xaa, 0xd8, 0xb2, 0x0d, 0x62, 0xd9, 0x99, 0x1e,
	0x4c, 0x04, 0x92, 0x60, 0x22, 0x9e, 0x9d, 0xa2, 0x6d, 0x03, 0xe6, 0xa3, 0xa2, 0x1c, 0xad, 0x40,
	0x46, 0x63, 0xff, 0xd6, 0xba, 0xbc, 0x6f, 0x4d, 0x85, 0xcf, 0xcf, 0x18, 0xc6, 0xbe, 0xa6, 0xca,
	0x0b, 0x70, 0x2a, 0x22, 0xd8, 0xe5, 0x62, 0xe0, 0x35, 0x0f, 0xdb, 0xd7, 0x00, 0x1e, 0xd3, 0xff,
	0xe2, 0x99, 0xa7, 0x19, 0x02, 0xe1, 0x7d, 0x0a, 0xe6, 0x42, 0xc1, 0x2c, 0x9f, 0x81, 0x85, 0xc8,
	0x20, 0x95, 0xdf, 0xf6, 0x00, 0xbc, 0x81, 0x87, 0x64, 0xff, 0x62, 0x12, 0xb5, 0x82, 0xcb, 0x0f,
	0x23, 0x88, 0x69, 0x80, 0x91, 0xe2, 0x80, 0x86, 0xe7, 0x28, 0xc5, 0x01, 0x21, 0x8c, 0x62, 0xcd,
	0xc2, 0xee, 0x0e, 0xa4, 0x14, 0x1a, 0xb4, 0x23, 0xb0, 0xa6, 0x84, 0xf2, 0x36, 0x9c, 0x8e, 0x8e,
	0x4d, 0x74, 0x03, 0x26, 0x14, 0x16, 0xcb, 0x52, 0xaf, 0x9a, 0x54, 0xac, 0x10, 0x1c, 0x59, 0x7e,
	0x17, 0x16, 0xe3, 0x03, 0x54, 0x6c, 0x88, 0x48, 0xb1, 0x1b, 0x22, 0xa7, 0x3d, 0x4e, 0xe5, 0x89,
	0x48, 0xf9, 0x36, 0xa0, 0x70, 0xa4, 0x91, 0x8e, 0x4f, 0xed, 0x9a, 0xb4, 0x98, 0x89, 0xe6, 0xe9,
	0x80, 0xe5, 0xbc, 0x67, 0xa0, 0xbe, 0x50, 0xf3, 0xb9, 0x83, 0x37, 0x7a, 0x42, 0x00, 0x11, 0x01,
	0xf2, 0xdf, 0x27, 0x60, 0x26, 0xb0, 0x9f, 0x80, 0x7e, 0x09, 0x26, 0x0f, 0xb5, 0x56, 0xfc, 0xf1,
	0xec, 0x04, 0x81, 0x56, 0x54, 0xf4, 0x3a, 0x64, 0x94, 0x7a, 0x1d, 0x5b, 0x56, 0xad, 0xa9, 0x58,
	0x4d, 0xba, 0xea, 0x25, 0xc5, 0xd4, 0xa8, 0xc4, 0xfe, 0x66, 0x15, 0x18, 0x42, 0x59, 0xb1, 0x9a,
	0x68, 0x19, 0xd2, 0x94, 0xad, 0xa5, 0x7d, 0x09, 0x47, 0x1f, 0xc7, 0x4e, 0x11, 0xf8, 0xae, 0xf6,
	0x25, 0xba, 0xea, 0x93, 0x66, 0x85, 0xae, 0x66, 0xa1, 0x55, 0x9f, 0x40, 0x08, 0xb7, 0xb6, 0xd6,
	0xc6, 0x35, 0xfb, 0xa4, 0xc3, 0x4a, 0xb3, 0xf0, 0x8e, 0x30, 0x81, 0xef, 0x9d, 0x74, 0x30, 0xba,
	0x09, 0x29, 0xbb, 0xd9, 0x6d, 0x1f, 0xf0, 0xa5, 0xc9, 0xa9, 0x11, 0x36, 0x14, 0xcb, 0xde, 0x23,
	0x80, 0xa0, 0x07, 0x30, 0x74, 0x74, 0x9d, 0x55, 0x16, 0x53, 0xfe, 0x63, 0x4f, 0x61, 0xae, 0x98,
	0xd2, 0xe2, 0x4f, 0x24, 0x00, 0x17, 0x05, 0xad, 0x42, 0x8a, 0xf6, 0x45, 0xdc, 0xf5, 0xce, 0x84,
	0xb9, 0xd0, 0xde, 0xa7, 0x3c, 0x56, 0x65, 0x78, 0x84, 0xe0, 0x48, 0x53, 0xb1, 0xc1, 0xab, 0x88,
	0x08, 0x82, 0x07, 0x04, 0x4c, 0x08, 0x28, 0x1e, 0x25, 0x30, 0xb4, 0x7a, 0xec, 0x36, 0x51, 0xe9,
	0xe9, 0x03, 0x02, 0xa6, 0x04, 0xe4, 0x1f, 0x27, 0xeb, 0xbd, 0xef, 0x4e, 0x3d, 0xd7, 0x02, 0x9d,
	0x03, 0xe9, 0x38, 0xda, 0xfd, 0xa4, 0x63, 0x02, 0x6c, 0x46, 0x9f, 0xbe, 0x4b, 0x4d, 0xf9, 0xc8,
	0xcb, 0x8c, 0x6a, 0x38, 0x3a, 0x33, 0x5f, 0x30, 0x24, 0x7b, 0x07, 0xc3, 0x3b, 0x3e, 0xb9, 0x64,
	0x7c, 0xc3, 0x84, 0xd2, 0x4d, 0xc8, 0x78, 0x36, 0xc3, 0xd0, 0x2b, 0x30, 0x65, 0x2a, 0xc7, 0xb5,
	0x47, 0x16, 0xa7, 0x0c, 0xba, 0xde, 0xa4, 0xa9, 0x1c, 0x13, 0x7c, 0x79, 0x1e, 0x50, 0x78, 0x13,
	0x4c, 0xfe, 0xab, 0x71, 0xc8, 0xf9, 0x77, 0xb4, 0x50, 0x05, 0x80, 0xef, 0x68, 0xd5, 0x9c, 0x8d,
	0xcf, 0x73, 0xa1, 0xdc, 0x56, 0xd1, 0xed, 0xeb, 0x6b, 0x91, 0x45, 0x77, 0x9a, 0x53, 0x57, 0x54,
	0xb4, 0x05, 0xd9, 0x43, 0xc5, 0xb2, 0x6b, 0x1d, 0x13, 0x1f, 0x69, 0xf8, 0xd8, 0xa9, 0x32, 0x43,
	0x05, 0xfc, 0x89, 0x8d, 0xad, 0xe8, 0x9b, 0x28, 0x84, 0x7e, 0x87, 0x91, 0xa3, 0x02, 0xa4, 0xe9,
	0xc1, 0x6f, 0xed, 0xc6, 0x1b, 0x6b, 0x43, 0xf5, 0x56, 0x53, 0x94, 0xec, 0xc6, 0x1b, 0x6b, 0x2e,
	0x8b, 0xb5, 0x1b, 0x37, 0x87, 0x3a, 0xbc, 0x66, 0x2c, 0xd6, 0x6e, 0xdc, 0x44, 0xbf, 0x02, 0x0b,
	0xc2, 0x3e, 0x75, 0xa3, 0xd5, 0xc2, 0x74, 0x9f, 0x98, 0x98, 0x2a, 0x35, 0xb4, 0xa9, 0x4e, 0x71,
	0x46, 0x45, 0x87, 0x4f, 0x45, 0x45, 0x06, 0x2c, 0x45, 0xf0, 0xf7, 0xa6, 0xad, 0x89, 0x78, 0x41,
	0x37, 0x3f, 0x1b, 0x29, 0xe8, 0x5c, 0x48, 0x50, 0xc1, 0xcd, 0x72, 0x77, 0x20, 0x85, 0xdb, 0xc6,
	0x23, 0x8d, 0x57, 0xb0, 0x43, 0xad, 0x63, 0x94, 0x50, 0xfe, 0x55, 0x98, 0xf6, 0xed, 0x6a, 0x92,
	0x2a, 0x84, 0x5f, 0x2b, 0xa9, 0xd9, 0x4a, 0x23, 0xba, 0xc9, 0x02, 0x8e, 0xb1, 0xa7, 0x34, 0xc8,
	0xca, 0xd4, 0xb6, 0x1a, 0xd4, 0x3f, 0xb2, 0xa1, 0x14, 0xd5, 0xb6, 0x1a, 0x72, 0x0e, 0xb2, 0xde,
	0x9d, 0x4f, 0xf9, 0x01, 0xe4, 0xfc, 0x7b, 0x99, 0xbc, 0x51, 0x6c, 0x19, 0x75, 0xa5, 0x35, 0xf8,
	0x36, 0x87, 0x90, 0x31, 0xa9, 0x59, 0x64, 0xe2, 0x5b, 0xf2, 0xd7, 0x24, 0xc8, 0xac, 0x53, 0x77,
	0xa0, 0x8d, 0x23, 0x5a, 0x85, 0xf1, 0x0e, 0xc6, 0x62, 0x15, 0xce, 0x3a, 0x9d, 0x34, 0xc6, 0xa1,
	0x4d, 0x0a, 0x8a, 0xc8, 0x5a, 0xcb, 0xae, 0x6e, 0x63, 0x33, 0x3a, 0x55, 0x08, 0x28, 0x69, 0x2d,
	0xe3, 0xaf, 0xec, 0x50, 0x90, 0xfc, 0x4d, 0x47, 0x19, 0x76, 0x78, 0x37, 0x40, 0x21, 0x44, 0x2c,
	0xf9, 0x18, 0x9f, 0x44, 0x37, 0xac, 0x04, 0x82, 0xde, 0x81, 0x49, 0x36, 0x08, 0x2b, 0x9f, 0xa4,
	0x0d, 0xbe, 0xb3, 0x55, 0xe8, 0x19, 0x77, 0xc4, 0x59, 0x0f, 0x25, 0x91, 0x1f, 0xc2, 0x0c, 0x37,
	0x78, 0x15, 0xb3, 0x03, 0x41, 0xd2, 0xc6, 0xd3, 0x9b, 0x6a, 0xf4, 0x40, 0x31, 0x34, 0x5e, 0x06,
	0x23, 0xa3, 0xad, 0x1b, 0x6a, 0x4c, 0xab, 0x4f, 0x41, 0x84, 0xf5, 0x2e, 0x56, 0xcc, 0x7a, 0x73,
	0xc7, 0xc4, 0xaa, 0x56, 0x57, 0x6c, 0x67, 0x30, 0x52, 0xec, 0x60, 0x5e, 0x86, 0x09, 0xba, 0x4d,
	0xc0, 0xb6, 0x9c, 0x43, 0x38, 0x1c, 0x28, 0x7f, 0x7f, 0x1c, 0x10, 0x3f, 0x3a, 0xd9, 0xc5, 0xba,
	0xe3, 0x32, 0x6b, 0xbe, 0xc9, 0x9d, 0x11, 0x76, 0xd8, 0xee, 0xda, 0xf1, 0xf3, 0x7b, 0x11, 0x92,
	0x26, 0xbf, 0x9b, 0x15, 0x9a, 0x35, 0x02, 0x41, 0xb7, 0x61, 0xb2, 0xed, 0x3b, 0xc3, 0x18, 0xf0,
	0x46, 0x95, 0xa0, 0x42, 0x37, 0x61, 0xd6, 0x7b, 0xa3, 0x8d, 0xd8, 0x8f, 0xa6, 0x96, 0x54, 0xc4,
	0xad, 0x3a, 0x7e, 0x6d, 0x8d, 0x14, 0xd7, 0xa8, 0x08, 0x93, 0x87, 0x86, 0x79, 0xac, 0x98, 0x2a,
	0x5f, 0xfe, 0x9d, 0x2e, 0xa9, 0x8a, 0x0f, 0xb1, 0x89, 0xf5, 0xba, 0x13, 0x2c, 0x56, 0x48, 0x38,
	0xa7, 0x44, 0xb7, 0x21, 0x65, 0xe2, 0x4e, 0xeb, 0x84, 0xb7, 0x90, 0x43, 0xb0, 0x60, 0x74, 0x68,
	0x03, 0xa0, 0x23, 0xe6, 0xcf, 0xca, 0x83, 0x7f, 0x0b, 0x29, 0x30, 0xbf, 0xa1, 0x8c, 0xe0, 0x52,
	0x92, 0x4e, 0xe3, 0xb8, 0xa9, 0xd9, 0xb8, 0xd6, 0xd2, 0x2c, 0x3b, 0x9f, 0x89, 0x72, 0xad, 0x34,
	0x45, 0xd8, 0xd4, 0x2c, 0x9b, 0x60, 0x1f, 0xb4, 0x94, 0xfa, 0x63, 0x86, 0x9d, 0x8d, 0xc4, 0xa6,
	0x08, 0x04, 0xbb, 0xcf, 0xd9, 0xda, 0x7f, 0x4a, 0x30, 0xcf, 0xff, 0x67, 0xa7, 0x9a, 0xae, 0xbb,
	0xd0, 0xa3, 0xc0, 0xc4, 0x30, 0x47, 0x81, 0xf7, 0x61, 0xa6, 0x4b, 0x99, 0x38, 0xf7, 0xed, 0xf8,
	0xc2, 0x35, 0xa0, 0x57, 0xe4, 0x38, 0xb5, 0xd0, 0xe1, 0x3a, 0xe4, 0x5a, 0x64, 0x45, 0xc5, 0x2a,
	0x6d, 0xf1, 0x14, 0x3b, 0x3a, 0x7f, 0x64, 0x09, 0x52, 0x89, 0xe2, 0x14, 0xfa, 0x8d, 0xf7, 0x1b,
	0x12, 0x9c, 0xe6, 0xff, 0x3b, 0xa1, 0x5d, 0xc7, 0xb4, 0x63, 0x1d, 0x25, 0x40, 0x44, 0x5e, 0x4b,
	0xc6, 0xe6, 0xb5, 0x3e, 0xfa, 0x7c, 0x55, 0x72, 0x82, 0xd5, 0x4d, 0x35, 0x9f, 0x90, 0x2e, 0x26,
	0x9c, 0x17, 0x07, 0xc4, 0x74, 0xb5, 0xe1, 0x0a, 0x6d, 0x1f, 0x58, 0x06, 0x79, 0x44, 0x9f, 0x85,
	0xf1, 0xb6, 0xa6, 0x8a, 0x4c, 0xda, 0xdf, 0x27, 0x28, 0x76, 0x1f, 0x99, 0x7f, 0x28, 0xc1, 0x2c,
	0xff, 0xbf, 0xd8, 0xc2, 0x8a, 0x49, 0x9a, 0x9f, 0x91, 0x46, 0xff, 0x16, 0xcc, 0x51, 0x5f, 0xf1,
	0xdd, 0x10, 0x4d, 0x44, 0x99, 0x62, 0x86, 0xe0, 0x6d, 0xb9, 0xb7, 0x44, 0xfb, 0x68, 0xf8, 0x47,
	0x12, 0xcc, 0xf9, 0xcc, 0xf2, 0xe9, 0x53, 0xf1, 0xd0, 0xf1, 0x21, 0xde, 0x50, 0x8e, 0xaa, 0x62,
	0x1f, 0x39, 0x7f, 0x2d, 0xc1, 0x59, 0xbf, 0xb3, 0xee, 0x62, 0xdb, 0x59, 0x1a, 0x47, 0xf4, 0x59,
	0xba, 0x52, 0x26, 0x63, 0x57, 0x4a, 0x91, 0x88, 0xc6, 0x87, 0x48, 0x44, 0x7d, 0x86, 0xf1, 0x43,
	0xc9, 0x71, 0x74, 0x27, 0xe6, 0xda, 0xc6, 0x11, 0xfe, 0xbf, 0x37, 0x92, 0x3f, 0xa0, 0x13, 0x62,
	0x75, 0x0c, 0xdd, 0x72, 0xb4, 0xb7, 0xc4, 0x0b, 0x34, 0x0b, 0x49, 0x0b, 0x3f, 0x61, 0x2d, 0x56,
	0x95, 0xfc, 0x8b, 0xe6, 0x21, 0x65, 0xd9, 0xc2, 0xeb, 0xb2, 0x55, 0xf6, 0x80, 0x6e, 0x40, 0xda,
	0x14, 0xc4, 0x3c, 0xb8, 0xcf, 0x04, 0x12, 0xb6, 0x60, 0x5e, 0x75, 0x31, 0x6f, 0x5d, 0x78, 0x76,
	0x7b, 0x11, 0xf2, 0x61, 0xd5, 0x98, 0x74, 0xf9, 0xa7, 0xe3, 0x30, 0xed, 0x5f, 0x52, 0x86, 0x2e,
	0x2f, 0x5f, 0x03, 0x10, 0xb7, 0xc4, 0xe3, 0xee, 0x95, 0xa7, 0xf9, 0x0d, 0x71, 0x4d, 0x1d, 0x20,
	0xff, 0x79, 0xcb, 0x95, 0xd4, 0x48, 0xe5, 0x4a, 0x19, 0x40, 0x71, 0x3e, 0x3d, 0xe0, 0xad, 0xc9,
	0xd9, 0x00, 0x0f, 0xf7, 0xdb, 0x84, 0xd0, 0x92, 0xef, 0xd2, 0x0a, 0x67, 0x98, 0x1a, 0x66, 0x7d,
	0x2d, 0xb9, 0x45, 0xcf, 0xb0, 0x15, 0x4b, 0x79, 0xcc, 0x2d, 0x7b, 0x0a, 0xa2, 0xec, 0x81, 0xe1,
	0x99, 0xf0, 0xc2, 0xa7, 0x08, 0x59, 0xda, 0xe6, 0x1a, 0x5d, 0xab, 0x46, 0x86, 0x91, 0x19, 0x70,
	0x18, 0x19, 0x41, 0xb5, 0xa5, 0xa9, 0x68, 0xdd, 0xed, 0x1e, 0xb2, 0x43, 0x77, 0x93, 0x82, 0xf4,
	0xee, 0x14, 0x4c, 0xb0, 0x63, 0x61, 0xf9, 0xa7, 0xce, 0xd5, 0x2c, 0xff, 0x6c, 0xf2, 0xcd, 0xc6,
	0xe1, 0xfd, 0xcf, 0xe3, 0x2e, 0xc9, 0x91, 0xdc, 0x65, 0x84, 0x88, 0x47, 0xcb, 0x90, 0x76, 0xeb,
	0x9d, 0x54, 0x94, 0x2f, 0x4f, 0x61, 0x5e, 0xeb, 0xc8, 0x3f, 0x4a, 0xc0, 0x9c, 0x6f, 0xc4, 0xbb,
	0x58, 0x1f, 0xa1, 0x8d, 0xe3, 0x65, 0x7e, 0x22, 0xb6, 0xcc, 0x1f, 0x20, 0xb4, 0x46, 0x19, 0xea,
	0xdb, 0x30, 0x45, 0xfc, 0x81, 0x7a, 0x50, 0x6a, 0x40, 0xc2, 0x49, 0x42, 0x41, 0xbc, 0xe7, 0xf3,
	0x90, 0xeb, 0xea, 0x26, 0x56, 0xd4, 0x9a, 0x70, 0xa2, 0x89, 0xa1, 0x9d, 0x68, 0x9a, 0x71, 0x28,
	0x32, 0x06, 0xf2, 0xf7, 0x25, 0x58, 0xf0, 0x99, 0xd3, 0xa9, 0x0d, 0x47, 0x4a, 0x5d, 0xb6, 0x62,
	0xda, 0x3d, 0x16, 0xf9, 0x34, 0x45, 0x58, 0x67, 0xc6, 0x9b, 0x36, 0xb9, 0xa8, 0x5a, 0xbc, 0xa1,
	0xb3, 0x02, 0x87, 0xd0, 0xc8, 0xdf, 0x95, 0x02, 0x73, 0x4f, 0x0b, 0xc7, 0x17, 0xac, 0xe8, 0x32,
	0x5d, 0x2a, 0x7a, 0x29, 0x39, 0x45, 0xe0, 0x54, 0xc1, 0xbf, 0x0d, 0x5b, 0x53, 0x51, 0xef, 0x9e,
	0x6c, 0xe1, 0x17, 0xad, 0x64, 0xd8, 0x33, 0x92, 0xcf, 0xeb, 0x19, 0xff, 0x25, 0xc1, 0x29, 0xdf,
	0x58, 0x58, 0x29, 0x38, 0xfc, 0x48, 0x46, 0xaa, 0xa1, 0xbd, 0x99, 0x72, 0x7c, 0xe4, 0x4c, 0x89,
	0x56, 0x20, 0xc3, 0xd6, 0x6e, 0x66, 0xc6, 0xc8, 0xdc, 0x02, 0x0c, 0x83, 0x4e, 0xa0, 0x09, 0x33,
	0x6c, 0xcc, 0xa4, 0x9c, 0xa4, 0xd5, 0xf9, 0xf0, 0xe3, 0x0d, 0xc8, 0x4c, 0xf4, 0x93, 0x69, 0xc1,
	0xac, 0x2b, 0x73, 0x54, 0x23, 0x0f, 0x2b, 0x74, 0x5d, 0x44, 0x92, 0xe7, 0x4c, 0x66, 0x68, 0xa9,
	0xf2, 0x07, 0x70, 0xc6, 0xe5, 0x42, 0xf7, 0xb0, 0x2c, 0xb1, 0xf2, 0x78, 0xb6, 0xa1, 0xa4, 0xa8,
	0x6d, 0xa8, 0xe8, 0xcf, 0xab, 0xc4, 0x36, 0xd4, 0x5f, 0x3a, 0x81, 0xe4, 0xd4, 0x78, 0xec, 0x71,
	0x78, 0xcb, 0xac, 0x0f, 0x5e, 0xea, 0x85, 0x02, 0xcc, 0x21, 0x1c, 0x25, 0xd7, 0xcb, 0xff, 0x13,
	0x5c, 0x9c, 0xc5, 0xa1, 0xd8, 0xdd, 0x93, 0xb2, 0x61, 0x3c, 0xfe, 0x64, 0x16, 0xad, 0x97, 0x61,
	0xa2, 0x69, 0x18, 0x8f, 0x2b, 0x2a, 0x3f, 0xc8, 0x0a, 0xee, 0xa8, 0x31, 0x20, 0x2a, 0xc2, 0x84,
	0x89, 0x15, 0xcb, 0xd0, 0xf9, 0x2a, 0x35, 0xd4, 0x75, 0x29, 0x4e, 0x2a, 0x7f, 0x3b, 0x01, 0x17,
	0x7d, 0x06, 0x28, 0xa9, 0x9a, 0xfd, 0xbc, 0x46, 0x18, 0x65, 0x97, 0xe6, 0x53, 0x66, 0x97, 0xf7,
	0x48, 0xf3, 0x1a, 0x2c, 0x3c, 0x9d, 0x3c, 0x29, 0xf5, 0xc9, 0x93, 0x62, 0x4f, 0x9b, 0x62, 0xcb,
	0xff, 0x9d, 0x82, 0x5c, 0x59, 0xb3, 0x6c, 0xc3, 0xdd, 0x9c, 0xf7, 0xf7, 0x10, 0xd2, 0xa7, 0xa0,
	0x87, 0x78, 0x4b, 0x34, 0x61, 0x13, 0xf4, 0x03, 0xa2, 0xe0, 0xc5, 0xde, 0x5d, 0x3b, 0x62, 0xb3,
	0x90, 0x77, 0x6a, 0xbe, 0xf0, 0x9d, 0x1c, 0x35, 0x7c, 0x37, 0x20, 0xed, 0x34, 0x22, 0xbc, 0x01,
	0x19, 0xbc, 0x87, 0x71, 0x49, 0x85, 0xf3, 0xc1, 0x70, 0x25, 0x5f, 0xba, 0x69, 0x58, 0x76, 0x8d,
	0xba, 0x79, 0x76, 0xa0, 0xfe, 0x7a, 0x8a, 0x10, 0x10, 0x00, 0xba, 0xe9, 0xf6, 0x3f, 0xd3, 0xfd,
	0x5a, 0x17, 0x6f, 0xc3, 0xb3, 0x26, 0x1a, 0x9e, 0xdc, 0x00, 0x54, 0xbc, 0xc3, 0xb9, 0x06, 0x19,
	0x71, 0x6d, 0x96, 0xa8, 0x3a, 0x13, 0xa9, 0x6a, 0x95, 0xfb, 0x16, 0xd5, 0xee, 0x9e, 0xb7, 0x70,
	0x9f, 0x1d, 0xfa, 0xd4, 0xca, 0xa9, 0xea, 0xd1, 0x6b, 0x9e, 0xb2, 0x78, 0x2e, 0xc6, 0xb8, 0x4e,
	0x1d, 0xec, 0xe9, 0x7f, 0xfe, 0x22, 0xe1, 0xec, 0x03, 0x6d, 0x1a, 0x8a, 0xca, 0x03, 0xe1, 0x05,
	0xed, 0x25, 0xd2, 0xef, 0xf4, 0xb4, 0xb6, 0x66, 0x47, 0x7f, 0x72, 0xc2, 0x60, 0xe8, 0x0e, 0xa4,
	0x5b, 0x86, 0xa2, 0xd6, 0xda, 0x86, 0xca, 0xc2, 0xc5, 0xe3, 0xef, 0x9b, 0x1a, 0xd3, 0x73, 0xcb,
	0x50, 0xc3, 0xc6, 0x68, 0x71, 0x00, 0xda, 0x86, 0x69, 0xa3, 0x63, 0x6b, 0x6d, 0xed, 0x4b, 0x8a,
	0xfb, 0xa5, 0x72, 0xce, 0xf3, 0xad, 0x03, 0x4d, 0xa9, 0xdb, 0x1e, 0x94, 0x50, 0x29, 0xe7, 0xa3,
	0xef, 0xb3, 0xa3, 0xf2, 0xf3, 0x04, 0x9c, 0x12, 0x5b, 0x18, 0x5e, 0x23, 0x5e, 0x83, 0xc9, 0x26,
	0xfb, 0x97, 0xa7, 0x24, 0x27, 0xea, 0xfd, 0xf9, 0xa6, 0x2a, 0xd0, 0x90, 0x2c, 0x4e, 0x8a, 0xd8,
	0x37, 0x6e, 0x4e, 0x32, 0xdf, 0xb7, 0xb0, 0x29, 0x0e, 0x8a, 0xd6, 0xd8, 0xbd, 0x42, 0xea, 0x62,
	0xe2, 0x5b, 0xae, 0x53, 0x5e, 0x44, 0xe1, 0x67, 0x69, 0x82, 0x46, 0xfe, 0xb3, 0x48, 0x6e, 0x66,
	0xbf, 0xae, 0xc0, 0x6f, 0x4f, 0x3b, 0x97, 0x89, 0x69, 0x11, 0x51, 0xe5, 0x40, 0x74, 0x03, 0x32,
	0xec, 0x8b, 0x7c, 0xc6, 0x7b, 0xc2, 0xff, 0x11, 0x01, 0xc5, 0x75, 0x9c, 0x98, 0x22, 0x32, 0xee,
	0x37, 0xdc, 0x4a, 0x73, 0xb2, 0x6f, 0xa5, 0xe9, 0x3d, 0xdf, 0xcb, 0xf2, 0x7f, 0x59, 0xc9, 0x45,
	0xb2, 0x4a, 0xb2, 0x9a, 0xe1, 0xef, 0xe8, 0x16, 0x66, 0x9f, 0xed, 0xa2, 0x5f, 0xa4, 0x60, 0x82,
	0x15, 0x43, 0xc3, 0xaf, 0x82, 0xd7, 0x20, 0xeb, 0x2d, 0xf8, 0xa3, 0xaf, 0x24, 0x64, 0x3c, 0x15,
	0x3d, 0xe9, 0x63, 0x2c, 0x43, 0xf4, 0x13, 0x91, 0x87, 0x0a, 0x53, 0x04, 0x4e, 0xdb, 0x09, 0xff,
	0x0a, 0x92, 0x1a, 0x70, 0x05, 0x99, 0x1c, 0x68, 0x05, 0x99, 0x1a, 0x69, 0x05, 0x59, 0x16, 0x2b,
	0x48, 0x3a, 0x7e, 0x05, 0x11, 0x4b, 0xc6, 0x5b, 0x30, 0x77, 0xa8, 0x99, 0x96, 0x5d, 0xe3, 0x16,
	0xa2, 0xca, 0x41, 0xe4, 0xa6, 0x33, 0xc5, 0xdb, 0xd7, 0x45, 0x03, 0x17, 0xd8, 0xec, 0xca, 0x3c,
	0xff, 0x66, 0x57, 0x76, 0x98, 0x95, 0x82, 0xfd, 0xae, 0xc7, 0xa1, 0x72, 0x64, 0x74, 0x4d, 0xcd,
	0xc6, 0x4e, 0xc6, 0x1f, 0xe6, 0x77, 0x3d, 0x36, 0x04, 0x35, 0xba, 0x0f, 0x33, 0x1d, 0x4d, 0xd7,
	0xdd, 0x93, 0x29, 0x8b, 0x2f, 0x06, 0xee, 0x7d, 0x71, 0x0a, 0x8e, 0x3b, 0xf0, 0xcb, 0x75, 0x7c,
	0x60, 0xc2, 0x8f, 0x07, 0xba, 0x73, 0xd4, 0x35, 0xe3, 0xe7, 0xe7, 0xcf, 0x0b, 0x21, 0x7e, 0x4d,
	0x1f, 0x58, 0xfe, 0xd0, 0x9f, 0xbb, 0x59, 0x24, 0x58, 0xf4, 0xdb, 0x14, 0x8d, 0xb7, 0x31, 0x91,
	0x77, 0xbd, 0x26, 0xdb, 0x1a, 0xed, 0x61, 0xdc, 0x74, 0x9c, 0xe8, 0x91, 0x8e, 0x43, 0xc9, 0x34,
	0xf9, 0x7c, 0xc9, 0x14, 0x7d, 0x8e, 0x5e, 0x45, 0xb3, 0x45, 0xf6, 0xca, 0xb9, 0xf7, 0x4b, 0xf8,
	0x08, 0x36, 0x28, 0x34, 0x7c, 0x02, 0xcb, 0x88, 0xd0, 0x6d, 0x98, 0xa6, 0xf9, 0xa9, 0x66, 0x1b,
	0x35, 0x92, 0xf2, 0x79, 0x4e, 0xeb, 0x19, 0xf3, 0xec, 0xe7, 0x64, 0xf6, 0x0c, 0x62, 0xa7, 0x3e,
	0xd9, 0xfc, 0xf7, 0x02, 0xd9, 0x5c, 0x98, 0xd5, 0xcd, 0xa1, 0x52, 0xaf, 0x1c, 0x3a, 0x48, 0x0a,
	0xbf, 0x1a, 0xbc, 0x61, 0x90, 0xf3, 0x5b, 0xc0, 0x69, 0xe3, 0x46, 0x4a, 0xf6, 0x81, 0x2c, 0x9e,
	0x1a, 0x2c, 0x8b, 0xf7, 0xcb, 0xb5, 0x8f, 0xc5, 0x4d, 0x8b, 0x8a, 0xae, 0xe2, 0xa7, 0xc3, 0xe7,
	0xdb, 0xcf, 0x40, 0xda, 0xd6, 0xda, 0xd8, 0xb2, 0x95, 0x76, 0x27, 0x66, 0x37, 0xc6, 0x81, 0xcb,
	0x6f, 0xc2, 0x19, 0x3e, 0x1d, 0x1b, 0xd8, 0xae, 0x37, 0x3d, 0x82, 0xfb, 0x4c, 0x5e, 0x17, 0xf2,
	0x42, 0xe3, 0x20, 0x25, 0xba, 0x05, 0x39, 0xa6, 0x65, 0x4d, 0xd3, 0x55, 0xad, 0x8e, 0x63, 0xfa,
	0x6a, 0x8a, 0x5c, 0x9d, 0x56, 0xc5, 0x03, 0xc1, 0xec, 0x67, 0x9c, 0x9f, 0x4b, 0xc4, 0x67, 0x9c,
	0x48, 0x74, 0x2e, 0x34, 0xbf, 0x0f, 0x19, 0x1d, 0x3f, 0xb5, 0x6b, 0xc6, 0xe1, 0xa1, 0x85, 0xed,
	0xd8, 0xab, 0x62, 0xe1, 0xdb, 0x5d, 0xa2, 0x45, 0x01, 0x42, 0xbe, 0x4d, 0xa9, 0x3f, 0x99, 0x68,
	0xed, 0x63, 0xef, 0x0f, 0x13, 0x30, 0xef, 0x0d, 0x16, 0x67, 0xe4, 0x9f, 0x48, 0xb4, 0xbc, 0xe3,
	0x37, 0xf7, 0x78, 0x5f, 0x73, 0xfb, 0xec, 0xeb, 0x8f, 0xb5, 0xd4, 0x28, 0xb1, 0x36, 0xf1, 0xf1,
	0xc4, 0xda, 0xaf, 0x39, 0x47, 0xa6, 0xc4, 0xa6, 0x94, 0x0b, 0x76, 0xf2, 0xd0, 0x9d, 0xe0, 0x0c,
	0x4b, 0xfd, 0x66, 0x78, 0xb8, 0x29, 0xfd, 0x6e, 0x12, 0x16, 0xbd, 0x53, 0x1a, 0x10, 0xff, 0xfa,
	0x20, 0xdb, 0x52, 0xee, 0x94, 0x0c, 0x32, 0xc1, 0xae, 0xaf, 0x24, 0x7b, 0xf9, 0xca, 0x6d, 0xa0,
	0xdf, 0xda, 0xd5, 0x14, 0xf1, 0x8d, 0x41, 0xdf, 0x9f, 0xb1, 0xaa, 0x66, 0x09, 0x81, 0xe3, 0x93,
	0x6f, 0x43, 0x86, 0x32, 0x60, 0x97, 0xfb, 0x9d, 0x0f, 0xa0, 0xe3, 0xc9, 0x81, 0xa0, 0xb3, 0xef,
	0x06, 0x02, 0xde, 0x31, 0x31, 0x8a, 0x77, 0x4c, 0x7e, 0x3c, 0xde, 0xf1, 0x03, 0xc9, 0x8d, 0x39,
	0x3e, 0x2b, 0xdb, 0xa6, 0xca, 0x76, 0xb7, 0x9c, 0xb3, 0xdb, 0x50, 0x79, 0x64, 0xe1, 0x27, 0x24,
	0x83, 0x78, 0x8e, 0x72, 0x63, 0xf6, 0x0b, 0x6e, 0x05, 0x66, 0x63, 0x90, 0x6d, 0x47, 0x4e, 0xd1,
	0x4f, 0x73, 0xec, 0xdc, 0x8a, 0x28, 0x6b, 0x2a, 0xd7, 0xfd, 0x05, 0x5c, 0x39, 0x78, 0xe0, 0x88,
	0xd9, 0x6d, 0x1a, 0xc7, 0x5c, 0xcc, 0x95, 0x9e, 0x62, 0x06, 0xe2, 0xfb, 0xc8, 0xb9, 0x06, 0xe4,
	0xd4, 0x88, 0x2f, 0x6c, 0x0c, 0x2d, 0xb2, 0x90, 0xb1, 0x2b, 0x56, 0xfa, 0xe1, 0x0b, 0x97, 0xf6,
	0x1d, 0x09, 0xce, 0xb3, 0xbc, 0xc1, 0x44, 0x38, 0xe3, 0x1b, 0xf9, 0x18, 0x34, 0x58, 0x89, 0x27,
	0x9e, 0xa7, 0x12, 0x97, 0xdb, 0x4e, 0x42, 0xa4, 0x3f, 0x6b, 0x77, 0xc2, 0xb4, 0xdc, 0xee, 0x60,
	0x7d, 0xb4, 0x3b, 0x58, 0x7d, 0xcc, 0xb1, 0x01, 0x39, 0x7f, 0x65, 0x3f, 0xf0, 0xd6, 0xa2, 0xef,
	0x08, 0x46, 0xfe, 0x91, 0x7b, 0x0d, 0x68, 0x47, 0xd3, 0x9f, 0xe7, 0x52, 0xe5, 0x28, 0x7b, 0xb6,
	0x6f, 0xc0, 0x34, 0xbd, 0x3a, 0xd4, 0x11, 0xcd, 0x40, 0xe4, 0xc6, 0x4c, 0x86, 0xe0, 0xec, 0xb0,
	0x86, 0xa0, 0x8f, 0x59, 0xfe, 0xce, 0xad, 0x72, 0xf6, 0xf5, 0xce, 0xff, 0x8f, 0x01, 0xf1, 0xf3,
	0x05, 0xff, 0x74, 0x8f, 0xec, 0xf5, 0x11, 0x1d, 0x63, 0xe2, 0x79, 0x3a, 0xc6, 0xc0, 0xa1, 0x54,
	0xb2, 0xcf, 0xa1, 0xd4, 0xf2, 0x1f, 0x4b, 0xe1, 0x9f, 0x35, 0x62, 0x5f, 0xba, 0x5f, 0x86, 0x0b,
	0x95, 0xfb, 0x7b, 0xa5, 0x6a, 0xa1, 0xb8, 0x57, 0x79, 0x50, 0xda, 0x2a, 0xad, 0x57, 0x0a, 0xbb,
	0x7b, 0x0f, 0x37, 0x4b, 0xb5, 0xfd, 0xfb, 0xef, 0xdf, 0xdf, 0xfe, 0xe0, 0xfe, 0xec, 0x58, 0x3c,
	0xca, 0x7a, 0x69, 0xa3, 0xb0, 0xbf, 0xb9, 0x37, 0x2b, 0xc5, 0xa3, 0xec, 0x54, 0x2b, 0x5b, 0x85,
	0xea, 0xc3, 0xd9, 0x04, 0xba, 0x04, 0xe7, 0x63, 0xb8, 0x14, 0xee, 0xdf, 0x2b, 0x55, 0x67, 0x93,
	0xcb, 0x4f, 0x9c, 0x9f, 0x40, 0xa4, 0x9b, 0x0e, 0x28, 0x0f, 0xf3, 0x5b, 0xa5, 0xdd, 0xdd, 0xc2,
	0xbd, 0xd2, 0xee, 0x5e, 0x61, 0xcf, 0xab, 0xd1, 0x02, 0xcc, 0xf9, 0x20, 0xbb, 0xa5, 0xfb, 0x44,
	0x8b, 0xb3, 0xb0, 0xe0, 0x7b, 0x5d, 0x2d, 0x15, 0x4b, 0x95, 0x07, 0xa5, 0xf5, 0xd9, 0x44, 0x88,
	0xa2, 0x5a, 0x2a, 0xac, 0xcf, 0x26, 0x97, 0x6d, 0xc8, 0x7a, 0x77, 0x0e, 0x89, 0xc8, 0xcd, 0xca,
	0xee, 0xde, 0xe6, 0x76, 0x61, 0x7d, 0x6b, 0x7b, 0xdd, 0x2b, 0x32, 0x08, 0xd9, 0xd8, 0xae, 0x7e,
	0x50, 0xa8, 0xae, 0x33, 0xa9, 0x3e, 0xc8, 0xdd, 0x42, 0xf1, 0x7d, 0x0a, 0xa2, 0x52, 0xfd, 0xa0,
	0xed, 0xbd, 0xf2, 0x6c, 0x72, 0xd9, 0x84, 0x69, 0x5f, 0x47, 0x4b, 0x58, 0xac, 0x57, 0x0a, 0x9b,
	0xdb, 0xf7, 0x76, 0x37, 0x2a, 0x9b, 0x7b, 0xa5, 0xaa, 0x47, 0xee, 0x15, 0xb8, 0xe8, 0x07, 0x95,
	0xbe, 0x50, 0xdc, 0xdc, 0x27, 0x96, 0x7f, 0xb0, 0xbd, 0x5f, 0xad, 0xec, 0x95, 0x76, 0x99, 0xf9,
	0x23, 0x91, 0x0a, 0xd5, 0x62, 0x99, 0x19, 0x60, 0xed, 0x1b, 0xa7, 0x21, 0xbd, 0x25, 0x7e, 0xc7,
	0x15, 0x7d, 0x4b, 0x82, 0x7c, 0xec, 0x0f, 0xf7, 0xbc, 0xe2, 0x6e, 0x69, 0xf7, 0xfc, 0x85, 0x9f,
	0xc5, 0x79, 0x17, 0x91, 0x2d, 0xe4, 0x0f, 0x0c, 0x4d, 0x95, 0x6f, 0xfe, 0xe6, 0x87, 0xff, 0xfe,
	0xbb, 0x89, 0x6b, 0xf2, 0x67, 0x56, 0x8f, 0xde, 0x58, 0x25, 0xa1, 0xb5, 0xea, 0xc8, 0x5d, 0x8d,
	0x63, 0x75, 0x4b, 0x5a, 0x46, 0x6d, 0xc8, 0x78, 0xaf, 0x98, 0x2f, 0x06, 0xb4, 0xf0, 0xc0, 0x16,
	0xcf, 0x04, 0x05, 0xef, 0xe2, 0x27, 0xf4, 0xf0, 0xf5, 0x55, 0x2a, 0xfb, 0x8a, 0xbc, 0x14, 0x21,
	0xdb, 0xc3, 0x80, 0x88, 0xb3, 0x82, 0x37, 0xca, 0xce, 0x07, 0x04, 0xfa, 0xa0, 0xf1, 0x22, 0x3f,
	0x43, 0x45, 0xbe, 0x2c, 0x5f, 0x8a, 0x10, 0xe9, 0x63, 0x41, 0x84, 0x1e, 0x79, 0x3e, 0x02, 0xe0,
	0xb7, 0x41, 0x96, 0x02, 0x62, 0x03, 0xf0, 0x18, 0x23, 0xbf, 0x4e, 0xa5, 0xbe, 0x22, 0xcb, 0x11,
	0x52, 0x03, 0x1c, 0x88, 0xdc, 0x47, 0x90, 0xf1, 0x5e, 0xec, 0x58, 0x8c, 0x93, 0xa9, 0xc4, 0xc9,
	0xeb, 0x65, 0x58, 0x0f, 0x35, 0x91, 0xf5, 0x15, 0x09, 0x16, 0xa2, 0xef, 0xfc, 0xbe, 0x14, 0x74,
	0xac, 0x28, 0xac, 0xc5, 0x53, 0x11, 0x96, 0x96, 0xaf, 0x53, 0xf9, 0xaf, 0xcb, 0x57, 0xa3, 0x9c,
	0x2a, 0x8a, 0x0d, 0xd1, 0xa4, 0x0e, 0x69, 0xf7, 0x1e, 0x70, 0x3e, 0x20, 0xdc, 0x81, 0x44, 0x0b,
	0x7c, 0x85, 0x0a, 0xbc, 0x2c, 0x9f, 0x8f, 0x10, 0xe8, 0x90, 0x12, 0x21, 0x87, 0x00, 0x9e, 0xab,
	0xbc, 0x67, 0x23, 0x87, 0x18, 0x2f, 0xe6, 0x2a, 0x15, 0x23, 0xcb, 0x17, 0x62, 0xc7, 0x25, 0xe4,
	0x68, 0x90, 0xf1, 0x5e, 0xc8, 0x0d, 0x4e, 0xa1, 0x07, 0x16, 0x2d, 0xa9, 0xd7, 0x0c, 0x7a, 0x88,
	0x89, 0xa8, 0xaf, 0x4b, 0x80, 0x22, 0xee, 0xe4, 0x5e, 0x8e, 0xf6, 0x1a, 0x0f, 0xca, 0xe2, 0xe5,
	0xa0, 0xe4, 0xd0, 0x45, 0x52, 0xf9, 0x1a, 0xd5, 0x63, 0x59, 0x7e, 0x39, 0xde, 0x93, 0x3c, 0x1c,
	0x89, 0x3a, 0xdf, 0x96, 0x60, 0x21, 0xfa, 0x6e, 0xed, 0x4b, 0x71, 0x7e, 0xec, 0xc5, 0x1a, 0x44,
	0xa9, 0x5e, 0xee, 0x15, 0xc9, 0x94, 0xe8, 0xf5, 0x04, 0x32, 0xde, 0x53, 0x9d, 0xe0, 0x8c, 0x78,
	0x60, 0x8b, 0xe7, 0x82, 0x2a, 0x78, 0x80, 0x3d, 0x67, 0xc6, 0x83, 0xe7, 0x11, 0x29, 0x7a, 0xee,
	0x28, 0x91, 0x1c, 0x16, 0x2d, 0x92, 0x03, 0xfb, 0x8a, 0xe4, 0x78, 0x44, 0xe4, 0x6f, 0x4b, 0x30,
	0x1b, 0xda, 0x32, 0xbb, 0x18, 0x10, 0x1c, 0x44, 0x58, 0xbc, 0x14, 0x94, 0x1e, 0xc4, 0x90, 0x57,
	0xa8, 0x0a, 0x57, 0xe5, 0x2b, 0x11, 0x2a, 0x84, 0x36, 0xf7, 0xa4, 0x65, 0xd4, 0x85, 0xac, 0x6f,
	0x23, 0xe9, 0x5c, 0xc4, 0xd8, 0x05, 0x70, 0xf1, 0x7c, 0xd4, 0xe0, 0x9d, 0x0f, 0xa4, 0x97, 0xa9,
	0xe8, 0x97, 0xe4, 0x8b, 0x31, 0xa3, 0x17, 0x88, 0x44, 0xec, 0x37, 0x24, 0x40, 0x11, 0xbb, 0x1d,
	0x97, 0x23, 0xa4, 0xfb, 0x51, 0x16, 0xe5, 0x28, 0x1d, 0xfc, 0x38, 0x3d, 0x83, 0x21, 0x8c, 0x4e,
	0xf4, 0x31, 0x00, 0x3c, 0x3d, 0x72, 0x30, 0xdd, 0xb8, 0xa0, 0xb0, 0x09, 0xbc, 0x5b, 0x02, 0x3d,
	0xf3, 0x8e, 0xcb, 0x84, 0x0b, 0xf4, 0x74, 0xcb, 0x41, 0x81, 0x2e, 0xe8, 0x39, 0x04, 0xba, 0x4c,
	0x88, 0xc0, 0x5f, 0x87, 0x99, 0x60, 0x1b, 0x1d, 0x5c, 0x23, 0x03, 0xf0, 0x3e, 0xa2, 0x7b, 0xad,
	0x95, 0x01, 0x4e, 0x44, 0xfe, 0x6f, 0x49, 0x30, 0x17, 0xee, 0xad, 0x2f, 0x05, 0xab, 0x83, 0x20,
	0x46, 0x1f, 0x25, 0x56, 0xa9, 0x12, 0xaf, 0xca, 0x2f, 0x45, 0x95, 0x09, 0x41, 0x5e, 0x44, 0x8d,
	0xdf, 0x00, 0x14, 0xd1, 0xd3, 0x06, 0xfd, 0x2e, 0x8c, 0x12, 0xb3, 0x80, 0xf7, 0xf2, 0xb4, 0x30,
	0x13, 0x56, 0x33, 0x80, 0xa7, 0x39, 0x0d, 0x4e, 0xbc, 0x0b, 0x8a, 0x2f, 0x8d, 0x7a, 0xcd, 0xb9,
	0x4b, 0x4f, 0x64, 0x75, 0x20, 0xeb, 0xeb, 0x1c, 0xcf, 0x85, 0xac, 0xdd, 0x19, 0x40, 0x5e, 0xaf,
	0xb8, 0xf6, 0x72, 0xb8, 0x25, 0x2d, 0xdf, 0x2d, 0x3d, 0xbb, 0x7d, 0x1a, 0xe6, 0xbd, 0x0d, 0x20,
	0xff, 0x69, 0x46, 0xeb, 0xc7, 0x1f, 0x2d, 0x8d, 0xfd, 0xd3, 0x47, 0x4b, 0x63, 0x3f, 0xfb, 0x68,
	0x49, 0xfa, 0xf2, 0xb3, 0x25, 0xe9, 0x4f, 0x9f, 0x2d, 0x49, 0x7f, 0xf3, 0x6c, 0x49, 0xfa, 0xf1,
	0xb3, 0x25, 0xe9, 0x5f, 0x9f, 0x2d, 0x49, 0xff, 0xf1, 0x6c, 0x69, 0xec, 0x67, 0xcf, 0x96, 0xa4,
	0x6f, 0xfe, 0xdb, 0xd2, 0xd8, 0xc1, 0x04, 0xdd, 0xb0, 0xb8, 0xfe, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xd0, 0x30, 0xba, 0x4a, 0x24, 0x61, 0x00, 0x00,
}
