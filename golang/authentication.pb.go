// Code generated by protoc-gen-gogo.
// source: authentication.proto
// DO NOT EDIT!

/*
	Package dialog is a generated protocol buffer package.

	It is generated from these files:
		authentication.proto
		config_sync.proto
		contacts.proto
		counters.proto
		crypto.proto
		definitions.proto
		device_info.proto
		event_bus.proto
		gateway_service.proto
		groups.proto
		integrations.proto
		media_and_files.proto
		messaging.proto
		miscellaneous.proto
		obsolete.proto
		peers.proto
		privacy.proto
		profile.proto
		push.proto
		raw_api.proto
		registration.proto
		search.proto
		sequence_and_updates.proto
		spaces.proto
		stickers.proto
		typing_and_online.proto
		users.proto
		web_rtc.proto

	It has these top-level messages:
		RequestStartPhoneAuth
		ResponseStartPhoneAuth
		RequestSendCodeByPhoneCall
		RequestStartEmailAuth
		ResponseStartEmailAuth
		RequestStartAnonymousAuth
		RequestStartTokenAuth
		RequestStartUsernameAuth
		ResponseStartUsernameAuth
		RequestValidateCode
		RequestResendCode
		RequestValidatePassword
		RequestGetOAuth2Params
		ResponseGetOAuth2Params
		RequestCompleteOAuth2
		RequestSignUp
		ResponseAuth
		AuthSession
		RequestGetAuthSessions
		ResponseGetAuthSessions
		RequestTerminateSession
		RequestTerminateAllSessions
		RequestSignOut
		ForceReloadField
		ForceReloadDialogs
		ForceReloadContacts
		ForceReloadHistory
		UpdateForceReloadState
		RequestSignInObsolete
		RequestSignUpObsolete
		RequestSendAuthCodeObsolete
		ResponseSendAuthCodeObsolete
		RequestSendAuthCallObsolete
		Parameter
		RequestGetParameters
		ResponseGetParameters
		RequestEditParameter
		UpdateParameterChanged
		PhoneToImport
		EmailToImport
		RequestImportContacts
		ResponseImportContacts
		RequestDeferredImportContacts
		ResponseDeferredImportContacts
		RequestGetContacts
		ResponseGetContacts
		RequestRemoveContact
		RequestAddContact
		RequestSearchContacts
		ResponseSearchContacts
		UpdateContactRegistered
		UpdateContactsAdded
		UpdateContactsAddTaskSuspended
		UpdateContactsRemoved
		UnreadDialog
		AppCounters
		UpdateCountersChanged
		RequestKeyExchange
		ResponseKeyExchange
		UUIDValue
		DialogOptions
		DataClock
		RequestNotifyAboutDeviceInfo
		ClientInfo
		RequestJoinEventBus
		ResponseJoinEventBus
		RequestKeepAliveEventBus
		RequestPostToEventBus
		UpdateEventBusDeviceConnected
		UpdateEventBusDeviceDisconnected
		UpdateEventBusMessage
		UpdateEventBusDisposed
		GetDifferenceCommand
		ServiceUpdate
		Member
		Group
		GroupFull
		RequestLoadFullGroups
		ResponseLoadFullGroups
		RequestLoadMembers
		ResponseLoadMembers
		UpdateGroupTitleChanged
		UpdateGroupAvatarChanged
		UpdateGroupTopicChanged
		UpdateGroupAboutChanged
		UpdateGroupOwnerChanged
		UpdateGroupHistoryShared
		UpdateGroupCanSendMessagesChanged
		UpdateGroupCanViewMembersChanged
		UpdateGroupCanInviteMembersChanged
		UpdateGroupMemberChanged
		UpdateGroupMembersBecameAsync
		UpdateGroupMembersUpdated
		UpdateGroupMemberDiff
		UpdateGroupMembersCountChanged
		UpdateGroupMemberAdminChanged
		RequestCreateGroup
		ResponseCreateGroup
		RequestEditGroupTitle
		RequestSetGroupShortname
		RequestEditGroupAvatar
		ResponseEditGroupAvatar
		RequestRemoveGroupAvatar
		RequestEditGroupTopic
		RequestEditGroupAbout
		RequestInviteUser
		RequestLeaveGroup
		RequestKickUser
		RequestMakeUserAdmin
		GroupMemberPermission
		RequestGetGroupMemberPermissions
		ResponseGetGroupMemberPermissions
		UpdateGroupMemberPermissionsChanged
		RequestTransferOwnership
		ResponseInviteUrl
		RequestGetGroupInviteUrl
		RequestGetGroupInviteUrlBase
		ResponseGetGroupInviteUrlBase
		RequestRevokeInviteUrl
		RequestJoinGroup
		ResponseJoinGroup
		RequestJoinGroupByPeer
		RequestMakeUserAdminObsolete
		ResponseMakeUserAdminObsolete
		UpdateGroupInviteObsolete
		UpdateGroupUserInvitedObsolete
		UpdateGroupUserLeaveObsolete
		UpdateGroupUserKickObsolete
		UpdateGroupMembersUpdateObsolete
		UpdateGroupTitleChangedObsolete
		UpdateGroupTopicChangedObsolete
		UpdateGroupAboutChangedObsolete
		UpdateGroupAvatarChangedObsolete
		UpdateGroupShortnameChanged
		ResponseIntegrationToken
		RequestGetIntegrationToken
		RequestRevokeIntegrationToken
		FileLocation
		ImageLocation
		AudioLocation
		AvatarImage
		Avatar
		FastThumb
		Color
		RgbColor
		PredefinedColor
		HTTPHeader
		FileUrlDescription
		RequestGetFileUrl
		ResponseGetFileUrl
		RequestGetFileUrls
		ResponseGetFileUrls
		RequestGetFileUrlBuilder
		ResponseGetFileUrlBuilder
		RequestGetFileUploadUrl
		ResponseGetFileUploadUrl
		RequestCommitFileUpload
		ResponseCommitFileUpload
		RequestGetFileUploadPartUrl
		ResponseGetFileUploadPartUrl
		MessageAttributes
		QuotedMessage
		MessageMedia
		WebpageMedia
		ImageMedia
		AudioMedia
		InteractiveMediaWidget
		InteractiveMediaButton
		InteractiveMediaSelect
		InteractiveMediaSelectOption
		InteractiveMedia
		InteractiveMediaTranslation
		InteractiveMediaTranslationGroup
		InteractiveMediaGroup
		InteractiveMediaConfirm
		UpdateInteractiveMediaEvent
		RequestDoInteractiveMediaAction
		MessageContent
		TextMessage
		TextMessageEx
		TextExMarkdown
		TextModernMessage
		ParagraphStyle
		TextModernAttach
		TextModernField
		TextCommand
		ServiceMessage
		ServiceEx
		ServiceExUserInvited
		ServiceExUserJoined
		ServiceExUserKicked
		ServiceExUserLeft
		ServiceExGroupCreated
		ServiceExChangedTitle
		ServiceExChangedTopic
		ServiceExChangedAbout
		ServiceExChangedAvatar
		ServiceExContactRegistered
		ServiceExPhoneMissed
		ServiceExPhoneCall
		ServiceExPhoneRejected
		ServiceExChatArchived
		ServiceExChatRestored
		DocumentMessage
		DocumentEx
		DocumentExPhoto
		DocumentExVideo
		DocumentExVoice
		JsonMessage
		UnsupportedMessage
		StickerMessage
		BinaryMessage
		EmptyMessage
		DeletedMessage
		DialogShort
		DialogGroup
		MessageReaction
		SearchPredicate
		RequestSendMessage
		RequestUpdateMessage
		RequestMessageReceived
		RequestMessageRead
		RequestDeleteMessageObsolete
		RequestClearChat
		RequestDeleteChat
		RequestArchiveChat
		RequestMessageSetReaction
		RequestMessageRemoveReaction
		ResponseReactionsResponse
		UpdateMessage
		UpdateMessageContentChanged
		UpdateMessageSent
		UpdateMessageReceived
		UpdateMessageRead
		UpdateMessageReadByMe
		UpdateMessageDelete
		UpdateChatClear
		UpdateChatDelete
		UpdateChatArchive
		UpdateChatGroupsChanged
		UpdateReactionsUpdate
		UpdateMessageRejectedByHook
		UpdateMessageEditRejectedByHook
		ReferencedMessages
		HistoryMessage
		RequestLoadHistory
		ResponseLoadHistory
		Dialog
		RequestLoadDialogs
		ResponseLoadDialogs
		DialogIndex
		RequestFetchDialogIndex
		ResponseFetchDialogIndex
		RequestLoadArchived
		ResponseLoadArchived
		RequestLoadGroupedDialogs
		ResponseLoadGroupedDialogs
		ResponseDialogsOrder
		RequestHideDialog
		RequestShowDialog
		RequestFavouriteDialog
		RequestUnfavouriteDialog
		UpdateDialogFavouriteChanged
		RequestNotifyDialogOpened
		PinnedMessages
		RequestPinMessage
		RequestUnpinMessage
		UpdatePinnedMessagesChanged
		ResponseVoid
		ResponseSeq
		ResponseSeqDate
		ResponseSeqDateMid
		ResponseBool
		Config
		ServicePeers
		ServerMetaInfo
		CallsConfig
		InvitesConfig
		Discover
		Extension
		Any
		UpdateConfig
		RecursiveMapValue
		ObsoletePeer
		ObsoleteOutPeer
		ObsoletePeersList
		ObsoleteGetDifferenceCommand
		ObsoleteSeqUpdateBox
		ObsoleteWeakUpdateBox
		ObsoleteServiceUpdate
		ObsoleteWeakUpdateCommand
		Peer
		OutPeer
		UserOutPeer
		GroupOutPeer
		RequestBlockUser
		RequestUnblockUser
		RequestLoadBlockedUsers
		ResponseLoadBlockedUsers
		UpdateUserBlocked
		UpdateUserUnblocked
		RequestEditName
		RequestEditNickName
		RequestCheckNickName
		RequestEditAbout
		RequestEditAvatar
		ResponseEditAvatar
		RequestRemoveAvatar
		RequestEditMyTimeZone
		RequestEditMyPreferredLanguages
		RequestEditSex
		RequestEditCustomProfile
		RequestChangeUserStatus
		RequestRegisterGooglePush
		RequestUnregisterGooglePush
		RequestRegisterApplePush
		RequestUnregisterApplePush
		RequestRegisterApplePushKit
		RequestUnregisterApplePushKit
		RequestRegisterApplePushToken
		RequestUnregisterApplePushToken
		RequestRawRequest
		ResponseRawRequest
		RequestRegisterDevice
		ResponseDeviceRequest
		RegisterDeprecatedDeviceRequest
		RequestExchangeAuthIdForToken
		SimpleContactSearchCondition
		SimpleMessageSearchCondition
		SimplePeerSearchCondition
		SimpleUserProfileSearchCondition
		Criterion
		SimpleSearchCondition
		SearchCondition
		SearchPeerTypeCondition
		SearchPieceText
		SearchAndCondition
		SearchOrCondition
		SearchPeerCondition
		SearchPeerContentType
		SearchSenderIdConfition
		PeerSearchResult
		RequestPeerSearch
		ResponsePeerSearch
		RequestResolvePeer
		ResponseResolvePeer
		MessageSearchResult
		MessageSearchItem
		ResponseMessageSearchResponse
		RequestMessageSearch
		RequestMessageSearchMore
		RequestSimpleSearch
		RequestSimpleSearchMore
		RequestFieldAutocomplete
		ResponseFieldAutocomplete
		RequestLoadUserSearchByPredicatesResults
		UserMatch
		ResponseLoadUserSearchByPredicatesResults
		RequestLoadUserSearchByPredicatesCount
		ResponseLoadUserSearchByPredicatesCount
		UpdateSeqUpdate
		UpdateFatSeqUpdate
		UpdateWeakUpdate
		UpdateWeakFatUpdate
		UpdateSeqUpdateTooLong
		UpdateContainer
		UpdateCombinedUpdate
		RequestGetState
		RequestGetDifference
		ResponseGetDifference
		RequestGetDialogsDifference
		ResponseGetDialogsDifference
		GroupMembersSubset
		RequestGetReferencedEntitites
		ResponseGetReferencedEntitites
		UpdateRawUpdate
		UpdateEmptyUpdate
		RequestSubscribeToOnline
		RequestSubscribeFromOnline
		RequestSubscribeToGroupOnline
		RequestSubscribeFromGroupOnline
		SeqUpdateBox
		Space
		SpaceMember
		UpdateSpaceModified
		UpdateSpaceMemberModified
		RequestCreateSpace
		ResponseSpace
		ResponseSpaceMember
		RequestDeleteSpace
		RequestLoadSpaces
		ResponseLoadSpaces
		RequestStreamSpaceMembers
		SpaceMemberWithPeer
		RequestSetTitle
		RequestSetShortname
		RequestSetAbout
		RequestSetAvatar
		RequestSpaceInvite
		RequestSpaceKick
		RequestSpaceLeave
		RequestGetSpaceInviteUrl
		ResponseSpaceInviteUrl
		RequestRevokeSpaceInviteUrl
		StickerDescriptor
		StickerCollection
		ResponseStickersResponse
		RequestLoadOwnStickers
		ResponseLoadOwnStickers
		RequestLoadAcesssibleStickers
		ResponseLoadAcesssibleStickers
		RequestAddStickerPackReference
		RequestRemoveStickerPackReference
		UpdateStickerCollectionsChanged
		UpdateStickerPackRemoved
		UpdateStickerPackAdded
		RequestAddStickerCollection
		RequestRemoveStickerCollection
		RequestLoadStickerCollection
		ResponseLoadStickerCollection
		RequestTyping
		RequestStopTyping
		RequestSetOnline
		UpdatePauseNotifications
		UpdateRestoreNotifications
		RequestPauseNotifications
		RequestRestoreNotifications
		UpdateTyping
		UpdateTypingStop
		UpdateUserOnline
		UpdateUserOffline
		UpdateUserLastSeen
		UpdateGroupOnline
		ContactRecord
		UserStatus
		User
		FullUser
		BotCommand
		RequestEditUserLocalName
		UpdateUserAvatarChanged
		UpdateUserNameChanged
		UpdateUserLocalNameChanged
		UpdateUserContactsChanged
		UpdateUserNickChanged
		UpdateUserAboutChanged
		UpdateUserPreferredLanguagesChanged
		UpdateUserTimeZoneChanged
		UpdateUserBotCommandsChanged
		UpdateUserSexChanged
		UpdateUserCustomProfileChanged
		UpdateUserStatusChanged
		UpdateUserExtChanged
		UpdateUserFullExtChanged
		RequestLoadFullUsers
		ResponseLoadFullUsers
		UpdateIncomingCallDeprecated
		UpdateIncomingCall
		UpdateCallHandled
		UpdateCallDisposed
		RequestGetCallInfo
		ResponseGetCallInfo
		CallLogEntry
		RequestLoadCalls
		ResponseLoadCalls
		RequestDoCall
		ResponseDoCall
		RequestJoinCall
		RequestRejectCall
		RequestDeleteCall
		RequestChangeCallDisplayName
		ICEServer
		ICECandidate
		WebRTCSignaling
		AdvertiseSelf
		AdvertiseMaster
		AdvertisePeer
		Candidate
		GotICECandidate
		RemovedICECandidates
		Offer
		Answer
		NeedOffer
		NegotinationSuccessful
		EnableConnection
		OnRenegotiationNeeded
		CloseSession
		NeedDisconnect
		DTMF
		CallStats
		CallNameChanged
		ActiveCall
		CallMemberStateHolder
		CallMember
		PeerSettings
*/
package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PhoneActivationType int32

const (
	PHONEACTIVATIONTYPE_UNKNOWN  PhoneActivationType = 0
	PHONEACTIVATIONTYPE_CODE     PhoneActivationType = 1
	PHONEACTIVATIONTYPE_PASSWORD PhoneActivationType = 2
)

var PhoneActivationType_name = map[int32]string{
	0: "PHONEACTIVATIONTYPE_UNKNOWN",
	1: "PHONEACTIVATIONTYPE_CODE",
	2: "PHONEACTIVATIONTYPE_PASSWORD",
}
var PhoneActivationType_value = map[string]int32{
	"PHONEACTIVATIONTYPE_UNKNOWN":  0,
	"PHONEACTIVATIONTYPE_CODE":     1,
	"PHONEACTIVATIONTYPE_PASSWORD": 2,
}

func (PhoneActivationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{0}
}

type EmailActivationType int32

const (
	EMAILACTIVATIONTYPE_UNKNOWN  EmailActivationType = 0
	EMAILACTIVATIONTYPE_CODE     EmailActivationType = 1
	EMAILACTIVATIONTYPE_OAUTH2   EmailActivationType = 2
	EMAILACTIVATIONTYPE_PASSWORD EmailActivationType = 3
)

var EmailActivationType_name = map[int32]string{
	0: "EMAILACTIVATIONTYPE_UNKNOWN",
	1: "EMAILACTIVATIONTYPE_CODE",
	2: "EMAILACTIVATIONTYPE_OAUTH2",
	3: "EMAILACTIVATIONTYPE_PASSWORD",
}
var EmailActivationType_value = map[string]int32{
	"EMAILACTIVATIONTYPE_UNKNOWN":  0,
	"EMAILACTIVATIONTYPE_CODE":     1,
	"EMAILACTIVATIONTYPE_OAUTH2":   2,
	"EMAILACTIVATIONTYPE_PASSWORD": 3,
}

func (EmailActivationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{1}
}

// / Holder of session
type AuthHolder int32

const (
	AUTHHOLDER_UNKNOWN     AuthHolder = 0
	AUTHHOLDER_THISDEVICE  AuthHolder = 1
	AUTHHOLDER_OTHERDEVICE AuthHolder = 2
)

var AuthHolder_name = map[int32]string{
	0: "AUTHHOLDER_UNKNOWN",
	1: "AUTHHOLDER_THISDEVICE",
	2: "AUTHHOLDER_OTHERDEVICE",
}
var AuthHolder_value = map[string]int32{
	"AUTHHOLDER_UNKNOWN":     0,
	"AUTHHOLDER_THISDEVICE":  1,
	"AUTHHOLDER_OTHERDEVICE": 2,
}

func (AuthHolder) EnumDescriptor() ([]byte, []int) { return fileDescriptorAuthentication, []int{2} }

// Start Phone Activation
type RequestStartPhoneAuth struct {
	PhoneNumber int64 `protobuf:"varint,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// * Application id, choose it by yourself and hold during authorization process *
	AppId int32 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// * Deprecated field - keep it empty *
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// * Deprecated field - keep it empty *
	DeviceHash []byte `protobuf:"bytes,4,opt,name=device_hash,json=deviceHash,proto3" json:"device_hash,omitempty"`
	// * Some title, choose it by yourself and hold during authorization process *
	DeviceTitle string `protobuf:"bytes,5,opt,name=device_title,json=deviceTitle,proto3" json:"device_title,omitempty"`
	// * Your timezone *
	TimeZone *google_protobuf.StringValue `protobuf:"bytes,6,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`
	// * First language from this array will be used for some notifications from server *
	PreferredLanguages []string `protobuf:"bytes,7,rep,name=preferred_languages,json=preferredLanguages" json:"preferred_languages,omitempty"`
}

func (m *RequestStartPhoneAuth) Reset()      { *m = RequestStartPhoneAuth{} }
func (*RequestStartPhoneAuth) ProtoMessage() {}
func (*RequestStartPhoneAuth) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{0}
}

func (m *RequestStartPhoneAuth) GetPhoneNumber() int64 {
	if m != nil {
		return m.PhoneNumber
	}
	return 0
}

func (m *RequestStartPhoneAuth) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestStartPhoneAuth) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *RequestStartPhoneAuth) GetDeviceHash() []byte {
	if m != nil {
		return m.DeviceHash
	}
	return nil
}

func (m *RequestStartPhoneAuth) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

func (m *RequestStartPhoneAuth) GetTimeZone() *google_protobuf.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

func (m *RequestStartPhoneAuth) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

type ResponseStartPhoneAuth struct {
	// * Hash of authorization transaction *
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	IsRegistered    bool   `protobuf:"varint,2,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
	// * Code or password - call ValidateCode if code *
	ActivationType PhoneActivationType `protobuf:"varint,3,opt,name=activation_type,json=activationType,proto3,enum=dialog.PhoneActivationType" json:"activation_type,omitempty"`
}

func (m *ResponseStartPhoneAuth) Reset()      { *m = ResponseStartPhoneAuth{} }
func (*ResponseStartPhoneAuth) ProtoMessage() {}
func (*ResponseStartPhoneAuth) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{1}
}

func (m *ResponseStartPhoneAuth) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *ResponseStartPhoneAuth) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

func (m *ResponseStartPhoneAuth) GetActivationType() PhoneActivationType {
	if m != nil {
		return m.ActivationType
	}
	return PHONEACTIVATIONTYPE_UNKNOWN
}

// Dial phone and dictate auth code
type RequestSendCodeByPhoneCall struct {
	// / Hash from ResponseStartPhoneAuth
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
}

func (m *RequestSendCodeByPhoneCall) Reset()      { *m = RequestSendCodeByPhoneCall{} }
func (*RequestSendCodeByPhoneCall) ProtoMessage() {}
func (*RequestSendCodeByPhoneCall) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{2}
}

func (m *RequestSendCodeByPhoneCall) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

// Start EMail Activation
type RequestStartEmailAuth struct {
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// * Application id, choose it by yourself and hold during authorization process *
	AppId int32 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// * Deprecated field - keep it empty *
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// * Deprecated field - keep it empty *
	DeviceHash []byte `protobuf:"bytes,4,opt,name=device_hash,json=deviceHash,proto3" json:"device_hash,omitempty"`
	// * Some title, choose it by yourself and hold during authorization process *
	DeviceTitle string `protobuf:"bytes,5,opt,name=device_title,json=deviceTitle,proto3" json:"device_title,omitempty"`
	// * Your timezone *
	TimeZone *google_protobuf.StringValue `protobuf:"bytes,6,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`
	// * First language from this array will be used for some notifications from server *
	PreferredLanguages []string `protobuf:"bytes,7,rep,name=preferred_languages,json=preferredLanguages" json:"preferred_languages,omitempty"`
}

func (m *RequestStartEmailAuth) Reset()      { *m = RequestStartEmailAuth{} }
func (*RequestStartEmailAuth) ProtoMessage() {}
func (*RequestStartEmailAuth) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{3}
}

func (m *RequestStartEmailAuth) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RequestStartEmailAuth) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestStartEmailAuth) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *RequestStartEmailAuth) GetDeviceHash() []byte {
	if m != nil {
		return m.DeviceHash
	}
	return nil
}

func (m *RequestStartEmailAuth) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

func (m *RequestStartEmailAuth) GetTimeZone() *google_protobuf.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

func (m *RequestStartEmailAuth) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

type ResponseStartEmailAuth struct {
	// * Hash of authorization transaction *
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	IsRegistered    bool   `protobuf:"varint,2,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
	// * Code or password - call ValidateCode if code *
	ActivationType EmailActivationType `protobuf:"varint,3,opt,name=activation_type,json=activationType,proto3,enum=dialog.EmailActivationType" json:"activation_type,omitempty"`
}

func (m *ResponseStartEmailAuth) Reset()      { *m = ResponseStartEmailAuth{} }
func (*ResponseStartEmailAuth) ProtoMessage() {}
func (*ResponseStartEmailAuth) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{4}
}

func (m *ResponseStartEmailAuth) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *ResponseStartEmailAuth) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

func (m *ResponseStartEmailAuth) GetActivationType() EmailActivationType {
	if m != nil {
		return m.ActivationType
	}
	return EMAILACTIVATIONTYPE_UNKNOWN
}

// Starting Anonymous login - deprecated
type RequestStartAnonymousAuth struct {
	Name               string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AppId              int32                        `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ApiKey             string                       `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	DeviceHash         []byte                       `protobuf:"bytes,4,opt,name=device_hash,json=deviceHash,proto3" json:"device_hash,omitempty"`
	DeviceTitle        string                       `protobuf:"bytes,5,opt,name=device_title,json=deviceTitle,proto3" json:"device_title,omitempty"`
	TimeZone           *google_protobuf.StringValue `protobuf:"bytes,6,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`
	PreferredLanguages []string                     `protobuf:"bytes,7,rep,name=preferred_languages,json=preferredLanguages" json:"preferred_languages,omitempty"`
}

func (m *RequestStartAnonymousAuth) Reset()      { *m = RequestStartAnonymousAuth{} }
func (*RequestStartAnonymousAuth) ProtoMessage() {}
func (*RequestStartAnonymousAuth) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{5}
}

func (m *RequestStartAnonymousAuth) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RequestStartAnonymousAuth) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestStartAnonymousAuth) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *RequestStartAnonymousAuth) GetDeviceHash() []byte {
	if m != nil {
		return m.DeviceHash
	}
	return nil
}

func (m *RequestStartAnonymousAuth) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

func (m *RequestStartAnonymousAuth) GetTimeZone() *google_protobuf.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

func (m *RequestStartAnonymousAuth) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

// Starting token-based login - to authorize bot
type RequestStartTokenAuth struct {
	// * Token received from BotFather *
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// * Application id, choose it by yourself and hold during authorization process *
	AppId int32 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// * Deprecated field - keep it empty *
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// * Deprecated field - keep it empty *
	DeviceHash []byte `protobuf:"bytes,4,opt,name=device_hash,json=deviceHash,proto3" json:"device_hash,omitempty"`
	// * Some title, choose it by yourself and hold during authorization process *
	DeviceTitle string `protobuf:"bytes,5,opt,name=device_title,json=deviceTitle,proto3" json:"device_title,omitempty"`
	// * Your timezone *
	TimeZone *google_protobuf.StringValue `protobuf:"bytes,6,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`
	// * First language from this array will be used for some notifications from server *
	PreferredLanguages []string `protobuf:"bytes,7,rep,name=preferred_languages,json=preferredLanguages" json:"preferred_languages,omitempty"`
}

func (m *RequestStartTokenAuth) Reset()      { *m = RequestStartTokenAuth{} }
func (*RequestStartTokenAuth) ProtoMessage() {}
func (*RequestStartTokenAuth) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{6}
}

func (m *RequestStartTokenAuth) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RequestStartTokenAuth) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestStartTokenAuth) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *RequestStartTokenAuth) GetDeviceHash() []byte {
	if m != nil {
		return m.DeviceHash
	}
	return nil
}

func (m *RequestStartTokenAuth) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

func (m *RequestStartTokenAuth) GetTimeZone() *google_protobuf.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

func (m *RequestStartTokenAuth) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

// Starting Login Authentication
type RequestStartUsernameAuth struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// * Application id, choose it by yourself and hold during authorization process *
	AppId int32 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// * Deprecated field - keep it empty *
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// * Deprecated field - keep it empty *
	DeviceHash []byte `protobuf:"bytes,4,opt,name=device_hash,json=deviceHash,proto3" json:"device_hash,omitempty"`
	// * Some title, choose it by yourself and hold during authorization process *
	DeviceTitle string                       `protobuf:"bytes,5,opt,name=device_title,json=deviceTitle,proto3" json:"device_title,omitempty"`
	TimeZone    *google_protobuf.StringValue `protobuf:"bytes,6,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`
	// * First language from this array will be used for some notifications from server *
	PreferredLanguages []string `protobuf:"bytes,7,rep,name=preferred_languages,json=preferredLanguages" json:"preferred_languages,omitempty"`
}

func (m *RequestStartUsernameAuth) Reset()      { *m = RequestStartUsernameAuth{} }
func (*RequestStartUsernameAuth) ProtoMessage() {}
func (*RequestStartUsernameAuth) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{7}
}

func (m *RequestStartUsernameAuth) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RequestStartUsernameAuth) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestStartUsernameAuth) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *RequestStartUsernameAuth) GetDeviceHash() []byte {
	if m != nil {
		return m.DeviceHash
	}
	return nil
}

func (m *RequestStartUsernameAuth) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

func (m *RequestStartUsernameAuth) GetTimeZone() *google_protobuf.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

func (m *RequestStartUsernameAuth) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

type ResponseStartUsernameAuth struct {
	// * Hash of authorization transaction *
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	IsRegistered    bool   `protobuf:"varint,2,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
}

func (m *ResponseStartUsernameAuth) Reset()      { *m = ResponseStartUsernameAuth{} }
func (*ResponseStartUsernameAuth) ProtoMessage() {}
func (*ResponseStartUsernameAuth) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{8}
}

func (m *ResponseStartUsernameAuth) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *ResponseStartUsernameAuth) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

// Performing user sign in.
type RequestValidateCode struct {
	// * Hash of the authorization transaction *
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	Code            string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *RequestValidateCode) Reset()      { *m = RequestValidateCode{} }
func (*RequestValidateCode) ProtoMessage() {}
func (*RequestValidateCode) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{9}
}

func (m *RequestValidateCode) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *RequestValidateCode) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// Performs code resend
type RequestResendCode struct {
	// * Hash of the authorization transaction *
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
}

func (m *RequestResendCode) Reset()                    { *m = RequestResendCode{} }
func (*RequestResendCode) ProtoMessage()               {}
func (*RequestResendCode) Descriptor() ([]byte, []int) { return fileDescriptorAuthentication, []int{10} }

func (m *RequestResendCode) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

// Validation of account password
type RequestValidatePassword struct {
	// * Hash of the authorization transaction *
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	Password        string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *RequestValidatePassword) Reset()      { *m = RequestValidatePassword{} }
func (*RequestValidatePassword) ProtoMessage() {}
func (*RequestValidatePassword) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{11}
}

func (m *RequestValidatePassword) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *RequestValidatePassword) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// Loading OAuth2 Parameters - deprecated
type RequestGetOAuth2Params struct {
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	RedirectUrl     string `protobuf:"bytes,2,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
}

func (m *RequestGetOAuth2Params) Reset()      { *m = RequestGetOAuth2Params{} }
func (*RequestGetOAuth2Params) ProtoMessage() {}
func (*RequestGetOAuth2Params) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{12}
}

func (m *RequestGetOAuth2Params) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *RequestGetOAuth2Params) GetRedirectUrl() string {
	if m != nil {
		return m.RedirectUrl
	}
	return ""
}

// / Deprecated
type ResponseGetOAuth2Params struct {
	AuthUrl string `protobuf:"bytes,1,opt,name=auth_url,json=authUrl,proto3" json:"auth_url,omitempty"`
}

func (m *ResponseGetOAuth2Params) Reset()      { *m = ResponseGetOAuth2Params{} }
func (*ResponseGetOAuth2Params) ProtoMessage() {}
func (*ResponseGetOAuth2Params) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{13}
}

func (m *ResponseGetOAuth2Params) GetAuthUrl() string {
	if m != nil {
		return m.AuthUrl
	}
	return ""
}

// Complete OAuth2 Authentication - deprecated
type RequestCompleteOAuth2 struct {
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	Code            string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *RequestCompleteOAuth2) Reset()      { *m = RequestCompleteOAuth2{} }
func (*RequestCompleteOAuth2) ProtoMessage() {}
func (*RequestCompleteOAuth2) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{14}
}

func (m *RequestCompleteOAuth2) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *RequestCompleteOAuth2) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// Perform user SignUp
type RequestSignUp struct {
	// * Hash of the authorization transaction *
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	// Your name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// / Use it in case of anonymous authorization (deprecated)
	Sex      Sex                          `protobuf:"varint,3,opt,name=sex,proto3,enum=dialog.Sex" json:"sex,omitempty"`
	Password *google_protobuf.StringValue `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
}

func (m *RequestSignUp) Reset()                    { *m = RequestSignUp{} }
func (*RequestSignUp) ProtoMessage()               {}
func (*RequestSignUp) Descriptor() ([]byte, []int) { return fileDescriptorAuthentication, []int{15} }

func (m *RequestSignUp) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *RequestSignUp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RequestSignUp) GetSex() Sex {
	if m != nil {
		return m.Sex
	}
	return SEX_UNKNOWN
}

func (m *RequestSignUp) GetPassword() *google_protobuf.StringValue {
	if m != nil {
		return m.Password
	}
	return nil
}

// Authentication result
type ResponseAuth struct {
	// / Registered/authorized user
	User *User `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	// / Config for that user
	Config *Config `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
	// / Hash of config to later usage
	ConfigHash *google_protobuf.Int64Value `protobuf:"bytes,4,opt,name=config_hash,json=configHash" json:"config_hash,omitempty"`
}

func (m *ResponseAuth) Reset()                    { *m = ResponseAuth{} }
func (*ResponseAuth) ProtoMessage()               {}
func (*ResponseAuth) Descriptor() ([]byte, []int) { return fileDescriptorAuthentication, []int{16} }

func (m *ResponseAuth) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ResponseAuth) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ResponseAuth) GetConfigHash() *google_protobuf.Int64Value {
	if m != nil {
		return m.ConfigHash
	}
	return nil
}

// Authentication session
type AuthSession struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// / holder of session. 1 - this device, 2 - other.
	AuthHolder AuthHolder `protobuf:"varint,2,opt,name=auth_holder,json=authHolder,proto3,enum=dialog.AuthHolder" json:"auth_holder,omitempty"`
	// / Application Id that you set during authorization
	AppId       int32  `protobuf:"varint,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppTitle    string `protobuf:"bytes,4,opt,name=app_title,json=appTitle,proto3" json:"app_title,omitempty"`
	DeviceTitle string `protobuf:"bytes,5,opt,name=device_title,json=deviceTitle,proto3" json:"device_title,omitempty"`
	// / Time of session creating
	AuthTime int32 `protobuf:"varint,6,opt,name=auth_time,json=authTime,proto3" json:"auth_time,omitempty"`
	// / Two-letter country code of session create
	AuthLocation string                       `protobuf:"bytes,7,opt,name=auth_location,json=authLocation,proto3" json:"auth_location,omitempty"`
	Latitude     *google_protobuf.DoubleValue `protobuf:"bytes,8,opt,name=latitude" json:"latitude,omitempty"`
	Longitude    *google_protobuf.DoubleValue `protobuf:"bytes,9,opt,name=longitude" json:"longitude,omitempty"`
}

func (m *AuthSession) Reset()                    { *m = AuthSession{} }
func (*AuthSession) ProtoMessage()               {}
func (*AuthSession) Descriptor() ([]byte, []int) { return fileDescriptorAuthentication, []int{17} }

func (m *AuthSession) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AuthSession) GetAuthHolder() AuthHolder {
	if m != nil {
		return m.AuthHolder
	}
	return AUTHHOLDER_UNKNOWN
}

func (m *AuthSession) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *AuthSession) GetAppTitle() string {
	if m != nil {
		return m.AppTitle
	}
	return ""
}

func (m *AuthSession) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

func (m *AuthSession) GetAuthTime() int32 {
	if m != nil {
		return m.AuthTime
	}
	return 0
}

func (m *AuthSession) GetAuthLocation() string {
	if m != nil {
		return m.AuthLocation
	}
	return ""
}

func (m *AuthSession) GetLatitude() *google_protobuf.DoubleValue {
	if m != nil {
		return m.Latitude
	}
	return nil
}

func (m *AuthSession) GetLongitude() *google_protobuf.DoubleValue {
	if m != nil {
		return m.Longitude
	}
	return nil
}

// Getting of all active user's authentication sessions
type RequestGetAuthSessions struct {
}

func (m *RequestGetAuthSessions) Reset()      { *m = RequestGetAuthSessions{} }
func (*RequestGetAuthSessions) ProtoMessage() {}
func (*RequestGetAuthSessions) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{18}
}

type ResponseGetAuthSessions struct {
	UserAuths []*AuthSession `protobuf:"bytes,1,rep,name=user_auths,json=userAuths" json:"user_auths,omitempty"`
}

func (m *ResponseGetAuthSessions) Reset()      { *m = ResponseGetAuthSessions{} }
func (*ResponseGetAuthSessions) ProtoMessage() {}
func (*ResponseGetAuthSessions) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{19}
}

func (m *ResponseGetAuthSessions) GetUserAuths() []*AuthSession {
	if m != nil {
		return m.UserAuths
	}
	return nil
}

// SignOut on specified user's session
type RequestTerminateSession struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *RequestTerminateSession) Reset()      { *m = RequestTerminateSession{} }
func (*RequestTerminateSession) ProtoMessage() {}
func (*RequestTerminateSession) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{20}
}

func (m *RequestTerminateSession) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// SignOut on all exept current sessions
type RequestTerminateAllSessions struct {
}

func (m *RequestTerminateAllSessions) Reset()      { *m = RequestTerminateAllSessions{} }
func (*RequestTerminateAllSessions) ProtoMessage() {}
func (*RequestTerminateAllSessions) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{21}
}

// SignOut current session
type RequestSignOut struct {
}

func (m *RequestSignOut) Reset()                    { *m = RequestSignOut{} }
func (*RequestSignOut) ProtoMessage()               {}
func (*RequestSignOut) Descriptor() ([]byte, []int) { return fileDescriptorAuthentication, []int{22} }

// *
// Notification to force client to reload some entities from server
// Just for old clients. Should be ignore.
type ForceReloadField struct {
	// Types that are valid to be assigned to Body:
	//	*ForceReloadField_ForceReloadDialogs
	//	*ForceReloadField_ForceReloadContacts
	//	*ForceReloadField_ForceReloadHistory
	Body isForceReloadField_Body `protobuf_oneof:"body"`
}

func (m *ForceReloadField) Reset()                    { *m = ForceReloadField{} }
func (*ForceReloadField) ProtoMessage()               {}
func (*ForceReloadField) Descriptor() ([]byte, []int) { return fileDescriptorAuthentication, []int{23} }

type isForceReloadField_Body interface {
	isForceReloadField_Body()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ForceReloadField_ForceReloadDialogs struct {
	ForceReloadDialogs *ForceReloadDialogs `protobuf:"bytes,1,opt,name=forceReloadDialogs,oneof"`
}
type ForceReloadField_ForceReloadContacts struct {
	ForceReloadContacts *ForceReloadContacts `protobuf:"bytes,2,opt,name=forceReloadContacts,oneof"`
}
type ForceReloadField_ForceReloadHistory struct {
	ForceReloadHistory *ForceReloadHistory `protobuf:"bytes,3,opt,name=forceReloadHistory,oneof"`
}

func (*ForceReloadField_ForceReloadDialogs) isForceReloadField_Body()  {}
func (*ForceReloadField_ForceReloadContacts) isForceReloadField_Body() {}
func (*ForceReloadField_ForceReloadHistory) isForceReloadField_Body()  {}

func (m *ForceReloadField) GetBody() isForceReloadField_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ForceReloadField) GetForceReloadDialogs() *ForceReloadDialogs {
	if x, ok := m.GetBody().(*ForceReloadField_ForceReloadDialogs); ok {
		return x.ForceReloadDialogs
	}
	return nil
}

func (m *ForceReloadField) GetForceReloadContacts() *ForceReloadContacts {
	if x, ok := m.GetBody().(*ForceReloadField_ForceReloadContacts); ok {
		return x.ForceReloadContacts
	}
	return nil
}

func (m *ForceReloadField) GetForceReloadHistory() *ForceReloadHistory {
	if x, ok := m.GetBody().(*ForceReloadField_ForceReloadHistory); ok {
		return x.ForceReloadHistory
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ForceReloadField) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ForceReloadField_OneofMarshaler, _ForceReloadField_OneofUnmarshaler, _ForceReloadField_OneofSizer, []interface{}{
		(*ForceReloadField_ForceReloadDialogs)(nil),
		(*ForceReloadField_ForceReloadContacts)(nil),
		(*ForceReloadField_ForceReloadHistory)(nil),
	}
}

func _ForceReloadField_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ForceReloadField)
	// body
	switch x := m.Body.(type) {
	case *ForceReloadField_ForceReloadDialogs:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForceReloadDialogs); err != nil {
			return err
		}
	case *ForceReloadField_ForceReloadContacts:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForceReloadContacts); err != nil {
			return err
		}
	case *ForceReloadField_ForceReloadHistory:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForceReloadHistory); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ForceReloadField.Body has unexpected type %T", x)
	}
	return nil
}

func _ForceReloadField_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ForceReloadField)
	switch tag {
	case 1: // body.forceReloadDialogs
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForceReloadDialogs)
		err := b.DecodeMessage(msg)
		m.Body = &ForceReloadField_ForceReloadDialogs{msg}
		return true, err
	case 2: // body.forceReloadContacts
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForceReloadContacts)
		err := b.DecodeMessage(msg)
		m.Body = &ForceReloadField_ForceReloadContacts{msg}
		return true, err
	case 3: // body.forceReloadHistory
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForceReloadHistory)
		err := b.DecodeMessage(msg)
		m.Body = &ForceReloadField_ForceReloadHistory{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ForceReloadField_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ForceReloadField)
	// body
	switch x := m.Body.(type) {
	case *ForceReloadField_ForceReloadDialogs:
		s := proto.Size(x.ForceReloadDialogs)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ForceReloadField_ForceReloadContacts:
		s := proto.Size(x.ForceReloadContacts)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ForceReloadField_ForceReloadHistory:
		s := proto.Size(x.ForceReloadHistory)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Tells the client to clear dialogs and load them again
type ForceReloadDialogs struct {
}

func (m *ForceReloadDialogs) Reset()      { *m = ForceReloadDialogs{} }
func (*ForceReloadDialogs) ProtoMessage() {}
func (*ForceReloadDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{24}
}

// Tells the client to clear contacts and load them again
type ForceReloadContacts struct {
}

func (m *ForceReloadContacts) Reset()      { *m = ForceReloadContacts{} }
func (*ForceReloadContacts) ProtoMessage() {}
func (*ForceReloadContacts) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{25}
}

// Tells the client to clear the specified conversation and load it again
// peer the peer whose history should be reloaded
type ForceReloadHistory struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *ForceReloadHistory) Reset()      { *m = ForceReloadHistory{} }
func (*ForceReloadHistory) ProtoMessage() {}
func (*ForceReloadHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{26}
}

func (m *ForceReloadHistory) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// This update is sent by the server to force a client to reload its data
type UpdateForceReloadState struct {
	Fields []*ForceReloadField `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
}

func (m *UpdateForceReloadState) Reset()      { *m = UpdateForceReloadState{} }
func (*UpdateForceReloadState) ProtoMessage() {}
func (*UpdateForceReloadState) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{27}
}

func (m *UpdateForceReloadState) GetFields() []*ForceReloadField {
	if m != nil {
		return m.Fields
	}
	return nil
}

// Performing user signin - deprecated
type RequestSignInObsolete struct {
	PhoneNumber int64  `protobuf:"varint,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	SmsHash     string `protobuf:"bytes,2,opt,name=sms_hash,json=smsHash,proto3" json:"sms_hash,omitempty"`
	SmsCode     string `protobuf:"bytes,3,opt,name=sms_code,json=smsCode,proto3" json:"sms_code,omitempty"`
	DeviceHash  []byte `protobuf:"bytes,5,opt,name=device_hash,json=deviceHash,proto3" json:"device_hash,omitempty"`
	DeviceTitle string `protobuf:"bytes,6,opt,name=device_title,json=deviceTitle,proto3" json:"device_title,omitempty"`
	AppId       int32  `protobuf:"varint,7,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppKey      string `protobuf:"bytes,8,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
}

func (m *RequestSignInObsolete) Reset()      { *m = RequestSignInObsolete{} }
func (*RequestSignInObsolete) ProtoMessage() {}
func (*RequestSignInObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{28}
}

func (m *RequestSignInObsolete) GetPhoneNumber() int64 {
	if m != nil {
		return m.PhoneNumber
	}
	return 0
}

func (m *RequestSignInObsolete) GetSmsHash() string {
	if m != nil {
		return m.SmsHash
	}
	return ""
}

func (m *RequestSignInObsolete) GetSmsCode() string {
	if m != nil {
		return m.SmsCode
	}
	return ""
}

func (m *RequestSignInObsolete) GetDeviceHash() []byte {
	if m != nil {
		return m.DeviceHash
	}
	return nil
}

func (m *RequestSignInObsolete) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

func (m *RequestSignInObsolete) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestSignInObsolete) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

// Performing user signup. If user perform signup on already registered user it just override previous
// profile information
type RequestSignUpObsolete struct {
	PhoneNumber int64  `protobuf:"varint,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	SmsHash     string `protobuf:"bytes,2,opt,name=sms_hash,json=smsHash,proto3" json:"sms_hash,omitempty"`
	SmsCode     string `protobuf:"bytes,3,opt,name=sms_code,json=smsCode,proto3" json:"sms_code,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	DeviceHash  []byte `protobuf:"bytes,7,opt,name=device_hash,json=deviceHash,proto3" json:"device_hash,omitempty"`
	DeviceTitle string `protobuf:"bytes,8,opt,name=device_title,json=deviceTitle,proto3" json:"device_title,omitempty"`
	AppId       int32  `protobuf:"varint,9,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppKey      string `protobuf:"bytes,10,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
	IsSilent    bool   `protobuf:"varint,11,opt,name=is_silent,json=isSilent,proto3" json:"is_silent,omitempty"`
}

func (m *RequestSignUpObsolete) Reset()      { *m = RequestSignUpObsolete{} }
func (*RequestSignUpObsolete) ProtoMessage() {}
func (*RequestSignUpObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{29}
}

func (m *RequestSignUpObsolete) GetPhoneNumber() int64 {
	if m != nil {
		return m.PhoneNumber
	}
	return 0
}

func (m *RequestSignUpObsolete) GetSmsHash() string {
	if m != nil {
		return m.SmsHash
	}
	return ""
}

func (m *RequestSignUpObsolete) GetSmsCode() string {
	if m != nil {
		return m.SmsCode
	}
	return ""
}

func (m *RequestSignUpObsolete) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RequestSignUpObsolete) GetDeviceHash() []byte {
	if m != nil {
		return m.DeviceHash
	}
	return nil
}

func (m *RequestSignUpObsolete) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

func (m *RequestSignUpObsolete) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestSignUpObsolete) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

func (m *RequestSignUpObsolete) GetIsSilent() bool {
	if m != nil {
		return m.IsSilent
	}
	return false
}

// Sending SMS with activation code
type RequestSendAuthCodeObsolete struct {
	PhoneNumber int64  `protobuf:"varint,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	AppId       int32  `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ApiKey      string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (m *RequestSendAuthCodeObsolete) Reset()      { *m = RequestSendAuthCodeObsolete{} }
func (*RequestSendAuthCodeObsolete) ProtoMessage() {}
func (*RequestSendAuthCodeObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{30}
}

func (m *RequestSendAuthCodeObsolete) GetPhoneNumber() int64 {
	if m != nil {
		return m.PhoneNumber
	}
	return 0
}

func (m *RequestSendAuthCodeObsolete) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestSendAuthCodeObsolete) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

type ResponseSendAuthCodeObsolete struct {
	SmsHash      string `protobuf:"bytes,1,opt,name=sms_hash,json=smsHash,proto3" json:"sms_hash,omitempty"`
	IsRegistered bool   `protobuf:"varint,2,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
}

func (m *ResponseSendAuthCodeObsolete) Reset()      { *m = ResponseSendAuthCodeObsolete{} }
func (*ResponseSendAuthCodeObsolete) ProtoMessage() {}
func (*ResponseSendAuthCodeObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{31}
}

func (m *ResponseSendAuthCodeObsolete) GetSmsHash() string {
	if m != nil {
		return m.SmsHash
	}
	return ""
}

func (m *ResponseSendAuthCodeObsolete) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

// Requesting Phone activation
type RequestSendAuthCallObsolete struct {
	PhoneNumber int64  `protobuf:"varint,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	SmsHash     string `protobuf:"bytes,2,opt,name=sms_hash,json=smsHash,proto3" json:"sms_hash,omitempty"`
	AppId       int32  `protobuf:"varint,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ApiKey      string `protobuf:"bytes,4,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (m *RequestSendAuthCallObsolete) Reset()      { *m = RequestSendAuthCallObsolete{} }
func (*RequestSendAuthCallObsolete) ProtoMessage() {}
func (*RequestSendAuthCallObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthentication, []int{32}
}

func (m *RequestSendAuthCallObsolete) GetPhoneNumber() int64 {
	if m != nil {
		return m.PhoneNumber
	}
	return 0
}

func (m *RequestSendAuthCallObsolete) GetSmsHash() string {
	if m != nil {
		return m.SmsHash
	}
	return ""
}

func (m *RequestSendAuthCallObsolete) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestSendAuthCallObsolete) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestStartPhoneAuth)(nil), "dialog.RequestStartPhoneAuth")
	proto.RegisterType((*ResponseStartPhoneAuth)(nil), "dialog.ResponseStartPhoneAuth")
	proto.RegisterType((*RequestSendCodeByPhoneCall)(nil), "dialog.RequestSendCodeByPhoneCall")
	proto.RegisterType((*RequestStartEmailAuth)(nil), "dialog.RequestStartEmailAuth")
	proto.RegisterType((*ResponseStartEmailAuth)(nil), "dialog.ResponseStartEmailAuth")
	proto.RegisterType((*RequestStartAnonymousAuth)(nil), "dialog.RequestStartAnonymousAuth")
	proto.RegisterType((*RequestStartTokenAuth)(nil), "dialog.RequestStartTokenAuth")
	proto.RegisterType((*RequestStartUsernameAuth)(nil), "dialog.RequestStartUsernameAuth")
	proto.RegisterType((*ResponseStartUsernameAuth)(nil), "dialog.ResponseStartUsernameAuth")
	proto.RegisterType((*RequestValidateCode)(nil), "dialog.RequestValidateCode")
	proto.RegisterType((*RequestResendCode)(nil), "dialog.RequestResendCode")
	proto.RegisterType((*RequestValidatePassword)(nil), "dialog.RequestValidatePassword")
	proto.RegisterType((*RequestGetOAuth2Params)(nil), "dialog.RequestGetOAuth2Params")
	proto.RegisterType((*ResponseGetOAuth2Params)(nil), "dialog.ResponseGetOAuth2Params")
	proto.RegisterType((*RequestCompleteOAuth2)(nil), "dialog.RequestCompleteOAuth2")
	proto.RegisterType((*RequestSignUp)(nil), "dialog.RequestSignUp")
	proto.RegisterType((*ResponseAuth)(nil), "dialog.ResponseAuth")
	proto.RegisterType((*AuthSession)(nil), "dialog.AuthSession")
	proto.RegisterType((*RequestGetAuthSessions)(nil), "dialog.RequestGetAuthSessions")
	proto.RegisterType((*ResponseGetAuthSessions)(nil), "dialog.ResponseGetAuthSessions")
	proto.RegisterType((*RequestTerminateSession)(nil), "dialog.RequestTerminateSession")
	proto.RegisterType((*RequestTerminateAllSessions)(nil), "dialog.RequestTerminateAllSessions")
	proto.RegisterType((*RequestSignOut)(nil), "dialog.RequestSignOut")
	proto.RegisterType((*ForceReloadField)(nil), "dialog.ForceReloadField")
	proto.RegisterType((*ForceReloadDialogs)(nil), "dialog.ForceReloadDialogs")
	proto.RegisterType((*ForceReloadContacts)(nil), "dialog.ForceReloadContacts")
	proto.RegisterType((*ForceReloadHistory)(nil), "dialog.ForceReloadHistory")
	proto.RegisterType((*UpdateForceReloadState)(nil), "dialog.UpdateForceReloadState")
	proto.RegisterType((*RequestSignInObsolete)(nil), "dialog.RequestSignInObsolete")
	proto.RegisterType((*RequestSignUpObsolete)(nil), "dialog.RequestSignUpObsolete")
	proto.RegisterType((*RequestSendAuthCodeObsolete)(nil), "dialog.RequestSendAuthCodeObsolete")
	proto.RegisterType((*ResponseSendAuthCodeObsolete)(nil), "dialog.ResponseSendAuthCodeObsolete")
	proto.RegisterType((*RequestSendAuthCallObsolete)(nil), "dialog.RequestSendAuthCallObsolete")
	proto.RegisterEnum("dialog.PhoneActivationType", PhoneActivationType_name, PhoneActivationType_value)
	proto.RegisterEnum("dialog.EmailActivationType", EmailActivationType_name, EmailActivationType_value)
	proto.RegisterEnum("dialog.AuthHolder", AuthHolder_name, AuthHolder_value)
}
func (x PhoneActivationType) String() string {
	s, ok := PhoneActivationType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x EmailActivationType) String() string {
	s, ok := EmailActivationType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AuthHolder) String() string {
	s, ok := AuthHolder_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RequestStartPhoneAuth) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestStartPhoneAuth)
	if !ok {
		that2, ok := that.(RequestStartPhoneAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	if !bytes.Equal(this.DeviceHash, that1.DeviceHash) {
		return false
	}
	if this.DeviceTitle != that1.DeviceTitle {
		return false
	}
	if !this.TimeZone.Equal(that1.TimeZone) {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	return true
}
func (this *ResponseStartPhoneAuth) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseStartPhoneAuth)
	if !ok {
		that2, ok := that.(ResponseStartPhoneAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	if this.IsRegistered != that1.IsRegistered {
		return false
	}
	if this.ActivationType != that1.ActivationType {
		return false
	}
	return true
}
func (this *RequestSendCodeByPhoneCall) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSendCodeByPhoneCall)
	if !ok {
		that2, ok := that.(RequestSendCodeByPhoneCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	return true
}
func (this *RequestStartEmailAuth) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestStartEmailAuth)
	if !ok {
		that2, ok := that.(RequestStartEmailAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	if !bytes.Equal(this.DeviceHash, that1.DeviceHash) {
		return false
	}
	if this.DeviceTitle != that1.DeviceTitle {
		return false
	}
	if !this.TimeZone.Equal(that1.TimeZone) {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	return true
}
func (this *ResponseStartEmailAuth) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseStartEmailAuth)
	if !ok {
		that2, ok := that.(ResponseStartEmailAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	if this.IsRegistered != that1.IsRegistered {
		return false
	}
	if this.ActivationType != that1.ActivationType {
		return false
	}
	return true
}
func (this *RequestStartAnonymousAuth) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestStartAnonymousAuth)
	if !ok {
		that2, ok := that.(RequestStartAnonymousAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	if !bytes.Equal(this.DeviceHash, that1.DeviceHash) {
		return false
	}
	if this.DeviceTitle != that1.DeviceTitle {
		return false
	}
	if !this.TimeZone.Equal(that1.TimeZone) {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	return true
}
func (this *RequestStartTokenAuth) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestStartTokenAuth)
	if !ok {
		that2, ok := that.(RequestStartTokenAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	if !bytes.Equal(this.DeviceHash, that1.DeviceHash) {
		return false
	}
	if this.DeviceTitle != that1.DeviceTitle {
		return false
	}
	if !this.TimeZone.Equal(that1.TimeZone) {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	return true
}
func (this *RequestStartUsernameAuth) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestStartUsernameAuth)
	if !ok {
		that2, ok := that.(RequestStartUsernameAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	if !bytes.Equal(this.DeviceHash, that1.DeviceHash) {
		return false
	}
	if this.DeviceTitle != that1.DeviceTitle {
		return false
	}
	if !this.TimeZone.Equal(that1.TimeZone) {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	return true
}
func (this *ResponseStartUsernameAuth) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseStartUsernameAuth)
	if !ok {
		that2, ok := that.(ResponseStartUsernameAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	if this.IsRegistered != that1.IsRegistered {
		return false
	}
	return true
}
func (this *RequestValidateCode) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestValidateCode)
	if !ok {
		that2, ok := that.(RequestValidateCode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *RequestResendCode) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestResendCode)
	if !ok {
		that2, ok := that.(RequestResendCode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	return true
}
func (this *RequestValidatePassword) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestValidatePassword)
	if !ok {
		that2, ok := that.(RequestValidatePassword)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *RequestGetOAuth2Params) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestGetOAuth2Params)
	if !ok {
		that2, ok := that.(RequestGetOAuth2Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	if this.RedirectUrl != that1.RedirectUrl {
		return false
	}
	return true
}
func (this *ResponseGetOAuth2Params) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseGetOAuth2Params)
	if !ok {
		that2, ok := that.(ResponseGetOAuth2Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AuthUrl != that1.AuthUrl {
		return false
	}
	return true
}
func (this *RequestCompleteOAuth2) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestCompleteOAuth2)
	if !ok {
		that2, ok := that.(RequestCompleteOAuth2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *RequestSignUp) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSignUp)
	if !ok {
		that2, ok := that.(RequestSignUp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if !this.Password.Equal(that1.Password) {
		return false
	}
	return true
}
func (this *ResponseAuth) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseAuth)
	if !ok {
		that2, ok := that.(ResponseAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if !this.ConfigHash.Equal(that1.ConfigHash) {
		return false
	}
	return true
}
func (this *AuthSession) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthSession)
	if !ok {
		that2, ok := that.(AuthSession)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.AuthHolder != that1.AuthHolder {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.AppTitle != that1.AppTitle {
		return false
	}
	if this.DeviceTitle != that1.DeviceTitle {
		return false
	}
	if this.AuthTime != that1.AuthTime {
		return false
	}
	if this.AuthLocation != that1.AuthLocation {
		return false
	}
	if !this.Latitude.Equal(that1.Latitude) {
		return false
	}
	if !this.Longitude.Equal(that1.Longitude) {
		return false
	}
	return true
}
func (this *RequestGetAuthSessions) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestGetAuthSessions)
	if !ok {
		that2, ok := that.(RequestGetAuthSessions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResponseGetAuthSessions) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseGetAuthSessions)
	if !ok {
		that2, ok := that.(ResponseGetAuthSessions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.UserAuths) != len(that1.UserAuths) {
		return false
	}
	for i := range this.UserAuths {
		if !this.UserAuths[i].Equal(that1.UserAuths[i]) {
			return false
		}
	}
	return true
}
func (this *RequestTerminateSession) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestTerminateSession)
	if !ok {
		that2, ok := that.(RequestTerminateSession)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *RequestTerminateAllSessions) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestTerminateAllSessions)
	if !ok {
		that2, ok := that.(RequestTerminateAllSessions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *RequestSignOut) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSignOut)
	if !ok {
		that2, ok := that.(RequestSignOut)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ForceReloadField) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ForceReloadField)
	if !ok {
		that2, ok := that.(ForceReloadField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Body == nil {
		if this.Body != nil {
			return false
		}
	} else if this.Body == nil {
		return false
	} else if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *ForceReloadField_ForceReloadDialogs) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ForceReloadField_ForceReloadDialogs)
	if !ok {
		that2, ok := that.(ForceReloadField_ForceReloadDialogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ForceReloadDialogs.Equal(that1.ForceReloadDialogs) {
		return false
	}
	return true
}
func (this *ForceReloadField_ForceReloadContacts) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ForceReloadField_ForceReloadContacts)
	if !ok {
		that2, ok := that.(ForceReloadField_ForceReloadContacts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ForceReloadContacts.Equal(that1.ForceReloadContacts) {
		return false
	}
	return true
}
func (this *ForceReloadField_ForceReloadHistory) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ForceReloadField_ForceReloadHistory)
	if !ok {
		that2, ok := that.(ForceReloadField_ForceReloadHistory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ForceReloadHistory.Equal(that1.ForceReloadHistory) {
		return false
	}
	return true
}
func (this *ForceReloadDialogs) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ForceReloadDialogs)
	if !ok {
		that2, ok := that.(ForceReloadDialogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ForceReloadContacts) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ForceReloadContacts)
	if !ok {
		that2, ok := that.(ForceReloadContacts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ForceReloadHistory) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ForceReloadHistory)
	if !ok {
		that2, ok := that.(ForceReloadHistory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *UpdateForceReloadState) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateForceReloadState)
	if !ok {
		that2, ok := that.(UpdateForceReloadState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	return true
}
func (this *RequestSignInObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSignInObsolete)
	if !ok {
		that2, ok := that.(RequestSignInObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.SmsHash != that1.SmsHash {
		return false
	}
	if this.SmsCode != that1.SmsCode {
		return false
	}
	if !bytes.Equal(this.DeviceHash, that1.DeviceHash) {
		return false
	}
	if this.DeviceTitle != that1.DeviceTitle {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.AppKey != that1.AppKey {
		return false
	}
	return true
}
func (this *RequestSignUpObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSignUpObsolete)
	if !ok {
		that2, ok := that.(RequestSignUpObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.SmsHash != that1.SmsHash {
		return false
	}
	if this.SmsCode != that1.SmsCode {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !bytes.Equal(this.DeviceHash, that1.DeviceHash) {
		return false
	}
	if this.DeviceTitle != that1.DeviceTitle {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.AppKey != that1.AppKey {
		return false
	}
	if this.IsSilent != that1.IsSilent {
		return false
	}
	return true
}
func (this *RequestSendAuthCodeObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSendAuthCodeObsolete)
	if !ok {
		that2, ok := that.(RequestSendAuthCodeObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	return true
}
func (this *ResponseSendAuthCodeObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseSendAuthCodeObsolete)
	if !ok {
		that2, ok := that.(ResponseSendAuthCodeObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SmsHash != that1.SmsHash {
		return false
	}
	if this.IsRegistered != that1.IsRegistered {
		return false
	}
	return true
}
func (this *RequestSendAuthCallObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSendAuthCallObsolete)
	if !ok {
		that2, ok := that.(RequestSendAuthCallObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.SmsHash != that1.SmsHash {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	return true
}
func (this *RequestStartPhoneAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.RequestStartPhoneAuth{")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	s = append(s, "DeviceHash: "+fmt.Sprintf("%#v", this.DeviceHash)+",\n")
	s = append(s, "DeviceTitle: "+fmt.Sprintf("%#v", this.DeviceTitle)+",\n")
	if this.TimeZone != nil {
		s = append(s, "TimeZone: "+fmt.Sprintf("%#v", this.TimeZone)+",\n")
	}
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseStartPhoneAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseStartPhoneAuth{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "IsRegistered: "+fmt.Sprintf("%#v", this.IsRegistered)+",\n")
	s = append(s, "ActivationType: "+fmt.Sprintf("%#v", this.ActivationType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSendCodeByPhoneCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestSendCodeByPhoneCall{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestStartEmailAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.RequestStartEmailAuth{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	s = append(s, "DeviceHash: "+fmt.Sprintf("%#v", this.DeviceHash)+",\n")
	s = append(s, "DeviceTitle: "+fmt.Sprintf("%#v", this.DeviceTitle)+",\n")
	if this.TimeZone != nil {
		s = append(s, "TimeZone: "+fmt.Sprintf("%#v", this.TimeZone)+",\n")
	}
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseStartEmailAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseStartEmailAuth{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "IsRegistered: "+fmt.Sprintf("%#v", this.IsRegistered)+",\n")
	s = append(s, "ActivationType: "+fmt.Sprintf("%#v", this.ActivationType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestStartAnonymousAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.RequestStartAnonymousAuth{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	s = append(s, "DeviceHash: "+fmt.Sprintf("%#v", this.DeviceHash)+",\n")
	s = append(s, "DeviceTitle: "+fmt.Sprintf("%#v", this.DeviceTitle)+",\n")
	if this.TimeZone != nil {
		s = append(s, "TimeZone: "+fmt.Sprintf("%#v", this.TimeZone)+",\n")
	}
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestStartTokenAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.RequestStartTokenAuth{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	s = append(s, "DeviceHash: "+fmt.Sprintf("%#v", this.DeviceHash)+",\n")
	s = append(s, "DeviceTitle: "+fmt.Sprintf("%#v", this.DeviceTitle)+",\n")
	if this.TimeZone != nil {
		s = append(s, "TimeZone: "+fmt.Sprintf("%#v", this.TimeZone)+",\n")
	}
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestStartUsernameAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.RequestStartUsernameAuth{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	s = append(s, "DeviceHash: "+fmt.Sprintf("%#v", this.DeviceHash)+",\n")
	s = append(s, "DeviceTitle: "+fmt.Sprintf("%#v", this.DeviceTitle)+",\n")
	if this.TimeZone != nil {
		s = append(s, "TimeZone: "+fmt.Sprintf("%#v", this.TimeZone)+",\n")
	}
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseStartUsernameAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseStartUsernameAuth{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "IsRegistered: "+fmt.Sprintf("%#v", this.IsRegistered)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestValidateCode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestValidateCode{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestResendCode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestResendCode{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestValidatePassword) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestValidatePassword{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetOAuth2Params) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestGetOAuth2Params{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "RedirectUrl: "+fmt.Sprintf("%#v", this.RedirectUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetOAuth2Params) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseGetOAuth2Params{")
	s = append(s, "AuthUrl: "+fmt.Sprintf("%#v", this.AuthUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCompleteOAuth2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestCompleteOAuth2{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSignUp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestSignUp{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	if this.Password != nil {
		s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseAuth{")
	if this.User != nil {
		s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	}
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	if this.ConfigHash != nil {
		s = append(s, "ConfigHash: "+fmt.Sprintf("%#v", this.ConfigHash)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthSession) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&dialog.AuthSession{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "AuthHolder: "+fmt.Sprintf("%#v", this.AuthHolder)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "AppTitle: "+fmt.Sprintf("%#v", this.AppTitle)+",\n")
	s = append(s, "DeviceTitle: "+fmt.Sprintf("%#v", this.DeviceTitle)+",\n")
	s = append(s, "AuthTime: "+fmt.Sprintf("%#v", this.AuthTime)+",\n")
	s = append(s, "AuthLocation: "+fmt.Sprintf("%#v", this.AuthLocation)+",\n")
	if this.Latitude != nil {
		s = append(s, "Latitude: "+fmt.Sprintf("%#v", this.Latitude)+",\n")
	}
	if this.Longitude != nil {
		s = append(s, "Longitude: "+fmt.Sprintf("%#v", this.Longitude)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetAuthSessions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestGetAuthSessions{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetAuthSessions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseGetAuthSessions{")
	if this.UserAuths != nil {
		s = append(s, "UserAuths: "+fmt.Sprintf("%#v", this.UserAuths)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestTerminateSession) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestTerminateSession{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestTerminateAllSessions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestTerminateAllSessions{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSignOut) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestSignOut{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForceReloadField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ForceReloadField{")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForceReloadField_ForceReloadDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ForceReloadField_ForceReloadDialogs{` +
		`ForceReloadDialogs:` + fmt.Sprintf("%#v", this.ForceReloadDialogs) + `}`}, ", ")
	return s
}
func (this *ForceReloadField_ForceReloadContacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ForceReloadField_ForceReloadContacts{` +
		`ForceReloadContacts:` + fmt.Sprintf("%#v", this.ForceReloadContacts) + `}`}, ", ")
	return s
}
func (this *ForceReloadField_ForceReloadHistory) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ForceReloadField_ForceReloadHistory{` +
		`ForceReloadHistory:` + fmt.Sprintf("%#v", this.ForceReloadHistory) + `}`}, ", ")
	return s
}
func (this *ForceReloadDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ForceReloadDialogs{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForceReloadContacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ForceReloadContacts{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForceReloadHistory) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ForceReloadHistory{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateForceReloadState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateForceReloadState{")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSignInObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.RequestSignInObsolete{")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "SmsHash: "+fmt.Sprintf("%#v", this.SmsHash)+",\n")
	s = append(s, "SmsCode: "+fmt.Sprintf("%#v", this.SmsCode)+",\n")
	s = append(s, "DeviceHash: "+fmt.Sprintf("%#v", this.DeviceHash)+",\n")
	s = append(s, "DeviceTitle: "+fmt.Sprintf("%#v", this.DeviceTitle)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "AppKey: "+fmt.Sprintf("%#v", this.AppKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSignUpObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&dialog.RequestSignUpObsolete{")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "SmsHash: "+fmt.Sprintf("%#v", this.SmsHash)+",\n")
	s = append(s, "SmsCode: "+fmt.Sprintf("%#v", this.SmsCode)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "DeviceHash: "+fmt.Sprintf("%#v", this.DeviceHash)+",\n")
	s = append(s, "DeviceTitle: "+fmt.Sprintf("%#v", this.DeviceTitle)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "AppKey: "+fmt.Sprintf("%#v", this.AppKey)+",\n")
	s = append(s, "IsSilent: "+fmt.Sprintf("%#v", this.IsSilent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSendAuthCodeObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestSendAuthCodeObsolete{")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSendAuthCodeObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseSendAuthCodeObsolete{")
	s = append(s, "SmsHash: "+fmt.Sprintf("%#v", this.SmsHash)+",\n")
	s = append(s, "IsRegistered: "+fmt.Sprintf("%#v", this.IsRegistered)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSendAuthCallObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestSendAuthCallObsolete{")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "SmsHash: "+fmt.Sprintf("%#v", this.SmsHash)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAuthentication(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Authentication service

type AuthenticationClient interface {
	// / Start authorization by phone
	StartPhoneAuth(ctx context.Context, in *RequestStartPhoneAuth, opts ...grpc.CallOption) (*ResponseStartPhoneAuth, error)
	// / Resend code by transaction hash
	SendCodeByPhoneCall(ctx context.Context, in *RequestSendCodeByPhoneCall, opts ...grpc.CallOption) (*ResponseVoid, error)
	// / Start email authorization process
	StartEmailAuth(ctx context.Context, in *RequestStartEmailAuth, opts ...grpc.CallOption) (*ResponseStartEmailAuth, error)
	// / Deprecated
	StartAnonymousAuth(ctx context.Context, in *RequestStartAnonymousAuth, opts ...grpc.CallOption) (*ResponseAuth, error)
	// / Start token auth authorization (actual for bots)
	StartTokenAuth(ctx context.Context, in *RequestStartTokenAuth, opts ...grpc.CallOption) (*ResponseAuth, error)
	// / Start login/password authorization process
	StartUsernameAuth(ctx context.Context, in *RequestStartUsernameAuth, opts ...grpc.CallOption) (*ResponseStartUsernameAuth, error)
	// * Validate code received by phone or email
	//  Returns error if user does not exist
	ValidateCode(ctx context.Context, in *RequestValidateCode, opts ...grpc.CallOption) (*ResponseAuth, error)
	// / Resend code if you don't receive it with first attempt
	ResendCode(ctx context.Context, in *RequestResendCode, opts ...grpc.CallOption) (*ResponseVoid, error)
	// / Validate your passwword
	ValidatePassword(ctx context.Context, in *RequestValidatePassword, opts ...grpc.CallOption) (*ResponseAuth, error)
	// / Deprecated
	GetOAuth2Params(ctx context.Context, in *RequestGetOAuth2Params, opts ...grpc.CallOption) (*ResponseGetOAuth2Params, error)
	// / Deprecated
	CompleteOAuth2(ctx context.Context, in *RequestCompleteOAuth2, opts ...grpc.CallOption) (*ResponseAuth, error)
	// / Sign up existed user
	SignUp(ctx context.Context, in *RequestSignUp, opts ...grpc.CallOption) (*ResponseAuth, error)
	// / Returns all authorized user's sessions
	GetAuthSessions(ctx context.Context, in *RequestGetAuthSessions, opts ...grpc.CallOption) (*ResponseGetAuthSessions, error)
	// / Deprecated. Does not produce any effect.
	TerminateSession(ctx context.Context, in *RequestTerminateSession, opts ...grpc.CallOption) (*ResponseVoid, error)
	// / Log out user
	TerminateAllSessions(ctx context.Context, in *RequestTerminateAllSessions, opts ...grpc.CallOption) (*ResponseVoid, error)
	// / Log out current session
	SignOut(ctx context.Context, in *RequestSignOut, opts ...grpc.CallOption) (*ResponseVoid, error)
	// / Deprecated
	SignInObsolete(ctx context.Context, in *RequestSignInObsolete, opts ...grpc.CallOption) (*ResponseAuth, error)
	// / Deprecated
	SignUpObsolete(ctx context.Context, in *RequestSignUpObsolete, opts ...grpc.CallOption) (*ResponseAuth, error)
	// / Deprecated
	SendAuthCodeObsolete(ctx context.Context, in *RequestSendAuthCodeObsolete, opts ...grpc.CallOption) (*ResponseSendAuthCodeObsolete, error)
	// / Deprecated
	SendAuthCallObsolete(ctx context.Context, in *RequestSendAuthCallObsolete, opts ...grpc.CallOption) (*ResponseVoid, error)
}

type authenticationClient struct {
	cc *grpc.ClientConn
}

func NewAuthenticationClient(cc *grpc.ClientConn) AuthenticationClient {
	return &authenticationClient{cc}
}

func (c *authenticationClient) StartPhoneAuth(ctx context.Context, in *RequestStartPhoneAuth, opts ...grpc.CallOption) (*ResponseStartPhoneAuth, error) {
	out := new(ResponseStartPhoneAuth)
	err := grpc.Invoke(ctx, "/dialog.Authentication/StartPhoneAuth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) SendCodeByPhoneCall(ctx context.Context, in *RequestSendCodeByPhoneCall, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Authentication/SendCodeByPhoneCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) StartEmailAuth(ctx context.Context, in *RequestStartEmailAuth, opts ...grpc.CallOption) (*ResponseStartEmailAuth, error) {
	out := new(ResponseStartEmailAuth)
	err := grpc.Invoke(ctx, "/dialog.Authentication/StartEmailAuth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) StartAnonymousAuth(ctx context.Context, in *RequestStartAnonymousAuth, opts ...grpc.CallOption) (*ResponseAuth, error) {
	out := new(ResponseAuth)
	err := grpc.Invoke(ctx, "/dialog.Authentication/StartAnonymousAuth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) StartTokenAuth(ctx context.Context, in *RequestStartTokenAuth, opts ...grpc.CallOption) (*ResponseAuth, error) {
	out := new(ResponseAuth)
	err := grpc.Invoke(ctx, "/dialog.Authentication/StartTokenAuth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) StartUsernameAuth(ctx context.Context, in *RequestStartUsernameAuth, opts ...grpc.CallOption) (*ResponseStartUsernameAuth, error) {
	out := new(ResponseStartUsernameAuth)
	err := grpc.Invoke(ctx, "/dialog.Authentication/StartUsernameAuth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ValidateCode(ctx context.Context, in *RequestValidateCode, opts ...grpc.CallOption) (*ResponseAuth, error) {
	out := new(ResponseAuth)
	err := grpc.Invoke(ctx, "/dialog.Authentication/ValidateCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ResendCode(ctx context.Context, in *RequestResendCode, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Authentication/ResendCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ValidatePassword(ctx context.Context, in *RequestValidatePassword, opts ...grpc.CallOption) (*ResponseAuth, error) {
	out := new(ResponseAuth)
	err := grpc.Invoke(ctx, "/dialog.Authentication/ValidatePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) GetOAuth2Params(ctx context.Context, in *RequestGetOAuth2Params, opts ...grpc.CallOption) (*ResponseGetOAuth2Params, error) {
	out := new(ResponseGetOAuth2Params)
	err := grpc.Invoke(ctx, "/dialog.Authentication/GetOAuth2Params", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) CompleteOAuth2(ctx context.Context, in *RequestCompleteOAuth2, opts ...grpc.CallOption) (*ResponseAuth, error) {
	out := new(ResponseAuth)
	err := grpc.Invoke(ctx, "/dialog.Authentication/CompleteOAuth2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) SignUp(ctx context.Context, in *RequestSignUp, opts ...grpc.CallOption) (*ResponseAuth, error) {
	out := new(ResponseAuth)
	err := grpc.Invoke(ctx, "/dialog.Authentication/SignUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) GetAuthSessions(ctx context.Context, in *RequestGetAuthSessions, opts ...grpc.CallOption) (*ResponseGetAuthSessions, error) {
	out := new(ResponseGetAuthSessions)
	err := grpc.Invoke(ctx, "/dialog.Authentication/GetAuthSessions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) TerminateSession(ctx context.Context, in *RequestTerminateSession, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Authentication/TerminateSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) TerminateAllSessions(ctx context.Context, in *RequestTerminateAllSessions, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Authentication/TerminateAllSessions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) SignOut(ctx context.Context, in *RequestSignOut, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Authentication/SignOut", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) SignInObsolete(ctx context.Context, in *RequestSignInObsolete, opts ...grpc.CallOption) (*ResponseAuth, error) {
	out := new(ResponseAuth)
	err := grpc.Invoke(ctx, "/dialog.Authentication/SignInObsolete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) SignUpObsolete(ctx context.Context, in *RequestSignUpObsolete, opts ...grpc.CallOption) (*ResponseAuth, error) {
	out := new(ResponseAuth)
	err := grpc.Invoke(ctx, "/dialog.Authentication/SignUpObsolete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) SendAuthCodeObsolete(ctx context.Context, in *RequestSendAuthCodeObsolete, opts ...grpc.CallOption) (*ResponseSendAuthCodeObsolete, error) {
	out := new(ResponseSendAuthCodeObsolete)
	err := grpc.Invoke(ctx, "/dialog.Authentication/SendAuthCodeObsolete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) SendAuthCallObsolete(ctx context.Context, in *RequestSendAuthCallObsolete, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Authentication/SendAuthCallObsolete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Authentication service

type AuthenticationServer interface {
	// / Start authorization by phone
	StartPhoneAuth(context.Context, *RequestStartPhoneAuth) (*ResponseStartPhoneAuth, error)
	// / Resend code by transaction hash
	SendCodeByPhoneCall(context.Context, *RequestSendCodeByPhoneCall) (*ResponseVoid, error)
	// / Start email authorization process
	StartEmailAuth(context.Context, *RequestStartEmailAuth) (*ResponseStartEmailAuth, error)
	// / Deprecated
	StartAnonymousAuth(context.Context, *RequestStartAnonymousAuth) (*ResponseAuth, error)
	// / Start token auth authorization (actual for bots)
	StartTokenAuth(context.Context, *RequestStartTokenAuth) (*ResponseAuth, error)
	// / Start login/password authorization process
	StartUsernameAuth(context.Context, *RequestStartUsernameAuth) (*ResponseStartUsernameAuth, error)
	// * Validate code received by phone or email
	//  Returns error if user does not exist
	ValidateCode(context.Context, *RequestValidateCode) (*ResponseAuth, error)
	// / Resend code if you don't receive it with first attempt
	ResendCode(context.Context, *RequestResendCode) (*ResponseVoid, error)
	// / Validate your passwword
	ValidatePassword(context.Context, *RequestValidatePassword) (*ResponseAuth, error)
	// / Deprecated
	GetOAuth2Params(context.Context, *RequestGetOAuth2Params) (*ResponseGetOAuth2Params, error)
	// / Deprecated
	CompleteOAuth2(context.Context, *RequestCompleteOAuth2) (*ResponseAuth, error)
	// / Sign up existed user
	SignUp(context.Context, *RequestSignUp) (*ResponseAuth, error)
	// / Returns all authorized user's sessions
	GetAuthSessions(context.Context, *RequestGetAuthSessions) (*ResponseGetAuthSessions, error)
	// / Deprecated. Does not produce any effect.
	TerminateSession(context.Context, *RequestTerminateSession) (*ResponseVoid, error)
	// / Log out user
	TerminateAllSessions(context.Context, *RequestTerminateAllSessions) (*ResponseVoid, error)
	// / Log out current session
	SignOut(context.Context, *RequestSignOut) (*ResponseVoid, error)
	// / Deprecated
	SignInObsolete(context.Context, *RequestSignInObsolete) (*ResponseAuth, error)
	// / Deprecated
	SignUpObsolete(context.Context, *RequestSignUpObsolete) (*ResponseAuth, error)
	// / Deprecated
	SendAuthCodeObsolete(context.Context, *RequestSendAuthCodeObsolete) (*ResponseSendAuthCodeObsolete, error)
	// / Deprecated
	SendAuthCallObsolete(context.Context, *RequestSendAuthCallObsolete) (*ResponseVoid, error)
}

func RegisterAuthenticationServer(s *grpc.Server, srv AuthenticationServer) {
	s.RegisterService(&_Authentication_serviceDesc, srv)
}

func _Authentication_StartPhoneAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStartPhoneAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).StartPhoneAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/StartPhoneAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).StartPhoneAuth(ctx, req.(*RequestStartPhoneAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_SendCodeByPhoneCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSendCodeByPhoneCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).SendCodeByPhoneCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/SendCodeByPhoneCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).SendCodeByPhoneCall(ctx, req.(*RequestSendCodeByPhoneCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_StartEmailAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStartEmailAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).StartEmailAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/StartEmailAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).StartEmailAuth(ctx, req.(*RequestStartEmailAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_StartAnonymousAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStartAnonymousAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).StartAnonymousAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/StartAnonymousAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).StartAnonymousAuth(ctx, req.(*RequestStartAnonymousAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_StartTokenAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStartTokenAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).StartTokenAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/StartTokenAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).StartTokenAuth(ctx, req.(*RequestStartTokenAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_StartUsernameAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStartUsernameAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).StartUsernameAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/StartUsernameAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).StartUsernameAuth(ctx, req.(*RequestStartUsernameAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ValidateCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestValidateCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ValidateCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/ValidateCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ValidateCode(ctx, req.(*RequestValidateCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ResendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestResendCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ResendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/ResendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ResendCode(ctx, req.(*RequestResendCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ValidatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestValidatePassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ValidatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/ValidatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ValidatePassword(ctx, req.(*RequestValidatePassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_GetOAuth2Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetOAuth2Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).GetOAuth2Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/GetOAuth2Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).GetOAuth2Params(ctx, req.(*RequestGetOAuth2Params))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_CompleteOAuth2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCompleteOAuth2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).CompleteOAuth2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/CompleteOAuth2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).CompleteOAuth2(ctx, req.(*RequestCompleteOAuth2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).SignUp(ctx, req.(*RequestSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_GetAuthSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetAuthSessions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).GetAuthSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/GetAuthSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).GetAuthSessions(ctx, req.(*RequestGetAuthSessions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_TerminateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTerminateSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).TerminateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/TerminateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).TerminateSession(ctx, req.(*RequestTerminateSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_TerminateAllSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTerminateAllSessions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).TerminateAllSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/TerminateAllSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).TerminateAllSessions(ctx, req.(*RequestTerminateAllSessions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSignOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/SignOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).SignOut(ctx, req.(*RequestSignOut))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_SignInObsolete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSignInObsolete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).SignInObsolete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/SignInObsolete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).SignInObsolete(ctx, req.(*RequestSignInObsolete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_SignUpObsolete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSignUpObsolete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).SignUpObsolete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/SignUpObsolete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).SignUpObsolete(ctx, req.(*RequestSignUpObsolete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_SendAuthCodeObsolete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSendAuthCodeObsolete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).SendAuthCodeObsolete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/SendAuthCodeObsolete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).SendAuthCodeObsolete(ctx, req.(*RequestSendAuthCodeObsolete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_SendAuthCallObsolete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSendAuthCallObsolete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).SendAuthCallObsolete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/SendAuthCallObsolete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).SendAuthCallObsolete(ctx, req.(*RequestSendAuthCallObsolete))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authentication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Authentication",
	HandlerType: (*AuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartPhoneAuth",
			Handler:    _Authentication_StartPhoneAuth_Handler,
		},
		{
			MethodName: "SendCodeByPhoneCall",
			Handler:    _Authentication_SendCodeByPhoneCall_Handler,
		},
		{
			MethodName: "StartEmailAuth",
			Handler:    _Authentication_StartEmailAuth_Handler,
		},
		{
			MethodName: "StartAnonymousAuth",
			Handler:    _Authentication_StartAnonymousAuth_Handler,
		},
		{
			MethodName: "StartTokenAuth",
			Handler:    _Authentication_StartTokenAuth_Handler,
		},
		{
			MethodName: "StartUsernameAuth",
			Handler:    _Authentication_StartUsernameAuth_Handler,
		},
		{
			MethodName: "ValidateCode",
			Handler:    _Authentication_ValidateCode_Handler,
		},
		{
			MethodName: "ResendCode",
			Handler:    _Authentication_ResendCode_Handler,
		},
		{
			MethodName: "ValidatePassword",
			Handler:    _Authentication_ValidatePassword_Handler,
		},
		{
			MethodName: "GetOAuth2Params",
			Handler:    _Authentication_GetOAuth2Params_Handler,
		},
		{
			MethodName: "CompleteOAuth2",
			Handler:    _Authentication_CompleteOAuth2_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _Authentication_SignUp_Handler,
		},
		{
			MethodName: "GetAuthSessions",
			Handler:    _Authentication_GetAuthSessions_Handler,
		},
		{
			MethodName: "TerminateSession",
			Handler:    _Authentication_TerminateSession_Handler,
		},
		{
			MethodName: "TerminateAllSessions",
			Handler:    _Authentication_TerminateAllSessions_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _Authentication_SignOut_Handler,
		},
		{
			MethodName: "SignInObsolete",
			Handler:    _Authentication_SignInObsolete_Handler,
		},
		{
			MethodName: "SignUpObsolete",
			Handler:    _Authentication_SignUpObsolete_Handler,
		},
		{
			MethodName: "SendAuthCodeObsolete",
			Handler:    _Authentication_SendAuthCodeObsolete_Handler,
		},
		{
			MethodName: "SendAuthCallObsolete",
			Handler:    _Authentication_SendAuthCallObsolete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authentication.proto",
}

func (m *RequestStartPhoneAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStartPhoneAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PhoneNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.PhoneNumber))
	}
	if m.AppId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
	}
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	if len(m.DeviceHash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceHash)))
		i += copy(dAtA[i:], m.DeviceHash)
	}
	if len(m.DeviceTitle) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceTitle)))
		i += copy(dAtA[i:], m.DeviceTitle)
	}
	if m.TimeZone != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.TimeZone.Size()))
		n1, err := m.TimeZone.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ResponseStartPhoneAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseStartPhoneAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransactionHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i += copy(dAtA[i:], m.TransactionHash)
	}
	if m.IsRegistered {
		dAtA[i] = 0x10
		i++
		if m.IsRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ActivationType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.ActivationType))
	}
	return i, nil
}

func (m *RequestSendCodeByPhoneCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSendCodeByPhoneCall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransactionHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i += copy(dAtA[i:], m.TransactionHash)
	}
	return i, nil
}

func (m *RequestStartEmailAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStartEmailAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if m.AppId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
	}
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	if len(m.DeviceHash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceHash)))
		i += copy(dAtA[i:], m.DeviceHash)
	}
	if len(m.DeviceTitle) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceTitle)))
		i += copy(dAtA[i:], m.DeviceTitle)
	}
	if m.TimeZone != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.TimeZone.Size()))
		n2, err := m.TimeZone.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ResponseStartEmailAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseStartEmailAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransactionHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i += copy(dAtA[i:], m.TransactionHash)
	}
	if m.IsRegistered {
		dAtA[i] = 0x10
		i++
		if m.IsRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ActivationType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.ActivationType))
	}
	return i, nil
}

func (m *RequestStartAnonymousAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStartAnonymousAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.AppId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
	}
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	if len(m.DeviceHash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceHash)))
		i += copy(dAtA[i:], m.DeviceHash)
	}
	if len(m.DeviceTitle) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceTitle)))
		i += copy(dAtA[i:], m.DeviceTitle)
	}
	if m.TimeZone != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.TimeZone.Size()))
		n3, err := m.TimeZone.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *RequestStartTokenAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStartTokenAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.AppId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
	}
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	if len(m.DeviceHash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceHash)))
		i += copy(dAtA[i:], m.DeviceHash)
	}
	if len(m.DeviceTitle) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceTitle)))
		i += copy(dAtA[i:], m.DeviceTitle)
	}
	if m.TimeZone != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.TimeZone.Size()))
		n4, err := m.TimeZone.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *RequestStartUsernameAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStartUsernameAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.AppId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
	}
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	if len(m.DeviceHash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceHash)))
		i += copy(dAtA[i:], m.DeviceHash)
	}
	if len(m.DeviceTitle) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceTitle)))
		i += copy(dAtA[i:], m.DeviceTitle)
	}
	if m.TimeZone != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.TimeZone.Size()))
		n5, err := m.TimeZone.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ResponseStartUsernameAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseStartUsernameAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransactionHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i += copy(dAtA[i:], m.TransactionHash)
	}
	if m.IsRegistered {
		dAtA[i] = 0x10
		i++
		if m.IsRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RequestValidateCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestValidateCode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransactionHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i += copy(dAtA[i:], m.TransactionHash)
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	return i, nil
}

func (m *RequestResendCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestResendCode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransactionHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i += copy(dAtA[i:], m.TransactionHash)
	}
	return i, nil
}

func (m *RequestValidatePassword) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestValidatePassword) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransactionHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i += copy(dAtA[i:], m.TransactionHash)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *RequestGetOAuth2Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetOAuth2Params) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransactionHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i += copy(dAtA[i:], m.TransactionHash)
	}
	if len(m.RedirectUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.RedirectUrl)))
		i += copy(dAtA[i:], m.RedirectUrl)
	}
	return i, nil
}

func (m *ResponseGetOAuth2Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetOAuth2Params) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AuthUrl) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.AuthUrl)))
		i += copy(dAtA[i:], m.AuthUrl)
	}
	return i, nil
}

func (m *RequestCompleteOAuth2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCompleteOAuth2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransactionHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i += copy(dAtA[i:], m.TransactionHash)
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	return i, nil
}

func (m *RequestSignUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSignUp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransactionHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i += copy(dAtA[i:], m.TransactionHash)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Sex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.Sex))
	}
	if m.Password != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.Password.Size()))
		n6, err := m.Password.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *ResponseAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.User.Size()))
		n7, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Config != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.Config.Size()))
		n8, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.ConfigHash != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.ConfigHash.Size()))
		n9, err := m.ConfigHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *AuthSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthSession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.Id))
	}
	if m.AuthHolder != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AuthHolder))
	}
	if m.AppId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
	}
	if len(m.AppTitle) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.AppTitle)))
		i += copy(dAtA[i:], m.AppTitle)
	}
	if len(m.DeviceTitle) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceTitle)))
		i += copy(dAtA[i:], m.DeviceTitle)
	}
	if m.AuthTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AuthTime))
	}
	if len(m.AuthLocation) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.AuthLocation)))
		i += copy(dAtA[i:], m.AuthLocation)
	}
	if m.Latitude != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.Latitude.Size()))
		n10, err := m.Latitude.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Longitude != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.Longitude.Size()))
		n11, err := m.Longitude.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *RequestGetAuthSessions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetAuthSessions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResponseGetAuthSessions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetAuthSessions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserAuths) > 0 {
		for _, msg := range m.UserAuths {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuthentication(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestTerminateSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestTerminateSession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *RequestTerminateAllSessions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestTerminateAllSessions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RequestSignOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSignOut) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ForceReloadField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceReloadField) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		nn12, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn12
	}
	return i, nil
}

func (m *ForceReloadField_ForceReloadDialogs) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForceReloadDialogs != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.ForceReloadDialogs.Size()))
		n13, err := m.ForceReloadDialogs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *ForceReloadField_ForceReloadContacts) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForceReloadContacts != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.ForceReloadContacts.Size()))
		n14, err := m.ForceReloadContacts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *ForceReloadField_ForceReloadHistory) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForceReloadHistory != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.ForceReloadHistory.Size()))
		n15, err := m.ForceReloadHistory.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *ForceReloadDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceReloadDialogs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ForceReloadContacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceReloadContacts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ForceReloadHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceReloadHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.Peer.Size()))
		n16, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *UpdateForceReloadState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateForceReloadState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, msg := range m.Fields {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuthentication(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestSignInObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSignInObsolete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PhoneNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.PhoneNumber))
	}
	if len(m.SmsHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.SmsHash)))
		i += copy(dAtA[i:], m.SmsHash)
	}
	if len(m.SmsCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.SmsCode)))
		i += copy(dAtA[i:], m.SmsCode)
	}
	if len(m.DeviceHash) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceHash)))
		i += copy(dAtA[i:], m.DeviceHash)
	}
	if len(m.DeviceTitle) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceTitle)))
		i += copy(dAtA[i:], m.DeviceTitle)
	}
	if m.AppId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
	}
	if len(m.AppKey) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.AppKey)))
		i += copy(dAtA[i:], m.AppKey)
	}
	return i, nil
}

func (m *RequestSignUpObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSignUpObsolete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PhoneNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.PhoneNumber))
	}
	if len(m.SmsHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.SmsHash)))
		i += copy(dAtA[i:], m.SmsHash)
	}
	if len(m.SmsCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.SmsCode)))
		i += copy(dAtA[i:], m.SmsCode)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.DeviceHash) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceHash)))
		i += copy(dAtA[i:], m.DeviceHash)
	}
	if len(m.DeviceTitle) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceTitle)))
		i += copy(dAtA[i:], m.DeviceTitle)
	}
	if m.AppId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
	}
	if len(m.AppKey) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.AppKey)))
		i += copy(dAtA[i:], m.AppKey)
	}
	if m.IsSilent {
		dAtA[i] = 0x58
		i++
		if m.IsSilent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RequestSendAuthCodeObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSendAuthCodeObsolete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PhoneNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.PhoneNumber))
	}
	if m.AppId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
	}
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	return i, nil
}

func (m *ResponseSendAuthCodeObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSendAuthCodeObsolete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SmsHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.SmsHash)))
		i += copy(dAtA[i:], m.SmsHash)
	}
	if m.IsRegistered {
		dAtA[i] = 0x10
		i++
		if m.IsRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RequestSendAuthCallObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSendAuthCallObsolete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PhoneNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.PhoneNumber))
	}
	if len(m.SmsHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.SmsHash)))
		i += copy(dAtA[i:], m.SmsHash)
	}
	if m.AppId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
	}
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	return i, nil
}

func encodeFixed64Authentication(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Authentication(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAuthentication(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RequestStartPhoneAuth) Size() (n int) {
	var l int
	_ = l
	if m.PhoneNumber != 0 {
		n += 1 + sovAuthentication(uint64(m.PhoneNumber))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceTitle)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.TimeZone != nil {
		l = m.TimeZone.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovAuthentication(uint64(l))
		}
	}
	return n
}

func (m *ResponseStartPhoneAuth) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.IsRegistered {
		n += 2
	}
	if m.ActivationType != 0 {
		n += 1 + sovAuthentication(uint64(m.ActivationType))
	}
	return n
}

func (m *RequestSendCodeByPhoneCall) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RequestStartEmailAuth) Size() (n int) {
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceTitle)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.TimeZone != nil {
		l = m.TimeZone.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovAuthentication(uint64(l))
		}
	}
	return n
}

func (m *ResponseStartEmailAuth) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.IsRegistered {
		n += 2
	}
	if m.ActivationType != 0 {
		n += 1 + sovAuthentication(uint64(m.ActivationType))
	}
	return n
}

func (m *RequestStartAnonymousAuth) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceTitle)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.TimeZone != nil {
		l = m.TimeZone.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovAuthentication(uint64(l))
		}
	}
	return n
}

func (m *RequestStartTokenAuth) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceTitle)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.TimeZone != nil {
		l = m.TimeZone.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovAuthentication(uint64(l))
		}
	}
	return n
}

func (m *RequestStartUsernameAuth) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceTitle)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.TimeZone != nil {
		l = m.TimeZone.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovAuthentication(uint64(l))
		}
	}
	return n
}

func (m *ResponseStartUsernameAuth) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.IsRegistered {
		n += 2
	}
	return n
}

func (m *RequestValidateCode) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RequestResendCode) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RequestValidatePassword) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RequestGetOAuth2Params) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.RedirectUrl)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *ResponseGetOAuth2Params) Size() (n int) {
	var l int
	_ = l
	l = len(m.AuthUrl)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RequestCompleteOAuth2) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RequestSignUp) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovAuthentication(uint64(m.Sex))
	}
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *ResponseAuth) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.ConfigHash != nil {
		l = m.ConfigHash.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *AuthSession) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuthentication(uint64(m.Id))
	}
	if m.AuthHolder != 0 {
		n += 1 + sovAuthentication(uint64(m.AuthHolder))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.AppTitle)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceTitle)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.AuthTime != 0 {
		n += 1 + sovAuthentication(uint64(m.AuthTime))
	}
	l = len(m.AuthLocation)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.Latitude != nil {
		l = m.Latitude.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.Longitude != nil {
		l = m.Longitude.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RequestGetAuthSessions) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ResponseGetAuthSessions) Size() (n int) {
	var l int
	_ = l
	if len(m.UserAuths) > 0 {
		for _, e := range m.UserAuths {
			l = e.Size()
			n += 1 + l + sovAuthentication(uint64(l))
		}
	}
	return n
}

func (m *RequestTerminateSession) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuthentication(uint64(m.Id))
	}
	return n
}

func (m *RequestTerminateAllSessions) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RequestSignOut) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ForceReloadField) Size() (n int) {
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *ForceReloadField_ForceReloadDialogs) Size() (n int) {
	var l int
	_ = l
	if m.ForceReloadDialogs != nil {
		l = m.ForceReloadDialogs.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}
func (m *ForceReloadField_ForceReloadContacts) Size() (n int) {
	var l int
	_ = l
	if m.ForceReloadContacts != nil {
		l = m.ForceReloadContacts.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}
func (m *ForceReloadField_ForceReloadHistory) Size() (n int) {
	var l int
	_ = l
	if m.ForceReloadHistory != nil {
		l = m.ForceReloadHistory.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}
func (m *ForceReloadDialogs) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ForceReloadContacts) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ForceReloadHistory) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *UpdateForceReloadState) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovAuthentication(uint64(l))
		}
	}
	return n
}

func (m *RequestSignInObsolete) Size() (n int) {
	var l int
	_ = l
	if m.PhoneNumber != 0 {
		n += 1 + sovAuthentication(uint64(m.PhoneNumber))
	}
	l = len(m.SmsHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.SmsCode)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceTitle)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RequestSignUpObsolete) Size() (n int) {
	var l int
	_ = l
	if m.PhoneNumber != 0 {
		n += 1 + sovAuthentication(uint64(m.PhoneNumber))
	}
	l = len(m.SmsHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.SmsCode)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceTitle)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.IsSilent {
		n += 2
	}
	return n
}

func (m *RequestSendAuthCodeObsolete) Size() (n int) {
	var l int
	_ = l
	if m.PhoneNumber != 0 {
		n += 1 + sovAuthentication(uint64(m.PhoneNumber))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *ResponseSendAuthCodeObsolete) Size() (n int) {
	var l int
	_ = l
	l = len(m.SmsHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.IsRegistered {
		n += 2
	}
	return n
}

func (m *RequestSendAuthCallObsolete) Size() (n int) {
	var l int
	_ = l
	if m.PhoneNumber != 0 {
		n += 1 + sovAuthentication(uint64(m.PhoneNumber))
	}
	l = len(m.SmsHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func sovAuthentication(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAuthentication(x uint64) (n int) {
	return sovAuthentication(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestStartPhoneAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestStartPhoneAuth{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`DeviceHash:` + fmt.Sprintf("%v", this.DeviceHash) + `,`,
		`DeviceTitle:` + fmt.Sprintf("%v", this.DeviceTitle) + `,`,
		`TimeZone:` + strings.Replace(fmt.Sprintf("%v", this.TimeZone), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseStartPhoneAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseStartPhoneAuth{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`IsRegistered:` + fmt.Sprintf("%v", this.IsRegistered) + `,`,
		`ActivationType:` + fmt.Sprintf("%v", this.ActivationType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSendCodeByPhoneCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSendCodeByPhoneCall{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestStartEmailAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestStartEmailAuth{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`DeviceHash:` + fmt.Sprintf("%v", this.DeviceHash) + `,`,
		`DeviceTitle:` + fmt.Sprintf("%v", this.DeviceTitle) + `,`,
		`TimeZone:` + strings.Replace(fmt.Sprintf("%v", this.TimeZone), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseStartEmailAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseStartEmailAuth{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`IsRegistered:` + fmt.Sprintf("%v", this.IsRegistered) + `,`,
		`ActivationType:` + fmt.Sprintf("%v", this.ActivationType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestStartAnonymousAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestStartAnonymousAuth{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`DeviceHash:` + fmt.Sprintf("%v", this.DeviceHash) + `,`,
		`DeviceTitle:` + fmt.Sprintf("%v", this.DeviceTitle) + `,`,
		`TimeZone:` + strings.Replace(fmt.Sprintf("%v", this.TimeZone), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestStartTokenAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestStartTokenAuth{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`DeviceHash:` + fmt.Sprintf("%v", this.DeviceHash) + `,`,
		`DeviceTitle:` + fmt.Sprintf("%v", this.DeviceTitle) + `,`,
		`TimeZone:` + strings.Replace(fmt.Sprintf("%v", this.TimeZone), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestStartUsernameAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestStartUsernameAuth{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`DeviceHash:` + fmt.Sprintf("%v", this.DeviceHash) + `,`,
		`DeviceTitle:` + fmt.Sprintf("%v", this.DeviceTitle) + `,`,
		`TimeZone:` + strings.Replace(fmt.Sprintf("%v", this.TimeZone), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseStartUsernameAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseStartUsernameAuth{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`IsRegistered:` + fmt.Sprintf("%v", this.IsRegistered) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestValidateCode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestValidateCode{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestResendCode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestResendCode{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestValidatePassword) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestValidatePassword{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetOAuth2Params) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetOAuth2Params{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`RedirectUrl:` + fmt.Sprintf("%v", this.RedirectUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetOAuth2Params) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseGetOAuth2Params{`,
		`AuthUrl:` + fmt.Sprintf("%v", this.AuthUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCompleteOAuth2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCompleteOAuth2{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSignUp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSignUp{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`Password:` + strings.Replace(fmt.Sprintf("%v", this.Password), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseAuth{`,
		`User:` + strings.Replace(fmt.Sprintf("%v", this.User), "User", "User", 1) + `,`,
		`Config:` + strings.Replace(fmt.Sprintf("%v", this.Config), "Config", "Config", 1) + `,`,
		`ConfigHash:` + strings.Replace(fmt.Sprintf("%v", this.ConfigHash), "Int64Value", "google_protobuf.Int64Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthSession) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthSession{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`AuthHolder:` + fmt.Sprintf("%v", this.AuthHolder) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`AppTitle:` + fmt.Sprintf("%v", this.AppTitle) + `,`,
		`DeviceTitle:` + fmt.Sprintf("%v", this.DeviceTitle) + `,`,
		`AuthTime:` + fmt.Sprintf("%v", this.AuthTime) + `,`,
		`AuthLocation:` + fmt.Sprintf("%v", this.AuthLocation) + `,`,
		`Latitude:` + strings.Replace(fmt.Sprintf("%v", this.Latitude), "DoubleValue", "google_protobuf.DoubleValue", 1) + `,`,
		`Longitude:` + strings.Replace(fmt.Sprintf("%v", this.Longitude), "DoubleValue", "google_protobuf.DoubleValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetAuthSessions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetAuthSessions{`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetAuthSessions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseGetAuthSessions{`,
		`UserAuths:` + strings.Replace(fmt.Sprintf("%v", this.UserAuths), "AuthSession", "AuthSession", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestTerminateSession) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestTerminateSession{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestTerminateAllSessions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestTerminateAllSessions{`,
		`}`,
	}, "")
	return s
}
func (this *RequestSignOut) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSignOut{`,
		`}`,
	}, "")
	return s
}
func (this *ForceReloadField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceReloadField{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForceReloadField_ForceReloadDialogs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceReloadField_ForceReloadDialogs{`,
		`ForceReloadDialogs:` + strings.Replace(fmt.Sprintf("%v", this.ForceReloadDialogs), "ForceReloadDialogs", "ForceReloadDialogs", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForceReloadField_ForceReloadContacts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceReloadField_ForceReloadContacts{`,
		`ForceReloadContacts:` + strings.Replace(fmt.Sprintf("%v", this.ForceReloadContacts), "ForceReloadContacts", "ForceReloadContacts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForceReloadField_ForceReloadHistory) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceReloadField_ForceReloadHistory{`,
		`ForceReloadHistory:` + strings.Replace(fmt.Sprintf("%v", this.ForceReloadHistory), "ForceReloadHistory", "ForceReloadHistory", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForceReloadDialogs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceReloadDialogs{`,
		`}`,
	}, "")
	return s
}
func (this *ForceReloadContacts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceReloadContacts{`,
		`}`,
	}, "")
	return s
}
func (this *ForceReloadHistory) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceReloadHistory{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateForceReloadState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateForceReloadState{`,
		`Fields:` + strings.Replace(fmt.Sprintf("%v", this.Fields), "ForceReloadField", "ForceReloadField", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSignInObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSignInObsolete{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`SmsHash:` + fmt.Sprintf("%v", this.SmsHash) + `,`,
		`SmsCode:` + fmt.Sprintf("%v", this.SmsCode) + `,`,
		`DeviceHash:` + fmt.Sprintf("%v", this.DeviceHash) + `,`,
		`DeviceTitle:` + fmt.Sprintf("%v", this.DeviceTitle) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`AppKey:` + fmt.Sprintf("%v", this.AppKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSignUpObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSignUpObsolete{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`SmsHash:` + fmt.Sprintf("%v", this.SmsHash) + `,`,
		`SmsCode:` + fmt.Sprintf("%v", this.SmsCode) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DeviceHash:` + fmt.Sprintf("%v", this.DeviceHash) + `,`,
		`DeviceTitle:` + fmt.Sprintf("%v", this.DeviceTitle) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`AppKey:` + fmt.Sprintf("%v", this.AppKey) + `,`,
		`IsSilent:` + fmt.Sprintf("%v", this.IsSilent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSendAuthCodeObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSendAuthCodeObsolete{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSendAuthCodeObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseSendAuthCodeObsolete{`,
		`SmsHash:` + fmt.Sprintf("%v", this.SmsHash) + `,`,
		`IsRegistered:` + fmt.Sprintf("%v", this.IsRegistered) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSendAuthCallObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSendAuthCallObsolete{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`SmsHash:` + fmt.Sprintf("%v", this.SmsHash) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAuthentication(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestStartPhoneAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStartPhoneAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStartPhoneAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			m.PhoneNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhoneNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceHash = append(m.DeviceHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DeviceHash == nil {
				m.DeviceHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeZone == nil {
				m.TimeZone = &google_protobuf.StringValue{}
			}
			if err := m.TimeZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseStartPhoneAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseStartPhoneAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseStartPhoneAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistered = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationType", wireType)
			}
			m.ActivationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationType |= (PhoneActivationType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSendCodeByPhoneCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSendCodeByPhoneCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSendCodeByPhoneCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestStartEmailAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStartEmailAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStartEmailAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceHash = append(m.DeviceHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DeviceHash == nil {
				m.DeviceHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeZone == nil {
				m.TimeZone = &google_protobuf.StringValue{}
			}
			if err := m.TimeZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseStartEmailAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseStartEmailAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseStartEmailAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistered = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationType", wireType)
			}
			m.ActivationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationType |= (EmailActivationType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestStartAnonymousAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStartAnonymousAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStartAnonymousAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceHash = append(m.DeviceHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DeviceHash == nil {
				m.DeviceHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeZone == nil {
				m.TimeZone = &google_protobuf.StringValue{}
			}
			if err := m.TimeZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestStartTokenAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStartTokenAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStartTokenAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceHash = append(m.DeviceHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DeviceHash == nil {
				m.DeviceHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeZone == nil {
				m.TimeZone = &google_protobuf.StringValue{}
			}
			if err := m.TimeZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestStartUsernameAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStartUsernameAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStartUsernameAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceHash = append(m.DeviceHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DeviceHash == nil {
				m.DeviceHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeZone == nil {
				m.TimeZone = &google_protobuf.StringValue{}
			}
			if err := m.TimeZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseStartUsernameAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseStartUsernameAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseStartUsernameAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistered = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestValidateCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestValidateCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestValidateCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestResendCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestResendCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestResendCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestValidatePassword) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestValidatePassword: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestValidatePassword: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetOAuth2Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetOAuth2Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetOAuth2Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetOAuth2Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetOAuth2Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetOAuth2Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCompleteOAuth2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCompleteOAuth2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCompleteOAuth2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSignUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSignUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSignUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (Sex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Password == nil {
				m.Password = &google_protobuf.StringValue{}
			}
			if err := m.Password.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigHash == nil {
				m.ConfigHash = &google_protobuf.Int64Value{}
			}
			if err := m.ConfigHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthHolder", wireType)
			}
			m.AuthHolder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthHolder |= (AuthHolder(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthTime", wireType)
			}
			m.AuthTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Latitude == nil {
				m.Latitude = &google_protobuf.DoubleValue{}
			}
			if err := m.Latitude.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Longitude == nil {
				m.Longitude = &google_protobuf.DoubleValue{}
			}
			if err := m.Longitude.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetAuthSessions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetAuthSessions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetAuthSessions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetAuthSessions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetAuthSessions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetAuthSessions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAuths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAuths = append(m.UserAuths, &AuthSession{})
			if err := m.UserAuths[len(m.UserAuths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestTerminateSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestTerminateSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestTerminateSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestTerminateAllSessions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestTerminateAllSessions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestTerminateAllSessions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSignOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSignOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSignOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceReloadField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceReloadField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceReloadField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceReloadDialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForceReloadDialogs{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ForceReloadField_ForceReloadDialogs{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceReloadContacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForceReloadContacts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ForceReloadField_ForceReloadContacts{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceReloadHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForceReloadHistory{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ForceReloadField_ForceReloadHistory{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceReloadDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceReloadDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceReloadDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceReloadContacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceReloadContacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceReloadContacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceReloadHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceReloadHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceReloadHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateForceReloadState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateForceReloadState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateForceReloadState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &ForceReloadField{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSignInObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSignInObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSignInObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			m.PhoneNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhoneNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmsCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmsCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceHash = append(m.DeviceHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DeviceHash == nil {
				m.DeviceHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSignUpObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSignUpObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSignUpObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			m.PhoneNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhoneNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmsCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmsCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceHash = append(m.DeviceHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DeviceHash == nil {
				m.DeviceHash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSilent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSilent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSendAuthCodeObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSendAuthCodeObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSendAuthCodeObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			m.PhoneNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhoneNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSendAuthCodeObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSendAuthCodeObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSendAuthCodeObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistered = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSendAuthCallObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSendAuthCallObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSendAuthCallObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			m.PhoneNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhoneNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthentication(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAuthentication
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAuthentication
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAuthentication(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAuthentication = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthentication   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("authentication.proto", fileDescriptorAuthentication) }

var fileDescriptorAuthentication = []byte{
	// 2267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x59, 0x5f, 0x6f, 0xdb, 0xd6,
	0x15, 0x37, 0x25, 0x5b, 0x96, 0x8f, 0x1c, 0xc7, 0xa1, 0x1d, 0x57, 0x96, 0x1d, 0x45, 0xa5, 0xb3,
	0xc5, 0x71, 0x53, 0x29, 0x51, 0xdb, 0x14, 0xc8, 0x80, 0x05, 0xfe, 0xa3, 0x54, 0x46, 0x32, 0xcb,
	0x90, 0x64, 0x17, 0xdd, 0x1e, 0xb4, 0x6b, 0xf1, 0x5a, 0xe6, 0x4a, 0x91, 0x1c, 0x2f, 0x95, 0xc6,
	0x03, 0x36, 0x0c, 0xc5, 0xb0, 0x02, 0x79, 0x28, 0x8a, 0x6d, 0xe8, 0x43, 0xf7, 0x30, 0xec, 0x65,
	0xd8, 0x57, 0xd8, 0x37, 0xd8, 0xcb, 0x80, 0x02, 0x7b, 0xd9, 0xe3, 0xa2, 0xfd, 0xc1, 0xd0, 0xa7,
	0x7e, 0x83, 0x0d, 0xf7, 0x92, 0x94, 0xc8, 0xab, 0xcb, 0x50, 0x76, 0x93, 0xae, 0x0f, 0x79, 0xb2,
	0xc9, 0xf3, 0xbb, 0xe7, 0xfc, 0xee, 0x39, 0x3f, 0x9e, 0xfb, 0x47, 0xb0, 0x88, 0x7a, 0xce, 0x09,
	0x36, 0x1c, 0xad, 0x8d, 0x1c, 0xcd, 0x34, 0x8a, 0x96, 0x6d, 0x3a, 0xa6, 0x9c, 0x52, 0x35, 0xa4,
	0x9b, 0x9d, 0x5c, 0xbe, 0x63, 0x9a, 0x1d, 0x1d, 0x97, 0xd8, 0xdb, 0xa3, 0xde, 0x71, 0xe9, 0x03,
	0x1b, 0x59, 0x16, 0xb6, 0x89, 0x8b, 0xcb, 0xad, 0x7a, 0x76, 0x64, 0x69, 0x25, 0x64, 0x18, 0xa6,
	0xc3, 0x9c, 0xf8, 0xd6, 0x4b, 0x2a, 0x3e, 0xd6, 0x0c, 0x2d, 0xf8, 0x6a, 0xa1, 0xab, 0x91, 0x36,
	0xd6, 0x75, 0x64, 0x60, 0xb3, 0xe7, 0xbf, 0xcc, 0x58, 0x78, 0xe8, 0x32, 0xd3, 0x23, 0xc3, 0x87,
	0xcb, 0xa4, 0x8d, 0x74, 0x64, 0x1d, 0x95, 0xbc, 0xbf, 0xee, 0x6b, 0xe5, 0x77, 0x49, 0xb8, 0x5c,
	0xc7, 0x3f, 0xee, 0x61, 0xe2, 0x34, 0x1c, 0x64, 0x3b, 0xfb, 0x27, 0xa6, 0x81, 0x37, 0x7b, 0xce,
	0x89, 0x7c, 0x0b, 0x66, 0x2d, 0xfa, 0xd0, 0x32, 0x7a, 0xdd, 0x23, 0x6c, 0x67, 0xa5, 0x82, 0xb4,
	0x9e, 0xdc, 0xba, 0xf0, 0xe4, 0x8b, 0x5b, 0x33, 0x30, 0xfd, 0x48, 0x23, 0xda, 0x91, 0x8e, 0xeb,
	0x19, 0x06, 0xd9, 0x63, 0x08, 0x79, 0x0d, 0x52, 0xc8, 0xb2, 0x5a, 0x9a, 0x9a, 0x4d, 0x14, 0xa4,
	0xf5, 0xa9, 0xad, 0xd9, 0x27, 0x5f, 0xdc, 0x4a, 0x43, 0xea, 0x44, 0x53, 0x55, 0x6c, 0xd4, 0xa7,
	0x90, 0x65, 0xed, 0xaa, 0xf2, 0xb7, 0x60, 0x1a, 0x59, 0x5a, 0xeb, 0x7d, 0x7c, 0x9a, 0x4d, 0x16,
	0xa4, 0xf5, 0x19, 0x0e, 0x95, 0x42, 0x96, 0xf6, 0x00, 0x9f, 0xca, 0x45, 0xc8, 0xa8, 0xf8, 0x91,
	0xd6, 0xc6, 0xad, 0x13, 0x44, 0x4e, 0xb2, 0x93, 0x05, 0x69, 0x7d, 0x96, 0x0f, 0x0e, 0x2e, 0xa2,
	0x8a, 0x08, 0x63, 0xeb, 0xe1, 0x1d, 0xcd, 0xd1, 0x71, 0x76, 0x8a, 0xf9, 0xe6, 0xd9, 0xba, 0x90,
	0x26, 0x45, 0xc8, 0x55, 0x98, 0x71, 0xb4, 0x2e, 0x6e, 0xfd, 0xc4, 0x34, 0x70, 0x36, 0x55, 0x90,
	0xd6, 0x33, 0xe5, 0xd5, 0xa2, 0x5b, 0x84, 0xa2, 0x5f, 0xa4, 0x62, 0xc3, 0xb1, 0x35, 0xa3, 0x73,
	0x88, 0xf4, 0x1e, 0xe6, 0x9d, 0xa5, 0xe9, 0xe8, 0xef, 0x9b, 0x06, 0x96, 0xbf, 0x0b, 0x0b, 0x96,
	0x8d, 0x8f, 0xb1, 0x6d, 0x63, 0xb5, 0xa5, 0x23, 0xa3, 0xd3, 0x43, 0x1d, 0x4c, 0xb2, 0xd3, 0x85,
	0xe4, 0x28, 0x05, 0x79, 0x80, 0x7c, 0xe8, 0x03, 0xef, 0xae, 0xf6, 0xef, 0x2d, 0xc3, 0x2b, 0x5a,
	0xb7, 0xa8, 0xea, 0x9d, 0x62, 0xc7, 0xb6, 0xda, 0xc5, 0x77, 0x6c, 0xab, 0xed, 0x55, 0x45, 0xf9,
	0x8b, 0x04, 0x4b, 0x75, 0x4c, 0x2c, 0xd3, 0x20, 0x98, 0x2b, 0xd1, 0x0d, 0x98, 0x77, 0x6c, 0x64,
	0x10, 0xd4, 0xa6, 0xc2, 0x70, 0x33, 0x45, 0xcb, 0x34, 0x53, 0xbf, 0x18, 0x78, 0xcf, 0xf2, 0xb3,
	0x06, 0x17, 0x34, 0xd2, 0xb2, 0x71, 0x47, 0x23, 0x0e, 0xb6, 0xb1, 0x5b, 0xa2, 0x74, 0x7d, 0x56,
	0x23, 0xf5, 0xc1, 0x3b, 0x79, 0x07, 0x2e, 0xd2, 0x21, 0x8f, 0x98, 0xf4, 0x5a, 0xce, 0xa9, 0x85,
	0x59, 0x8d, 0xe6, 0xca, 0x2b, 0x45, 0x57, 0xc5, 0x45, 0x37, 0xf6, 0x00, 0xd3, 0x3c, 0xb5, 0x70,
	0x7d, 0x0e, 0x85, 0x9e, 0xef, 0x5e, 0xe9, 0xdf, 0xcb, 0x41, 0x76, 0x74, 0x3a, 0xee, 0x14, 0x14,
	0x02, 0x39, 0x5f, 0x70, 0xd8, 0x50, 0xb7, 0x4d, 0x15, 0x6f, 0x9d, 0x32, 0xb7, 0xdb, 0x48, 0xd7,
	0xe5, 0xb7, 0xa3, 0xa6, 0xe4, 0xeb, 0x44, 0x45, 0x46, 0x07, 0xdb, 0x23, 0x13, 0x8c, 0x49, 0xe2,
	0xaf, 0x38, 0x99, 0x57, 0xba, 0x48, 0xd3, 0x59, 0x0e, 0xd7, 0x60, 0x0a, 0xd3, 0x07, 0x2f, 0x0a,
	0x57, 0x2e, 0xd7, 0xf6, 0x52, 0xd9, 0x5f, 0x8f, 0xb2, 0x87, 0x55, 0xf9, 0xfa, 0x95, 0xed, 0xc6,
	0xfe, 0x4a, 0xca, 0xfe, 0x4d, 0x12, 0x96, 0x83, 0x22, 0xdb, 0x34, 0x4c, 0xe3, 0xb4, 0x6b, 0xf6,
	0x08, 0x9b, 0xd2, 0xab, 0x30, 0x69, 0xa0, 0x2e, 0x16, 0xeb, 0x8c, 0x99, 0x5e, 0xca, 0xec, 0x85,
	0xc8, 0x8c, 0xff, 0xf6, 0x9b, 0xe6, 0xfb, 0xd8, 0xf0, 0xbf, 0x7d, 0x87, 0x3e, 0x44, 0x7c, 0xfb,
	0xcc, 0xf6, 0xb2, 0x28, 0x2f, 0xa4, 0x28, 0xbf, 0x4d, 0x42, 0x36, 0x58, 0x94, 0x03, 0x82, 0x6d,
	0xfa, 0x0d, 0x78, 0x5f, 0x7f, 0xba, 0xe7, 0x3d, 0x8b, 0x4b, 0x33, 0x30, 0xbf, 0xac, 0xce, 0x0b,
	0xa9, 0xce, 0x13, 0x89, 0x76, 0xb2, 0x40, 0x67, 0xe6, 0xca, 0xf3, 0x5c, 0x9b, 0x73, 0x5c, 0x5b,
	0xfd, 0x58, 0x82, 0x05, 0x8f, 0xd8, 0x21, 0xd2, 0x35, 0x15, 0x39, 0x98, 0xee, 0x1a, 0xce, 0xbd,
	0x55, 0x90, 0x0b, 0x30, 0xd9, 0x36, 0x55, 0xcc, 0xb8, 0xf0, 0x5a, 0x60, 0x96, 0x98, 0xec, 0xfc,
	0x08, 0x2e, 0x79, 0xff, 0xd6, 0x31, 0xf1, 0xf6, 0x30, 0x2f, 0x6a, 0xe3, 0xf2, 0x99, 0x04, 0xaf,
	0x70, 0x93, 0xdf, 0x47, 0x84, 0x7c, 0x60, 0xda, 0xea, 0xf9, 0x13, 0xb0, 0x0e, 0x69, 0xcb, 0x73,
	0x12, 0x4e, 0x82, 0x37, 0x60, 0x60, 0x8d, 0x21, 0xf7, 0x7b, 0xb6, 0x80, 0xb3, 0xff, 0xdf, 0xc1,
	0x4e, 0x8d, 0x8a, 0xa3, 0xbc, 0x8f, 0x6c, 0xd4, 0x25, 0xe7, 0xe7, 0x76, 0x0b, 0x66, 0x6d, 0xac,
	0x6a, 0x36, 0x6e, 0x3b, 0xad, 0x9e, 0xad, 0x7b, 0xfc, 0xf8, 0x8f, 0xca, 0x87, 0x1c, 0xd8, 0x7a,
	0x0c, 0xc7, 0x06, 0xcd, 0x9f, 0xab, 0x24, 0x9e, 0xe3, 0x32, 0xa4, 0xe9, 0x91, 0x8d, 0x85, 0x71,
	0xf5, 0x3b, 0x4d, 0x9f, 0xa9, 0xcf, 0x18, 0x49, 0x7e, 0x22, 0x0d, 0x96, 0x94, 0x6d, 0xb3, 0x6b,
	0xe9, 0xd8, 0xc1, 0xae, 0xe7, 0xe7, 0x2c, 0x4a, 0x0f, 0x3c, 0x8e, 0x28, 0xff, 0x2b, 0xc1, 0x05,
	0xbf, 0xa1, 0x6a, 0x1d, 0xe3, 0xc0, 0x3a, 0x3f, 0x15, 0x7f, 0xa7, 0x92, 0x88, 0xde, 0xa9, 0xdc,
	0x84, 0x24, 0xc1, 0x8f, 0xbd, 0x3d, 0x54, 0xc6, 0xdf, 0x43, 0x35, 0xf0, 0x63, 0x1e, 0x4e, 0x61,
	0xf2, 0xfd, 0x80, 0xde, 0x26, 0xc7, 0xe8, 0x7a, 0xe1, 0x4f, 0x72, 0x5c, 0x35, 0xf6, 0x25, 0x98,
	0xf5, 0x2b, 0xc4, 0xfa, 0x54, 0x09, 0x26, 0xe9, 0x3a, 0xc1, 0xe6, 0x91, 0x29, 0xcf, 0xfa, 0x2c,
	0x69, 0x2f, 0xf3, 0x69, 0xb6, 0xcd, 0xae, 0x85, 0xda, 0x4e, 0x9d, 0x01, 0xe5, 0xb7, 0x20, 0xd5,
	0x36, 0x8d, 0x63, 0xad, 0xc3, 0x26, 0x96, 0x29, 0xcf, 0xf9, 0x43, 0xb6, 0xd9, 0x5b, 0x7e, 0x6e,
	0x1e, 0x58, 0x7e, 0x00, 0x19, 0xf7, 0xbf, 0xe1, 0xba, 0x91, 0x29, 0xaf, 0x8c, 0xcc, 0x70, 0xd7,
	0x70, 0xee, 0xbc, 0x29, 0x6c, 0xeb, 0xe0, 0x0e, 0x67, 0xed, 0x20, 0x46, 0x79, 0xff, 0x4a, 0x42,
	0x86, 0x4e, 0xae, 0x81, 0x09, 0xd1, 0x4c, 0x43, 0xbe, 0x02, 0x09, 0x4d, 0x65, 0x65, 0x9d, 0xe2,
	0xbd, 0x26, 0x34, 0x55, 0xde, 0x82, 0x0c, 0x93, 0xf8, 0x89, 0xa9, 0xab, 0x5e, 0x26, 0xe6, 0xca,
	0xb2, 0x3f, 0x2d, 0xea, 0xa8, 0xca, 0x2c, 0x23, 0x8c, 0xd0, 0xc0, 0x24, 0x5f, 0x1b, 0x2c, 0xb1,
	0x49, 0x51, 0x18, 0x6f, 0x8d, 0xdd, 0x80, 0x19, 0x8a, 0x72, 0x57, 0xc2, 0x49, 0xe1, 0xa2, 0x8d,
	0x2c, 0xcb, 0x5d, 0x06, 0xcf, 0xbe, 0x70, 0x52, 0xef, 0x74, 0x1e, 0x74, 0xfd, 0x63, 0x0b, 0xe7,
	0xd4, 0xa8, 0xf7, 0x9e, 0x73, 0xd2, 0xd4, 0xba, 0x58, 0xbe, 0x0d, 0x17, 0x18, 0x56, 0x37, 0xdd,
	0x8b, 0x98, 0xec, 0xb4, 0xa0, 0xcf, 0xcf, 0x52, 0xc8, 0x43, 0x0f, 0x41, 0x05, 0xaa, 0x23, 0x47,
	0x73, 0x7a, 0x2a, 0xce, 0xa6, 0x23, 0x04, 0xba, 0x63, 0xf6, 0x8e, 0x74, 0x2c, 0x14, 0xa8, 0x3f,
	0x96, 0xae, 0xef, 0xba, 0x69, 0x74, 0x5c, 0x47, 0x33, 0x67, 0x76, 0x34, 0x1c, 0xac, 0xdc, 0x09,
	0x76, 0xd6, 0x40, 0xc1, 0xe3, 0x56, 0x6e, 0x3d, 0xd4, 0xee, 0x82, 0x03, 0xe5, 0x32, 0x00, 0x55,
	0x79, 0x8b, 0xce, 0x9c, 0x64, 0xa5, 0x42, 0x72, 0x3d, 0x53, 0x5e, 0x08, 0x4a, 0xc1, 0x43, 0xd6,
	0x67, 0x28, 0x8c, 0xbe, 0x20, 0x71, 0x6a, 0x3c, 0x1c, 0x2c, 0x4e, 0x4d, 0x6c, 0x77, 0x35, 0x03,
	0x39, 0x78, 0x3c, 0x61, 0xc6, 0xcc, 0xe2, 0x3b, 0xb0, 0xc2, 0xfb, 0xdd, 0xd4, 0xf5, 0x31, 0x53,
	0x50, 0x84, 0xb9, 0x40, 0x23, 0xac, 0xf5, 0x9c, 0x18, 0xfc, 0x47, 0x09, 0x98, 0xbf, 0x6f, 0xda,
	0x6d, 0x5c, 0xc7, 0xba, 0x89, 0xd4, 0xfb, 0x1a, 0xd6, 0x55, 0xf9, 0x21, 0xc8, 0xc7, 0xc3, 0x77,
	0x3b, 0x2c, 0x49, 0x84, 0x4d, 0x27, 0x53, 0xce, 0xf9, 0x49, 0xbb, 0x3f, 0x82, 0xa8, 0x4e, 0xd4,
	0x05, 0xe3, 0xe4, 0x1a, 0x2c, 0x04, 0xde, 0x6e, 0x9b, 0x86, 0x83, 0xda, 0x0e, 0xf1, 0x1a, 0xd3,
	0x8a, 0xc0, 0x9d, 0x0f, 0xa9, 0x4e, 0xd4, 0x45, 0x23, 0x39, 0x7a, 0x55, 0x8d, 0x38, 0xa6, 0x7d,
	0xea, 0x75, 0x2d, 0x11, 0x3d, 0x0f, 0xc1, 0xd1, 0xf3, 0xde, 0x6e, 0xa5, 0x60, 0xf2, 0xc8, 0x54,
	0x4f, 0x95, 0x45, 0x90, 0x47, 0xa7, 0xa4, 0x5c, 0x86, 0x05, 0x01, 0x33, 0xa5, 0x12, 0x02, 0x7b,
	0xae, 0x68, 0xcf, 0xb5, 0xb0, 0x77, 0x5b, 0x18, 0xe8, 0xb9, 0xfb, 0x78, 0xb4, 0xc7, 0x30, 0xa0,
	0xf2, 0x1e, 0x2c, 0x1d, 0x58, 0x74, 0x5b, 0x13, 0x70, 0xd6, 0x70, 0x90, 0x83, 0xe5, 0x7b, 0x90,
	0x3a, 0xa6, 0xb5, 0xf0, 0xb5, 0x9a, 0x15, 0xcc, 0x8b, 0x15, 0x6b, 0xa4, 0x2f, 0xbb, 0xc3, 0x94,
	0x7f, 0x27, 0x86, 0x07, 0x3f, 0xad, 0x63, 0xec, 0x1a, 0xb5, 0x23, 0x62, 0xd2, 0xb5, 0x5a, 0x2e,
	0x09, 0xef, 0x36, 0xc3, 0xcb, 0x62, 0xe8, 0x6a, 0xf3, 0x3a, 0xa4, 0x49, 0x97, 0xb8, 0xfd, 0x5d,
	0xb4, 0x42, 0x4f, 0x93, 0x2e, 0x61, 0x6b, 0xa7, 0x07, 0x64, 0x4b, 0x79, 0x32, 0x02, 0xc8, 0xf6,
	0x8b, 0xdc, 0x61, 0x63, 0xea, 0xac, 0x87, 0x8d, 0x54, 0x6c, 0xcf, 0x1c, 0x1e, 0x8d, 0xa6, 0x63,
	0x8e, 0x46, 0x16, 0x3b, 0x1a, 0xa5, 0xc5, 0x47, 0x23, 0xeb, 0x01, 0x3e, 0x8d, 0xf9, 0x82, 0xfe,
	0x90, 0x0c, 0x25, 0xfa, 0xc0, 0xfa, 0x26, 0x25, 0xda, 0xdf, 0xcd, 0x4c, 0x46, 0xef, 0x66, 0xb8,
	0x5a, 0x4c, 0x9f, 0xb5, 0x16, 0xe9, 0x33, 0xd4, 0x62, 0x66, 0xac, 0x5a, 0x40, 0x74, 0x2d, 0xe4,
	0x15, 0x98, 0xd1, 0x48, 0x8b, 0x68, 0x3a, 0x36, 0x9c, 0x6c, 0x86, 0x9d, 0xa7, 0xd2, 0x1a, 0x69,
	0xb0, 0xe7, 0x98, 0x42, 0xfd, 0x49, 0x1a, 0x34, 0xd6, 0x06, 0x36, 0x54, 0xda, 0xe3, 0x69, 0x8e,
	0x06, 0xe5, 0xfa, 0xbf, 0xde, 0xf9, 0xc7, 0x70, 0xff, 0x29, 0xac, 0x0e, 0x8e, 0xa4, 0x22, 0xee,
	0xcb, 0x01, 0xe5, 0x78, 0xbb, 0x79, 0x5f, 0x2b, 0xcf, 0xe3, 0x14, 0xda, 0x17, 0xa4, 0x0e, 0xe9,
	0xfa, 0x57, 0x48, 0xdd, 0xd8, 0x52, 0x5f, 0xe3, 0x36, 0x60, 0x71, 0x39, 0x9e, 0x3c, 0x6f, 0x8e,
	0x37, 0x1e, 0xc1, 0x82, 0xe0, 0x86, 0x5f, 0xbe, 0x0a, 0x2b, 0xfb, 0xd5, 0xda, 0x5e, 0x65, 0x73,
	0xbb, 0xb9, 0x7b, 0xb8, 0xd9, 0xdc, 0xad, 0xed, 0x35, 0xdf, 0xdb, 0xaf, 0xb4, 0x0e, 0xf6, 0x1e,
	0xec, 0xd5, 0xde, 0xdd, 0x9b, 0x9f, 0x90, 0x57, 0x21, 0x2b, 0x02, 0x6c, 0xd7, 0x76, 0x2a, 0xf3,
	0x92, 0x5c, 0x80, 0x55, 0x91, 0x75, 0x7f, 0xb3, 0xd1, 0x78, 0xb7, 0x56, 0xdf, 0x99, 0x4f, 0x6c,
	0x7c, 0x2a, 0xc1, 0x82, 0xe0, 0x02, 0x96, 0x06, 0xae, 0x7c, 0x6f, 0x73, 0xf7, 0xe1, 0xb3, 0x02,
	0x8b, 0x00, 0x5e, 0xe0, 0x3c, 0xe4, 0x44, 0xd6, 0xda, 0xe6, 0x41, 0xb3, 0x5a, 0x9e, 0x4f, 0x50,
	0x62, 0x22, 0xfb, 0x80, 0x58, 0x72, 0xe3, 0x07, 0x00, 0xc3, 0x4d, 0xb2, 0xbc, 0x04, 0x32, 0x1d,
	0x5a, 0xad, 0x3d, 0xdc, 0xa9, 0xd4, 0x03, 0x2c, 0x96, 0xe1, 0x72, 0xe0, 0x7d, 0xb3, 0xba, 0xdb,
	0xd8, 0xa9, 0x1c, 0xee, 0x6e, 0x53, 0x0a, 0x39, 0x58, 0x0a, 0x98, 0x6a, 0xcd, 0x6a, 0xa5, 0xee,
	0xd9, 0x12, 0xe5, 0x4f, 0x17, 0x61, 0x6e, 0x33, 0xf4, 0x9b, 0xa1, 0xfc, 0xa1, 0x04, 0x73, 0xdc,
	0x8f, 0x3c, 0x57, 0xfc, 0x65, 0x4f, 0xf8, 0x33, 0x5d, 0x2e, 0x3f, 0x34, 0x8b, 0x7e, 0x23, 0x52,
	0x6e, 0x7f, 0xf8, 0xd7, 0x7f, 0xfe, 0x3a, 0xf1, 0x9a, 0xf2, 0xed, 0xd2, 0xa3, 0xdb, 0x25, 0x5a,
	0xf0, 0x52, 0x38, 0x64, 0x29, 0x8c, 0xbf, 0x2b, 0x6d, 0xc8, 0x1f, 0x49, 0xb0, 0x20, 0xfa, 0x6d,
	0x46, 0xe1, 0x99, 0x8c, 0x62, 0x72, 0x8b, 0x3c, 0x9d, 0x43, 0x53, 0x53, 0x95, 0x3b, 0x8c, 0xc4,
	0x2d, 0xe5, 0xb5, 0x48, 0x12, 0xa3, 0xae, 0x28, 0x93, 0x41, 0x3a, 0x86, 0xbf, 0x0c, 0x08, 0xd3,
	0x31, 0x30, 0x47, 0xa4, 0x63, 0x60, 0x1f, 0x33, 0x1d, 0x03, 0x3c, 0x25, 0xf1, 0x0b, 0x09, 0x64,
	0xd1, 0x7d, 0xbe, 0x88, 0x48, 0x08, 0x32, 0x9a, 0x0c, 0x46, 0xe1, 0x2d, 0x46, 0xa1, 0xa4, 0x6c,
	0x3c, 0x93, 0x42, 0xc8, 0x13, 0xa5, 0xf1, 0xd8, 0x4b, 0xc5, 0xf0, 0xfa, 0x5a, 0x98, 0x8a, 0x81,
	0x39, 0x22, 0xfa, 0x78, 0x09, 0x18, 0x78, 0xa1, 0x91, 0x3f, 0x96, 0xe0, 0xd2, 0xe8, 0x2d, 0x60,
	0x41, 0x14, 0x3d, 0x88, 0xc8, 0xbd, 0x2a, 0xac, 0x45, 0x10, 0xa2, 0xbc, 0xc9, 0xd8, 0x14, 0x95,
	0x1b, 0xcf, 0x64, 0x13, 0x1c, 0x42, 0x09, 0xd9, 0x30, 0x1b, 0xba, 0x09, 0x5c, 0xe1, 0xa8, 0x04,
	0x8d, 0x11, 0x69, 0x28, 0xb1, 0xc0, 0x37, 0x94, 0x6b, 0x51, 0x81, 0x83, 0x3e, 0x68, 0x4c, 0x1d,
	0x20, 0x70, 0xdb, 0xb7, 0xcc, 0x45, 0x1c, 0x9a, 0x22, 0xbe, 0x80, 0xd7, 0x59, 0xbc, 0xeb, 0x8a,
	0x12, 0x15, 0x6f, 0xe8, 0x81, 0x46, 0xfb, 0x19, 0xcc, 0x8f, 0x5c, 0xf7, 0x5d, 0x8d, 0x98, 0xa5,
	0x0f, 0x88, 0x98, 0xe9, 0x1b, 0x2c, 0xf2, 0xeb, 0xca, 0x7a, 0xdc, 0x4c, 0x7d, 0x3f, 0x34, 0xfe,
	0x2f, 0x25, 0xb8, 0xc8, 0x5f, 0x97, 0xe5, 0xb9, 0xf8, 0x9c, 0x3d, 0x77, 0x95, 0x0f, 0xcf, 0x01,
	0x94, 0x32, 0x63, 0x72, 0x53, 0xb9, 0x1e, 0xc5, 0x84, 0x1b, 0xe0, 0xa9, 0x9e, 0xbb, 0x61, 0xe3,
	0x55, 0x1f, 0x36, 0x9f, 0x57, 0xf5, 0x61, 0x2f, 0x34, 0xf2, 0x0f, 0x21, 0xe5, 0x5d, 0xa4, 0x5d,
	0xe6, 0x95, 0xce, 0x5e, 0x47, 0x44, 0xba, 0xc1, 0x22, 0xad, 0x29, 0xf9, 0x48, 0x45, 0xb3, 0xd1,
	0x81, 0x24, 0x87, 0x0e, 0xe9, 0x82, 0x24, 0x07, 0xed, 0xc2, 0x24, 0x07, 0x01, 0x63, 0x25, 0x39,
	0x74, 0x9f, 0xe0, 0xaa, 0x6d, 0xe4, 0xfc, 0xce, 0xab, 0x8d, 0x07, 0x44, 0xe8, 0x3c, 0x56, 0x6d,
	0xbc, 0x1f, 0x1a, 0xff, 0x89, 0x04, 0x8b, 0xa2, 0x83, 0xbe, 0xbc, 0x16, 0x45, 0x22, 0x00, 0x8a,
	0x20, 0xf2, 0x36, 0x23, 0x72, 0x5b, 0xb9, 0x19, 0x4b, 0x24, 0x78, 0xb3, 0x20, 0x6d, 0xc8, 0x6d,
	0x98, 0xf6, 0xee, 0x0d, 0xe4, 0x25, 0x41, 0xe1, 0x6b, 0x3d, 0x27, 0x22, 0xe2, 0x06, 0x8b, 0x78,
	0x4d, 0xb9, 0xfa, 0xac, 0xca, 0xd7, 0x7a, 0x8e, 0xdf, 0xcc, 0xc3, 0x47, 0xd2, 0x2b, 0x82, 0x58,
	0x43, 0xf3, 0xb9, 0x9b, 0x79, 0xc8, 0x4b, 0x20, 0x72, 0xe0, 0x8c, 0x76, 0x45, 0x28, 0xef, 0xe7,
	0x11, 0x79, 0xe8, 0x85, 0x46, 0xfe, 0x4c, 0x82, 0x45, 0xe1, 0xce, 0x7d, 0x4d, 0xb0, 0xaf, 0xe0,
	0x41, 0xb9, 0x6b, 0x23, 0x8b, 0x89, 0x00, 0x15, 0x5f, 0x75, 0xd1, 0x28, 0x5f, 0x82, 0xc2, 0x7d,
	0x7d, 0x24, 0xb9, 0x00, 0xe8, 0xbc, 0x12, 0x14, 0xf9, 0xba, 0x2b, 0x6d, 0x6c, 0x55, 0xfa, 0xf7,
	0x96, 0x60, 0x31, 0xb8, 0x49, 0x27, 0xd8, 0xa6, 0x87, 0x49, 0xf2, 0xf9, 0xd3, 0xfc, 0xc4, 0xdf,
	0x9e, 0xe6, 0x27, 0xbe, 0x7c, 0x9a, 0x97, 0x7e, 0xde, 0xcf, 0x4b, 0x7f, 0xec, 0xe7, 0xa5, 0x3f,
	0xf7, 0xf3, 0xd2, 0xe7, 0xfd, 0xbc, 0xf4, 0xf7, 0x7e, 0x5e, 0xfa, 0x4f, 0x3f, 0x3f, 0xf1, 0x65,
	0x3f, 0x2f, 0x7d, 0xf2, 0x8f, 0xfc, 0xc4, 0x51, 0x8a, 0x5d, 0x39, 0xbe, 0xf1, 0xbf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xc5, 0x8a, 0x5d, 0xe2, 0x99, 0x26, 0x00, 0x00,
}
