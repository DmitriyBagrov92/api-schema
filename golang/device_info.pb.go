// Code generated by protoc-gen-gogo.
// source: device_info.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PlatformType int32

const (
	PLATFORMTYPE_UNKNOWN PlatformType = 0
	PLATFORMTYPE_ANDROID PlatformType = 1
	PLATFORMTYPE_IOS     PlatformType = 2
	PLATFORMTYPE_WEB     PlatformType = 3
	PLATFORMTYPE_CLC     PlatformType = 4
	PLATFORMTYPE_TESTS   PlatformType = 42
)

var PlatformType_name = map[int32]string{
	0:  "PLATFORMTYPE_UNKNOWN",
	1:  "PLATFORMTYPE_ANDROID",
	2:  "PLATFORMTYPE_IOS",
	3:  "PLATFORMTYPE_WEB",
	4:  "PLATFORMTYPE_CLC",
	42: "PLATFORMTYPE_TESTS",
}
var PlatformType_value = map[string]int32{
	"PLATFORMTYPE_UNKNOWN": 0,
	"PLATFORMTYPE_ANDROID": 1,
	"PLATFORMTYPE_IOS":     2,
	"PLATFORMTYPE_WEB":     3,
	"PLATFORMTYPE_CLC":     4,
	"PLATFORMTYPE_TESTS":   42,
}

func (PlatformType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDeviceInfo, []int{0} }

// Notifying about device information
type RequestNotifyAboutDeviceInfo struct {
	// * First language from this array will be used for some notifications from server *
	PreferredLanguages []string `protobuf:"bytes,1,rep,name=preferred_languages,json=preferredLanguages" json:"preferred_languages,omitempty"`
	// * Your timezone *
	TimeZone *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`
}

func (m *RequestNotifyAboutDeviceInfo) Reset()      { *m = RequestNotifyAboutDeviceInfo{} }
func (*RequestNotifyAboutDeviceInfo) ProtoMessage() {}
func (*RequestNotifyAboutDeviceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorDeviceInfo, []int{0}
}

func (m *RequestNotifyAboutDeviceInfo) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

func (m *RequestNotifyAboutDeviceInfo) GetTimeZone() *google_protobuf.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

// Generic client info, containing information about platform type, version, sdk etc
type ClientInfo struct {
	// / The platform enum. Can be either Android, Web or iOS
	Platform PlatformType `protobuf:"varint,1,opt,name=platform,proto3,enum=dialog.PlatformType" json:"platform,omitempty"`
	// / For android: vendor and model; For iOS: model; For Web: platform and user agent
	DeviceName string `protobuf:"bytes,2,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// / Optional application name
	AppName string `protobuf:"bytes,3,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// / Application version
	AppVersion *google_protobuf.StringValue `protobuf:"bytes,4,opt,name=app_version,json=appVersion" json:"app_version,omitempty"`
	// / Optional SDK version
	SdkVersion *google_protobuf.StringValue `protobuf:"bytes,5,opt,name=sdk_version,json=sdkVersion" json:"sdk_version,omitempty"`
	// / Optional ISO-639 language code and ISO-3166 country code: ru-RU
	PreferredLanguages []string `protobuf:"bytes,6,rep,name=preferred_languages,json=preferredLanguages" json:"preferred_languages,omitempty"`
	// / Optional TimeZone id
	TimeZone *google_protobuf.StringValue `protobuf:"bytes,7,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`
}

func (m *ClientInfo) Reset()                    { *m = ClientInfo{} }
func (*ClientInfo) ProtoMessage()               {}
func (*ClientInfo) Descriptor() ([]byte, []int) { return fileDescriptorDeviceInfo, []int{1} }

func (m *ClientInfo) GetPlatform() PlatformType {
	if m != nil {
		return m.Platform
	}
	return PLATFORMTYPE_UNKNOWN
}

func (m *ClientInfo) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *ClientInfo) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *ClientInfo) GetAppVersion() *google_protobuf.StringValue {
	if m != nil {
		return m.AppVersion
	}
	return nil
}

func (m *ClientInfo) GetSdkVersion() *google_protobuf.StringValue {
	if m != nil {
		return m.SdkVersion
	}
	return nil
}

func (m *ClientInfo) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

func (m *ClientInfo) GetTimeZone() *google_protobuf.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestNotifyAboutDeviceInfo)(nil), "dialog.RequestNotifyAboutDeviceInfo")
	proto.RegisterType((*ClientInfo)(nil), "dialog.ClientInfo")
	proto.RegisterEnum("dialog.PlatformType", PlatformType_name, PlatformType_value)
}
func (x PlatformType) String() string {
	s, ok := PlatformType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RequestNotifyAboutDeviceInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestNotifyAboutDeviceInfo)
	if !ok {
		that2, ok := that.(RequestNotifyAboutDeviceInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	if !this.TimeZone.Equal(that1.TimeZone) {
		return false
	}
	return true
}
func (this *ClientInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ClientInfo)
	if !ok {
		that2, ok := that.(ClientInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if this.DeviceName != that1.DeviceName {
		return false
	}
	if this.AppName != that1.AppName {
		return false
	}
	if !this.AppVersion.Equal(that1.AppVersion) {
		return false
	}
	if !this.SdkVersion.Equal(that1.SdkVersion) {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	if !this.TimeZone.Equal(that1.TimeZone) {
		return false
	}
	return true
}
func (this *RequestNotifyAboutDeviceInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestNotifyAboutDeviceInfo{")
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	if this.TimeZone != nil {
		s = append(s, "TimeZone: "+fmt.Sprintf("%#v", this.TimeZone)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.ClientInfo{")
	s = append(s, "Platform: "+fmt.Sprintf("%#v", this.Platform)+",\n")
	s = append(s, "DeviceName: "+fmt.Sprintf("%#v", this.DeviceName)+",\n")
	s = append(s, "AppName: "+fmt.Sprintf("%#v", this.AppName)+",\n")
	if this.AppVersion != nil {
		s = append(s, "AppVersion: "+fmt.Sprintf("%#v", this.AppVersion)+",\n")
	}
	if this.SdkVersion != nil {
		s = append(s, "SdkVersion: "+fmt.Sprintf("%#v", this.SdkVersion)+",\n")
	}
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	if this.TimeZone != nil {
		s = append(s, "TimeZone: "+fmt.Sprintf("%#v", this.TimeZone)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDeviceInfo(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeviceInfo service

type DeviceInfoClient interface {
	// / Set info about current device
	NotifyAboutDeviceInfo(ctx context.Context, in *RequestNotifyAboutDeviceInfo, opts ...grpc.CallOption) (*ResponseVoid, error)
}

type deviceInfoClient struct {
	cc *grpc.ClientConn
}

func NewDeviceInfoClient(cc *grpc.ClientConn) DeviceInfoClient {
	return &deviceInfoClient{cc}
}

func (c *deviceInfoClient) NotifyAboutDeviceInfo(ctx context.Context, in *RequestNotifyAboutDeviceInfo, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.DeviceInfo/NotifyAboutDeviceInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeviceInfo service

type DeviceInfoServer interface {
	// / Set info about current device
	NotifyAboutDeviceInfo(context.Context, *RequestNotifyAboutDeviceInfo) (*ResponseVoid, error)
}

func RegisterDeviceInfoServer(s *grpc.Server, srv DeviceInfoServer) {
	s.RegisterService(&_DeviceInfo_serviceDesc, srv)
}

func _DeviceInfo_NotifyAboutDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNotifyAboutDeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInfoServer).NotifyAboutDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.DeviceInfo/NotifyAboutDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInfoServer).NotifyAboutDeviceInfo(ctx, req.(*RequestNotifyAboutDeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceInfo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.DeviceInfo",
	HandlerType: (*DeviceInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyAboutDeviceInfo",
			Handler:    _DeviceInfo_NotifyAboutDeviceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device_info.proto",
}

func (m *RequestNotifyAboutDeviceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestNotifyAboutDeviceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.TimeZone != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeviceInfo(dAtA, i, uint64(m.TimeZone.Size()))
		n1, err := m.TimeZone.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ClientInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Platform != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDeviceInfo(dAtA, i, uint64(m.Platform))
	}
	if len(m.DeviceName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeviceInfo(dAtA, i, uint64(len(m.DeviceName)))
		i += copy(dAtA[i:], m.DeviceName)
	}
	if len(m.AppName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDeviceInfo(dAtA, i, uint64(len(m.AppName)))
		i += copy(dAtA[i:], m.AppName)
	}
	if m.AppVersion != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDeviceInfo(dAtA, i, uint64(m.AppVersion.Size()))
		n2, err := m.AppVersion.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.SdkVersion != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDeviceInfo(dAtA, i, uint64(m.SdkVersion.Size()))
		n3, err := m.SdkVersion.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.TimeZone != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDeviceInfo(dAtA, i, uint64(m.TimeZone.Size()))
		n4, err := m.TimeZone.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeFixed64DeviceInfo(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32DeviceInfo(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDeviceInfo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RequestNotifyAboutDeviceInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovDeviceInfo(uint64(l))
		}
	}
	if m.TimeZone != nil {
		l = m.TimeZone.Size()
		n += 1 + l + sovDeviceInfo(uint64(l))
	}
	return n
}

func (m *ClientInfo) Size() (n int) {
	var l int
	_ = l
	if m.Platform != 0 {
		n += 1 + sovDeviceInfo(uint64(m.Platform))
	}
	l = len(m.DeviceName)
	if l > 0 {
		n += 1 + l + sovDeviceInfo(uint64(l))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovDeviceInfo(uint64(l))
	}
	if m.AppVersion != nil {
		l = m.AppVersion.Size()
		n += 1 + l + sovDeviceInfo(uint64(l))
	}
	if m.SdkVersion != nil {
		l = m.SdkVersion.Size()
		n += 1 + l + sovDeviceInfo(uint64(l))
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovDeviceInfo(uint64(l))
		}
	}
	if m.TimeZone != nil {
		l = m.TimeZone.Size()
		n += 1 + l + sovDeviceInfo(uint64(l))
	}
	return n
}

func sovDeviceInfo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDeviceInfo(x uint64) (n int) {
	return sovDeviceInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestNotifyAboutDeviceInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestNotifyAboutDeviceInfo{`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`TimeZone:` + strings.Replace(fmt.Sprintf("%v", this.TimeZone), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientInfo{`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`DeviceName:` + fmt.Sprintf("%v", this.DeviceName) + `,`,
		`AppName:` + fmt.Sprintf("%v", this.AppName) + `,`,
		`AppVersion:` + strings.Replace(fmt.Sprintf("%v", this.AppVersion), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`SdkVersion:` + strings.Replace(fmt.Sprintf("%v", this.SdkVersion), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`TimeZone:` + strings.Replace(fmt.Sprintf("%v", this.TimeZone), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDeviceInfo(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestNotifyAboutDeviceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestNotifyAboutDeviceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestNotifyAboutDeviceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeZone == nil {
				m.TimeZone = &google_protobuf.StringValue{}
			}
			if err := m.TimeZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeviceInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Platform |= (PlatformType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppVersion == nil {
				m.AppVersion = &google_protobuf.StringValue{}
			}
			if err := m.AppVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SdkVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SdkVersion == nil {
				m.SdkVersion = &google_protobuf.StringValue{}
			}
			if err := m.SdkVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeZone == nil {
				m.TimeZone = &google_protobuf.StringValue{}
			}
			if err := m.TimeZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeviceInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeviceInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeviceInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeviceInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeviceInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDeviceInfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDeviceInfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDeviceInfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDeviceInfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeviceInfo   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("device_info.proto", fileDescriptorDeviceInfo) }

var fileDescriptorDeviceInfo = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x93, 0x3f, 0x6f, 0xd3, 0x4e,
	0x18, 0xc7, 0x73, 0x4d, 0x7f, 0xfd, 0x73, 0xfd, 0x81, 0x5c, 0x37, 0x2d, 0xa1, 0x8a, 0x4e, 0x55,
	0xc4, 0x10, 0x3a, 0xd8, 0x50, 0x98, 0x3a, 0x50, 0xf5, 0x4f, 0x80, 0x88, 0xe0, 0x44, 0x49, 0x48,
	0x05, 0x4b, 0x74, 0x89, 0xcf, 0xd6, 0xa9, 0xf6, 0xdd, 0x71, 0x67, 0x07, 0x95, 0x09, 0xb1, 0xc1,
	0x84, 0xc4, 0xc2, 0xc0, 0x0b, 0xe0, 0x95, 0x20, 0x16, 0xa4, 0x4a, 0x2c, 0x8c, 0xc4, 0x30, 0x20,
	0xa6, 0xbe, 0x04, 0x94, 0x38, 0x6e, 0x53, 0x12, 0x90, 0x28, 0x93, 0xa5, 0xef, 0xf3, 0x79, 0xbe,
	0x7e, 0xee, 0xbe, 0xf7, 0xc0, 0x45, 0x9b, 0x74, 0x69, 0x87, 0xb4, 0x28, 0x73, 0xb8, 0x21, 0x24,
	0x0f, 0xb8, 0x3e, 0x63, 0x53, 0xec, 0x71, 0x77, 0x15, 0xb9, 0x9c, 0xbb, 0x1e, 0x31, 0x07, 0x6a,
	0x3b, 0x74, 0xcc, 0x27, 0x12, 0x0b, 0x41, 0xa4, 0x8a, 0xb9, 0xd5, 0xdc, 0xb0, 0x8e, 0x05, 0x35,
	0x31, 0x63, 0x3c, 0xc0, 0x01, 0xe5, 0x2c, 0xa9, 0x2e, 0xda, 0xc4, 0xa1, 0x8c, 0x8e, 0x4a, 0x4b,
	0x3e, 0x55, 0x1d, 0xe2, 0x79, 0x98, 0x11, 0x1e, 0x26, 0xe2, 0xb2, 0xea, 0x60, 0x0f, 0x8b, 0xb6,
	0x39, 0xfc, 0xc6, 0x72, 0xfe, 0x3d, 0x80, 0xb9, 0x1a, 0x79, 0x1c, 0x12, 0x15, 0x58, 0x3c, 0xa0,
	0xce, 0xe1, 0x76, 0x9b, 0x87, 0xc1, 0xde, 0x60, 0xd8, 0x12, 0x73, 0xb8, 0x7e, 0x0b, 0x2e, 0x09,
	0x49, 0x1c, 0x22, 0x25, 0xb1, 0x5b, 0x1e, 0x66, 0x6e, 0x88, 0x5d, 0xa2, 0xb2, 0x60, 0x2d, 0x5d,
	0x98, 0xdf, 0xb9, 0xf0, 0xf2, 0xc7, 0xb5, 0x79, 0x38, 0xdb, 0xa5, 0x8a, 0xb6, 0x3d, 0x52, 0xd3,
	0x4f, 0xc8, 0x72, 0x02, 0xea, 0x77, 0xe1, 0x7c, 0x40, 0x7d, 0xd2, 0x7a, 0xca, 0x19, 0xc9, 0x4e,
	0xad, 0x81, 0xc2, 0xc2, 0x46, 0xce, 0x88, 0x4f, 0x64, 0x24, 0x27, 0x36, 0xea, 0x81, 0xa4, 0xcc,
	0x6d, 0x62, 0x2f, 0x24, 0xbf, 0x7a, 0xce, 0xf5, 0xbb, 0x1f, 0x71, 0x46, 0x36, 0x73, 0xd1, 0xd6,
	0x65, 0x78, 0x89, 0xfa, 0x86, 0xed, 0xb9, 0x86, 0x2b, 0x45, 0xc7, 0xb8, 0x23, 0x45, 0x67, 0x38,
	0x7c, 0xfe, 0x63, 0x1a, 0xc2, 0x5d, 0x8f, 0x12, 0x16, 0x0c, 0xc6, 0xde, 0x82, 0x73, 0xc2, 0xc3,
	0x81, 0xc3, 0xa5, 0x9f, 0x05, 0x6b, 0xa0, 0x70, 0x71, 0x23, 0x63, 0xc4, 0xf7, 0x6d, 0x54, 0x87,
	0x7a, 0xe3, 0x50, 0x8c, 0xff, 0x2d, 0x69, 0xd2, 0x0d, 0xb8, 0x30, 0x8c, 0x8c, 0x61, 0x3f, 0x9e,
	0x7c, 0xec, 0xbc, 0x30, 0x26, 0x2c, 0xec, 0x13, 0xbd, 0x00, 0xe7, 0xb0, 0x10, 0x31, 0x9c, 0x9e,
	0x04, 0xcf, 0x62, 0x21, 0x06, 0x64, 0x19, 0x2e, 0xf4, 0xc9, 0x2e, 0x91, 0x8a, 0x72, 0x96, 0x9d,
	0xfe, 0xfb, 0x3b, 0x81, 0x58, 0x88, 0x66, 0xdc, 0xde, 0x77, 0x53, 0xf6, 0xc1, 0x89, 0xdb, 0x7f,
	0xe7, 0x70, 0x53, 0xf6, 0x41, 0xe2, 0xf6, 0x9b, 0xb4, 0x67, 0xce, 0x95, 0xf6, 0xec, 0x3f, 0xa4,
	0xbd, 0xfe, 0x16, 0xc0, 0xff, 0x47, 0x93, 0xd2, 0xb3, 0x30, 0x53, 0x2d, 0x6f, 0x37, 0x6e, 0x57,
	0x6a, 0xf7, 0x1b, 0x0f, 0xab, 0xc5, 0xd6, 0x03, 0xeb, 0x9e, 0x55, 0xd9, 0xb7, 0xb4, 0xd4, 0x58,
	0x65, 0xdb, 0xda, 0xab, 0x55, 0x4a, 0x7b, 0x1a, 0xd0, 0x33, 0x50, 0x3b, 0x53, 0x29, 0x55, 0xea,
	0xda, 0xd4, 0x98, 0xba, 0x5f, 0xdc, 0xd1, 0xd2, 0x63, 0xea, 0x6e, 0x79, 0x57, 0x9b, 0xd6, 0x57,
	0xa0, 0x7e, 0x46, 0x6d, 0x14, 0xeb, 0x8d, 0xba, 0xb6, 0xbe, 0xf1, 0x06, 0x40, 0x38, 0xb2, 0x25,
	0x2f, 0x00, 0x5c, 0x9e, 0xbc, 0x3f, 0x57, 0x92, 0x67, 0xf7, 0xa7, 0x2d, 0x5b, 0xcd, 0x9c, 0x52,
	0x4a, 0x70, 0xa6, 0x48, 0x93, 0x53, 0x3b, 0x7f, 0xf3, 0xf9, 0xa7, 0x6f, 0xaf, 0xa7, 0x8c, 0xfc,
	0x55, 0xb3, 0x7b, 0xdd, 0xec, 0xbf, 0x78, 0xf3, 0xb4, 0xc5, 0x9c, 0x68, 0xb4, 0x09, 0xd6, 0x77,
	0x8a, 0xd1, 0xd6, 0x0a, 0xcc, 0x8c, 0xee, 0x89, 0x22, 0xb2, 0x0f, 0xa8, 0xa3, 0x1e, 0x4a, 0x7d,
	0xee, 0xa1, 0xd4, 0x71, 0x0f, 0x81, 0x67, 0x11, 0x02, 0xef, 0x22, 0x04, 0x3e, 0x44, 0x08, 0x1c,
	0x45, 0x08, 0x7c, 0x89, 0x10, 0xf8, 0x1e, 0xa1, 0xd4, 0x71, 0x84, 0xc0, 0xab, 0xaf, 0x28, 0xd5,
	0x9e, 0x19, 0xe4, 0x75, 0xe3, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0xe2, 0x02, 0x44, 0xba,
	0x04, 0x00, 0x00,
}
