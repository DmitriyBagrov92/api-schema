// Code generated by protoc-gen-gogo.
// source: crypto.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Exchange public keys
type RequestKeyExchange struct {
	ClientKey *google_protobuf.BytesValue `protobuf:"bytes,1,opt,name=client_key,json=clientKey" json:"client_key,omitempty"`
}

func (m *RequestKeyExchange) Reset()                    { *m = RequestKeyExchange{} }
func (*RequestKeyExchange) ProtoMessage()               {}
func (*RequestKeyExchange) Descriptor() ([]byte, []int) { return fileDescriptorCrypto, []int{0} }

func (m *RequestKeyExchange) GetClientKey() *google_protobuf.BytesValue {
	if m != nil {
		return m.ClientKey
	}
	return nil
}

type ResponseKeyExchange struct {
	ServerKey *google_protobuf.BytesValue `protobuf:"bytes,1,opt,name=server_key,json=serverKey" json:"server_key,omitempty"`
}

func (m *ResponseKeyExchange) Reset()                    { *m = ResponseKeyExchange{} }
func (*ResponseKeyExchange) ProtoMessage()               {}
func (*ResponseKeyExchange) Descriptor() ([]byte, []int) { return fileDescriptorCrypto, []int{1} }

func (m *ResponseKeyExchange) GetServerKey() *google_protobuf.BytesValue {
	if m != nil {
		return m.ServerKey
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestKeyExchange)(nil), "dialog.RequestKeyExchange")
	proto.RegisterType((*ResponseKeyExchange)(nil), "dialog.ResponseKeyExchange")
}
func (this *RequestKeyExchange) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestKeyExchange)
	if !ok {
		that2, ok := that.(RequestKeyExchange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ClientKey.Equal(that1.ClientKey) {
		return false
	}
	return true
}
func (this *ResponseKeyExchange) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseKeyExchange)
	if !ok {
		that2, ok := that.(ResponseKeyExchange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ServerKey.Equal(that1.ServerKey) {
		return false
	}
	return true
}
func (this *RequestKeyExchange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestKeyExchange{")
	if this.ClientKey != nil {
		s = append(s, "ClientKey: "+fmt.Sprintf("%#v", this.ClientKey)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseKeyExchange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseKeyExchange{")
	if this.ServerKey != nil {
		s = append(s, "ServerKey: "+fmt.Sprintf("%#v", this.ServerKey)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCrypto(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Crypto service

type CryptoClient interface {
	KeyExchange(ctx context.Context, in *RequestKeyExchange, opts ...grpc.CallOption) (*ResponseKeyExchange, error)
}

type cryptoClient struct {
	cc *grpc.ClientConn
}

func NewCryptoClient(cc *grpc.ClientConn) CryptoClient {
	return &cryptoClient{cc}
}

func (c *cryptoClient) KeyExchange(ctx context.Context, in *RequestKeyExchange, opts ...grpc.CallOption) (*ResponseKeyExchange, error) {
	out := new(ResponseKeyExchange)
	err := grpc.Invoke(ctx, "/dialog.Crypto/KeyExchange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Crypto service

type CryptoServer interface {
	KeyExchange(context.Context, *RequestKeyExchange) (*ResponseKeyExchange, error)
}

func RegisterCryptoServer(s *grpc.Server, srv CryptoServer) {
	s.RegisterService(&_Crypto_serviceDesc, srv)
}

func _Crypto_KeyExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestKeyExchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).KeyExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Crypto/KeyExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).KeyExchange(ctx, req.(*RequestKeyExchange))
	}
	return interceptor(ctx, in, info, handler)
}

var _Crypto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Crypto",
	HandlerType: (*CryptoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeyExchange",
			Handler:    _Crypto_KeyExchange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crypto.proto",
}

func (m *RequestKeyExchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestKeyExchange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClientKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCrypto(dAtA, i, uint64(m.ClientKey.Size()))
		n1, err := m.ClientKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ResponseKeyExchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseKeyExchange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ServerKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCrypto(dAtA, i, uint64(m.ServerKey.Size()))
		n2, err := m.ServerKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeFixed64Crypto(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Crypto(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCrypto(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RequestKeyExchange) Size() (n int) {
	var l int
	_ = l
	if m.ClientKey != nil {
		l = m.ClientKey.Size()
		n += 1 + l + sovCrypto(uint64(l))
	}
	return n
}

func (m *ResponseKeyExchange) Size() (n int) {
	var l int
	_ = l
	if m.ServerKey != nil {
		l = m.ServerKey.Size()
		n += 1 + l + sovCrypto(uint64(l))
	}
	return n
}

func sovCrypto(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCrypto(x uint64) (n int) {
	return sovCrypto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestKeyExchange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestKeyExchange{`,
		`ClientKey:` + strings.Replace(fmt.Sprintf("%v", this.ClientKey), "BytesValue", "google_protobuf.BytesValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseKeyExchange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseKeyExchange{`,
		`ServerKey:` + strings.Replace(fmt.Sprintf("%v", this.ServerKey), "BytesValue", "google_protobuf.BytesValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCrypto(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestKeyExchange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrypto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestKeyExchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestKeyExchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrypto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrypto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientKey == nil {
				m.ClientKey = &google_protobuf.BytesValue{}
			}
			if err := m.ClientKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrypto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCrypto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseKeyExchange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrypto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseKeyExchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseKeyExchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrypto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrypto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerKey == nil {
				m.ServerKey = &google_protobuf.BytesValue{}
			}
			if err := m.ServerKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrypto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCrypto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrypto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrypto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrypto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrypto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCrypto
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCrypto
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCrypto(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCrypto = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrypto   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("crypto.proto", fileDescriptorCrypto) }

var fileDescriptorCrypto = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x90, 0x3f, 0xcb, 0x53, 0x31,
	0x18, 0xc5, 0x6f, 0x1c, 0x2a, 0xcd, 0xab, 0x83, 0xd7, 0x7f, 0xaf, 0xb7, 0xaf, 0xa1, 0xdc, 0x41,
	0xc4, 0x21, 0xd1, 0xba, 0x75, 0x29, 0x54, 0x8a, 0x48, 0xb7, 0x3b, 0xb8, 0x4a, 0x9a, 0x3e, 0xbd,
	0x06, 0x6f, 0x93, 0x98, 0xa4, 0xb5, 0x77, 0x10, 0xc4, 0xd1, 0x49, 0xf0, 0x4b, 0xf8, 0x51, 0x1c,
	0x0b, 0x2e, 0x8e, 0x36, 0x3a, 0x88, 0x53, 0x3f, 0x82, 0xb4, 0x69, 0xf1, 0x42, 0x97, 0x77, 0x0a,
	0x9c, 0x73, 0xc2, 0xef, 0x3c, 0x07, 0x5f, 0x13, 0xb6, 0x36, 0x5e, 0x53, 0x63, 0xb5, 0xd7, 0x69,
	0x6b, 0x2a, 0x79, 0xa5, 0xcb, 0x8c, 0x94, 0x5a, 0x97, 0x15, 0xb0, 0xbd, 0x3a, 0x59, 0xcc, 0xd8,
	0x3b, 0xcb, 0x8d, 0x01, 0xeb, 0x62, 0x2e, 0xbb, 0x38, 0xf8, 0xdc, 0x48, 0xc6, 0x95, 0xd2, 0x9e,
	0x7b, 0xa9, 0xd5, 0xd1, 0xbd, 0x31, 0x85, 0x99, 0x54, 0xb2, 0x29, 0xdd, 0x76, 0x82, 0x57, 0xdc,
	0x4c, 0xd8, 0xe1, 0x8d, 0x72, 0xfe, 0x1e, 0xa7, 0x05, 0xbc, 0x5d, 0x80, 0xf3, 0x63, 0xa8, 0x47,
	0x2b, 0xf1, 0x9a, 0xab, 0x12, 0xd2, 0x17, 0x18, 0x8b, 0x4a, 0x82, 0xf2, 0xaf, 0xde, 0x40, 0x7d,
	0x8e, 0xba, 0xe8, 0xe1, 0x59, 0xaf, 0x43, 0x23, 0x92, 0x1e, 0x2b, 0xd1, 0x61, 0xed, 0xc1, 0xbd,
	0xe4, 0xd5, 0x02, 0x86, 0xd7, 0x3f, 0xfd, 0x7d, 0xdc, 0xc6, 0x57, 0x85, 0x9e, 0x1b, 0x2e, 0x7c,
	0xd1, 0x8e, 0xbf, 0xc7, 0x50, 0xf7, 0x2f, 0xc2, 0xe0, 0x1e, 0xbe, 0x2b, 0xe7, 0x74, 0x5a, 0x95,
	0xb4, 0xb4, 0x46, 0xd0, 0xe7, 0xd6, 0x88, 0x03, 0x33, 0x37, 0xf8, 0x66, 0x01, 0xce, 0x68, 0xe5,
	0xa0, 0xc9, 0xef, 0x63, 0xec, 0xc0, 0x2e, 0xc1, 0x5e, 0x92, 0x5f, 0xb4, 0x63, 0x7c, 0x07, 0xbc,
	0x1f, 0x06, 0x19, 0x3e, 0x3f, 0x05, 0x46, 0x4a, 0x6f, 0x85, 0x5b, 0xcf, 0xf6, 0x83, 0xa7, 0x0a,
	0x9f, 0x35, 0x99, 0x19, 0x8d, 0xd3, 0xd3, 0xd3, 0x3d, 0xb2, 0xce, 0x7f, 0xef, 0xa4, 0x6c, 0xfe,
	0xe0, 0xe3, 0xf7, 0xdf, 0x5f, 0xae, 0x74, 0xf3, 0x0e, 0x5b, 0x3e, 0x61, 0x3b, 0x20, 0x8b, 0x00,
	0xd6, 0x08, 0xf5, 0xd1, 0xa3, 0xe1, 0x28, 0x0c, 0xee, 0xe0, 0x5b, 0xcd, 0x62, 0xbb, 0xd2, 0x52,
	0x80, 0x5b, 0x6f, 0x48, 0xf2, 0x63, 0x43, 0x92, 0xed, 0x86, 0xa0, 0x0f, 0x81, 0xa0, 0xaf, 0x81,
	0xa0, 0x6f, 0x81, 0xa0, 0x75, 0x20, 0xe8, 0x67, 0x20, 0xe8, 0x4f, 0x20, 0xc9, 0x36, 0x10, 0xf4,
	0xf9, 0x17, 0x49, 0x26, 0xad, 0xfd, 0xfd, 0x4f, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xf9,
	0x21, 0xa7, 0x38, 0x02, 0x00, 0x00,
}
