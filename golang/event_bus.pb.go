// Code generated by protoc-gen-gogo.
// source: event_bus.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Joining Event Bus
type RequestJoinEventBus struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timeout int64  `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (m *RequestJoinEventBus) Reset()                    { *m = RequestJoinEventBus{} }
func (*RequestJoinEventBus) ProtoMessage()               {}
func (*RequestJoinEventBus) Descriptor() ([]byte, []int) { return fileDescriptorEventBus, []int{0} }

func (m *RequestJoinEventBus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RequestJoinEventBus) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type ResponseJoinEventBus struct {
	DeviceId int64 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (m *ResponseJoinEventBus) Reset()                    { *m = ResponseJoinEventBus{} }
func (*ResponseJoinEventBus) ProtoMessage()               {}
func (*ResponseJoinEventBus) Descriptor() ([]byte, []int) { return fileDescriptorEventBus, []int{1} }

func (m *ResponseJoinEventBus) GetDeviceId() int64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

// Keep Alive Event Bus
type RequestKeepAliveEventBus struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timeout int64  `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (m *RequestKeepAliveEventBus) Reset()                    { *m = RequestKeepAliveEventBus{} }
func (*RequestKeepAliveEventBus) ProtoMessage()               {}
func (*RequestKeepAliveEventBus) Descriptor() ([]byte, []int) { return fileDescriptorEventBus, []int{2} }

func (m *RequestKeepAliveEventBus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RequestKeepAliveEventBus) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

// Event Bus Destination
type RequestPostToEventBus struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// / Destination device ids
	Destinations []int64 `protobuf:"varint,2,rep,packed,name=destinations" json:"destinations,omitempty"`
	// / Message to send
	Message []byte `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *RequestPostToEventBus) Reset()                    { *m = RequestPostToEventBus{} }
func (*RequestPostToEventBus) ProtoMessage()               {}
func (*RequestPostToEventBus) Descriptor() ([]byte, []int) { return fileDescriptorEventBus, []int{3} }

func (m *RequestPostToEventBus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RequestPostToEventBus) GetDestinations() []int64 {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *RequestPostToEventBus) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

// Update about pubsub device connected
type UpdateEventBusDeviceConnected struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId   int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceId int64  `protobuf:"varint,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Peer     *Peer  `protobuf:"bytes,4,opt,name=peer" json:"peer,omitempty"`
}

func (m *UpdateEventBusDeviceConnected) Reset()      { *m = UpdateEventBusDeviceConnected{} }
func (*UpdateEventBusDeviceConnected) ProtoMessage() {}
func (*UpdateEventBusDeviceConnected) Descriptor() ([]byte, []int) {
	return fileDescriptorEventBus, []int{4}
}

func (m *UpdateEventBusDeviceConnected) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateEventBusDeviceConnected) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateEventBusDeviceConnected) GetDeviceId() int64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *UpdateEventBusDeviceConnected) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Update about device disconnected
type UpdateEventBusDeviceDisconnected struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId   int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceId int64  `protobuf:"varint,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Peer     *Peer  `protobuf:"bytes,4,opt,name=peer" json:"peer,omitempty"`
}

func (m *UpdateEventBusDeviceDisconnected) Reset()      { *m = UpdateEventBusDeviceDisconnected{} }
func (*UpdateEventBusDeviceDisconnected) ProtoMessage() {}
func (*UpdateEventBusDeviceDisconnected) Descriptor() ([]byte, []int) {
	return fileDescriptorEventBus, []int{5}
}

func (m *UpdateEventBusDeviceDisconnected) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateEventBusDeviceDisconnected) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateEventBusDeviceDisconnected) GetDeviceId() int64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *UpdateEventBusDeviceDisconnected) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Event Bus Message
type UpdateEventBusMessage struct {
	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderId       int32  `protobuf:"varint,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	SenderDeviceId int64  `protobuf:"varint,3,opt,name=sender_device_id,json=senderDeviceId,proto3" json:"sender_device_id,omitempty"`
	Message        []byte `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *UpdateEventBusMessage) Reset()                    { *m = UpdateEventBusMessage{} }
func (*UpdateEventBusMessage) ProtoMessage()               {}
func (*UpdateEventBusMessage) Descriptor() ([]byte, []int) { return fileDescriptorEventBus, []int{6} }

func (m *UpdateEventBusMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateEventBusMessage) GetSenderId() int32 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *UpdateEventBusMessage) GetSenderDeviceId() int64 {
	if m != nil {
		return m.SenderDeviceId
	}
	return 0
}

func (m *UpdateEventBusMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

// Event Bus dispose
type UpdateEventBusDisposed struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *UpdateEventBusDisposed) Reset()                    { *m = UpdateEventBusDisposed{} }
func (*UpdateEventBusDisposed) ProtoMessage()               {}
func (*UpdateEventBusDisposed) Descriptor() ([]byte, []int) { return fileDescriptorEventBus, []int{7} }

func (m *UpdateEventBusDisposed) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestJoinEventBus)(nil), "dialog.RequestJoinEventBus")
	proto.RegisterType((*ResponseJoinEventBus)(nil), "dialog.ResponseJoinEventBus")
	proto.RegisterType((*RequestKeepAliveEventBus)(nil), "dialog.RequestKeepAliveEventBus")
	proto.RegisterType((*RequestPostToEventBus)(nil), "dialog.RequestPostToEventBus")
	proto.RegisterType((*UpdateEventBusDeviceConnected)(nil), "dialog.UpdateEventBusDeviceConnected")
	proto.RegisterType((*UpdateEventBusDeviceDisconnected)(nil), "dialog.UpdateEventBusDeviceDisconnected")
	proto.RegisterType((*UpdateEventBusMessage)(nil), "dialog.UpdateEventBusMessage")
	proto.RegisterType((*UpdateEventBusDisposed)(nil), "dialog.UpdateEventBusDisposed")
}
func (this *RequestJoinEventBus) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestJoinEventBus)
	if !ok {
		that2, ok := that.(RequestJoinEventBus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	return true
}
func (this *ResponseJoinEventBus) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseJoinEventBus)
	if !ok {
		that2, ok := that.(ResponseJoinEventBus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	return true
}
func (this *RequestKeepAliveEventBus) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestKeepAliveEventBus)
	if !ok {
		that2, ok := that.(RequestKeepAliveEventBus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	return true
}
func (this *RequestPostToEventBus) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestPostToEventBus)
	if !ok {
		that2, ok := that.(RequestPostToEventBus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Destinations) != len(that1.Destinations) {
		return false
	}
	for i := range this.Destinations {
		if this.Destinations[i] != that1.Destinations[i] {
			return false
		}
	}
	if !bytes.Equal(this.Message, that1.Message) {
		return false
	}
	return true
}
func (this *UpdateEventBusDeviceConnected) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateEventBusDeviceConnected)
	if !ok {
		that2, ok := that.(UpdateEventBusDeviceConnected)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *UpdateEventBusDeviceDisconnected) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateEventBusDeviceDisconnected)
	if !ok {
		that2, ok := that.(UpdateEventBusDeviceDisconnected)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *UpdateEventBusMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateEventBusMessage)
	if !ok {
		that2, ok := that.(UpdateEventBusMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.SenderId != that1.SenderId {
		return false
	}
	if this.SenderDeviceId != that1.SenderDeviceId {
		return false
	}
	if !bytes.Equal(this.Message, that1.Message) {
		return false
	}
	return true
}
func (this *UpdateEventBusDisposed) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateEventBusDisposed)
	if !ok {
		that2, ok := that.(UpdateEventBusDisposed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *RequestJoinEventBus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestJoinEventBus{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseJoinEventBus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseJoinEventBus{")
	s = append(s, "DeviceId: "+fmt.Sprintf("%#v", this.DeviceId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestKeepAliveEventBus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestKeepAliveEventBus{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestPostToEventBus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestPostToEventBus{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Destinations: "+fmt.Sprintf("%#v", this.Destinations)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateEventBusDeviceConnected) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.UpdateEventBusDeviceConnected{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "DeviceId: "+fmt.Sprintf("%#v", this.DeviceId)+",\n")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateEventBusDeviceDisconnected) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.UpdateEventBusDeviceDisconnected{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "DeviceId: "+fmt.Sprintf("%#v", this.DeviceId)+",\n")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateEventBusMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.UpdateEventBusMessage{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "SenderId: "+fmt.Sprintf("%#v", this.SenderId)+",\n")
	s = append(s, "SenderDeviceId: "+fmt.Sprintf("%#v", this.SenderDeviceId)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateEventBusDisposed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateEventBusDisposed{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEventBus(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventBus service

type EventBusClient interface {
	JoinEventBus(ctx context.Context, in *RequestJoinEventBus, opts ...grpc.CallOption) (*ResponseJoinEventBus, error)
	KeepAliveEventBus(ctx context.Context, in *RequestKeepAliveEventBus, opts ...grpc.CallOption) (*ResponseVoid, error)
	PostToEventBus(ctx context.Context, in *RequestPostToEventBus, opts ...grpc.CallOption) (*ResponseVoid, error)
}

type eventBusClient struct {
	cc *grpc.ClientConn
}

func NewEventBusClient(cc *grpc.ClientConn) EventBusClient {
	return &eventBusClient{cc}
}

func (c *eventBusClient) JoinEventBus(ctx context.Context, in *RequestJoinEventBus, opts ...grpc.CallOption) (*ResponseJoinEventBus, error) {
	out := new(ResponseJoinEventBus)
	err := grpc.Invoke(ctx, "/dialog.EventBus/JoinEventBus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBusClient) KeepAliveEventBus(ctx context.Context, in *RequestKeepAliveEventBus, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.EventBus/KeepAliveEventBus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBusClient) PostToEventBus(ctx context.Context, in *RequestPostToEventBus, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.EventBus/PostToEventBus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventBus service

type EventBusServer interface {
	JoinEventBus(context.Context, *RequestJoinEventBus) (*ResponseJoinEventBus, error)
	KeepAliveEventBus(context.Context, *RequestKeepAliveEventBus) (*ResponseVoid, error)
	PostToEventBus(context.Context, *RequestPostToEventBus) (*ResponseVoid, error)
}

func RegisterEventBusServer(s *grpc.Server, srv EventBusServer) {
	s.RegisterService(&_EventBus_serviceDesc, srv)
}

func _EventBus_JoinEventBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestJoinEventBus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventBusServer).JoinEventBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.EventBus/JoinEventBus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventBusServer).JoinEventBus(ctx, req.(*RequestJoinEventBus))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventBus_KeepAliveEventBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestKeepAliveEventBus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventBusServer).KeepAliveEventBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.EventBus/KeepAliveEventBus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventBusServer).KeepAliveEventBus(ctx, req.(*RequestKeepAliveEventBus))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventBus_PostToEventBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPostToEventBus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventBusServer).PostToEventBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.EventBus/PostToEventBus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventBusServer).PostToEventBus(ctx, req.(*RequestPostToEventBus))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventBus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.EventBus",
	HandlerType: (*EventBusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinEventBus",
			Handler:    _EventBus_JoinEventBus_Handler,
		},
		{
			MethodName: "KeepAliveEventBus",
			Handler:    _EventBus_KeepAliveEventBus_Handler,
		},
		{
			MethodName: "PostToEventBus",
			Handler:    _EventBus_PostToEventBus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event_bus.proto",
}

func (m *RequestJoinEventBus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestJoinEventBus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(m.Timeout))
	}
	return i, nil
}

func (m *ResponseJoinEventBus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseJoinEventBus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DeviceId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(m.DeviceId))
	}
	return i, nil
}

func (m *RequestKeepAliveEventBus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestKeepAliveEventBus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(m.Timeout))
	}
	return i, nil
}

func (m *RequestPostToEventBus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPostToEventBus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Destinations) > 0 {
		dAtA2 := make([]byte, len(m.Destinations)*10)
		var j1 int
		for _, num1 := range m.Destinations {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *UpdateEventBusDeviceConnected) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEventBusDeviceConnected) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(m.UserId))
	}
	if m.DeviceId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(m.DeviceId))
	}
	if m.Peer != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(m.Peer.Size()))
		n3, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *UpdateEventBusDeviceDisconnected) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEventBusDeviceDisconnected) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(m.UserId))
	}
	if m.DeviceId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(m.DeviceId))
	}
	if m.Peer != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(m.Peer.Size()))
		n4, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *UpdateEventBusMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEventBusMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.SenderId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(m.SenderId))
	}
	if m.SenderDeviceId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(m.SenderDeviceId))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *UpdateEventBusDisposed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEventBusDisposed) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEventBus(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func encodeFixed64EventBus(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32EventBus(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintEventBus(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RequestJoinEventBus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEventBus(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovEventBus(uint64(m.Timeout))
	}
	return n
}

func (m *ResponseJoinEventBus) Size() (n int) {
	var l int
	_ = l
	if m.DeviceId != 0 {
		n += 1 + sovEventBus(uint64(m.DeviceId))
	}
	return n
}

func (m *RequestKeepAliveEventBus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEventBus(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovEventBus(uint64(m.Timeout))
	}
	return n
}

func (m *RequestPostToEventBus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEventBus(uint64(l))
	}
	if len(m.Destinations) > 0 {
		l = 0
		for _, e := range m.Destinations {
			l += sovEventBus(uint64(e))
		}
		n += 1 + sovEventBus(uint64(l)) + l
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovEventBus(uint64(l))
	}
	return n
}

func (m *UpdateEventBusDeviceConnected) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEventBus(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovEventBus(uint64(m.UserId))
	}
	if m.DeviceId != 0 {
		n += 1 + sovEventBus(uint64(m.DeviceId))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovEventBus(uint64(l))
	}
	return n
}

func (m *UpdateEventBusDeviceDisconnected) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEventBus(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovEventBus(uint64(m.UserId))
	}
	if m.DeviceId != 0 {
		n += 1 + sovEventBus(uint64(m.DeviceId))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovEventBus(uint64(l))
	}
	return n
}

func (m *UpdateEventBusMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEventBus(uint64(l))
	}
	if m.SenderId != 0 {
		n += 1 + sovEventBus(uint64(m.SenderId))
	}
	if m.SenderDeviceId != 0 {
		n += 1 + sovEventBus(uint64(m.SenderDeviceId))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovEventBus(uint64(l))
	}
	return n
}

func (m *UpdateEventBusDisposed) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEventBus(uint64(l))
	}
	return n
}

func sovEventBus(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEventBus(x uint64) (n int) {
	return sovEventBus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestJoinEventBus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestJoinEventBus{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseJoinEventBus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseJoinEventBus{`,
		`DeviceId:` + fmt.Sprintf("%v", this.DeviceId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestKeepAliveEventBus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestKeepAliveEventBus{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestPostToEventBus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestPostToEventBus{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Destinations:` + fmt.Sprintf("%v", this.Destinations) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateEventBusDeviceConnected) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateEventBusDeviceConnected{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`DeviceId:` + fmt.Sprintf("%v", this.DeviceId) + `,`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateEventBusDeviceDisconnected) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateEventBusDeviceDisconnected{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`DeviceId:` + fmt.Sprintf("%v", this.DeviceId) + `,`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateEventBusMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateEventBusMessage{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`SenderId:` + fmt.Sprintf("%v", this.SenderId) + `,`,
		`SenderDeviceId:` + fmt.Sprintf("%v", this.SenderDeviceId) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateEventBusDisposed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateEventBusDisposed{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEventBus(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestJoinEventBus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventBus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestJoinEventBus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestJoinEventBus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEventBus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseJoinEventBus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventBus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseJoinEventBus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseJoinEventBus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			m.DeviceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEventBus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestKeepAliveEventBus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventBus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestKeepAliveEventBus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestKeepAliveEventBus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEventBus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestPostToEventBus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventBus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPostToEventBus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPostToEventBus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEventBus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Destinations = append(m.Destinations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEventBus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEventBus
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEventBus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Destinations = append(m.Destinations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Destinations", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventBus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEventBusDeviceConnected) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventBus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEventBusDeviceConnected: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEventBusDeviceConnected: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			m.DeviceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventBus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEventBusDeviceDisconnected) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventBus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEventBusDeviceDisconnected: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEventBusDeviceDisconnected: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			m.DeviceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventBus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEventBusMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventBus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEventBusMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEventBusMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			m.SenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderDeviceId", wireType)
			}
			m.SenderDeviceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderDeviceId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventBus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEventBusDisposed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventBus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEventBusDisposed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEventBusDisposed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventBus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEventBus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEventBus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEventBus
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEventBus
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEventBus(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEventBus = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEventBus   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("event_bus.proto", fileDescriptorEventBus) }

var fileDescriptorEventBus = []byte{
	// 659 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x55, 0x4d, 0x6f, 0xd3, 0x4a,
	0x14, 0xcd, 0x24, 0x7d, 0xf9, 0xb8, 0xcd, 0xeb, 0x7b, 0x75, 0x3f, 0x30, 0xa1, 0xb5, 0x2c, 0x57,
	0x94, 0x10, 0x24, 0xbb, 0x2d, 0x8b, 0x4a, 0xd9, 0x54, 0x84, 0x56, 0xa8, 0x20, 0xa4, 0x2a, 0x02,
	0xb6, 0x95, 0xe3, 0xb9, 0x84, 0x91, 0x1c, 0x8f, 0xf1, 0x38, 0xd9, 0x74, 0x53, 0xb1, 0xec, 0x0a,
	0x89, 0x3f, 0xc1, 0x8e, 0x1f, 0x51, 0x09, 0xb1, 0xac, 0xc4, 0x86, 0x25, 0x35, 0x2c, 0x50, 0x57,
	0xe5, 0x1f, 0x20, 0xc7, 0x76, 0x49, 0xec, 0xd2, 0xb0, 0x42, 0x62, 0x65, 0x7b, 0xce, 0x99, 0x7b,
	0xee, 0xbd, 0x67, 0xe6, 0x1a, 0xfe, 0xc3, 0x01, 0x3a, 0xfe, 0x7e, 0xa7, 0x2f, 0x74, 0xd7, 0xe3,
	0x3e, 0x97, 0x8a, 0x94, 0x99, 0x36, 0xef, 0xd6, 0x96, 0xba, 0x9c, 0x77, 0x6d, 0x34, 0x4c, 0x97,
	0x19, 0xa6, 0xe3, 0x70, 0xdf, 0xf4, 0x19, 0x77, 0x62, 0x56, 0x6d, 0xda, 0x45, 0xf4, 0x92, 0x8f,
	0x59, 0x8a, 0xcf, 0x99, 0xc3, 0x46, 0xf1, 0xb9, 0x1e, 0x13, 0x16, 0xda, 0xb6, 0xe9, 0x20, 0x4f,
	0x42, 0xd7, 0x16, 0x84, 0x65, 0xda, 0xa6, 0xdb, 0x31, 0xe2, 0x67, 0xb4, 0xac, 0x1d, 0xc0, 0x5c,
	0x1b, 0x5f, 0xf6, 0x51, 0xf8, 0x0f, 0x39, 0x73, 0x76, 0xc2, 0x7c, 0x5a, 0x7d, 0x21, 0x2d, 0x43,
	0x9e, 0x51, 0x99, 0xa8, 0xa4, 0x5e, 0x69, 0xfd, 0x7b, 0x74, 0xb6, 0x56, 0x81, 0xd2, 0x80, 0x09,
	0xd6, 0xb1, 0xb1, 0x9d, 0x67, 0x54, 0xba, 0x05, 0x25, 0x9f, 0xf5, 0x90, 0xf7, 0x7d, 0x39, 0xaf,
	0x92, 0x7a, 0x21, 0xcd, 0x49, 0xd0, 0xe6, 0x52, 0xb0, 0x75, 0x1d, 0xae, 0xb1, 0x9e, 0x4e, 0xed,
	0xae, 0xde, 0xf5, 0x5c, 0x4b, 0x7f, 0xe0, 0xb9, 0x56, 0xac, 0xa8, 0xb5, 0x61, 0xbe, 0x8d, 0xc2,
	0xe5, 0x8e, 0xc0, 0x31, 0xf5, 0x1b, 0x50, 0xa1, 0x38, 0x60, 0x16, 0xee, 0xc7, 0x49, 0x14, 0xda,
	0xe5, 0x68, 0x61, 0x97, 0x36, 0x97, 0x83, 0xad, 0x1a, 0xc8, 0xd9, 0x90, 0x51, 0x1c, 0xed, 0x90,
	0x80, 0x1c, 0xc7, 0x7f, 0x84, 0xe8, 0xde, 0xb3, 0xd9, 0x00, 0xff, 0x70, 0x59, 0xef, 0x08, 0x2c,
	0xc4, 0xef, 0x7b, 0x5c, 0xf8, 0x4f, 0xf8, 0xef, 0xea, 0xaf, 0x43, 0x95, 0xa2, 0xf0, 0x99, 0x13,
	0xd9, 0x2d, 0xe7, 0xd5, 0x42, 0x36, 0x89, 0x31, 0x8a, 0xb4, 0x0a, 0xa5, 0x1e, 0x0a, 0x61, 0x76,
	0x51, 0x2e, 0xa8, 0xa4, 0x5e, 0x6d, 0x55, 0x8f, 0xce, 0xd6, 0xca, 0x50, 0x7c, 0xc1, 0x28, 0x45,
	0xa7, 0x9d, 0x80, 0x13, 0x32, 0x3e, 0x26, 0xb0, 0xfc, 0xd4, 0xa5, 0xa6, 0x7f, 0xd1, 0xaa, 0xed,
	0x61, 0xbb, 0xef, 0x73, 0xc7, 0x41, 0xcb, 0x47, 0x3a, 0x29, 0xf3, 0x55, 0x28, 0xf5, 0x05, 0x7a,
	0xa1, 0x5f, 0x61, 0xe7, 0xfe, 0x49, 0x73, 0x8a, 0x21, 0xba, 0x4b, 0xa5, 0xc6, 0xa8, 0xb3, 0x85,
	0xcb, 0x7a, 0x7c, 0x61, 0xb4, 0x64, 0xc0, 0x54, 0x78, 0xd0, 0xe5, 0x29, 0x95, 0xd4, 0xa7, 0x37,
	0xaa, 0x7a, 0x74, 0x37, 0xf4, 0x3d, 0x44, 0x2f, 0xbd, 0x69, 0x48, 0xd4, 0xde, 0x13, 0x50, 0x2f,
	0xab, 0x62, 0x9b, 0x09, 0xeb, 0xaf, 0x2a, 0xe4, 0x98, 0xc0, 0xc2, 0x78, 0x21, 0x8f, 0x23, 0x1b,
	0x27, 0x65, 0xdf, 0x80, 0x8a, 0x40, 0x87, 0x5e, 0x91, 0x7f, 0x39, 0xc2, 0x77, 0xa9, 0xb4, 0x09,
	0xff, 0xc7, 0xdc, 0x09, 0x85, 0xcc, 0x44, 0xb4, 0xed, 0xa4, 0x9c, 0x91, 0x23, 0x37, 0x75, 0xc5,
	0x91, 0xd3, 0x36, 0x61, 0x31, 0xe5, 0x06, 0x13, 0x2e, 0x17, 0x13, 0x3d, 0xd8, 0xf8, 0x9e, 0x87,
	0xf2, 0xc5, 0x95, 0xf1, 0xa1, 0x3a, 0x3e, 0x1b, 0x92, 0xf6, 0x5d, 0x32, 0xb6, 0x6a, 0x4b, 0x3f,
	0xc1, 0xec, 0x58, 0xd1, 0x6e, 0xbf, 0xfa, 0xf8, 0xf5, 0x4d, 0x7e, 0x45, 0x53, 0x8c, 0xc1, 0xba,
	0x11, 0xde, 0x01, 0x23, 0x81, 0x8c, 0x51, 0x5e, 0x93, 0x34, 0xa4, 0x03, 0x98, 0xcd, 0x4e, 0x0f,
	0x35, 0x25, 0x9d, 0x61, 0xd4, 0xe6, 0xd3, 0xfa, 0xcf, 0x38, 0xa3, 0x9a, 0x3e, 0xd4, 0xad, 0x6b,
	0x2b, 0x59, 0xdd, 0x4c, 0x88, 0x50, 0xdc, 0x83, 0x99, 0xf4, 0xdc, 0x48, 0x29, 0x8f, 0xc3, 0xbf,
	0x90, 0xbd, 0x33, 0x94, 0xbd, 0xa9, 0xa9, 0x59, 0xd9, 0xf1, 0xfd, 0x4d, 0xd2, 0x68, 0xed, 0x04,
	0x5b, 0x8b, 0x30, 0x3f, 0x3a, 0x1f, 0x04, 0x7a, 0xa1, 0xe1, 0xe2, 0xe4, 0x54, 0xc9, 0x7d, 0x3a,
	0x55, 0x72, 0xe7, 0xa7, 0x0a, 0x39, 0x0c, 0x14, 0xf2, 0x36, 0x50, 0xc8, 0x87, 0x40, 0x21, 0x27,
	0x81, 0x42, 0x3e, 0x07, 0x0a, 0xf9, 0x16, 0x28, 0xb9, 0xf3, 0x40, 0x21, 0xaf, 0xbf, 0x28, 0xb9,
	0x4e, 0x71, 0xf8, 0x57, 0xb9, 0xfb, 0x23, 0x00, 0x00, 0xff, 0xff, 0x57, 0x37, 0xd9, 0x3d, 0xda,
	0x06, 0x00, 0x00,
}
