// Code generated by protoc-gen-gogo.
// source: registration.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RequestRegisterDevice struct {
	ClientPk    []byte `protobuf:"bytes,1,opt,name=client_pk,json=clientPk,proto3" json:"client_pk,omitempty"`
	AppId       int32  `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppTitle    string `protobuf:"bytes,3,opt,name=app_title,json=appTitle,proto3" json:"app_title,omitempty"`
	DeviceTitle string `protobuf:"bytes,4,opt,name=device_title,json=deviceTitle,proto3" json:"device_title,omitempty"`
}

func (m *RequestRegisterDevice) Reset()      { *m = RequestRegisterDevice{} }
func (*RequestRegisterDevice) ProtoMessage() {}
func (*RequestRegisterDevice) Descriptor() ([]byte, []int) {
	return fileDescriptorRegistration, []int{0}
}

func (m *RequestRegisterDevice) GetClientPk() []byte {
	if m != nil {
		return m.ClientPk
	}
	return nil
}

func (m *RequestRegisterDevice) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestRegisterDevice) GetAppTitle() string {
	if m != nil {
		return m.AppTitle
	}
	return ""
}

func (m *RequestRegisterDevice) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

type ResponseDeviceRequest struct {
	ServerPk []byte `protobuf:"bytes,1,opt,name=server_pk,json=serverPk,proto3" json:"server_pk,omitempty"`
	AuthId   int64  `protobuf:"varint,2,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	Token    string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *ResponseDeviceRequest) Reset()      { *m = ResponseDeviceRequest{} }
func (*ResponseDeviceRequest) ProtoMessage() {}
func (*ResponseDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorRegistration, []int{1}
}

func (m *ResponseDeviceRequest) GetServerPk() []byte {
	if m != nil {
		return m.ServerPk
	}
	return nil
}

func (m *ResponseDeviceRequest) GetAuthId() int64 {
	if m != nil {
		return m.AuthId
	}
	return 0
}

func (m *ResponseDeviceRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type RegisterDeprecatedDeviceRequest struct {
}

func (m *RegisterDeprecatedDeviceRequest) Reset()      { *m = RegisterDeprecatedDeviceRequest{} }
func (*RegisterDeprecatedDeviceRequest) ProtoMessage() {}
func (*RegisterDeprecatedDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorRegistration, []int{2}
}

type RequestExchangeAuthIdForToken struct {
	AuthId    int64  `protobuf:"varint,1,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *RequestExchangeAuthIdForToken) Reset()      { *m = RequestExchangeAuthIdForToken{} }
func (*RequestExchangeAuthIdForToken) ProtoMessage() {}
func (*RequestExchangeAuthIdForToken) Descriptor() ([]byte, []int) {
	return fileDescriptorRegistration, []int{3}
}

func (m *RequestExchangeAuthIdForToken) GetAuthId() int64 {
	if m != nil {
		return m.AuthId
	}
	return 0
}

func (m *RequestExchangeAuthIdForToken) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestRegisterDevice)(nil), "dialog.RequestRegisterDevice")
	proto.RegisterType((*ResponseDeviceRequest)(nil), "dialog.ResponseDeviceRequest")
	proto.RegisterType((*RegisterDeprecatedDeviceRequest)(nil), "dialog.RegisterDeprecatedDeviceRequest")
	proto.RegisterType((*RequestExchangeAuthIdForToken)(nil), "dialog.RequestExchangeAuthIdForToken")
}
func (this *RequestRegisterDevice) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestRegisterDevice)
	if !ok {
		that2, ok := that.(RequestRegisterDevice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.ClientPk, that1.ClientPk) {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.AppTitle != that1.AppTitle {
		return false
	}
	if this.DeviceTitle != that1.DeviceTitle {
		return false
	}
	return true
}
func (this *ResponseDeviceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseDeviceRequest)
	if !ok {
		that2, ok := that.(ResponseDeviceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.ServerPk, that1.ServerPk) {
		return false
	}
	if this.AuthId != that1.AuthId {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *RegisterDeprecatedDeviceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RegisterDeprecatedDeviceRequest)
	if !ok {
		that2, ok := that.(RegisterDeprecatedDeviceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *RequestExchangeAuthIdForToken) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestExchangeAuthIdForToken)
	if !ok {
		that2, ok := that.(RequestExchangeAuthIdForToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AuthId != that1.AuthId {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	return true
}
func (this *RequestRegisterDevice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestRegisterDevice{")
	s = append(s, "ClientPk: "+fmt.Sprintf("%#v", this.ClientPk)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "AppTitle: "+fmt.Sprintf("%#v", this.AppTitle)+",\n")
	s = append(s, "DeviceTitle: "+fmt.Sprintf("%#v", this.DeviceTitle)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseDeviceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseDeviceRequest{")
	s = append(s, "ServerPk: "+fmt.Sprintf("%#v", this.ServerPk)+",\n")
	s = append(s, "AuthId: "+fmt.Sprintf("%#v", this.AuthId)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterDeprecatedDeviceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RegisterDeprecatedDeviceRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestExchangeAuthIdForToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestExchangeAuthIdForToken{")
	s = append(s, "AuthId: "+fmt.Sprintf("%#v", this.AuthId)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRegistration(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registration service

type RegistrationClient interface {
	ExchangeAuthIdForToken(ctx context.Context, in *RequestExchangeAuthIdForToken, opts ...grpc.CallOption) (*ResponseDeviceRequest, error)
	// / register device to get auth token
	RegisterDevice(ctx context.Context, in *RequestRegisterDevice, opts ...grpc.CallOption) (*ResponseDeviceRequest, error)
	// deprecated
	RegisterDeprecatedDevice(ctx context.Context, in *RegisterDeprecatedDeviceRequest, opts ...grpc.CallOption) (*ResponseDeviceRequest, error)
}

type registrationClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationClient(cc *grpc.ClientConn) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) ExchangeAuthIdForToken(ctx context.Context, in *RequestExchangeAuthIdForToken, opts ...grpc.CallOption) (*ResponseDeviceRequest, error) {
	out := new(ResponseDeviceRequest)
	err := grpc.Invoke(ctx, "/dialog.Registration/ExchangeAuthIdForToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) RegisterDevice(ctx context.Context, in *RequestRegisterDevice, opts ...grpc.CallOption) (*ResponseDeviceRequest, error) {
	out := new(ResponseDeviceRequest)
	err := grpc.Invoke(ctx, "/dialog.Registration/RegisterDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) RegisterDeprecatedDevice(ctx context.Context, in *RegisterDeprecatedDeviceRequest, opts ...grpc.CallOption) (*ResponseDeviceRequest, error) {
	out := new(ResponseDeviceRequest)
	err := grpc.Invoke(ctx, "/dialog.Registration/RegisterDeprecatedDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registration service

type RegistrationServer interface {
	ExchangeAuthIdForToken(context.Context, *RequestExchangeAuthIdForToken) (*ResponseDeviceRequest, error)
	// / register device to get auth token
	RegisterDevice(context.Context, *RequestRegisterDevice) (*ResponseDeviceRequest, error)
	// deprecated
	RegisterDeprecatedDevice(context.Context, *RegisterDeprecatedDeviceRequest) (*ResponseDeviceRequest, error)
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_ExchangeAuthIdForToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestExchangeAuthIdForToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ExchangeAuthIdForToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Registration/ExchangeAuthIdForToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ExchangeAuthIdForToken(ctx, req.(*RequestExchangeAuthIdForToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegisterDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Registration/RegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterDevice(ctx, req.(*RequestRegisterDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_RegisterDeprecatedDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeprecatedDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterDeprecatedDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Registration/RegisterDeprecatedDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterDeprecatedDevice(ctx, req.(*RegisterDeprecatedDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangeAuthIdForToken",
			Handler:    _Registration_ExchangeAuthIdForToken_Handler,
		},
		{
			MethodName: "RegisterDevice",
			Handler:    _Registration_RegisterDevice_Handler,
		},
		{
			MethodName: "RegisterDeprecatedDevice",
			Handler:    _Registration_RegisterDeprecatedDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registration.proto",
}

func (m *RequestRegisterDevice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRegisterDevice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClientPk) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistration(dAtA, i, uint64(len(m.ClientPk)))
		i += copy(dAtA[i:], m.ClientPk)
	}
	if m.AppId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegistration(dAtA, i, uint64(m.AppId))
	}
	if len(m.AppTitle) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegistration(dAtA, i, uint64(len(m.AppTitle)))
		i += copy(dAtA[i:], m.AppTitle)
	}
	if len(m.DeviceTitle) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRegistration(dAtA, i, uint64(len(m.DeviceTitle)))
		i += copy(dAtA[i:], m.DeviceTitle)
	}
	return i, nil
}

func (m *ResponseDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServerPk) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegistration(dAtA, i, uint64(len(m.ServerPk)))
		i += copy(dAtA[i:], m.ServerPk)
	}
	if m.AuthId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegistration(dAtA, i, uint64(m.AuthId))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegistration(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *RegisterDeprecatedDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterDeprecatedDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RequestExchangeAuthIdForToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestExchangeAuthIdForToken) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AuthId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegistration(dAtA, i, uint64(m.AuthId))
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegistration(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	return i, nil
}

func encodeFixed64Registration(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Registration(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRegistration(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RequestRegisterDevice) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClientPk)
	if l > 0 {
		n += 1 + l + sovRegistration(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovRegistration(uint64(m.AppId))
	}
	l = len(m.AppTitle)
	if l > 0 {
		n += 1 + l + sovRegistration(uint64(l))
	}
	l = len(m.DeviceTitle)
	if l > 0 {
		n += 1 + l + sovRegistration(uint64(l))
	}
	return n
}

func (m *ResponseDeviceRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServerPk)
	if l > 0 {
		n += 1 + l + sovRegistration(uint64(l))
	}
	if m.AuthId != 0 {
		n += 1 + sovRegistration(uint64(m.AuthId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovRegistration(uint64(l))
	}
	return n
}

func (m *RegisterDeprecatedDeviceRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RequestExchangeAuthIdForToken) Size() (n int) {
	var l int
	_ = l
	if m.AuthId != 0 {
		n += 1 + sovRegistration(uint64(m.AuthId))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovRegistration(uint64(l))
	}
	return n
}

func sovRegistration(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRegistration(x uint64) (n int) {
	return sovRegistration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestRegisterDevice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRegisterDevice{`,
		`ClientPk:` + fmt.Sprintf("%v", this.ClientPk) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`AppTitle:` + fmt.Sprintf("%v", this.AppTitle) + `,`,
		`DeviceTitle:` + fmt.Sprintf("%v", this.DeviceTitle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseDeviceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseDeviceRequest{`,
		`ServerPk:` + fmt.Sprintf("%v", this.ServerPk) + `,`,
		`AuthId:` + fmt.Sprintf("%v", this.AuthId) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterDeprecatedDeviceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterDeprecatedDeviceRequest{`,
		`}`,
	}, "")
	return s
}
func (this *RequestExchangeAuthIdForToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestExchangeAuthIdForToken{`,
		`AuthId:` + fmt.Sprintf("%v", this.AuthId) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRegistration(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestRegisterDevice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRegisterDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRegisterDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegistration
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientPk = append(m.ClientPk[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientPk == nil {
				m.ClientPk = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistration
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistration
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegistration
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerPk = append(m.ServerPk[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerPk == nil {
				m.ServerPk = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthId", wireType)
			}
			m.AuthId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistration
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterDeprecatedDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterDeprecatedDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterDeprecatedDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRegistration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestExchangeAuthIdForToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestExchangeAuthIdForToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestExchangeAuthIdForToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthId", wireType)
			}
			m.AuthId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegistration
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegistration(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegistration
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRegistration
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRegistration
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRegistration(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRegistration = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegistration   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("registration.proto", fileDescriptorRegistration) }

var fileDescriptorRegistration = []byte{
	// 519 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0x95, 0x96, 0xd5, 0x54, 0x1c, 0xac, 0x75, 0x2b, 0xa5, 0x35, 0x5d, 0x04, 0xa2,
	0x4c, 0x28, 0xd1, 0xd8, 0x01, 0xd1, 0x4b, 0x05, 0x62, 0xa0, 0xdd, 0xa6, 0x68, 0xe2, 0x3a, 0x79,
	0x89, 0x95, 0x59, 0x0d, 0xb1, 0x71, 0xdc, 0x8a, 0x1b, 0x68, 0x9f, 0x00, 0x89, 0x03, 0x27, 0xee,
	0xf0, 0x4d, 0xe0, 0x36, 0x89, 0x0b, 0x47, 0x6a, 0x38, 0x70, 0xdc, 0x47, 0x40, 0xb1, 0x83, 0x9a,
	0x6c, 0xdd, 0x7a, 0x4a, 0xde, 0xfb, 0xdb, 0xef, 0xff, 0xd3, 0x7b, 0xcf, 0x10, 0x49, 0x1a, 0xb1,
	0x54, 0x49, 0xa2, 0x18, 0x4f, 0x5c, 0x21, 0xb9, 0xe2, 0xa8, 0x1e, 0x32, 0x12, 0xf3, 0xa8, 0xd3,
	0x4a, 0x03, 0x12, 0x13, 0x71, 0xe4, 0xe5, 0x5f, 0x2b, 0x77, 0xba, 0x11, 0xe7, 0x51, 0x4c, 0x3d,
	0x22, 0x98, 0x47, 0x92, 0x84, 0x2b, 0x73, 0x37, 0xb5, 0xaa, 0xf3, 0x15, 0xc0, 0x96, 0x4f, 0xdf,
	0x4c, 0x68, 0xaa, 0x7c, 0x53, 0x9a, 0xca, 0xe7, 0x74, 0xca, 0x02, 0x8a, 0x6e, 0xc3, 0x46, 0x10,
	0x33, 0x9a, 0xa8, 0x43, 0x31, 0x6e, 0x83, 0x3e, 0x18, 0x34, 0xfd, 0x55, 0x9b, 0xd8, 0x1f, 0xa3,
	0x16, 0xac, 0x13, 0x21, 0x0e, 0x59, 0xd8, 0x5e, 0xe9, 0x83, 0x41, 0xcd, 0xaf, 0x11, 0x21, 0xf6,
	0xc2, 0xec, 0x4e, 0x96, 0x56, 0x4c, 0xc5, 0xb4, 0x5d, 0xed, 0x83, 0x41, 0xc3, 0x5f, 0x25, 0x42,
	0x1c, 0x64, 0x31, 0xda, 0x84, 0xcd, 0xd0, 0x94, 0xce, 0xf5, 0x6b, 0x46, 0xbf, 0x61, 0x73, 0xe6,
	0xc8, 0xb0, 0xab, 0x47, 0xb7, 0xe0, 0x06, 0x7b, 0xed, 0x86, 0x71, 0xe4, 0x46, 0x52, 0x04, 0xee,
	0x4b, 0x29, 0x82, 0x9c, 0xcf, 0x39, 0x31, 0xac, 0xa9, 0xe0, 0x49, 0x4a, 0x2d, 0x64, 0xae, 0x64,
	0xbe, 0x29, 0x95, 0x53, 0x2a, 0x0b, 0xac, 0x36, 0xb1, 0x3f, 0x46, 0x1b, 0xf0, 0x3a, 0x99, 0xa8,
	0xe3, 0xff, 0xb0, 0x55, 0xbf, 0x9e, 0x85, 0x7b, 0x21, 0x5a, 0x83, 0x35, 0xc5, 0xc7, 0x34, 0xc9,
	0x49, 0x6d, 0x30, 0xec, 0xe9, 0x51, 0x07, 0xb6, 0x2f, 0x32, 0x58, 0x5f, 0x67, 0x13, 0xde, 0x99,
	0x37, 0x4a, 0x48, 0x1a, 0x10, 0x45, 0xc3, 0x12, 0x8d, 0xf3, 0x0a, 0xf6, 0xf2, 0xdf, 0xdd, 0xb7,
	0xc1, 0x31, 0x49, 0x22, 0xfa, 0xd4, 0x18, 0xbe, 0xe0, 0xf2, 0x20, 0xb3, 0x28, 0x12, 0x81, 0x12,
	0x51, 0x17, 0x36, 0x52, 0x16, 0x25, 0x44, 0x4d, 0x24, 0x35, 0xb0, 0x4d, 0x7f, 0x9e, 0x78, 0xf4,
	0xbd, 0x0a, 0x9b, 0x7e, 0x61, 0xfe, 0xe8, 0x13, 0x80, 0xeb, 0x97, 0x58, 0xdc, 0x73, 0xed, 0x56,
	0xb8, 0x57, 0x92, 0x74, 0x7a, 0xf3, 0x63, 0x0b, 0xfa, 0xea, 0x3c, 0x3e, 0xf9, 0xf1, 0xe7, 0xe3,
	0xca, 0xb6, 0xf3, 0xd0, 0x9b, 0x6e, 0x7b, 0x59, 0x2f, 0xbc, 0xa2, 0xbf, 0xb7, 0xb8, 0xe8, 0x10,
	0x6c, 0xa1, 0x77, 0xf0, 0xe6, 0xb9, 0x75, 0xea, 0x9d, 0x03, 0x2a, 0xcb, 0xcb, 0x40, 0x3c, 0x03,
	0xf2, 0xc0, 0xb9, 0xbb, 0x18, 0xa4, 0x5c, 0x2c, 0x03, 0xf8, 0x0c, 0x60, 0xfb, 0xb2, 0x39, 0xa1,
	0xfb, 0x73, 0xb3, 0x2b, 0x27, 0xb9, 0x8c, 0xea, 0x89, 0xa1, 0xda, 0x71, 0xdc, 0x65, 0x54, 0xe5,
	0xea, 0x43, 0xb0, 0xf5, 0x6c, 0x57, 0x8f, 0xd6, 0xe1, 0x5a, 0x71, 0xcb, 0xb2, 0x7d, 0x65, 0x01,
	0x4d, 0x4f, 0x67, 0xb8, 0xf2, 0x73, 0x86, 0x2b, 0x67, 0x33, 0x0c, 0xde, 0x6b, 0x0c, 0xbe, 0x68,
	0x0c, 0xbe, 0x69, 0x0c, 0x4e, 0x35, 0x06, 0xbf, 0x34, 0x06, 0x7f, 0x35, 0xae, 0x9c, 0x69, 0x0c,
	0x3e, 0xfc, 0xc6, 0x95, 0xa3, 0xba, 0x79, 0xc5, 0x3b, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x6a,
	0x05, 0x65, 0x87, 0x18, 0x04, 0x00, 0x00,
}
