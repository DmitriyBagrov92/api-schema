// Code generated by protoc-gen-gogo.
// source: push.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Registering push token on server
type RequestRegisterGooglePush struct {
	ProjectId int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *RequestRegisterGooglePush) Reset()                    { *m = RequestRegisterGooglePush{} }
func (*RequestRegisterGooglePush) ProtoMessage()               {}
func (*RequestRegisterGooglePush) Descriptor() ([]byte, []int) { return fileDescriptorPush, []int{0} }

func (m *RequestRegisterGooglePush) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *RequestRegisterGooglePush) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Unregistering Google Push
type RequestUnregisterGooglePush struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *RequestUnregisterGooglePush) Reset()                    { *m = RequestUnregisterGooglePush{} }
func (*RequestUnregisterGooglePush) ProtoMessage()               {}
func (*RequestUnregisterGooglePush) Descriptor() ([]byte, []int) { return fileDescriptorPush, []int{1} }

func (m *RequestUnregisterGooglePush) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Registering apple push on server
type RequestRegisterApplePush struct {
	ApnsKey int32  `protobuf:"varint,1,opt,name=apns_key,json=apnsKey,proto3" json:"apns_key,omitempty"`
	Token   string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *RequestRegisterApplePush) Reset()                    { *m = RequestRegisterApplePush{} }
func (*RequestRegisterApplePush) ProtoMessage()               {}
func (*RequestRegisterApplePush) Descriptor() ([]byte, []int) { return fileDescriptorPush, []int{2} }

func (m *RequestRegisterApplePush) GetApnsKey() int32 {
	if m != nil {
		return m.ApnsKey
	}
	return 0
}

func (m *RequestRegisterApplePush) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Unregistering Apple Push
type RequestUnregisterApplePush struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *RequestUnregisterApplePush) Reset()                    { *m = RequestUnregisterApplePush{} }
func (*RequestUnregisterApplePush) ProtoMessage()               {}
func (*RequestUnregisterApplePush) Descriptor() ([]byte, []int) { return fileDescriptorPush, []int{3} }

func (m *RequestUnregisterApplePush) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Registration of a new Apple's PushKit tokens
type RequestRegisterApplePushKit struct {
	ApnsKey int32  `protobuf:"varint,1,opt,name=apns_key,json=apnsKey,proto3" json:"apns_key,omitempty"`
	Token   string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *RequestRegisterApplePushKit) Reset()                    { *m = RequestRegisterApplePushKit{} }
func (*RequestRegisterApplePushKit) ProtoMessage()               {}
func (*RequestRegisterApplePushKit) Descriptor() ([]byte, []int) { return fileDescriptorPush, []int{4} }

func (m *RequestRegisterApplePushKit) GetApnsKey() int32 {
	if m != nil {
		return m.ApnsKey
	}
	return 0
}

func (m *RequestRegisterApplePushKit) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Unregistering Apple Push Kit token
type RequestUnregisterApplePushKit struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *RequestUnregisterApplePushKit) Reset()      { *m = RequestUnregisterApplePushKit{} }
func (*RequestUnregisterApplePushKit) ProtoMessage() {}
func (*RequestUnregisterApplePushKit) Descriptor() ([]byte, []int) {
	return fileDescriptorPush, []int{5}
}

func (m *RequestUnregisterApplePushKit) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Registering Apple Push Token
type RequestRegisterApplePushToken struct {
	BundleId string `protobuf:"bytes,1,opt,name=bundle_id,json=bundleId,proto3" json:"bundle_id,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *RequestRegisterApplePushToken) Reset()      { *m = RequestRegisterApplePushToken{} }
func (*RequestRegisterApplePushToken) ProtoMessage() {}
func (*RequestRegisterApplePushToken) Descriptor() ([]byte, []int) {
	return fileDescriptorPush, []int{6}
}

func (m *RequestRegisterApplePushToken) GetBundleId() string {
	if m != nil {
		return m.BundleId
	}
	return ""
}

func (m *RequestRegisterApplePushToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Unregister Apple Push token
type RequestUnregisterApplePushToken struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *RequestUnregisterApplePushToken) Reset()      { *m = RequestUnregisterApplePushToken{} }
func (*RequestUnregisterApplePushToken) ProtoMessage() {}
func (*RequestUnregisterApplePushToken) Descriptor() ([]byte, []int) {
	return fileDescriptorPush, []int{7}
}

func (m *RequestUnregisterApplePushToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestRegisterGooglePush)(nil), "dialog.RequestRegisterGooglePush")
	proto.RegisterType((*RequestUnregisterGooglePush)(nil), "dialog.RequestUnregisterGooglePush")
	proto.RegisterType((*RequestRegisterApplePush)(nil), "dialog.RequestRegisterApplePush")
	proto.RegisterType((*RequestUnregisterApplePush)(nil), "dialog.RequestUnregisterApplePush")
	proto.RegisterType((*RequestRegisterApplePushKit)(nil), "dialog.RequestRegisterApplePushKit")
	proto.RegisterType((*RequestUnregisterApplePushKit)(nil), "dialog.RequestUnregisterApplePushKit")
	proto.RegisterType((*RequestRegisterApplePushToken)(nil), "dialog.RequestRegisterApplePushToken")
	proto.RegisterType((*RequestUnregisterApplePushToken)(nil), "dialog.RequestUnregisterApplePushToken")
}
func (this *RequestRegisterGooglePush) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestRegisterGooglePush)
	if !ok {
		that2, ok := that.(RequestRegisterGooglePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ProjectId != that1.ProjectId {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *RequestUnregisterGooglePush) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestUnregisterGooglePush)
	if !ok {
		that2, ok := that.(RequestUnregisterGooglePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *RequestRegisterApplePush) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestRegisterApplePush)
	if !ok {
		that2, ok := that.(RequestRegisterApplePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ApnsKey != that1.ApnsKey {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *RequestUnregisterApplePush) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestUnregisterApplePush)
	if !ok {
		that2, ok := that.(RequestUnregisterApplePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *RequestRegisterApplePushKit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestRegisterApplePushKit)
	if !ok {
		that2, ok := that.(RequestRegisterApplePushKit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ApnsKey != that1.ApnsKey {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *RequestUnregisterApplePushKit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestUnregisterApplePushKit)
	if !ok {
		that2, ok := that.(RequestUnregisterApplePushKit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *RequestRegisterApplePushToken) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestRegisterApplePushToken)
	if !ok {
		that2, ok := that.(RequestRegisterApplePushToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.BundleId != that1.BundleId {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *RequestUnregisterApplePushToken) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestUnregisterApplePushToken)
	if !ok {
		that2, ok := that.(RequestUnregisterApplePushToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *RequestRegisterGooglePush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestRegisterGooglePush{")
	s = append(s, "ProjectId: "+fmt.Sprintf("%#v", this.ProjectId)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestUnregisterGooglePush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestUnregisterGooglePush{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRegisterApplePush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestRegisterApplePush{")
	s = append(s, "ApnsKey: "+fmt.Sprintf("%#v", this.ApnsKey)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestUnregisterApplePush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestUnregisterApplePush{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRegisterApplePushKit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestRegisterApplePushKit{")
	s = append(s, "ApnsKey: "+fmt.Sprintf("%#v", this.ApnsKey)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestUnregisterApplePushKit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestUnregisterApplePushKit{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRegisterApplePushToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestRegisterApplePushToken{")
	s = append(s, "BundleId: "+fmt.Sprintf("%#v", this.BundleId)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestUnregisterApplePushToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestUnregisterApplePushToken{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPush(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Push service

type PushClient interface {
	RegisterGooglePush(ctx context.Context, in *RequestRegisterGooglePush, opts ...grpc.CallOption) (*ResponseVoid, error)
	UnregisterGooglePush(ctx context.Context, in *RequestUnregisterGooglePush, opts ...grpc.CallOption) (*ResponseVoid, error)
	RegisterApplePush(ctx context.Context, in *RequestRegisterApplePush, opts ...grpc.CallOption) (*ResponseVoid, error)
	UnregisterApplePush(ctx context.Context, in *RequestUnregisterApplePush, opts ...grpc.CallOption) (*ResponseVoid, error)
	RegisterApplePushKit(ctx context.Context, in *RequestRegisterApplePushKit, opts ...grpc.CallOption) (*ResponseVoid, error)
	UnregisterApplePushKit(ctx context.Context, in *RequestUnregisterApplePushKit, opts ...grpc.CallOption) (*ResponseVoid, error)
	RegisterApplePushToken(ctx context.Context, in *RequestRegisterApplePushToken, opts ...grpc.CallOption) (*ResponseVoid, error)
	UnregisterApplePushToken(ctx context.Context, in *RequestUnregisterApplePushToken, opts ...grpc.CallOption) (*ResponseVoid, error)
}

type pushClient struct {
	cc *grpc.ClientConn
}

func NewPushClient(cc *grpc.ClientConn) PushClient {
	return &pushClient{cc}
}

func (c *pushClient) RegisterGooglePush(ctx context.Context, in *RequestRegisterGooglePush, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Push/RegisterGooglePush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) UnregisterGooglePush(ctx context.Context, in *RequestUnregisterGooglePush, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Push/UnregisterGooglePush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) RegisterApplePush(ctx context.Context, in *RequestRegisterApplePush, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Push/RegisterApplePush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) UnregisterApplePush(ctx context.Context, in *RequestUnregisterApplePush, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Push/UnregisterApplePush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) RegisterApplePushKit(ctx context.Context, in *RequestRegisterApplePushKit, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Push/RegisterApplePushKit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) UnregisterApplePushKit(ctx context.Context, in *RequestUnregisterApplePushKit, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Push/UnregisterApplePushKit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) RegisterApplePushToken(ctx context.Context, in *RequestRegisterApplePushToken, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Push/RegisterApplePushToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) UnregisterApplePushToken(ctx context.Context, in *RequestUnregisterApplePushToken, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Push/UnregisterApplePushToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Push service

type PushServer interface {
	RegisterGooglePush(context.Context, *RequestRegisterGooglePush) (*ResponseVoid, error)
	UnregisterGooglePush(context.Context, *RequestUnregisterGooglePush) (*ResponseVoid, error)
	RegisterApplePush(context.Context, *RequestRegisterApplePush) (*ResponseVoid, error)
	UnregisterApplePush(context.Context, *RequestUnregisterApplePush) (*ResponseVoid, error)
	RegisterApplePushKit(context.Context, *RequestRegisterApplePushKit) (*ResponseVoid, error)
	UnregisterApplePushKit(context.Context, *RequestUnregisterApplePushKit) (*ResponseVoid, error)
	RegisterApplePushToken(context.Context, *RequestRegisterApplePushToken) (*ResponseVoid, error)
	UnregisterApplePushToken(context.Context, *RequestUnregisterApplePushToken) (*ResponseVoid, error)
}

func RegisterPushServer(s *grpc.Server, srv PushServer) {
	s.RegisterService(&_Push_serviceDesc, srv)
}

func _Push_RegisterGooglePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegisterGooglePush)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).RegisterGooglePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Push/RegisterGooglePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).RegisterGooglePush(ctx, req.(*RequestRegisterGooglePush))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_UnregisterGooglePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUnregisterGooglePush)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).UnregisterGooglePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Push/UnregisterGooglePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).UnregisterGooglePush(ctx, req.(*RequestUnregisterGooglePush))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_RegisterApplePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegisterApplePush)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).RegisterApplePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Push/RegisterApplePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).RegisterApplePush(ctx, req.(*RequestRegisterApplePush))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_UnregisterApplePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUnregisterApplePush)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).UnregisterApplePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Push/UnregisterApplePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).UnregisterApplePush(ctx, req.(*RequestUnregisterApplePush))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_RegisterApplePushKit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegisterApplePushKit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).RegisterApplePushKit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Push/RegisterApplePushKit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).RegisterApplePushKit(ctx, req.(*RequestRegisterApplePushKit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_UnregisterApplePushKit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUnregisterApplePushKit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).UnregisterApplePushKit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Push/UnregisterApplePushKit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).UnregisterApplePushKit(ctx, req.(*RequestUnregisterApplePushKit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_RegisterApplePushToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegisterApplePushToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).RegisterApplePushToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Push/RegisterApplePushToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).RegisterApplePushToken(ctx, req.(*RequestRegisterApplePushToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_UnregisterApplePushToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUnregisterApplePushToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).UnregisterApplePushToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Push/UnregisterApplePushToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).UnregisterApplePushToken(ctx, req.(*RequestUnregisterApplePushToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _Push_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Push",
	HandlerType: (*PushServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterGooglePush",
			Handler:    _Push_RegisterGooglePush_Handler,
		},
		{
			MethodName: "UnregisterGooglePush",
			Handler:    _Push_UnregisterGooglePush_Handler,
		},
		{
			MethodName: "RegisterApplePush",
			Handler:    _Push_RegisterApplePush_Handler,
		},
		{
			MethodName: "UnregisterApplePush",
			Handler:    _Push_UnregisterApplePush_Handler,
		},
		{
			MethodName: "RegisterApplePushKit",
			Handler:    _Push_RegisterApplePushKit_Handler,
		},
		{
			MethodName: "UnregisterApplePushKit",
			Handler:    _Push_UnregisterApplePushKit_Handler,
		},
		{
			MethodName: "RegisterApplePushToken",
			Handler:    _Push_RegisterApplePushToken_Handler,
		},
		{
			MethodName: "UnregisterApplePushToken",
			Handler:    _Push_UnregisterApplePushToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "push.proto",
}

func (m *RequestRegisterGooglePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRegisterGooglePush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProjectId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPush(dAtA, i, uint64(m.ProjectId))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPush(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *RequestUnregisterGooglePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUnregisterGooglePush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPush(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *RequestRegisterApplePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRegisterApplePush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApnsKey != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPush(dAtA, i, uint64(m.ApnsKey))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPush(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *RequestUnregisterApplePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUnregisterApplePush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPush(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *RequestRegisterApplePushKit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRegisterApplePushKit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApnsKey != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPush(dAtA, i, uint64(m.ApnsKey))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPush(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *RequestUnregisterApplePushKit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUnregisterApplePushKit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPush(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *RequestRegisterApplePushToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRegisterApplePushToken) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BundleId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPush(dAtA, i, uint64(len(m.BundleId)))
		i += copy(dAtA[i:], m.BundleId)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPush(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *RequestUnregisterApplePushToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUnregisterApplePushToken) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPush(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func encodeFixed64Push(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Push(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPush(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RequestRegisterGooglePush) Size() (n int) {
	var l int
	_ = l
	if m.ProjectId != 0 {
		n += 1 + sovPush(uint64(m.ProjectId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	return n
}

func (m *RequestUnregisterGooglePush) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	return n
}

func (m *RequestRegisterApplePush) Size() (n int) {
	var l int
	_ = l
	if m.ApnsKey != 0 {
		n += 1 + sovPush(uint64(m.ApnsKey))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	return n
}

func (m *RequestUnregisterApplePush) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	return n
}

func (m *RequestRegisterApplePushKit) Size() (n int) {
	var l int
	_ = l
	if m.ApnsKey != 0 {
		n += 1 + sovPush(uint64(m.ApnsKey))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	return n
}

func (m *RequestUnregisterApplePushKit) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	return n
}

func (m *RequestRegisterApplePushToken) Size() (n int) {
	var l int
	_ = l
	l = len(m.BundleId)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	return n
}

func (m *RequestUnregisterApplePushToken) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	return n
}

func sovPush(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPush(x uint64) (n int) {
	return sovPush(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestRegisterGooglePush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRegisterGooglePush{`,
		`ProjectId:` + fmt.Sprintf("%v", this.ProjectId) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestUnregisterGooglePush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestUnregisterGooglePush{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRegisterApplePush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRegisterApplePush{`,
		`ApnsKey:` + fmt.Sprintf("%v", this.ApnsKey) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestUnregisterApplePush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestUnregisterApplePush{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRegisterApplePushKit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRegisterApplePushKit{`,
		`ApnsKey:` + fmt.Sprintf("%v", this.ApnsKey) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestUnregisterApplePushKit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestUnregisterApplePushKit{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRegisterApplePushToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRegisterApplePushToken{`,
		`BundleId:` + fmt.Sprintf("%v", this.BundleId) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestUnregisterApplePushToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestUnregisterApplePushToken{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPush(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestRegisterGooglePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRegisterGooglePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRegisterGooglePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			m.ProjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUnregisterGooglePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUnregisterGooglePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUnregisterGooglePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRegisterApplePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRegisterApplePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRegisterApplePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApnsKey", wireType)
			}
			m.ApnsKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApnsKey |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUnregisterApplePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUnregisterApplePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUnregisterApplePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRegisterApplePushKit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRegisterApplePushKit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRegisterApplePushKit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApnsKey", wireType)
			}
			m.ApnsKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApnsKey |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUnregisterApplePushKit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUnregisterApplePushKit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUnregisterApplePushKit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRegisterApplePushToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRegisterApplePushToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRegisterApplePushToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUnregisterApplePushToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUnregisterApplePushToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUnregisterApplePushToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPush(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPush
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPush
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPush
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPush
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPush
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPush(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPush = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPush   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("push.proto", fileDescriptorPush) }

var fileDescriptorPush = []byte{
	// 635 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x96, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0x85, 0xb6, 0xc9, 0x13, 0x0c, 0x75, 0x4b, 0x49, 0x43, 0x71, 0x53, 0xb7, 0x69,
	0x43, 0x02, 0x76, 0x0b, 0x5b, 0x97, 0x8a, 0x48, 0xa8, 0x42, 0x59, 0x50, 0x04, 0x8c, 0x44, 0x8e,
	0x7d, 0x38, 0x47, 0x5d, 0x9f, 0xf1, 0x39, 0x41, 0x45, 0x42, 0xaa, 0x18, 0x2a, 0x11, 0x81, 0x84,
	0xc4, 0x27, 0x60, 0xe3, 0xa3, 0x30, 0x56, 0x62, 0x61, 0x24, 0x86, 0x01, 0x75, 0xea, 0x47, 0x40,
	0xb6, 0x93, 0x34, 0x8d, 0x7d, 0x58, 0x25, 0x15, 0x53, 0xa2, 0xbb, 0x77, 0xef, 0xff, 0xfb, 0x3f,
	0xdd, 0xff, 0x64, 0x00, 0xbb, 0xc5, 0x9a, 0xb2, 0xed, 0x50, 0x97, 0x0a, 0x53, 0x3a, 0x51, 0x4d,
	0x6a, 0xe4, 0x16, 0x0d, 0x4a, 0x0d, 0x13, 0x2b, 0xaa, 0x4d, 0x14, 0xd5, 0xb2, 0xa8, 0xab, 0xba,
	0x84, 0x5a, 0x2c, 0xac, 0xca, 0xcd, 0xe8, 0xf8, 0x39, 0xb1, 0xc8, 0xf0, 0xd2, 0xec, 0x1e, 0x61,
	0x1a, 0x36, 0x4d, 0xd5, 0xc2, 0xb4, 0xd5, 0x5f, 0xbc, 0xc6, 0x34, 0xd5, 0x54, 0xed, 0x86, 0xd2,
	0xfb, 0x0d, 0x97, 0xa5, 0x0e, 0x82, 0x85, 0x1a, 0x7e, 0xd9, 0xc2, 0xcc, 0xad, 0x61, 0x83, 0x30,
	0x17, 0x3b, 0x3b, 0x81, 0xdc, 0xa3, 0x16, 0x6b, 0x0a, 0x65, 0x00, 0xdb, 0xa1, 0x2f, 0xb0, 0xe6,
	0xd6, 0x89, 0x9e, 0x45, 0x79, 0x54, 0xbc, 0x54, 0xb9, 0xd2, 0x39, 0xde, 0x48, 0xc3, 0x54, 0x93,
	0xe8, 0x3a, 0xb6, 0x6a, 0x99, 0xde, 0xfe, 0x43, 0x5d, 0x90, 0x60, 0xd2, 0xa5, 0xbb, 0xd8, 0xca,
	0x4e, 0xe4, 0x51, 0x31, 0x33, 0x52, 0x17, 0x6e, 0x6d, 0x2d, 0x7a, 0xdb, 0x0b, 0x70, 0x9d, 0xec,
	0xc9, 0xba, 0x69, 0xc8, 0x86, 0x63, 0x6b, 0xf2, 0x8e, 0x63, 0x6b, 0x3d, 0x00, 0xa9, 0x0e, 0x37,
	0x7a, 0x7f, 0x9f, 0x58, 0x4e, 0x94, 0x66, 0x20, 0x80, 0xfe, 0x55, 0xe0, 0x10, 0x41, 0x76, 0xc4,
	0xed, 0x7d, 0xdb, 0xee, 0xb5, 0x2f, 0x42, 0x5a, 0xb5, 0x2d, 0x56, 0xdf, 0xc5, 0xfb, 0x81, 0xc2,
	0x64, 0xe5, 0x6a, 0xe7, 0x78, 0x23, 0x03, 0xd3, 0x6d, 0xc2, 0x48, 0xc3, 0xc4, 0xb5, 0x69, 0x7f,
	0xbb, 0x8a, 0xf7, 0x2f, 0xc0, 0xe9, 0x33, 0xc8, 0x45, 0x9c, 0x9e, 0x92, 0x8c, 0x6f, 0xf4, 0x1d,
	0x1a, 0x8c, 0x32, 0x62, 0xb4, 0x4a, 0xdc, 0xff, 0xea, 0x55, 0x85, 0x9b, 0x7c, 0xaf, 0x3e, 0xcc,
	0xf8, 0x76, 0x3f, 0xa0, 0x81, 0x46, 0xc4, 0xee, 0x63, 0xff, 0xbc, 0x50, 0x82, 0x4c, 0xa3, 0x65,
	0xe9, 0x26, 0xee, 0x5f, 0xe4, 0xcc, 0xa8, 0xe3, 0x74, 0xb8, 0x7f, 0x21, 0x17, 0x59, 0x83, 0x25,
	0xbe, 0xe5, 0x10, 0x68, 0x6c, 0xd3, 0x77, 0x3f, 0xa7, 0xe1, 0x72, 0x70, 0x5d, 0x5e, 0x83, 0x10,
	0x93, 0xdd, 0x65, 0x39, 0x7c, 0x3f, 0x64, 0x6e, 0xbc, 0x73, 0x73, 0xa7, 0x25, 0xcc, 0xa6, 0x16,
	0xc3, 0x4f, 0x29, 0xd1, 0xa5, 0xf2, 0xdb, 0x6f, 0xbf, 0x3e, 0x4d, 0x14, 0xa4, 0xbc, 0xd2, 0xde,
	0x54, 0x7c, 0x55, 0xc5, 0x2f, 0x56, 0xa2, 0xe7, 0xb7, 0x50, 0x49, 0x38, 0x40, 0x30, 0x17, 0x1b,
	0xd6, 0x95, 0x11, 0xf9, 0xb8, 0x22, 0x0e, 0xc0, 0x9d, 0x00, 0x60, 0x5d, 0x92, 0xce, 0x02, 0xc4,
	0x75, 0xf0, 0x11, 0x5e, 0xc1, 0x4c, 0x34, 0xcc, 0x79, 0x8e, 0xfb, 0x41, 0x05, 0x47, 0xbb, 0x14,
	0x68, 0xaf, 0x4a, 0x4b, 0xf1, 0xe6, 0x07, 0xc7, 0x7d, 0xe1, 0x37, 0x30, 0x1b, 0x9b, 0x5e, 0xae,
	0xf3, 0x24, 0xf1, 0xdb, 0x81, 0xf8, 0x9a, 0xb4, 0xcc, 0x33, 0x7e, 0x46, 0xde, 0x1f, 0x7d, 0x6c,
	0xb8, 0x57, 0x92, 0xbc, 0x57, 0x89, 0x7b, 0xbe, 0xd1, 0xc7, 0x75, 0xf0, 0x11, 0x0e, 0x11, 0xcc,
	0x73, 0x42, 0x5d, 0x48, 0x9e, 0x02, 0x1f, 0x43, 0x09, 0x30, 0x6e, 0x49, 0xab, 0x89, 0x83, 0x18,
	0x02, 0xe1, 0x24, 0xbf, 0x90, 0x34, 0x8d, 0xa0, 0xec, 0x7c, 0x20, 0xf1, 0x3d, 0x7c, 0x90, 0xf7,
	0x08, 0xb2, 0xdc, 0xcc, 0xaf, 0x27, 0xcf, 0xe4, 0x6f, 0x30, 0x9b, 0x01, 0x4c, 0x59, 0x5a, 0x4b,
	0x9c, 0x4a, 0x1f, 0xa7, 0xf2, 0xc0, 0xdb, 0x9e, 0x87, 0xb9, 0xe1, 0x17, 0x84, 0x61, 0xa7, 0x4d,
	0x34, 0xcc, 0x8e, 0xba, 0x62, 0xea, 0x7b, 0x57, 0x4c, 0x9d, 0x74, 0x45, 0x74, 0xe0, 0x89, 0xe8,
	0x8b, 0x27, 0xa2, 0xaf, 0x9e, 0x88, 0x8e, 0x3c, 0x11, 0xfd, 0xf0, 0x44, 0xf4, 0xdb, 0x13, 0x53,
	0x27, 0x9e, 0x88, 0x3e, 0xfe, 0x14, 0x53, 0x8d, 0xa9, 0xe0, 0x63, 0xe1, 0xde, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x08, 0x58, 0x6a, 0x47, 0x9f, 0x08, 0x00, 0x00,
}
