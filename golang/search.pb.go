// Code generated by protoc-gen-gogo.
// source: search.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SearchPeerType int32

const (
	SEARCHPEERTYPE_UNKNOWN  SearchPeerType = 0
	SEARCHPEERTYPE_GROUPS   SearchPeerType = 1
	SEARCHPEERTYPE_CONTACTS SearchPeerType = 2
	SEARCHPEERTYPE_PUBLIC   SearchPeerType = 3
)

var SearchPeerType_name = map[int32]string{
	0: "SEARCHPEERTYPE_UNKNOWN",
	1: "SEARCHPEERTYPE_GROUPS",
	2: "SEARCHPEERTYPE_CONTACTS",
	3: "SEARCHPEERTYPE_PUBLIC",
}
var SearchPeerType_value = map[string]int32{
	"SEARCHPEERTYPE_UNKNOWN":  0,
	"SEARCHPEERTYPE_GROUPS":   1,
	"SEARCHPEERTYPE_CONTACTS": 2,
	"SEARCHPEERTYPE_PUBLIC":   3,
}

func (SearchPeerType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSearch, []int{0} }

type SearchContentType int32

const (
	SEARCHCONTENTTYPE_UNKNOWN   SearchContentType = 0
	SEARCHCONTENTTYPE_ANY       SearchContentType = 1
	SEARCHCONTENTTYPE_TEXT      SearchContentType = 2
	SEARCHCONTENTTYPE_LINKS     SearchContentType = 3
	SEARCHCONTENTTYPE_DOCUMENTS SearchContentType = 4
	SEARCHCONTENTTYPE_PHOTOS    SearchContentType = 5
)

var SearchContentType_name = map[int32]string{
	0: "SEARCHCONTENTTYPE_UNKNOWN",
	1: "SEARCHCONTENTTYPE_ANY",
	2: "SEARCHCONTENTTYPE_TEXT",
	3: "SEARCHCONTENTTYPE_LINKS",
	4: "SEARCHCONTENTTYPE_DOCUMENTS",
	5: "SEARCHCONTENTTYPE_PHOTOS",
}
var SearchContentType_value = map[string]int32{
	"SEARCHCONTENTTYPE_UNKNOWN":   0,
	"SEARCHCONTENTTYPE_ANY":       1,
	"SEARCHCONTENTTYPE_TEXT":      2,
	"SEARCHCONTENTTYPE_LINKS":     3,
	"SEARCHCONTENTTYPE_DOCUMENTS": 4,
	"SEARCHCONTENTTYPE_PHOTOS":    5,
}

func (SearchContentType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSearch, []int{1} }

type SimpleContactSearchCondition struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *SimpleContactSearchCondition) Reset()      { *m = SimpleContactSearchCondition{} }
func (*SimpleContactSearchCondition) ProtoMessage() {}
func (*SimpleContactSearchCondition) Descriptor() ([]byte, []int) {
	return fileDescriptorSearch, []int{0}
}

func (m *SimpleContactSearchCondition) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type SimpleMessageSearchCondition struct {
	Peer        *Peer             `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Text        string            `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	ContentType SearchContentType `protobuf:"varint,3,opt,name=content_type,json=contentType,proto3,enum=dialog.SearchContentType" json:"content_type,omitempty"`
}

func (m *SimpleMessageSearchCondition) Reset()      { *m = SimpleMessageSearchCondition{} }
func (*SimpleMessageSearchCondition) ProtoMessage() {}
func (*SimpleMessageSearchCondition) Descriptor() ([]byte, []int) {
	return fileDescriptorSearch, []int{1}
}

func (m *SimpleMessageSearchCondition) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *SimpleMessageSearchCondition) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *SimpleMessageSearchCondition) GetContentType() SearchContentType {
	if m != nil {
		return m.ContentType
	}
	return SEARCHCONTENTTYPE_UNKNOWN
}

// / Search among contacts/groups/users
type SimplePeerSearchCondition struct {
	PeerType SearchPeerType               `protobuf:"varint,1,opt,name=peer_type,json=peerType,proto3,enum=dialog.SearchPeerType" json:"peer_type,omitempty"`
	Text     *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (m *SimplePeerSearchCondition) Reset()                    { *m = SimplePeerSearchCondition{} }
func (*SimplePeerSearchCondition) ProtoMessage()               {}
func (*SimplePeerSearchCondition) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{2} }

func (m *SimplePeerSearchCondition) GetPeerType() SearchPeerType {
	if m != nil {
		return m.PeerType
	}
	return SEARCHPEERTYPE_UNKNOWN
}

func (m *SimplePeerSearchCondition) GetText() *google_protobuf.StringValue {
	if m != nil {
		return m.Text
	}
	return nil
}

type SimpleUserProfileSearchCondition struct {
	QueryString string `protobuf:"bytes,1,opt,name=query_string,json=queryString,proto3" json:"query_string,omitempty"`
}

func (m *SimpleUserProfileSearchCondition) Reset()      { *m = SimpleUserProfileSearchCondition{} }
func (*SimpleUserProfileSearchCondition) ProtoMessage() {}
func (*SimpleUserProfileSearchCondition) Descriptor() ([]byte, []int) {
	return fileDescriptorSearch, []int{3}
}

func (m *SimpleUserProfileSearchCondition) GetQueryString() string {
	if m != nil {
		return m.QueryString
	}
	return ""
}

type Criterion struct {
}

func (m *Criterion) Reset()                    { *m = Criterion{} }
func (*Criterion) ProtoMessage()               {}
func (*Criterion) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{4} }

type SimpleSearchCondition struct {
	// Types that are valid to be assigned to Criterion:
	//	*SimpleSearchCondition_Contact
	//	*SimpleSearchCondition_Message
	//	*SimpleSearchCondition_Peer
	//	*SimpleSearchCondition_UserProfile
	Criterion isSimpleSearchCondition_Criterion `protobuf_oneof:"criterion"`
}

func (m *SimpleSearchCondition) Reset()                    { *m = SimpleSearchCondition{} }
func (*SimpleSearchCondition) ProtoMessage()               {}
func (*SimpleSearchCondition) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{5} }

type isSimpleSearchCondition_Criterion interface {
	isSimpleSearchCondition_Criterion()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SimpleSearchCondition_Contact struct {
	Contact *SimpleContactSearchCondition `protobuf:"bytes,1,opt,name=contact,oneof"`
}
type SimpleSearchCondition_Message struct {
	Message *SimpleMessageSearchCondition `protobuf:"bytes,2,opt,name=message,oneof"`
}
type SimpleSearchCondition_Peer struct {
	Peer *SimplePeerSearchCondition `protobuf:"bytes,3,opt,name=peer,oneof"`
}
type SimpleSearchCondition_UserProfile struct {
	UserProfile *SimpleUserProfileSearchCondition `protobuf:"bytes,4,opt,name=userProfile,oneof"`
}

func (*SimpleSearchCondition_Contact) isSimpleSearchCondition_Criterion()     {}
func (*SimpleSearchCondition_Message) isSimpleSearchCondition_Criterion()     {}
func (*SimpleSearchCondition_Peer) isSimpleSearchCondition_Criterion()        {}
func (*SimpleSearchCondition_UserProfile) isSimpleSearchCondition_Criterion() {}

func (m *SimpleSearchCondition) GetCriterion() isSimpleSearchCondition_Criterion {
	if m != nil {
		return m.Criterion
	}
	return nil
}

func (m *SimpleSearchCondition) GetContact() *SimpleContactSearchCondition {
	if x, ok := m.GetCriterion().(*SimpleSearchCondition_Contact); ok {
		return x.Contact
	}
	return nil
}

func (m *SimpleSearchCondition) GetMessage() *SimpleMessageSearchCondition {
	if x, ok := m.GetCriterion().(*SimpleSearchCondition_Message); ok {
		return x.Message
	}
	return nil
}

func (m *SimpleSearchCondition) GetPeer() *SimplePeerSearchCondition {
	if x, ok := m.GetCriterion().(*SimpleSearchCondition_Peer); ok {
		return x.Peer
	}
	return nil
}

func (m *SimpleSearchCondition) GetUserProfile() *SimpleUserProfileSearchCondition {
	if x, ok := m.GetCriterion().(*SimpleSearchCondition_UserProfile); ok {
		return x.UserProfile
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SimpleSearchCondition) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SimpleSearchCondition_OneofMarshaler, _SimpleSearchCondition_OneofUnmarshaler, _SimpleSearchCondition_OneofSizer, []interface{}{
		(*SimpleSearchCondition_Contact)(nil),
		(*SimpleSearchCondition_Message)(nil),
		(*SimpleSearchCondition_Peer)(nil),
		(*SimpleSearchCondition_UserProfile)(nil),
	}
}

func _SimpleSearchCondition_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SimpleSearchCondition)
	// criterion
	switch x := m.Criterion.(type) {
	case *SimpleSearchCondition_Contact:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Contact); err != nil {
			return err
		}
	case *SimpleSearchCondition_Message:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Message); err != nil {
			return err
		}
	case *SimpleSearchCondition_Peer:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Peer); err != nil {
			return err
		}
	case *SimpleSearchCondition_UserProfile:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserProfile); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SimpleSearchCondition.Criterion has unexpected type %T", x)
	}
	return nil
}

func _SimpleSearchCondition_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SimpleSearchCondition)
	switch tag {
	case 1: // criterion.contact
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SimpleContactSearchCondition)
		err := b.DecodeMessage(msg)
		m.Criterion = &SimpleSearchCondition_Contact{msg}
		return true, err
	case 2: // criterion.message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SimpleMessageSearchCondition)
		err := b.DecodeMessage(msg)
		m.Criterion = &SimpleSearchCondition_Message{msg}
		return true, err
	case 3: // criterion.peer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SimplePeerSearchCondition)
		err := b.DecodeMessage(msg)
		m.Criterion = &SimpleSearchCondition_Peer{msg}
		return true, err
	case 4: // criterion.userProfile
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SimpleUserProfileSearchCondition)
		err := b.DecodeMessage(msg)
		m.Criterion = &SimpleSearchCondition_UserProfile{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SimpleSearchCondition_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SimpleSearchCondition)
	// criterion
	switch x := m.Criterion.(type) {
	case *SimpleSearchCondition_Contact:
		s := proto.Size(x.Contact)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SimpleSearchCondition_Message:
		s := proto.Size(x.Message)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SimpleSearchCondition_Peer:
		s := proto.Size(x.Peer)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SimpleSearchCondition_UserProfile:
		s := proto.Size(x.UserProfile)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SearchCondition struct {
	// Types that are valid to be assigned to Body:
	//	*SearchCondition_SearchPeerTypeCondition
	//	*SearchCondition_SearchPieceText
	//	*SearchCondition_SearchAndCondition
	//	*SearchCondition_SearchOrCondition
	//	*SearchCondition_SearchPeerCondition
	//	*SearchCondition_SearchPeerContentType
	//	*SearchCondition_SearchSenderIdConfition
	Body isSearchCondition_Body `protobuf_oneof:"body"`
}

func (m *SearchCondition) Reset()                    { *m = SearchCondition{} }
func (*SearchCondition) ProtoMessage()               {}
func (*SearchCondition) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{6} }

type isSearchCondition_Body interface {
	isSearchCondition_Body()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SearchCondition_SearchPeerTypeCondition struct {
	SearchPeerTypeCondition *SearchPeerTypeCondition `protobuf:"bytes,1,opt,name=searchPeerTypeCondition,oneof"`
}
type SearchCondition_SearchPieceText struct {
	SearchPieceText *SearchPieceText `protobuf:"bytes,2,opt,name=searchPieceText,oneof"`
}
type SearchCondition_SearchAndCondition struct {
	SearchAndCondition *SearchAndCondition `protobuf:"bytes,3,opt,name=searchAndCondition,oneof"`
}
type SearchCondition_SearchOrCondition struct {
	SearchOrCondition *SearchOrCondition `protobuf:"bytes,4,opt,name=searchOrCondition,oneof"`
}
type SearchCondition_SearchPeerCondition struct {
	SearchPeerCondition *SearchPeerCondition `protobuf:"bytes,5,opt,name=searchPeerCondition,oneof"`
}
type SearchCondition_SearchPeerContentType struct {
	SearchPeerContentType *SearchPeerContentType `protobuf:"bytes,6,opt,name=searchPeerContentType,oneof"`
}
type SearchCondition_SearchSenderIdConfition struct {
	SearchSenderIdConfition *SearchSenderIdConfition `protobuf:"bytes,7,opt,name=searchSenderIdConfition,oneof"`
}

func (*SearchCondition_SearchPeerTypeCondition) isSearchCondition_Body() {}
func (*SearchCondition_SearchPieceText) isSearchCondition_Body()         {}
func (*SearchCondition_SearchAndCondition) isSearchCondition_Body()      {}
func (*SearchCondition_SearchOrCondition) isSearchCondition_Body()       {}
func (*SearchCondition_SearchPeerCondition) isSearchCondition_Body()     {}
func (*SearchCondition_SearchPeerContentType) isSearchCondition_Body()   {}
func (*SearchCondition_SearchSenderIdConfition) isSearchCondition_Body() {}

func (m *SearchCondition) GetBody() isSearchCondition_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *SearchCondition) GetSearchPeerTypeCondition() *SearchPeerTypeCondition {
	if x, ok := m.GetBody().(*SearchCondition_SearchPeerTypeCondition); ok {
		return x.SearchPeerTypeCondition
	}
	return nil
}

func (m *SearchCondition) GetSearchPieceText() *SearchPieceText {
	if x, ok := m.GetBody().(*SearchCondition_SearchPieceText); ok {
		return x.SearchPieceText
	}
	return nil
}

func (m *SearchCondition) GetSearchAndCondition() *SearchAndCondition {
	if x, ok := m.GetBody().(*SearchCondition_SearchAndCondition); ok {
		return x.SearchAndCondition
	}
	return nil
}

func (m *SearchCondition) GetSearchOrCondition() *SearchOrCondition {
	if x, ok := m.GetBody().(*SearchCondition_SearchOrCondition); ok {
		return x.SearchOrCondition
	}
	return nil
}

func (m *SearchCondition) GetSearchPeerCondition() *SearchPeerCondition {
	if x, ok := m.GetBody().(*SearchCondition_SearchPeerCondition); ok {
		return x.SearchPeerCondition
	}
	return nil
}

func (m *SearchCondition) GetSearchPeerContentType() *SearchPeerContentType {
	if x, ok := m.GetBody().(*SearchCondition_SearchPeerContentType); ok {
		return x.SearchPeerContentType
	}
	return nil
}

func (m *SearchCondition) GetSearchSenderIdConfition() *SearchSenderIdConfition {
	if x, ok := m.GetBody().(*SearchCondition_SearchSenderIdConfition); ok {
		return x.SearchSenderIdConfition
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SearchCondition) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SearchCondition_OneofMarshaler, _SearchCondition_OneofUnmarshaler, _SearchCondition_OneofSizer, []interface{}{
		(*SearchCondition_SearchPeerTypeCondition)(nil),
		(*SearchCondition_SearchPieceText)(nil),
		(*SearchCondition_SearchAndCondition)(nil),
		(*SearchCondition_SearchOrCondition)(nil),
		(*SearchCondition_SearchPeerCondition)(nil),
		(*SearchCondition_SearchPeerContentType)(nil),
		(*SearchCondition_SearchSenderIdConfition)(nil),
	}
}

func _SearchCondition_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SearchCondition)
	// body
	switch x := m.Body.(type) {
	case *SearchCondition_SearchPeerTypeCondition:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SearchPeerTypeCondition); err != nil {
			return err
		}
	case *SearchCondition_SearchPieceText:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SearchPieceText); err != nil {
			return err
		}
	case *SearchCondition_SearchAndCondition:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SearchAndCondition); err != nil {
			return err
		}
	case *SearchCondition_SearchOrCondition:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SearchOrCondition); err != nil {
			return err
		}
	case *SearchCondition_SearchPeerCondition:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SearchPeerCondition); err != nil {
			return err
		}
	case *SearchCondition_SearchPeerContentType:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SearchPeerContentType); err != nil {
			return err
		}
	case *SearchCondition_SearchSenderIdConfition:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SearchSenderIdConfition); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SearchCondition.Body has unexpected type %T", x)
	}
	return nil
}

func _SearchCondition_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SearchCondition)
	switch tag {
	case 1: // body.searchPeerTypeCondition
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SearchPeerTypeCondition)
		err := b.DecodeMessage(msg)
		m.Body = &SearchCondition_SearchPeerTypeCondition{msg}
		return true, err
	case 2: // body.searchPieceText
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SearchPieceText)
		err := b.DecodeMessage(msg)
		m.Body = &SearchCondition_SearchPieceText{msg}
		return true, err
	case 3: // body.searchAndCondition
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SearchAndCondition)
		err := b.DecodeMessage(msg)
		m.Body = &SearchCondition_SearchAndCondition{msg}
		return true, err
	case 4: // body.searchOrCondition
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SearchOrCondition)
		err := b.DecodeMessage(msg)
		m.Body = &SearchCondition_SearchOrCondition{msg}
		return true, err
	case 5: // body.searchPeerCondition
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SearchPeerCondition)
		err := b.DecodeMessage(msg)
		m.Body = &SearchCondition_SearchPeerCondition{msg}
		return true, err
	case 6: // body.searchPeerContentType
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SearchPeerContentType)
		err := b.DecodeMessage(msg)
		m.Body = &SearchCondition_SearchPeerContentType{msg}
		return true, err
	case 7: // body.searchSenderIdConfition
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SearchSenderIdConfition)
		err := b.DecodeMessage(msg)
		m.Body = &SearchCondition_SearchSenderIdConfition{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SearchCondition_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SearchCondition)
	// body
	switch x := m.Body.(type) {
	case *SearchCondition_SearchPeerTypeCondition:
		s := proto.Size(x.SearchPeerTypeCondition)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SearchCondition_SearchPieceText:
		s := proto.Size(x.SearchPieceText)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SearchCondition_SearchAndCondition:
		s := proto.Size(x.SearchAndCondition)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SearchCondition_SearchOrCondition:
		s := proto.Size(x.SearchOrCondition)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SearchCondition_SearchPeerCondition:
		s := proto.Size(x.SearchPeerCondition)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SearchCondition_SearchPeerContentType:
		s := proto.Size(x.SearchPeerContentType)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SearchCondition_SearchSenderIdConfition:
		s := proto.Size(x.SearchSenderIdConfition)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Search peer type condition
type SearchPeerTypeCondition struct {
	PeerType SearchPeerType `protobuf:"varint,1,opt,name=peer_type,json=peerType,proto3,enum=dialog.SearchPeerType" json:"peer_type,omitempty"`
}

func (m *SearchPeerTypeCondition) Reset()                    { *m = SearchPeerTypeCondition{} }
func (*SearchPeerTypeCondition) ProtoMessage()               {}
func (*SearchPeerTypeCondition) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{7} }

func (m *SearchPeerTypeCondition) GetPeerType() SearchPeerType {
	if m != nil {
		return m.PeerType
	}
	return SEARCHPEERTYPE_UNKNOWN
}

// Search peer name condition
type SearchPieceText struct {
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *SearchPieceText) Reset()                    { *m = SearchPieceText{} }
func (*SearchPieceText) ProtoMessage()               {}
func (*SearchPieceText) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{8} }

func (m *SearchPieceText) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

// Search AND condion
type SearchAndCondition struct {
	// / "And" query
	AndQuery []*SearchCondition `protobuf:"bytes,1,rep,name=and_query,json=andQuery" json:"and_query,omitempty"`
}

func (m *SearchAndCondition) Reset()                    { *m = SearchAndCondition{} }
func (*SearchAndCondition) ProtoMessage()               {}
func (*SearchAndCondition) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{9} }

func (m *SearchAndCondition) GetAndQuery() []*SearchCondition {
	if m != nil {
		return m.AndQuery
	}
	return nil
}

// Search OR condition
type SearchOrCondition struct {
	// / "Or" query
	OrQuery []*SearchCondition `protobuf:"bytes,2,rep,name=or_query,json=orQuery" json:"or_query,omitempty"`
}

func (m *SearchOrCondition) Reset()                    { *m = SearchOrCondition{} }
func (*SearchOrCondition) ProtoMessage()               {}
func (*SearchOrCondition) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{10} }

func (m *SearchOrCondition) GetOrQuery() []*SearchCondition {
	if m != nil {
		return m.OrQuery
	}
	return nil
}

// Serch Peer condition
type SearchPeerCondition struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *SearchPeerCondition) Reset()                    { *m = SearchPeerCondition{} }
func (*SearchPeerCondition) ProtoMessage()               {}
func (*SearchPeerCondition) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{11} }

func (m *SearchPeerCondition) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Search content type condition
type SearchPeerContentType struct {
	ContentType SearchContentType `protobuf:"varint,1,opt,name=content_type,json=contentType,proto3,enum=dialog.SearchContentType" json:"content_type,omitempty"`
}

func (m *SearchPeerContentType) Reset()                    { *m = SearchPeerContentType{} }
func (*SearchPeerContentType) ProtoMessage()               {}
func (*SearchPeerContentType) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{12} }

func (m *SearchPeerContentType) GetContentType() SearchContentType {
	if m != nil {
		return m.ContentType
	}
	return SEARCHCONTENTTYPE_UNKNOWN
}

// Searching sender uid condition
type SearchSenderIdConfition struct {
	SenderId int32 `protobuf:"varint,1,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
}

func (m *SearchSenderIdConfition) Reset()                    { *m = SearchSenderIdConfition{} }
func (*SearchSenderIdConfition) ProtoMessage()               {}
func (*SearchSenderIdConfition) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{13} }

func (m *SearchSenderIdConfition) GetSenderId() int32 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

// Peer search result
type PeerSearchResult struct {
	Peer         *Peer                        `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Title        string                       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Shortname    *google_protobuf.StringValue `protobuf:"bytes,9,opt,name=shortname" json:"shortname,omitempty"`
	Description  *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	MembersCount *google_protobuf.Int32Value  `protobuf:"bytes,4,opt,name=members_count,json=membersCount" json:"members_count,omitempty"`
	// / Group Creation Date
	DateCreated int64                       `protobuf:"varint,5,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	Creator     *google_protobuf.Int32Value `protobuf:"bytes,6,opt,name=creator" json:"creator,omitempty"`
	IsPublic    *google_protobuf.BoolValue  `protobuf:"bytes,7,opt,name=is_public,json=isPublic" json:"is_public,omitempty"`
	// / Are you joined?
	IsJoined *google_protobuf.BoolValue `protobuf:"bytes,8,opt,name=is_joined,json=isJoined" json:"is_joined,omitempty"`
}

func (m *PeerSearchResult) Reset()                    { *m = PeerSearchResult{} }
func (*PeerSearchResult) ProtoMessage()               {}
func (*PeerSearchResult) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{14} }

func (m *PeerSearchResult) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *PeerSearchResult) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PeerSearchResult) GetShortname() *google_protobuf.StringValue {
	if m != nil {
		return m.Shortname
	}
	return nil
}

func (m *PeerSearchResult) GetDescription() *google_protobuf.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *PeerSearchResult) GetMembersCount() *google_protobuf.Int32Value {
	if m != nil {
		return m.MembersCount
	}
	return nil
}

func (m *PeerSearchResult) GetDateCreated() int64 {
	if m != nil {
		return m.DateCreated
	}
	return 0
}

func (m *PeerSearchResult) GetCreator() *google_protobuf.Int32Value {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *PeerSearchResult) GetIsPublic() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsPublic
	}
	return nil
}

func (m *PeerSearchResult) GetIsJoined() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsJoined
	}
	return nil
}

// Performing peer search
type RequestPeerSearch struct {
	Query         []*SearchCondition   `protobuf:"bytes,1,rep,name=query" json:"query,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,2,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestPeerSearch) Reset()                    { *m = RequestPeerSearch{} }
func (*RequestPeerSearch) ProtoMessage()               {}
func (*RequestPeerSearch) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{15} }

func (m *RequestPeerSearch) GetQuery() []*SearchCondition {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *RequestPeerSearch) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// / Response with related peers and entities
type ResponsePeerSearch struct {
	SearchResults []*PeerSearchResult `protobuf:"bytes,1,rep,name=search_results,json=searchResults" json:"search_results,omitempty"`
	Users         []*User             `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	Groups        []*Group            `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
	UserPeers     []*UserOutPeer      `protobuf:"bytes,4,rep,name=user_peers,json=userPeers" json:"user_peers,omitempty"`
	GroupPeers    []*GroupOutPeer     `protobuf:"bytes,5,rep,name=group_peers,json=groupPeers" json:"group_peers,omitempty"`
}

func (m *ResponsePeerSearch) Reset()                    { *m = ResponsePeerSearch{} }
func (*ResponsePeerSearch) ProtoMessage()               {}
func (*ResponsePeerSearch) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{16} }

func (m *ResponsePeerSearch) GetSearchResults() []*PeerSearchResult {
	if m != nil {
		return m.SearchResults
	}
	return nil
}

func (m *ResponsePeerSearch) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponsePeerSearch) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ResponsePeerSearch) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

func (m *ResponsePeerSearch) GetGroupPeers() []*GroupOutPeer {
	if m != nil {
		return m.GroupPeers
	}
	return nil
}

// Resolve peer by shortname
type RequestResolvePeer struct {
	Shortname string `protobuf:"bytes,1,opt,name=shortname,proto3" json:"shortname,omitempty"`
}

func (m *RequestResolvePeer) Reset()                    { *m = RequestResolvePeer{} }
func (*RequestResolvePeer) ProtoMessage()               {}
func (*RequestResolvePeer) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{17} }

func (m *RequestResolvePeer) GetShortname() string {
	if m != nil {
		return m.Shortname
	}
	return ""
}

type ResponseResolvePeer struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *ResponseResolvePeer) Reset()                    { *m = ResponseResolvePeer{} }
func (*ResponseResolvePeer) ProtoMessage()               {}
func (*ResponseResolvePeer) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{18} }

func (m *ResponseResolvePeer) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Message container
type MessageSearchResult struct {
	Peer     *Peer           `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Rid      int64           `protobuf:"varint,2,opt,name=rid,proto3" json:"rid,omitempty"`
	Date     int64           `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	SenderId int32           `protobuf:"varint,4,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	Content  *MessageContent `protobuf:"bytes,5,opt,name=content" json:"content,omitempty"`
}

func (m *MessageSearchResult) Reset()                    { *m = MessageSearchResult{} }
func (*MessageSearchResult) ProtoMessage()               {}
func (*MessageSearchResult) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{19} }

func (m *MessageSearchResult) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessageSearchResult) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *MessageSearchResult) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *MessageSearchResult) GetSenderId() int32 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *MessageSearchResult) GetContent() *MessageContent {
	if m != nil {
		return m.Content
	}
	return nil
}

// Message Search result container
type MessageSearchItem struct {
	Result *MessageSearchResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *MessageSearchItem) Reset()                    { *m = MessageSearchItem{} }
func (*MessageSearchItem) ProtoMessage()               {}
func (*MessageSearchItem) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{20} }

func (m *MessageSearchItem) GetResult() *MessageSearchResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// Search Result with related peers and entities
type ResponseMessageSearchResponse struct {
	SearchResults []*MessageSearchItem        `protobuf:"bytes,1,rep,name=search_results,json=searchResults" json:"search_results,omitempty"`
	Users         []*User                     `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	Groups        []*Group                    `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
	LoadMoreState *google_protobuf.BytesValue `protobuf:"bytes,4,opt,name=load_more_state,json=loadMoreState" json:"load_more_state,omitempty"`
	UserOutPeers  []*UserOutPeer              `protobuf:"bytes,5,rep,name=user_out_peers,json=userOutPeers" json:"user_out_peers,omitempty"`
	GroupOutPeers []*GroupOutPeer             `protobuf:"bytes,6,rep,name=group_out_peers,json=groupOutPeers" json:"group_out_peers,omitempty"`
}

func (m *ResponseMessageSearchResponse) Reset()      { *m = ResponseMessageSearchResponse{} }
func (*ResponseMessageSearchResponse) ProtoMessage() {}
func (*ResponseMessageSearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSearch, []int{21}
}

func (m *ResponseMessageSearchResponse) GetSearchResults() []*MessageSearchItem {
	if m != nil {
		return m.SearchResults
	}
	return nil
}

func (m *ResponseMessageSearchResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseMessageSearchResponse) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ResponseMessageSearchResponse) GetLoadMoreState() *google_protobuf.BytesValue {
	if m != nil {
		return m.LoadMoreState
	}
	return nil
}

func (m *ResponseMessageSearchResponse) GetUserOutPeers() []*UserOutPeer {
	if m != nil {
		return m.UserOutPeers
	}
	return nil
}

func (m *ResponseMessageSearchResponse) GetGroupOutPeers() []*GroupOutPeer {
	if m != nil {
		return m.GroupOutPeers
	}
	return nil
}

// Performing message search
type RequestMessageSearch struct {
	Query         *SearchCondition     `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,2,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestMessageSearch) Reset()                    { *m = RequestMessageSearch{} }
func (*RequestMessageSearch) ProtoMessage()               {}
func (*RequestMessageSearch) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{22} }

func (m *RequestMessageSearch) GetQuery() *SearchCondition {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *RequestMessageSearch) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Performing message search paging
type RequestMessageSearchMore struct {
	LoadMoreState []byte               `protobuf:"bytes,1,opt,name=load_more_state,json=loadMoreState,proto3" json:"load_more_state,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,2,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestMessageSearchMore) Reset()                    { *m = RequestMessageSearchMore{} }
func (*RequestMessageSearchMore) ProtoMessage()               {}
func (*RequestMessageSearchMore) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{23} }

func (m *RequestMessageSearchMore) GetLoadMoreState() []byte {
	if m != nil {
		return m.LoadMoreState
	}
	return nil
}

func (m *RequestMessageSearchMore) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type RequestSimpleSearch struct {
	Criteria      []*SimpleSearchCondition `protobuf:"bytes,1,rep,name=criteria" json:"criteria,omitempty"`
	Optimizations []UpdateOptimization     `protobuf:"varint,2,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestSimpleSearch) Reset()                    { *m = RequestSimpleSearch{} }
func (*RequestSimpleSearch) ProtoMessage()               {}
func (*RequestSimpleSearch) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{24} }

func (m *RequestSimpleSearch) GetCriteria() []*SimpleSearchCondition {
	if m != nil {
		return m.Criteria
	}
	return nil
}

func (m *RequestSimpleSearch) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type RequestSimpleSearchMore struct {
	LoadMoreState []byte               `protobuf:"bytes,1,opt,name=load_more_state,json=loadMoreState,proto3" json:"load_more_state,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,2,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestSimpleSearchMore) Reset()                    { *m = RequestSimpleSearchMore{} }
func (*RequestSimpleSearchMore) ProtoMessage()               {}
func (*RequestSimpleSearchMore) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{25} }

func (m *RequestSimpleSearchMore) GetLoadMoreState() []byte {
	if m != nil {
		return m.LoadMoreState
	}
	return nil
}

func (m *RequestSimpleSearchMore) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type RequestFieldAutocomplete struct {
	FieldName  string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	FieldValue string `protobuf:"bytes,2,opt,name=field_value,json=fieldValue,proto3" json:"field_value,omitempty"`
}

func (m *RequestFieldAutocomplete) Reset()                    { *m = RequestFieldAutocomplete{} }
func (*RequestFieldAutocomplete) ProtoMessage()               {}
func (*RequestFieldAutocomplete) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{26} }

func (m *RequestFieldAutocomplete) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *RequestFieldAutocomplete) GetFieldValue() string {
	if m != nil {
		return m.FieldValue
	}
	return ""
}

type ResponseFieldAutocomplete struct {
	FieldName  string   `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	FieldValue []string `protobuf:"bytes,2,rep,name=field_value,json=fieldValue" json:"field_value,omitempty"`
}

func (m *ResponseFieldAutocomplete) Reset()                    { *m = ResponseFieldAutocomplete{} }
func (*ResponseFieldAutocomplete) ProtoMessage()               {}
func (*ResponseFieldAutocomplete) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{27} }

func (m *ResponseFieldAutocomplete) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *ResponseFieldAutocomplete) GetFieldValue() []string {
	if m != nil {
		return m.FieldValue
	}
	return nil
}

type RequestLoadUserSearchByPredicatesResults struct {
	Predicates []*SearchPredicate           `protobuf:"bytes,1,rep,name=predicates" json:"predicates,omitempty"`
	GroupId    int32                        `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Query      *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	Limit      int32                        `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *RequestLoadUserSearchByPredicatesResults) Reset() {
	*m = RequestLoadUserSearchByPredicatesResults{}
}
func (*RequestLoadUserSearchByPredicatesResults) ProtoMessage() {}
func (*RequestLoadUserSearchByPredicatesResults) Descriptor() ([]byte, []int) {
	return fileDescriptorSearch, []int{28}
}

func (m *RequestLoadUserSearchByPredicatesResults) GetPredicates() []*SearchPredicate {
	if m != nil {
		return m.Predicates
	}
	return nil
}

func (m *RequestLoadUserSearchByPredicatesResults) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *RequestLoadUserSearchByPredicatesResults) GetQuery() *google_protobuf.StringValue {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *RequestLoadUserSearchByPredicatesResults) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type UserMatch struct {
	UserId          int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MatchPredicates bool  `protobuf:"varint,2,opt,name=match_predicates,json=matchPredicates,proto3" json:"match_predicates,omitempty"`
}

func (m *UserMatch) Reset()                    { *m = UserMatch{} }
func (*UserMatch) ProtoMessage()               {}
func (*UserMatch) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{29} }

func (m *UserMatch) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserMatch) GetMatchPredicates() bool {
	if m != nil {
		return m.MatchPredicates
	}
	return false
}

type ResponseLoadUserSearchByPredicatesResults struct {
	Users       []*UserMatch `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	ResultCount int32        `protobuf:"varint,2,opt,name=result_count,json=resultCount,proto3" json:"result_count,omitempty"`
}

func (m *ResponseLoadUserSearchByPredicatesResults) Reset() {
	*m = ResponseLoadUserSearchByPredicatesResults{}
}
func (*ResponseLoadUserSearchByPredicatesResults) ProtoMessage() {}
func (*ResponseLoadUserSearchByPredicatesResults) Descriptor() ([]byte, []int) {
	return fileDescriptorSearch, []int{30}
}

func (m *ResponseLoadUserSearchByPredicatesResults) GetUsers() []*UserMatch {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseLoadUserSearchByPredicatesResults) GetResultCount() int32 {
	if m != nil {
		return m.ResultCount
	}
	return 0
}

type RequestLoadUserSearchByPredicatesCount struct {
	Predicates []*SearchPredicate `protobuf:"bytes,1,rep,name=predicates" json:"predicates,omitempty"`
	GroupId    int32              `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *RequestLoadUserSearchByPredicatesCount) Reset() {
	*m = RequestLoadUserSearchByPredicatesCount{}
}
func (*RequestLoadUserSearchByPredicatesCount) ProtoMessage() {}
func (*RequestLoadUserSearchByPredicatesCount) Descriptor() ([]byte, []int) {
	return fileDescriptorSearch, []int{31}
}

func (m *RequestLoadUserSearchByPredicatesCount) GetPredicates() []*SearchPredicate {
	if m != nil {
		return m.Predicates
	}
	return nil
}

func (m *RequestLoadUserSearchByPredicatesCount) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type ResponseLoadUserSearchByPredicatesCount struct {
	ResultCount int32 `protobuf:"varint,1,opt,name=result_count,json=resultCount,proto3" json:"result_count,omitempty"`
}

func (m *ResponseLoadUserSearchByPredicatesCount) Reset() {
	*m = ResponseLoadUserSearchByPredicatesCount{}
}
func (*ResponseLoadUserSearchByPredicatesCount) ProtoMessage() {}
func (*ResponseLoadUserSearchByPredicatesCount) Descriptor() ([]byte, []int) {
	return fileDescriptorSearch, []int{32}
}

func (m *ResponseLoadUserSearchByPredicatesCount) GetResultCount() int32 {
	if m != nil {
		return m.ResultCount
	}
	return 0
}

func init() {
	proto.RegisterType((*SimpleContactSearchCondition)(nil), "dialog.SimpleContactSearchCondition")
	proto.RegisterType((*SimpleMessageSearchCondition)(nil), "dialog.SimpleMessageSearchCondition")
	proto.RegisterType((*SimplePeerSearchCondition)(nil), "dialog.SimplePeerSearchCondition")
	proto.RegisterType((*SimpleUserProfileSearchCondition)(nil), "dialog.SimpleUserProfileSearchCondition")
	proto.RegisterType((*Criterion)(nil), "dialog.criterion")
	proto.RegisterType((*SimpleSearchCondition)(nil), "dialog.SimpleSearchCondition")
	proto.RegisterType((*SearchCondition)(nil), "dialog.SearchCondition")
	proto.RegisterType((*SearchPeerTypeCondition)(nil), "dialog.SearchPeerTypeCondition")
	proto.RegisterType((*SearchPieceText)(nil), "dialog.SearchPieceText")
	proto.RegisterType((*SearchAndCondition)(nil), "dialog.SearchAndCondition")
	proto.RegisterType((*SearchOrCondition)(nil), "dialog.SearchOrCondition")
	proto.RegisterType((*SearchPeerCondition)(nil), "dialog.SearchPeerCondition")
	proto.RegisterType((*SearchPeerContentType)(nil), "dialog.SearchPeerContentType")
	proto.RegisterType((*SearchSenderIdConfition)(nil), "dialog.SearchSenderIdConfition")
	proto.RegisterType((*PeerSearchResult)(nil), "dialog.PeerSearchResult")
	proto.RegisterType((*RequestPeerSearch)(nil), "dialog.RequestPeerSearch")
	proto.RegisterType((*ResponsePeerSearch)(nil), "dialog.ResponsePeerSearch")
	proto.RegisterType((*RequestResolvePeer)(nil), "dialog.RequestResolvePeer")
	proto.RegisterType((*ResponseResolvePeer)(nil), "dialog.ResponseResolvePeer")
	proto.RegisterType((*MessageSearchResult)(nil), "dialog.MessageSearchResult")
	proto.RegisterType((*MessageSearchItem)(nil), "dialog.MessageSearchItem")
	proto.RegisterType((*ResponseMessageSearchResponse)(nil), "dialog.ResponseMessageSearchResponse")
	proto.RegisterType((*RequestMessageSearch)(nil), "dialog.RequestMessageSearch")
	proto.RegisterType((*RequestMessageSearchMore)(nil), "dialog.RequestMessageSearchMore")
	proto.RegisterType((*RequestSimpleSearch)(nil), "dialog.RequestSimpleSearch")
	proto.RegisterType((*RequestSimpleSearchMore)(nil), "dialog.RequestSimpleSearchMore")
	proto.RegisterType((*RequestFieldAutocomplete)(nil), "dialog.RequestFieldAutocomplete")
	proto.RegisterType((*ResponseFieldAutocomplete)(nil), "dialog.ResponseFieldAutocomplete")
	proto.RegisterType((*RequestLoadUserSearchByPredicatesResults)(nil), "dialog.RequestLoadUserSearchByPredicatesResults")
	proto.RegisterType((*UserMatch)(nil), "dialog.UserMatch")
	proto.RegisterType((*ResponseLoadUserSearchByPredicatesResults)(nil), "dialog.ResponseLoadUserSearchByPredicatesResults")
	proto.RegisterType((*RequestLoadUserSearchByPredicatesCount)(nil), "dialog.RequestLoadUserSearchByPredicatesCount")
	proto.RegisterType((*ResponseLoadUserSearchByPredicatesCount)(nil), "dialog.ResponseLoadUserSearchByPredicatesCount")
	proto.RegisterEnum("dialog.SearchPeerType", SearchPeerType_name, SearchPeerType_value)
	proto.RegisterEnum("dialog.SearchContentType", SearchContentType_name, SearchContentType_value)
}
func (x SearchPeerType) String() string {
	s, ok := SearchPeerType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SearchContentType) String() string {
	s, ok := SearchContentType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SimpleContactSearchCondition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SimpleContactSearchCondition)
	if !ok {
		that2, ok := that.(SimpleContactSearchCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	return true
}
func (this *SimpleMessageSearchCondition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SimpleMessageSearchCondition)
	if !ok {
		that2, ok := that.(SimpleMessageSearchCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if this.ContentType != that1.ContentType {
		return false
	}
	return true
}
func (this *SimplePeerSearchCondition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SimplePeerSearchCondition)
	if !ok {
		that2, ok := that.(SimplePeerSearchCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PeerType != that1.PeerType {
		return false
	}
	if !this.Text.Equal(that1.Text) {
		return false
	}
	return true
}
func (this *SimpleUserProfileSearchCondition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SimpleUserProfileSearchCondition)
	if !ok {
		that2, ok := that.(SimpleUserProfileSearchCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.QueryString != that1.QueryString {
		return false
	}
	return true
}
func (this *Criterion) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Criterion)
	if !ok {
		that2, ok := that.(Criterion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *SimpleSearchCondition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SimpleSearchCondition)
	if !ok {
		that2, ok := that.(SimpleSearchCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Criterion == nil {
		if this.Criterion != nil {
			return false
		}
	} else if this.Criterion == nil {
		return false
	} else if !this.Criterion.Equal(that1.Criterion) {
		return false
	}
	return true
}
func (this *SimpleSearchCondition_Contact) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SimpleSearchCondition_Contact)
	if !ok {
		that2, ok := that.(SimpleSearchCondition_Contact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Contact.Equal(that1.Contact) {
		return false
	}
	return true
}
func (this *SimpleSearchCondition_Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SimpleSearchCondition_Message)
	if !ok {
		that2, ok := that.(SimpleSearchCondition_Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *SimpleSearchCondition_Peer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SimpleSearchCondition_Peer)
	if !ok {
		that2, ok := that.(SimpleSearchCondition_Peer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *SimpleSearchCondition_UserProfile) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SimpleSearchCondition_UserProfile)
	if !ok {
		that2, ok := that.(SimpleSearchCondition_UserProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UserProfile.Equal(that1.UserProfile) {
		return false
	}
	return true
}
func (this *SearchCondition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchCondition)
	if !ok {
		that2, ok := that.(SearchCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Body == nil {
		if this.Body != nil {
			return false
		}
	} else if this.Body == nil {
		return false
	} else if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *SearchCondition_SearchPeerTypeCondition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchCondition_SearchPeerTypeCondition)
	if !ok {
		that2, ok := that.(SearchCondition_SearchPeerTypeCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SearchPeerTypeCondition.Equal(that1.SearchPeerTypeCondition) {
		return false
	}
	return true
}
func (this *SearchCondition_SearchPieceText) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchCondition_SearchPieceText)
	if !ok {
		that2, ok := that.(SearchCondition_SearchPieceText)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SearchPieceText.Equal(that1.SearchPieceText) {
		return false
	}
	return true
}
func (this *SearchCondition_SearchAndCondition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchCondition_SearchAndCondition)
	if !ok {
		that2, ok := that.(SearchCondition_SearchAndCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SearchAndCondition.Equal(that1.SearchAndCondition) {
		return false
	}
	return true
}
func (this *SearchCondition_SearchOrCondition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchCondition_SearchOrCondition)
	if !ok {
		that2, ok := that.(SearchCondition_SearchOrCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SearchOrCondition.Equal(that1.SearchOrCondition) {
		return false
	}
	return true
}
func (this *SearchCondition_SearchPeerCondition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchCondition_SearchPeerCondition)
	if !ok {
		that2, ok := that.(SearchCondition_SearchPeerCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SearchPeerCondition.Equal(that1.SearchPeerCondition) {
		return false
	}
	return true
}
func (this *SearchCondition_SearchPeerContentType) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchCondition_SearchPeerContentType)
	if !ok {
		that2, ok := that.(SearchCondition_SearchPeerContentType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SearchPeerContentType.Equal(that1.SearchPeerContentType) {
		return false
	}
	return true
}
func (this *SearchCondition_SearchSenderIdConfition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchCondition_SearchSenderIdConfition)
	if !ok {
		that2, ok := that.(SearchCondition_SearchSenderIdConfition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SearchSenderIdConfition.Equal(that1.SearchSenderIdConfition) {
		return false
	}
	return true
}
func (this *SearchPeerTypeCondition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchPeerTypeCondition)
	if !ok {
		that2, ok := that.(SearchPeerTypeCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PeerType != that1.PeerType {
		return false
	}
	return true
}
func (this *SearchPieceText) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchPieceText)
	if !ok {
		that2, ok := that.(SearchPieceText)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	return true
}
func (this *SearchAndCondition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchAndCondition)
	if !ok {
		that2, ok := that.(SearchAndCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.AndQuery) != len(that1.AndQuery) {
		return false
	}
	for i := range this.AndQuery {
		if !this.AndQuery[i].Equal(that1.AndQuery[i]) {
			return false
		}
	}
	return true
}
func (this *SearchOrCondition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchOrCondition)
	if !ok {
		that2, ok := that.(SearchOrCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.OrQuery) != len(that1.OrQuery) {
		return false
	}
	for i := range this.OrQuery {
		if !this.OrQuery[i].Equal(that1.OrQuery[i]) {
			return false
		}
	}
	return true
}
func (this *SearchPeerCondition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchPeerCondition)
	if !ok {
		that2, ok := that.(SearchPeerCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *SearchPeerContentType) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchPeerContentType)
	if !ok {
		that2, ok := that.(SearchPeerContentType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ContentType != that1.ContentType {
		return false
	}
	return true
}
func (this *SearchSenderIdConfition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchSenderIdConfition)
	if !ok {
		that2, ok := that.(SearchSenderIdConfition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SenderId != that1.SenderId {
		return false
	}
	return true
}
func (this *PeerSearchResult) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PeerSearchResult)
	if !ok {
		that2, ok := that.(PeerSearchResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if !this.Shortname.Equal(that1.Shortname) {
		return false
	}
	if !this.Description.Equal(that1.Description) {
		return false
	}
	if !this.MembersCount.Equal(that1.MembersCount) {
		return false
	}
	if this.DateCreated != that1.DateCreated {
		return false
	}
	if !this.Creator.Equal(that1.Creator) {
		return false
	}
	if !this.IsPublic.Equal(that1.IsPublic) {
		return false
	}
	if !this.IsJoined.Equal(that1.IsJoined) {
		return false
	}
	return true
}
func (this *RequestPeerSearch) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestPeerSearch)
	if !ok {
		that2, ok := that.(RequestPeerSearch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Query) != len(that1.Query) {
		return false
	}
	for i := range this.Query {
		if !this.Query[i].Equal(that1.Query[i]) {
			return false
		}
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *ResponsePeerSearch) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponsePeerSearch)
	if !ok {
		that2, ok := that.(ResponsePeerSearch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.SearchResults) != len(that1.SearchResults) {
		return false
	}
	for i := range this.SearchResults {
		if !this.SearchResults[i].Equal(that1.SearchResults[i]) {
			return false
		}
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	if len(this.GroupPeers) != len(that1.GroupPeers) {
		return false
	}
	for i := range this.GroupPeers {
		if !this.GroupPeers[i].Equal(that1.GroupPeers[i]) {
			return false
		}
	}
	return true
}
func (this *RequestResolvePeer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestResolvePeer)
	if !ok {
		that2, ok := that.(RequestResolvePeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Shortname != that1.Shortname {
		return false
	}
	return true
}
func (this *ResponseResolvePeer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseResolvePeer)
	if !ok {
		that2, ok := that.(ResponseResolvePeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *MessageSearchResult) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageSearchResult)
	if !ok {
		that2, ok := that.(MessageSearchResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if this.SenderId != that1.SenderId {
		return false
	}
	if !this.Content.Equal(that1.Content) {
		return false
	}
	return true
}
func (this *MessageSearchItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageSearchItem)
	if !ok {
		that2, ok := that.(MessageSearchItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *ResponseMessageSearchResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseMessageSearchResponse)
	if !ok {
		that2, ok := that.(ResponseMessageSearchResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.SearchResults) != len(that1.SearchResults) {
		return false
	}
	for i := range this.SearchResults {
		if !this.SearchResults[i].Equal(that1.SearchResults[i]) {
			return false
		}
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if !this.LoadMoreState.Equal(that1.LoadMoreState) {
		return false
	}
	if len(this.UserOutPeers) != len(that1.UserOutPeers) {
		return false
	}
	for i := range this.UserOutPeers {
		if !this.UserOutPeers[i].Equal(that1.UserOutPeers[i]) {
			return false
		}
	}
	if len(this.GroupOutPeers) != len(that1.GroupOutPeers) {
		return false
	}
	for i := range this.GroupOutPeers {
		if !this.GroupOutPeers[i].Equal(that1.GroupOutPeers[i]) {
			return false
		}
	}
	return true
}
func (this *RequestMessageSearch) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestMessageSearch)
	if !ok {
		that2, ok := that.(RequestMessageSearch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *RequestMessageSearchMore) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestMessageSearchMore)
	if !ok {
		that2, ok := that.(RequestMessageSearchMore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.LoadMoreState, that1.LoadMoreState) {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *RequestSimpleSearch) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSimpleSearch)
	if !ok {
		that2, ok := that.(RequestSimpleSearch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Criteria) != len(that1.Criteria) {
		return false
	}
	for i := range this.Criteria {
		if !this.Criteria[i].Equal(that1.Criteria[i]) {
			return false
		}
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *RequestSimpleSearchMore) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSimpleSearchMore)
	if !ok {
		that2, ok := that.(RequestSimpleSearchMore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.LoadMoreState, that1.LoadMoreState) {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *RequestFieldAutocomplete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestFieldAutocomplete)
	if !ok {
		that2, ok := that.(RequestFieldAutocomplete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FieldName != that1.FieldName {
		return false
	}
	if this.FieldValue != that1.FieldValue {
		return false
	}
	return true
}
func (this *ResponseFieldAutocomplete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseFieldAutocomplete)
	if !ok {
		that2, ok := that.(ResponseFieldAutocomplete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FieldName != that1.FieldName {
		return false
	}
	if len(this.FieldValue) != len(that1.FieldValue) {
		return false
	}
	for i := range this.FieldValue {
		if this.FieldValue[i] != that1.FieldValue[i] {
			return false
		}
	}
	return true
}
func (this *RequestLoadUserSearchByPredicatesResults) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestLoadUserSearchByPredicatesResults)
	if !ok {
		that2, ok := that.(RequestLoadUserSearchByPredicatesResults)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Predicates) != len(that1.Predicates) {
		return false
	}
	for i := range this.Predicates {
		if !this.Predicates[i].Equal(that1.Predicates[i]) {
			return false
		}
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *UserMatch) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UserMatch)
	if !ok {
		that2, ok := that.(UserMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.MatchPredicates != that1.MatchPredicates {
		return false
	}
	return true
}
func (this *ResponseLoadUserSearchByPredicatesResults) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseLoadUserSearchByPredicatesResults)
	if !ok {
		that2, ok := that.(ResponseLoadUserSearchByPredicatesResults)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if this.ResultCount != that1.ResultCount {
		return false
	}
	return true
}
func (this *RequestLoadUserSearchByPredicatesCount) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestLoadUserSearchByPredicatesCount)
	if !ok {
		that2, ok := that.(RequestLoadUserSearchByPredicatesCount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Predicates) != len(that1.Predicates) {
		return false
	}
	for i := range this.Predicates {
		if !this.Predicates[i].Equal(that1.Predicates[i]) {
			return false
		}
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	return true
}
func (this *ResponseLoadUserSearchByPredicatesCount) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseLoadUserSearchByPredicatesCount)
	if !ok {
		that2, ok := that.(ResponseLoadUserSearchByPredicatesCount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ResultCount != that1.ResultCount {
		return false
	}
	return true
}
func (this *SimpleContactSearchCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SimpleContactSearchCondition{")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleMessageSearchCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.SimpleMessageSearchCondition{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "ContentType: "+fmt.Sprintf("%#v", this.ContentType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimplePeerSearchCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.SimplePeerSearchCondition{")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	if this.Text != nil {
		s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleUserProfileSearchCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SimpleUserProfileSearchCondition{")
	s = append(s, "QueryString: "+fmt.Sprintf("%#v", this.QueryString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Criterion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.Criterion{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleSearchCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.SimpleSearchCondition{")
	if this.Criterion != nil {
		s = append(s, "Criterion: "+fmt.Sprintf("%#v", this.Criterion)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleSearchCondition_Contact) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SimpleSearchCondition_Contact{` +
		`Contact:` + fmt.Sprintf("%#v", this.Contact) + `}`}, ", ")
	return s
}
func (this *SimpleSearchCondition_Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SimpleSearchCondition_Message{` +
		`Message:` + fmt.Sprintf("%#v", this.Message) + `}`}, ", ")
	return s
}
func (this *SimpleSearchCondition_Peer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SimpleSearchCondition_Peer{` +
		`Peer:` + fmt.Sprintf("%#v", this.Peer) + `}`}, ", ")
	return s
}
func (this *SimpleSearchCondition_UserProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SimpleSearchCondition_UserProfile{` +
		`UserProfile:` + fmt.Sprintf("%#v", this.UserProfile) + `}`}, ", ")
	return s
}
func (this *SearchCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.SearchCondition{")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchCondition_SearchPeerTypeCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SearchCondition_SearchPeerTypeCondition{` +
		`SearchPeerTypeCondition:` + fmt.Sprintf("%#v", this.SearchPeerTypeCondition) + `}`}, ", ")
	return s
}
func (this *SearchCondition_SearchPieceText) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SearchCondition_SearchPieceText{` +
		`SearchPieceText:` + fmt.Sprintf("%#v", this.SearchPieceText) + `}`}, ", ")
	return s
}
func (this *SearchCondition_SearchAndCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SearchCondition_SearchAndCondition{` +
		`SearchAndCondition:` + fmt.Sprintf("%#v", this.SearchAndCondition) + `}`}, ", ")
	return s
}
func (this *SearchCondition_SearchOrCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SearchCondition_SearchOrCondition{` +
		`SearchOrCondition:` + fmt.Sprintf("%#v", this.SearchOrCondition) + `}`}, ", ")
	return s
}
func (this *SearchCondition_SearchPeerCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SearchCondition_SearchPeerCondition{` +
		`SearchPeerCondition:` + fmt.Sprintf("%#v", this.SearchPeerCondition) + `}`}, ", ")
	return s
}
func (this *SearchCondition_SearchPeerContentType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SearchCondition_SearchPeerContentType{` +
		`SearchPeerContentType:` + fmt.Sprintf("%#v", this.SearchPeerContentType) + `}`}, ", ")
	return s
}
func (this *SearchCondition_SearchSenderIdConfition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SearchCondition_SearchSenderIdConfition{` +
		`SearchSenderIdConfition:` + fmt.Sprintf("%#v", this.SearchSenderIdConfition) + `}`}, ", ")
	return s
}
func (this *SearchPeerTypeCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SearchPeerTypeCondition{")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchPieceText) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SearchPieceText{")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchAndCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SearchAndCondition{")
	if this.AndQuery != nil {
		s = append(s, "AndQuery: "+fmt.Sprintf("%#v", this.AndQuery)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchOrCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SearchOrCondition{")
	if this.OrQuery != nil {
		s = append(s, "OrQuery: "+fmt.Sprintf("%#v", this.OrQuery)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchPeerCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SearchPeerCondition{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchPeerContentType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SearchPeerContentType{")
	s = append(s, "ContentType: "+fmt.Sprintf("%#v", this.ContentType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchSenderIdConfition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SearchSenderIdConfition{")
	s = append(s, "SenderId: "+fmt.Sprintf("%#v", this.SenderId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeerSearchResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&dialog.PeerSearchResult{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.Shortname != nil {
		s = append(s, "Shortname: "+fmt.Sprintf("%#v", this.Shortname)+",\n")
	}
	if this.Description != nil {
		s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	}
	if this.MembersCount != nil {
		s = append(s, "MembersCount: "+fmt.Sprintf("%#v", this.MembersCount)+",\n")
	}
	s = append(s, "DateCreated: "+fmt.Sprintf("%#v", this.DateCreated)+",\n")
	if this.Creator != nil {
		s = append(s, "Creator: "+fmt.Sprintf("%#v", this.Creator)+",\n")
	}
	if this.IsPublic != nil {
		s = append(s, "IsPublic: "+fmt.Sprintf("%#v", this.IsPublic)+",\n")
	}
	if this.IsJoined != nil {
		s = append(s, "IsJoined: "+fmt.Sprintf("%#v", this.IsJoined)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestPeerSearch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestPeerSearch{")
	if this.Query != nil {
		s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	}
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponsePeerSearch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.ResponsePeerSearch{")
	if this.SearchResults != nil {
		s = append(s, "SearchResults: "+fmt.Sprintf("%#v", this.SearchResults)+",\n")
	}
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	if this.GroupPeers != nil {
		s = append(s, "GroupPeers: "+fmt.Sprintf("%#v", this.GroupPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestResolvePeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestResolvePeer{")
	s = append(s, "Shortname: "+fmt.Sprintf("%#v", this.Shortname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseResolvePeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseResolvePeer{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageSearchResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.MessageSearchResult{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "SenderId: "+fmt.Sprintf("%#v", this.SenderId)+",\n")
	if this.Content != nil {
		s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageSearchItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.MessageSearchItem{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseMessageSearchResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.ResponseMessageSearchResponse{")
	if this.SearchResults != nil {
		s = append(s, "SearchResults: "+fmt.Sprintf("%#v", this.SearchResults)+",\n")
	}
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	if this.LoadMoreState != nil {
		s = append(s, "LoadMoreState: "+fmt.Sprintf("%#v", this.LoadMoreState)+",\n")
	}
	if this.UserOutPeers != nil {
		s = append(s, "UserOutPeers: "+fmt.Sprintf("%#v", this.UserOutPeers)+",\n")
	}
	if this.GroupOutPeers != nil {
		s = append(s, "GroupOutPeers: "+fmt.Sprintf("%#v", this.GroupOutPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestMessageSearch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestMessageSearch{")
	if this.Query != nil {
		s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	}
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestMessageSearchMore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestMessageSearchMore{")
	s = append(s, "LoadMoreState: "+fmt.Sprintf("%#v", this.LoadMoreState)+",\n")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSimpleSearch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestSimpleSearch{")
	if this.Criteria != nil {
		s = append(s, "Criteria: "+fmt.Sprintf("%#v", this.Criteria)+",\n")
	}
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSimpleSearchMore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestSimpleSearchMore{")
	s = append(s, "LoadMoreState: "+fmt.Sprintf("%#v", this.LoadMoreState)+",\n")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestFieldAutocomplete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestFieldAutocomplete{")
	s = append(s, "FieldName: "+fmt.Sprintf("%#v", this.FieldName)+",\n")
	s = append(s, "FieldValue: "+fmt.Sprintf("%#v", this.FieldValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseFieldAutocomplete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseFieldAutocomplete{")
	s = append(s, "FieldName: "+fmt.Sprintf("%#v", this.FieldName)+",\n")
	s = append(s, "FieldValue: "+fmt.Sprintf("%#v", this.FieldValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadUserSearchByPredicatesResults) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestLoadUserSearchByPredicatesResults{")
	if this.Predicates != nil {
		s = append(s, "Predicates: "+fmt.Sprintf("%#v", this.Predicates)+",\n")
	}
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	if this.Query != nil {
		s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	}
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserMatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UserMatch{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "MatchPredicates: "+fmt.Sprintf("%#v", this.MatchPredicates)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadUserSearchByPredicatesResults) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseLoadUserSearchByPredicatesResults{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	s = append(s, "ResultCount: "+fmt.Sprintf("%#v", this.ResultCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadUserSearchByPredicatesCount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestLoadUserSearchByPredicatesCount{")
	if this.Predicates != nil {
		s = append(s, "Predicates: "+fmt.Sprintf("%#v", this.Predicates)+",\n")
	}
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadUserSearchByPredicatesCount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseLoadUserSearchByPredicatesCount{")
	s = append(s, "ResultCount: "+fmt.Sprintf("%#v", this.ResultCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSearch(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Search service

type SearchClient interface {
	// / Search among groups/users/contacts
	PeerSearch(ctx context.Context, in *RequestPeerSearch, opts ...grpc.CallOption) (*ResponsePeerSearch, error)
	ResolvePeer(ctx context.Context, in *RequestResolvePeer, opts ...grpc.CallOption) (*ResponseResolvePeer, error)
	// / Search by messages
	MessageSearch(ctx context.Context, in *RequestMessageSearch, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error)
	MessageSearchMore(ctx context.Context, in *RequestMessageSearchMore, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error)
	// / Custom search by conditions
	SimpleSearch(ctx context.Context, in *RequestSimpleSearch, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error)
	SimpleSearchMore(ctx context.Context, in *RequestSimpleSearchMore, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error)
	// / Search for autocomplete suggestions among custom user profile
	AutocompleteSuggestions(ctx context.Context, in *RequestFieldAutocomplete, opts ...grpc.CallOption) (*ResponseFieldAutocomplete, error)
	LoadUserSearchByPredicatesResults(ctx context.Context, in *RequestLoadUserSearchByPredicatesResults, opts ...grpc.CallOption) (*ResponseLoadUserSearchByPredicatesResults, error)
	LoadUserSearchByPredicatesCount(ctx context.Context, in *RequestLoadUserSearchByPredicatesCount, opts ...grpc.CallOption) (*ResponseLoadUserSearchByPredicatesCount, error)
}

type searchClient struct {
	cc *grpc.ClientConn
}

func NewSearchClient(cc *grpc.ClientConn) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) PeerSearch(ctx context.Context, in *RequestPeerSearch, opts ...grpc.CallOption) (*ResponsePeerSearch, error) {
	out := new(ResponsePeerSearch)
	err := grpc.Invoke(ctx, "/dialog.Search/PeerSearch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) ResolvePeer(ctx context.Context, in *RequestResolvePeer, opts ...grpc.CallOption) (*ResponseResolvePeer, error) {
	out := new(ResponseResolvePeer)
	err := grpc.Invoke(ctx, "/dialog.Search/ResolvePeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) MessageSearch(ctx context.Context, in *RequestMessageSearch, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error) {
	out := new(ResponseMessageSearchResponse)
	err := grpc.Invoke(ctx, "/dialog.Search/MessageSearch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) MessageSearchMore(ctx context.Context, in *RequestMessageSearchMore, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error) {
	out := new(ResponseMessageSearchResponse)
	err := grpc.Invoke(ctx, "/dialog.Search/MessageSearchMore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) SimpleSearch(ctx context.Context, in *RequestSimpleSearch, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error) {
	out := new(ResponseMessageSearchResponse)
	err := grpc.Invoke(ctx, "/dialog.Search/SimpleSearch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) SimpleSearchMore(ctx context.Context, in *RequestSimpleSearchMore, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error) {
	out := new(ResponseMessageSearchResponse)
	err := grpc.Invoke(ctx, "/dialog.Search/SimpleSearchMore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) AutocompleteSuggestions(ctx context.Context, in *RequestFieldAutocomplete, opts ...grpc.CallOption) (*ResponseFieldAutocomplete, error) {
	out := new(ResponseFieldAutocomplete)
	err := grpc.Invoke(ctx, "/dialog.Search/AutocompleteSuggestions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) LoadUserSearchByPredicatesResults(ctx context.Context, in *RequestLoadUserSearchByPredicatesResults, opts ...grpc.CallOption) (*ResponseLoadUserSearchByPredicatesResults, error) {
	out := new(ResponseLoadUserSearchByPredicatesResults)
	err := grpc.Invoke(ctx, "/dialog.Search/LoadUserSearchByPredicatesResults", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) LoadUserSearchByPredicatesCount(ctx context.Context, in *RequestLoadUserSearchByPredicatesCount, opts ...grpc.CallOption) (*ResponseLoadUserSearchByPredicatesCount, error) {
	out := new(ResponseLoadUserSearchByPredicatesCount)
	err := grpc.Invoke(ctx, "/dialog.Search/LoadUserSearchByPredicatesCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Search service

type SearchServer interface {
	// / Search among groups/users/contacts
	PeerSearch(context.Context, *RequestPeerSearch) (*ResponsePeerSearch, error)
	ResolvePeer(context.Context, *RequestResolvePeer) (*ResponseResolvePeer, error)
	// / Search by messages
	MessageSearch(context.Context, *RequestMessageSearch) (*ResponseMessageSearchResponse, error)
	MessageSearchMore(context.Context, *RequestMessageSearchMore) (*ResponseMessageSearchResponse, error)
	// / Custom search by conditions
	SimpleSearch(context.Context, *RequestSimpleSearch) (*ResponseMessageSearchResponse, error)
	SimpleSearchMore(context.Context, *RequestSimpleSearchMore) (*ResponseMessageSearchResponse, error)
	// / Search for autocomplete suggestions among custom user profile
	AutocompleteSuggestions(context.Context, *RequestFieldAutocomplete) (*ResponseFieldAutocomplete, error)
	LoadUserSearchByPredicatesResults(context.Context, *RequestLoadUserSearchByPredicatesResults) (*ResponseLoadUserSearchByPredicatesResults, error)
	LoadUserSearchByPredicatesCount(context.Context, *RequestLoadUserSearchByPredicatesCount) (*ResponseLoadUserSearchByPredicatesCount, error)
}

func RegisterSearchServer(s *grpc.Server, srv SearchServer) {
	s.RegisterService(&_Search_serviceDesc, srv)
}

func _Search_PeerSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPeerSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).PeerSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/PeerSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).PeerSearch(ctx, req.(*RequestPeerSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_ResolvePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestResolvePeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).ResolvePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/ResolvePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).ResolvePeer(ctx, req.(*RequestResolvePeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_MessageSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessageSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).MessageSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/MessageSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).MessageSearch(ctx, req.(*RequestMessageSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_MessageSearchMore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessageSearchMore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).MessageSearchMore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/MessageSearchMore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).MessageSearchMore(ctx, req.(*RequestMessageSearchMore))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_SimpleSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSimpleSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SimpleSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/SimpleSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SimpleSearch(ctx, req.(*RequestSimpleSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_SimpleSearchMore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSimpleSearchMore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SimpleSearchMore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/SimpleSearchMore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SimpleSearchMore(ctx, req.(*RequestSimpleSearchMore))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_AutocompleteSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFieldAutocomplete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).AutocompleteSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/AutocompleteSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).AutocompleteSuggestions(ctx, req.(*RequestFieldAutocomplete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_LoadUserSearchByPredicatesResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadUserSearchByPredicatesResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).LoadUserSearchByPredicatesResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/LoadUserSearchByPredicatesResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).LoadUserSearchByPredicatesResults(ctx, req.(*RequestLoadUserSearchByPredicatesResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_LoadUserSearchByPredicatesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadUserSearchByPredicatesCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).LoadUserSearchByPredicatesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/LoadUserSearchByPredicatesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).LoadUserSearchByPredicatesCount(ctx, req.(*RequestLoadUserSearchByPredicatesCount))
	}
	return interceptor(ctx, in, info, handler)
}

var _Search_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PeerSearch",
			Handler:    _Search_PeerSearch_Handler,
		},
		{
			MethodName: "ResolvePeer",
			Handler:    _Search_ResolvePeer_Handler,
		},
		{
			MethodName: "MessageSearch",
			Handler:    _Search_MessageSearch_Handler,
		},
		{
			MethodName: "MessageSearchMore",
			Handler:    _Search_MessageSearchMore_Handler,
		},
		{
			MethodName: "SimpleSearch",
			Handler:    _Search_SimpleSearch_Handler,
		},
		{
			MethodName: "SimpleSearchMore",
			Handler:    _Search_SimpleSearchMore_Handler,
		},
		{
			MethodName: "AutocompleteSuggestions",
			Handler:    _Search_AutocompleteSuggestions_Handler,
		},
		{
			MethodName: "LoadUserSearchByPredicatesResults",
			Handler:    _Search_LoadUserSearchByPredicatesResults_Handler,
		},
		{
			MethodName: "LoadUserSearchByPredicatesCount",
			Handler:    _Search_LoadUserSearchByPredicatesCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search.proto",
}

func (m *SimpleContactSearchCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleContactSearchCondition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *SimpleMessageSearchCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleMessageSearchCondition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Peer.Size()))
		n1, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if m.ContentType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.ContentType))
	}
	return i, nil
}

func (m *SimplePeerSearchCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimplePeerSearchCondition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PeerType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.PeerType))
	}
	if m.Text != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Text.Size()))
		n2, err := m.Text.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *SimpleUserProfileSearchCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleUserProfileSearchCondition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.QueryString) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.QueryString)))
		i += copy(dAtA[i:], m.QueryString)
	}
	return i, nil
}

func (m *Criterion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Criterion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SimpleSearchCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleSearchCondition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Criterion != nil {
		nn3, err := m.Criterion.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *SimpleSearchCondition_Contact) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Contact != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Contact.Size()))
		n4, err := m.Contact.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *SimpleSearchCondition_Message) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Message.Size()))
		n5, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *SimpleSearchCondition_Peer) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Peer != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Peer.Size()))
		n6, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *SimpleSearchCondition_UserProfile) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UserProfile != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.UserProfile.Size()))
		n7, err := m.UserProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *SearchCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchCondition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		nn8, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	return i, nil
}

func (m *SearchCondition_SearchPeerTypeCondition) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SearchPeerTypeCondition != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.SearchPeerTypeCondition.Size()))
		n9, err := m.SearchPeerTypeCondition.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *SearchCondition_SearchPieceText) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SearchPieceText != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.SearchPieceText.Size()))
		n10, err := m.SearchPieceText.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *SearchCondition_SearchAndCondition) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SearchAndCondition != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.SearchAndCondition.Size()))
		n11, err := m.SearchAndCondition.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *SearchCondition_SearchOrCondition) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SearchOrCondition != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.SearchOrCondition.Size()))
		n12, err := m.SearchOrCondition.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *SearchCondition_SearchPeerCondition) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SearchPeerCondition != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.SearchPeerCondition.Size()))
		n13, err := m.SearchPeerCondition.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *SearchCondition_SearchPeerContentType) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SearchPeerContentType != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.SearchPeerContentType.Size()))
		n14, err := m.SearchPeerContentType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *SearchCondition_SearchSenderIdConfition) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SearchSenderIdConfition != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.SearchSenderIdConfition.Size()))
		n15, err := m.SearchSenderIdConfition.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *SearchPeerTypeCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchPeerTypeCondition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PeerType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.PeerType))
	}
	return i, nil
}

func (m *SearchPieceText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchPieceText) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	return i, nil
}

func (m *SearchAndCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchAndCondition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AndQuery) > 0 {
		for _, msg := range m.AndQuery {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSearch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SearchOrCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchOrCondition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrQuery) > 0 {
		for _, msg := range m.OrQuery {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSearch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SearchPeerCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchPeerCondition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Peer.Size()))
		n16, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *SearchPeerContentType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchPeerContentType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ContentType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.ContentType))
	}
	return i, nil
}

func (m *SearchSenderIdConfition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchSenderIdConfition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SenderId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.SenderId))
	}
	return i, nil
}

func (m *PeerSearchResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerSearchResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Peer.Size()))
		n17, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Description != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Description.Size()))
		n18, err := m.Description.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.MembersCount != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.MembersCount.Size()))
		n19, err := m.MembersCount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.DateCreated != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.DateCreated))
	}
	if m.Creator != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Creator.Size()))
		n20, err := m.Creator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.IsPublic != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.IsPublic.Size()))
		n21, err := m.IsPublic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.IsJoined != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.IsJoined.Size()))
		n22, err := m.IsJoined.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.Shortname != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Shortname.Size()))
		n23, err := m.Shortname.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *RequestPeerSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPeerSearch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		for _, msg := range m.Query {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSearch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Optimizations) > 0 {
		dAtA25 := make([]byte, len(m.Optimizations)*10)
		var j24 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintSearch(dAtA, i, uint64(j24))
		i += copy(dAtA[i:], dAtA25[:j24])
	}
	return i, nil
}

func (m *ResponsePeerSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponsePeerSearch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SearchResults) > 0 {
		for _, msg := range m.SearchResults {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSearch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSearch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSearch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UserPeers) > 0 {
		for _, msg := range m.UserPeers {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSearch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, msg := range m.GroupPeers {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSearch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestResolvePeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestResolvePeer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Shortname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Shortname)))
		i += copy(dAtA[i:], m.Shortname)
	}
	return i, nil
}

func (m *ResponseResolvePeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseResolvePeer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Peer.Size()))
		n26, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}

func (m *MessageSearchResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageSearchResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Peer.Size()))
		n27, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.Rid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Rid))
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Date))
	}
	if m.SenderId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.SenderId))
	}
	if m.Content != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Content.Size()))
		n28, err := m.Content.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *MessageSearchItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageSearchItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Result.Size()))
		n29, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *ResponseMessageSearchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseMessageSearchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SearchResults) > 0 {
		for _, msg := range m.SearchResults {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSearch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSearch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSearch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LoadMoreState != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.LoadMoreState.Size()))
		n30, err := m.LoadMoreState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if len(m.UserOutPeers) > 0 {
		for _, msg := range m.UserOutPeers {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSearch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GroupOutPeers) > 0 {
		for _, msg := range m.GroupOutPeers {
			dAtA[i] = 0x32
			i++
			i = encodeVarintSearch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestMessageSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMessageSearch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Query != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Query.Size()))
		n31, err := m.Query.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if len(m.Optimizations) > 0 {
		dAtA33 := make([]byte, len(m.Optimizations)*10)
		var j32 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA33[j32] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j32++
			}
			dAtA33[j32] = uint8(num)
			j32++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintSearch(dAtA, i, uint64(j32))
		i += copy(dAtA[i:], dAtA33[:j32])
	}
	return i, nil
}

func (m *RequestMessageSearchMore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMessageSearchMore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LoadMoreState) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.LoadMoreState)))
		i += copy(dAtA[i:], m.LoadMoreState)
	}
	if len(m.Optimizations) > 0 {
		dAtA35 := make([]byte, len(m.Optimizations)*10)
		var j34 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA35[j34] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j34++
			}
			dAtA35[j34] = uint8(num)
			j34++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintSearch(dAtA, i, uint64(j34))
		i += copy(dAtA[i:], dAtA35[:j34])
	}
	return i, nil
}

func (m *RequestSimpleSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSimpleSearch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Criteria) > 0 {
		for _, msg := range m.Criteria {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSearch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Optimizations) > 0 {
		dAtA37 := make([]byte, len(m.Optimizations)*10)
		var j36 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA37[j36] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j36++
			}
			dAtA37[j36] = uint8(num)
			j36++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintSearch(dAtA, i, uint64(j36))
		i += copy(dAtA[i:], dAtA37[:j36])
	}
	return i, nil
}

func (m *RequestSimpleSearchMore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSimpleSearchMore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LoadMoreState) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.LoadMoreState)))
		i += copy(dAtA[i:], m.LoadMoreState)
	}
	if len(m.Optimizations) > 0 {
		dAtA39 := make([]byte, len(m.Optimizations)*10)
		var j38 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA39[j38] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j38++
			}
			dAtA39[j38] = uint8(num)
			j38++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintSearch(dAtA, i, uint64(j38))
		i += copy(dAtA[i:], dAtA39[:j38])
	}
	return i, nil
}

func (m *RequestFieldAutocomplete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestFieldAutocomplete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FieldName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.FieldName)))
		i += copy(dAtA[i:], m.FieldName)
	}
	if len(m.FieldValue) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.FieldValue)))
		i += copy(dAtA[i:], m.FieldValue)
	}
	return i, nil
}

func (m *ResponseFieldAutocomplete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseFieldAutocomplete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FieldName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.FieldName)))
		i += copy(dAtA[i:], m.FieldName)
	}
	if len(m.FieldValue) > 0 {
		for _, s := range m.FieldValue {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *RequestLoadUserSearchByPredicatesResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadUserSearchByPredicatesResults) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Predicates) > 0 {
		for _, msg := range m.Predicates {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSearch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.GroupId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.GroupId))
	}
	if m.Query != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Query.Size()))
		n40, err := m.Query.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *UserMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.UserId))
	}
	if m.MatchPredicates {
		dAtA[i] = 0x10
		i++
		if m.MatchPredicates {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ResponseLoadUserSearchByPredicatesResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadUserSearchByPredicatesResults) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSearch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ResultCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.ResultCount))
	}
	return i, nil
}

func (m *RequestLoadUserSearchByPredicatesCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadUserSearchByPredicatesCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Predicates) > 0 {
		for _, msg := range m.Predicates {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSearch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.GroupId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.GroupId))
	}
	return i, nil
}

func (m *ResponseLoadUserSearchByPredicatesCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadUserSearchByPredicatesCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResultCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.ResultCount))
	}
	return i, nil
}

func encodeFixed64Search(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Search(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSearch(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SimpleContactSearchCondition) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *SimpleMessageSearchCondition) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.ContentType != 0 {
		n += 1 + sovSearch(uint64(m.ContentType))
	}
	return n
}

func (m *SimplePeerSearchCondition) Size() (n int) {
	var l int
	_ = l
	if m.PeerType != 0 {
		n += 1 + sovSearch(uint64(m.PeerType))
	}
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *SimpleUserProfileSearchCondition) Size() (n int) {
	var l int
	_ = l
	l = len(m.QueryString)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *Criterion) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SimpleSearchCondition) Size() (n int) {
	var l int
	_ = l
	if m.Criterion != nil {
		n += m.Criterion.Size()
	}
	return n
}

func (m *SimpleSearchCondition_Contact) Size() (n int) {
	var l int
	_ = l
	if m.Contact != nil {
		l = m.Contact.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SimpleSearchCondition_Message) Size() (n int) {
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SimpleSearchCondition_Peer) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SimpleSearchCondition_UserProfile) Size() (n int) {
	var l int
	_ = l
	if m.UserProfile != nil {
		l = m.UserProfile.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SearchCondition) Size() (n int) {
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *SearchCondition_SearchPeerTypeCondition) Size() (n int) {
	var l int
	_ = l
	if m.SearchPeerTypeCondition != nil {
		l = m.SearchPeerTypeCondition.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SearchCondition_SearchPieceText) Size() (n int) {
	var l int
	_ = l
	if m.SearchPieceText != nil {
		l = m.SearchPieceText.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SearchCondition_SearchAndCondition) Size() (n int) {
	var l int
	_ = l
	if m.SearchAndCondition != nil {
		l = m.SearchAndCondition.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SearchCondition_SearchOrCondition) Size() (n int) {
	var l int
	_ = l
	if m.SearchOrCondition != nil {
		l = m.SearchOrCondition.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SearchCondition_SearchPeerCondition) Size() (n int) {
	var l int
	_ = l
	if m.SearchPeerCondition != nil {
		l = m.SearchPeerCondition.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SearchCondition_SearchPeerContentType) Size() (n int) {
	var l int
	_ = l
	if m.SearchPeerContentType != nil {
		l = m.SearchPeerContentType.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SearchCondition_SearchSenderIdConfition) Size() (n int) {
	var l int
	_ = l
	if m.SearchSenderIdConfition != nil {
		l = m.SearchSenderIdConfition.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SearchPeerTypeCondition) Size() (n int) {
	var l int
	_ = l
	if m.PeerType != 0 {
		n += 1 + sovSearch(uint64(m.PeerType))
	}
	return n
}

func (m *SearchPieceText) Size() (n int) {
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *SearchAndCondition) Size() (n int) {
	var l int
	_ = l
	if len(m.AndQuery) > 0 {
		for _, e := range m.AndQuery {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	return n
}

func (m *SearchOrCondition) Size() (n int) {
	var l int
	_ = l
	if len(m.OrQuery) > 0 {
		for _, e := range m.OrQuery {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	return n
}

func (m *SearchPeerCondition) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *SearchPeerContentType) Size() (n int) {
	var l int
	_ = l
	if m.ContentType != 0 {
		n += 1 + sovSearch(uint64(m.ContentType))
	}
	return n
}

func (m *SearchSenderIdConfition) Size() (n int) {
	var l int
	_ = l
	if m.SenderId != 0 {
		n += 1 + sovSearch(uint64(m.SenderId))
	}
	return n
}

func (m *PeerSearchResult) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.MembersCount != nil {
		l = m.MembersCount.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.DateCreated != 0 {
		n += 1 + sovSearch(uint64(m.DateCreated))
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.IsPublic != nil {
		l = m.IsPublic.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.IsJoined != nil {
		l = m.IsJoined.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Shortname != nil {
		l = m.Shortname.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *RequestPeerSearch) Size() (n int) {
	var l int
	_ = l
	if len(m.Query) > 0 {
		for _, e := range m.Query {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovSearch(uint64(e))
		}
		n += 1 + sovSearch(uint64(l)) + l
	}
	return n
}

func (m *ResponsePeerSearch) Size() (n int) {
	var l int
	_ = l
	if len(m.SearchResults) > 0 {
		for _, e := range m.SearchResults {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, e := range m.GroupPeers {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	return n
}

func (m *RequestResolvePeer) Size() (n int) {
	var l int
	_ = l
	l = len(m.Shortname)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *ResponseResolvePeer) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *MessageSearchResult) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Rid != 0 {
		n += 1 + sovSearch(uint64(m.Rid))
	}
	if m.Date != 0 {
		n += 1 + sovSearch(uint64(m.Date))
	}
	if m.SenderId != 0 {
		n += 1 + sovSearch(uint64(m.SenderId))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *MessageSearchItem) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *ResponseMessageSearchResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.SearchResults) > 0 {
		for _, e := range m.SearchResults {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if m.LoadMoreState != nil {
		l = m.LoadMoreState.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if len(m.UserOutPeers) > 0 {
		for _, e := range m.UserOutPeers {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.GroupOutPeers) > 0 {
		for _, e := range m.GroupOutPeers {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	return n
}

func (m *RequestMessageSearch) Size() (n int) {
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovSearch(uint64(e))
		}
		n += 1 + sovSearch(uint64(l)) + l
	}
	return n
}

func (m *RequestMessageSearchMore) Size() (n int) {
	var l int
	_ = l
	l = len(m.LoadMoreState)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovSearch(uint64(e))
		}
		n += 1 + sovSearch(uint64(l)) + l
	}
	return n
}

func (m *RequestSimpleSearch) Size() (n int) {
	var l int
	_ = l
	if len(m.Criteria) > 0 {
		for _, e := range m.Criteria {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovSearch(uint64(e))
		}
		n += 1 + sovSearch(uint64(l)) + l
	}
	return n
}

func (m *RequestSimpleSearchMore) Size() (n int) {
	var l int
	_ = l
	l = len(m.LoadMoreState)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovSearch(uint64(e))
		}
		n += 1 + sovSearch(uint64(l)) + l
	}
	return n
}

func (m *RequestFieldAutocomplete) Size() (n int) {
	var l int
	_ = l
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	l = len(m.FieldValue)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *ResponseFieldAutocomplete) Size() (n int) {
	var l int
	_ = l
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if len(m.FieldValue) > 0 {
		for _, s := range m.FieldValue {
			l = len(s)
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	return n
}

func (m *RequestLoadUserSearchByPredicatesResults) Size() (n int) {
	var l int
	_ = l
	if len(m.Predicates) > 0 {
		for _, e := range m.Predicates {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if m.GroupId != 0 {
		n += 1 + sovSearch(uint64(m.GroupId))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovSearch(uint64(m.Limit))
	}
	return n
}

func (m *UserMatch) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovSearch(uint64(m.UserId))
	}
	if m.MatchPredicates {
		n += 2
	}
	return n
}

func (m *ResponseLoadUserSearchByPredicatesResults) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if m.ResultCount != 0 {
		n += 1 + sovSearch(uint64(m.ResultCount))
	}
	return n
}

func (m *RequestLoadUserSearchByPredicatesCount) Size() (n int) {
	var l int
	_ = l
	if len(m.Predicates) > 0 {
		for _, e := range m.Predicates {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if m.GroupId != 0 {
		n += 1 + sovSearch(uint64(m.GroupId))
	}
	return n
}

func (m *ResponseLoadUserSearchByPredicatesCount) Size() (n int) {
	var l int
	_ = l
	if m.ResultCount != 0 {
		n += 1 + sovSearch(uint64(m.ResultCount))
	}
	return n
}

func sovSearch(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSearch(x uint64) (n int) {
	return sovSearch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SimpleContactSearchCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleContactSearchCondition{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleMessageSearchCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleMessageSearchCondition{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimplePeerSearchCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimplePeerSearchCondition{`,
		`PeerType:` + fmt.Sprintf("%v", this.PeerType) + `,`,
		`Text:` + strings.Replace(fmt.Sprintf("%v", this.Text), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleUserProfileSearchCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleUserProfileSearchCondition{`,
		`QueryString:` + fmt.Sprintf("%v", this.QueryString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Criterion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Criterion{`,
		`}`,
	}, "")
	return s
}
func (this *SimpleSearchCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleSearchCondition{`,
		`Criterion:` + fmt.Sprintf("%v", this.Criterion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleSearchCondition_Contact) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleSearchCondition_Contact{`,
		`Contact:` + strings.Replace(fmt.Sprintf("%v", this.Contact), "SimpleContactSearchCondition", "SimpleContactSearchCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleSearchCondition_Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleSearchCondition_Message{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "SimpleMessageSearchCondition", "SimpleMessageSearchCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleSearchCondition_Peer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleSearchCondition_Peer{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "SimplePeerSearchCondition", "SimplePeerSearchCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleSearchCondition_UserProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleSearchCondition_UserProfile{`,
		`UserProfile:` + strings.Replace(fmt.Sprintf("%v", this.UserProfile), "SimpleUserProfileSearchCondition", "SimpleUserProfileSearchCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchCondition{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchCondition_SearchPeerTypeCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchCondition_SearchPeerTypeCondition{`,
		`SearchPeerTypeCondition:` + strings.Replace(fmt.Sprintf("%v", this.SearchPeerTypeCondition), "SearchPeerTypeCondition", "SearchPeerTypeCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchCondition_SearchPieceText) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchCondition_SearchPieceText{`,
		`SearchPieceText:` + strings.Replace(fmt.Sprintf("%v", this.SearchPieceText), "SearchPieceText", "SearchPieceText", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchCondition_SearchAndCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchCondition_SearchAndCondition{`,
		`SearchAndCondition:` + strings.Replace(fmt.Sprintf("%v", this.SearchAndCondition), "SearchAndCondition", "SearchAndCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchCondition_SearchOrCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchCondition_SearchOrCondition{`,
		`SearchOrCondition:` + strings.Replace(fmt.Sprintf("%v", this.SearchOrCondition), "SearchOrCondition", "SearchOrCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchCondition_SearchPeerCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchCondition_SearchPeerCondition{`,
		`SearchPeerCondition:` + strings.Replace(fmt.Sprintf("%v", this.SearchPeerCondition), "SearchPeerCondition", "SearchPeerCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchCondition_SearchPeerContentType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchCondition_SearchPeerContentType{`,
		`SearchPeerContentType:` + strings.Replace(fmt.Sprintf("%v", this.SearchPeerContentType), "SearchPeerContentType", "SearchPeerContentType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchCondition_SearchSenderIdConfition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchCondition_SearchSenderIdConfition{`,
		`SearchSenderIdConfition:` + strings.Replace(fmt.Sprintf("%v", this.SearchSenderIdConfition), "SearchSenderIdConfition", "SearchSenderIdConfition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchPeerTypeCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchPeerTypeCondition{`,
		`PeerType:` + fmt.Sprintf("%v", this.PeerType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchPieceText) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchPieceText{`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchAndCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchAndCondition{`,
		`AndQuery:` + strings.Replace(fmt.Sprintf("%v", this.AndQuery), "SearchCondition", "SearchCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchOrCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchOrCondition{`,
		`OrQuery:` + strings.Replace(fmt.Sprintf("%v", this.OrQuery), "SearchCondition", "SearchCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchPeerCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchPeerCondition{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchPeerContentType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchPeerContentType{`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchSenderIdConfition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchSenderIdConfition{`,
		`SenderId:` + fmt.Sprintf("%v", this.SenderId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerSearchResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerSearchResult{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Description:` + strings.Replace(fmt.Sprintf("%v", this.Description), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`MembersCount:` + strings.Replace(fmt.Sprintf("%v", this.MembersCount), "Int32Value", "google_protobuf.Int32Value", 1) + `,`,
		`DateCreated:` + fmt.Sprintf("%v", this.DateCreated) + `,`,
		`Creator:` + strings.Replace(fmt.Sprintf("%v", this.Creator), "Int32Value", "google_protobuf.Int32Value", 1) + `,`,
		`IsPublic:` + strings.Replace(fmt.Sprintf("%v", this.IsPublic), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`IsJoined:` + strings.Replace(fmt.Sprintf("%v", this.IsJoined), "BoolValue", "google_protobuf.BoolValue", 1) + `,`,
		`Shortname:` + strings.Replace(fmt.Sprintf("%v", this.Shortname), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestPeerSearch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestPeerSearch{`,
		`Query:` + strings.Replace(fmt.Sprintf("%v", this.Query), "SearchCondition", "SearchCondition", 1) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponsePeerSearch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponsePeerSearch{`,
		`SearchResults:` + strings.Replace(fmt.Sprintf("%v", this.SearchResults), "PeerSearchResult", "PeerSearchResult", 1) + `,`,
		`Users:` + strings.Replace(fmt.Sprintf("%v", this.Users), "User", "User", 1) + `,`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "Group", "Group", 1) + `,`,
		`UserPeers:` + strings.Replace(fmt.Sprintf("%v", this.UserPeers), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`GroupPeers:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeers), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestResolvePeer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestResolvePeer{`,
		`Shortname:` + fmt.Sprintf("%v", this.Shortname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseResolvePeer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseResolvePeer{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageSearchResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageSearchResult{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`SenderId:` + fmt.Sprintf("%v", this.SenderId) + `,`,
		`Content:` + strings.Replace(fmt.Sprintf("%v", this.Content), "MessageContent", "MessageContent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageSearchItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageSearchItem{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "MessageSearchResult", "MessageSearchResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseMessageSearchResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseMessageSearchResponse{`,
		`SearchResults:` + strings.Replace(fmt.Sprintf("%v", this.SearchResults), "MessageSearchItem", "MessageSearchItem", 1) + `,`,
		`Users:` + strings.Replace(fmt.Sprintf("%v", this.Users), "User", "User", 1) + `,`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "Group", "Group", 1) + `,`,
		`LoadMoreState:` + strings.Replace(fmt.Sprintf("%v", this.LoadMoreState), "BytesValue", "google_protobuf.BytesValue", 1) + `,`,
		`UserOutPeers:` + strings.Replace(fmt.Sprintf("%v", this.UserOutPeers), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`GroupOutPeers:` + strings.Replace(fmt.Sprintf("%v", this.GroupOutPeers), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestMessageSearch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestMessageSearch{`,
		`Query:` + strings.Replace(fmt.Sprintf("%v", this.Query), "SearchCondition", "SearchCondition", 1) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestMessageSearchMore) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestMessageSearchMore{`,
		`LoadMoreState:` + fmt.Sprintf("%v", this.LoadMoreState) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSimpleSearch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSimpleSearch{`,
		`Criteria:` + strings.Replace(fmt.Sprintf("%v", this.Criteria), "SimpleSearchCondition", "SimpleSearchCondition", 1) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSimpleSearchMore) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSimpleSearchMore{`,
		`LoadMoreState:` + fmt.Sprintf("%v", this.LoadMoreState) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestFieldAutocomplete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestFieldAutocomplete{`,
		`FieldName:` + fmt.Sprintf("%v", this.FieldName) + `,`,
		`FieldValue:` + fmt.Sprintf("%v", this.FieldValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseFieldAutocomplete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseFieldAutocomplete{`,
		`FieldName:` + fmt.Sprintf("%v", this.FieldName) + `,`,
		`FieldValue:` + fmt.Sprintf("%v", this.FieldValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadUserSearchByPredicatesResults) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadUserSearchByPredicatesResults{`,
		`Predicates:` + strings.Replace(fmt.Sprintf("%v", this.Predicates), "SearchPredicate", "SearchPredicate", 1) + `,`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`Query:` + strings.Replace(fmt.Sprintf("%v", this.Query), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserMatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserMatch{`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`MatchPredicates:` + fmt.Sprintf("%v", this.MatchPredicates) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadUserSearchByPredicatesResults) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseLoadUserSearchByPredicatesResults{`,
		`Users:` + strings.Replace(fmt.Sprintf("%v", this.Users), "UserMatch", "UserMatch", 1) + `,`,
		`ResultCount:` + fmt.Sprintf("%v", this.ResultCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadUserSearchByPredicatesCount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadUserSearchByPredicatesCount{`,
		`Predicates:` + strings.Replace(fmt.Sprintf("%v", this.Predicates), "SearchPredicate", "SearchPredicate", 1) + `,`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadUserSearchByPredicatesCount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseLoadUserSearchByPredicatesCount{`,
		`ResultCount:` + fmt.Sprintf("%v", this.ResultCount) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSearch(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SimpleContactSearchCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleContactSearchCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleContactSearchCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleMessageSearchCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleMessageSearchCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleMessageSearchCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			m.ContentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContentType |= (SearchContentType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimplePeerSearchCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimplePeerSearchCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimplePeerSearchCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= (SearchPeerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &google_protobuf.StringValue{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleUserProfileSearchCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleUserProfileSearchCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleUserProfileSearchCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Criterion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: criterion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: criterion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleSearchCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleSearchCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleSearchCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SimpleContactSearchCondition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Criterion = &SimpleSearchCondition_Contact{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SimpleMessageSearchCondition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Criterion = &SimpleSearchCondition_Message{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SimplePeerSearchCondition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Criterion = &SimpleSearchCondition_Peer{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SimpleUserProfileSearchCondition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Criterion = &SimpleSearchCondition_UserProfile{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchPeerTypeCondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SearchPeerTypeCondition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &SearchCondition_SearchPeerTypeCondition{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchPieceText", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SearchPieceText{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &SearchCondition_SearchPieceText{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAndCondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SearchAndCondition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &SearchCondition_SearchAndCondition{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchOrCondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SearchOrCondition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &SearchCondition_SearchOrCondition{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchPeerCondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SearchPeerCondition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &SearchCondition_SearchPeerCondition{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchPeerContentType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SearchPeerContentType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &SearchCondition_SearchPeerContentType{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchSenderIdConfition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SearchSenderIdConfition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &SearchCondition_SearchSenderIdConfition{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchPeerTypeCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchPeerTypeCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchPeerTypeCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= (SearchPeerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchPieceText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchPieceText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchPieceText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchAndCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchAndCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchAndCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AndQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AndQuery = append(m.AndQuery, &SearchCondition{})
			if err := m.AndQuery[len(m.AndQuery)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchOrCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchOrCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchOrCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrQuery = append(m.OrQuery, &SearchCondition{})
			if err := m.OrQuery[len(m.OrQuery)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchPeerCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchPeerCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchPeerCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchPeerContentType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchPeerContentType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchPeerContentType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			m.ContentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContentType |= (SearchContentType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchSenderIdConfition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchSenderIdConfition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchSenderIdConfition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			m.SenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerSearchResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerSearchResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerSearchResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &google_protobuf.StringValue{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MembersCount == nil {
				m.MembersCount = &google_protobuf.Int32Value{}
			}
			if err := m.MembersCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateCreated", wireType)
			}
			m.DateCreated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DateCreated |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &google_protobuf.Int32Value{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsPublic == nil {
				m.IsPublic = &google_protobuf.BoolValue{}
			}
			if err := m.IsPublic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsJoined", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsJoined == nil {
				m.IsJoined = &google_protobuf.BoolValue{}
			}
			if err := m.IsJoined.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shortname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shortname == nil {
				m.Shortname = &google_protobuf.StringValue{}
			}
			if err := m.Shortname.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestPeerSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPeerSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPeerSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query, &SearchCondition{})
			if err := m.Query[len(m.Query)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSearch
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponsePeerSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponsePeerSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponsePeerSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchResults = append(m.SearchResults, &PeerSearchResult{})
			if err := m.SearchResults[len(m.SearchResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPeers = append(m.GroupPeers, &GroupOutPeer{})
			if err := m.GroupPeers[len(m.GroupPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestResolvePeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestResolvePeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestResolvePeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shortname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shortname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseResolvePeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseResolvePeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseResolvePeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageSearchResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageSearchResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageSearchResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			m.SenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &MessageContent{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageSearchItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageSearchItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageSearchItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &MessageSearchResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseMessageSearchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseMessageSearchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseMessageSearchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchResults = append(m.SearchResults, &MessageSearchItem{})
			if err := m.SearchResults[len(m.SearchResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadMoreState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadMoreState == nil {
				m.LoadMoreState = &google_protobuf.BytesValue{}
			}
			if err := m.LoadMoreState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserOutPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserOutPeers = append(m.UserOutPeers, &UserOutPeer{})
			if err := m.UserOutPeers[len(m.UserOutPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOutPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupOutPeers = append(m.GroupOutPeers, &GroupOutPeer{})
			if err := m.GroupOutPeers[len(m.GroupOutPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMessageSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMessageSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMessageSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &SearchCondition{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSearch
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMessageSearchMore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMessageSearchMore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMessageSearchMore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadMoreState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadMoreState = append(m.LoadMoreState[:0], dAtA[iNdEx:postIndex]...)
			if m.LoadMoreState == nil {
				m.LoadMoreState = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSearch
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSimpleSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSimpleSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSimpleSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Criteria", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Criteria = append(m.Criteria, &SimpleSearchCondition{})
			if err := m.Criteria[len(m.Criteria)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSearch
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSimpleSearchMore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSimpleSearchMore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSimpleSearchMore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadMoreState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadMoreState = append(m.LoadMoreState[:0], dAtA[iNdEx:postIndex]...)
			if m.LoadMoreState == nil {
				m.LoadMoreState = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSearch
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestFieldAutocomplete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestFieldAutocomplete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestFieldAutocomplete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseFieldAutocomplete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseFieldAutocomplete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseFieldAutocomplete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldValue = append(m.FieldValue, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadUserSearchByPredicatesResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadUserSearchByPredicatesResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadUserSearchByPredicatesResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Predicates = append(m.Predicates, &SearchPredicate{})
			if err := m.Predicates[len(m.Predicates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &google_protobuf.StringValue{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchPredicates", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MatchPredicates = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadUserSearchByPredicatesResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadUserSearchByPredicatesResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadUserSearchByPredicatesResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserMatch{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCount", wireType)
			}
			m.ResultCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadUserSearchByPredicatesCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadUserSearchByPredicatesCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadUserSearchByPredicatesCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Predicates = append(m.Predicates, &SearchPredicate{})
			if err := m.Predicates[len(m.Predicates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadUserSearchByPredicatesCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadUserSearchByPredicatesCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadUserSearchByPredicatesCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCount", wireType)
			}
			m.ResultCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSearch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSearch
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSearch(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSearch = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSearch   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("search.proto", fileDescriptorSearch) }

var fileDescriptorSearch = []byte{
	// 2221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x58, 0x4f, 0x6c, 0x23, 0x57,
	0x19, 0xf7, 0xc4, 0x8e, 0x13, 0x7f, 0x76, 0x36, 0xce, 0x4b, 0x77, 0xe3, 0x38, 0x89, 0x93, 0x4c,
	0xd9, 0xdd, 0xb0, 0x5d, 0xd9, 0xd9, 0xec, 0xb6, 0x85, 0xa5, 0xd2, 0x36, 0x71, 0xbd, 0xeb, 0xb0,
	0xd9, 0x38, 0x1d, 0x3b, 0x85, 0x15, 0x48, 0xd6, 0xc4, 0xf3, 0xe2, 0x9d, 0xca, 0x9e, 0x71, 0x67,
	0xc6, 0x81, 0x14, 0x09, 0x50, 0x2f, 0x48, 0x7b, 0x42, 0x45, 0x02, 0xae, 0x70, 0x42, 0x5c, 0xe0,
	0xc0, 0x01, 0x09, 0x89, 0x4a, 0x48, 0x20, 0x8e, 0x95, 0xb8, 0xc0, 0x8d, 0x35, 0x1c, 0x50, 0x4f,
	0xbd, 0x71, 0x45, 0xef, 0xcf, 0x78, 0x66, 0xde, 0x8c, 0xed, 0x84, 0x3f, 0x15, 0x27, 0xdb, 0xef,
	0xfb, 0xbe, 0xdf, 0xfb, 0xbd, 0xef, 0xef, 0x7b, 0x86, 0x8c, 0x8d, 0x55, 0xab, 0xf5, 0xac, 0xd8,
	0xb3, 0x4c, 0xc7, 0x44, 0x49, 0x4d, 0x57, 0x3b, 0x66, 0x3b, 0x5f, 0x68, 0x9b, 0x66, 0xbb, 0x83,
	0x4b, 0x74, 0xf5, 0xa4, 0x7f, 0x5a, 0xfa, 0x86, 0xa5, 0xf6, 0x7a, 0xd8, 0xb2, 0x99, 0x5e, 0x7e,
	0x95, 0xcb, 0xd5, 0x9e, 0x5e, 0x52, 0x0d, 0xc3, 0x74, 0x54, 0x47, 0x37, 0x0d, 0x57, 0xba, 0xa0,
	0xe1, 0x53, 0xdd, 0xd0, 0xfd, 0x4b, 0x99, 0xb6, 0x65, 0xf6, 0x7b, 0xee, 0xaf, 0x74, 0x0f, 0x7b,
	0x58, 0xf3, 0x5d, 0x6c, 0xdb, 0x6a, 0x5b, 0x37, 0xda, 0xae, 0xb4, 0x6f, 0x7b, 0xd2, 0xc5, 0xae,
	0x6e, 0xb7, 0x70, 0xa7, 0xa3, 0x1a, 0xd8, 0xec, 0xbb, 0x8b, 0x57, 0xed, 0x96, 0xda, 0x51, 0x7b,
	0x27, 0x25, 0xfe, 0xc9, 0x96, 0xe5, 0x1d, 0x58, 0xad, 0xeb, 0xdd, 0x5e, 0x07, 0x97, 0x4d, 0xc3,
	0x51, 0x5b, 0x4e, 0x9d, 0x1e, 0xad, 0x6c, 0x1a, 0x1a, 0xe5, 0x82, 0x10, 0x24, 0x1c, 0xfc, 0x4d,
	0x27, 0x27, 0x6d, 0x48, 0x5b, 0x29, 0x85, 0x7e, 0x97, 0x3f, 0x94, 0x5c, 0xa3, 0x27, 0x94, 0x06,
	0x16, 0x8d, 0x36, 0x20, 0x41, 0xd8, 0x52, 0xa3, 0xf4, 0x4e, 0xa6, 0xc8, 0x3c, 0x54, 0x3c, 0xc2,
	0xd8, 0x52, 0xa8, 0x64, 0x08, 0x3b, 0xe5, 0xc1, 0xa2, 0x37, 0x20, 0xd3, 0x32, 0x0d, 0x07, 0x1b,
	0x4e, 0xd3, 0x39, 0xef, 0xe1, 0x5c, 0x7c, 0x43, 0xda, 0xba, 0xb2, 0xb3, 0xec, 0x5a, 0x0f, 0x37,
	0x21, 0x1a, 0x8d, 0xf3, 0x1e, 0x56, 0xd2, 0x2d, 0xef, 0x87, 0xfc, 0x81, 0x04, 0xcb, 0x8c, 0x14,
	0xd9, 0x46, 0x64, 0x74, 0x17, 0x52, 0x64, 0x5f, 0x06, 0x2c, 0x51, 0xe0, 0x6b, 0x41, 0x60, 0x62,
	0x45, 0x51, 0x67, 0x7b, 0xfc, 0x1b, 0xda, 0xf6, 0x91, 0x4c, 0xef, 0xac, 0x16, 0x59, 0x00, 0x8b,
	0x6e, 0x80, 0x8b, 0x75, 0xc7, 0xd2, 0x8d, 0xf6, 0x3b, 0x6a, 0xa7, 0x8f, 0xb9, 0x67, 0x2a, 0xb0,
	0xc1, 0x38, 0x1c, 0xdb, 0xd8, 0x3a, 0xb2, 0xcc, 0x53, 0xbd, 0x13, 0x72, 0xce, 0x26, 0x64, 0xde,
	0xeb, 0x63, 0xeb, 0xbc, 0x69, 0x53, 0x73, 0xee, 0xd9, 0x34, 0x5d, 0x63, 0x88, 0x72, 0x1a, 0x52,
	0x2d, 0x4b, 0x77, 0xb0, 0xa5, 0x9b, 0x86, 0xfc, 0x8b, 0x29, 0xb8, 0xca, 0x40, 0x45, 0xa4, 0x37,
	0x61, 0xa6, 0xc5, 0xa2, 0xc6, 0x3d, 0xfd, 0xb9, 0xe1, 0x91, 0xc6, 0x84, 0xb4, 0x1a, 0x53, 0x5c,
	0x33, 0x82, 0xc0, 0x32, 0x09, 0xf3, 0x43, 0x0a, 0x08, 0xd1, 0xf1, 0x25, 0x08, 0xdc, 0x0c, 0xbd,
	0xce, 0x43, 0x1d, 0xa7, 0xe6, 0x9b, 0x41, 0xf3, 0x88, 0x48, 0x54, 0x63, 0x3c, 0x03, 0x0e, 0x80,
	0xe6, 0x2c, 0x77, 0x52, 0x2e, 0x41, 0xed, 0xb7, 0x82, 0xf6, 0xa3, 0xbd, 0x58, 0x8d, 0x29, 0x7e,
	0xf3, 0xbd, 0x80, 0xc7, 0xfe, 0x92, 0x80, 0x79, 0xd1, 0x57, 0x5f, 0x83, 0x25, 0x3b, 0x10, 0xe7,
	0xa1, 0x88, 0xfb, 0x6e, 0x3d, 0x3a, 0x1d, 0xfc, 0x3b, 0x8e, 0x42, 0x40, 0x65, 0x98, 0xe7, 0x22,
	0x1d, 0xb7, 0x70, 0xc3, 0xcb, 0x99, 0x25, 0x01, 0xd4, 0x15, 0x57, 0x63, 0x8a, 0x68, 0x81, 0x0e,
	0x00, 0xb1, 0xa5, 0x5d, 0x43, 0xf3, 0xc8, 0x31, 0xbf, 0xe6, 0x83, 0x38, 0x7e, 0x8d, 0x6a, 0x4c,
	0x89, 0xb0, 0x43, 0xfb, 0xb0, 0xc0, 0x56, 0x6b, 0x96, 0x07, 0xc6, 0x9c, 0x2c, 0x54, 0x94, 0x4f,
	0xa1, 0x1a, 0x53, 0xc2, 0x56, 0xa8, 0x06, 0x8b, 0xde, 0xc1, 0x3d, 0xb0, 0x69, 0x0a, 0xb6, 0x12,
	0x76, 0x9b, 0x1f, 0x2e, 0xca, 0x12, 0x1d, 0xc3, 0xd5, 0xc0, 0xb2, 0x5b, 0xc3, 0xb9, 0x24, 0x85,
	0x5c, 0x8b, 0x84, 0x74, 0x95, 0xaa, 0x31, 0x25, 0xda, 0xda, 0x0b, 0x71, 0x1d, 0x1b, 0x1a, 0xb6,
	0xf6, 0x89, 0x37, 0x4e, 0x19, 0xd7, 0x99, 0xa8, 0x10, 0x87, 0xd4, 0xbc, 0x10, 0x87, 0x44, 0x7b,
	0x49, 0x48, 0x9c, 0x98, 0xda, 0xb9, 0xfc, 0x75, 0x58, 0x1a, 0x91, 0x20, 0x68, 0xf7, 0xc2, 0x3d,
	0x66, 0x2f, 0xf3, 0xfc, 0x93, 0xed, 0x59, 0x48, 0x3e, 0xd3, 0x35, 0x0d, 0x1b, 0x5e, 0xc7, 0x91,
	0x5f, 0x75, 0x13, 0xd7, 0x4b, 0x0b, 0x19, 0xa6, 0x69, 0x6b, 0x60, 0x7d, 0x42, 0xb0, 0x64, 0x22,
	0xf9, 0x29, 0xa0, 0x70, 0x62, 0xa0, 0x32, 0xa4, 0x54, 0x43, 0x6b, 0xba, 0xd6, 0xf1, 0x70, 0x3e,
	0x0e, 0x75, 0xf7, 0xe6, 0x9e, 0x7f, 0xb2, 0x9d, 0x82, 0x99, 0x33, 0xdd, 0xd6, 0x4f, 0x3a, 0x58,
	0x99, 0x55, 0x0d, 0xed, 0x6d, 0x0a, 0xfd, 0x0e, 0x2c, 0x84, 0xd2, 0x04, 0xed, 0xc2, 0xac, 0x69,
	0x71, 0xe0, 0xa9, 0x4b, 0x01, 0xcf, 0x98, 0x16, 0xc3, 0xdd, 0x87, 0xc5, 0x88, 0x8c, 0x41, 0x3b,
	0x81, 0xc9, 0x31, 0xef, 0xa2, 0xd6, 0xfa, 0x0e, 0xd1, 0x13, 0xd1, 0xa8, 0xae, 0xac, 0xc1, 0xd5,
	0xc8, 0x4c, 0x41, 0x8f, 0x85, 0x81, 0x22, 0x4d, 0x18, 0x28, 0x22, 0x7c, 0x60, 0xbe, 0x54, 0xdc,
	0xc0, 0x87, 0x72, 0x03, 0xdd, 0x82, 0x94, 0x4d, 0x17, 0x9b, 0xba, 0x46, 0x37, 0x99, 0x0e, 0xf9,
	0xd3, 0xe6, 0x46, 0xf2, 0x6f, 0x12, 0x90, 0xf5, 0xda, 0xa2, 0x82, 0xed, 0x7e, 0xc7, 0x41, 0xa5,
	0xd1, 0xf3, 0x32, 0xf2, 0xc8, 0x24, 0x29, 0x1c, 0xdd, 0xe9, 0xb0, 0xae, 0x1d, 0x4a, 0x0a, 0x2a,
	0x22, 0x0d, 0x56, 0xc3, 0x76, 0xcb, 0xd2, 0x7b, 0xbe, 0x46, 0x32, 0x76, 0x88, 0x09, 0x38, 0x7e,
	0x73, 0x54, 0x83, 0xb9, 0x2e, 0xee, 0x9e, 0x60, 0xcb, 0x6e, 0xb6, 0xcc, 0xbe, 0xe1, 0xf0, 0x5e,
	0xb2, 0x12, 0xc2, 0xdb, 0x37, 0x9c, 0xbb, 0x3b, 0x0c, 0x4e, 0xa0, 0x9e, 0xe1, 0x00, 0x65, 0x62,
	0x8f, 0xb6, 0x21, 0xa3, 0xa9, 0x0e, 0x6e, 0xb6, 0x2c, 0xac, 0x3a, 0x58, 0xa3, 0xed, 0x24, 0x1e,
	0x8a, 0x00, 0x51, 0x29, 0x33, 0x0d, 0xf4, 0x16, 0xcc, 0x50, 0x65, 0xd3, 0xe2, 0x8d, 0xe2, 0x32,
	0x9b, 0xbb, 0xa6, 0xe8, 0x21, 0xa4, 0x74, 0xbb, 0xd9, 0xeb, 0x9f, 0x74, 0xf4, 0x16, 0xef, 0x0b,
	0xf9, 0x10, 0xce, 0x9e, 0x69, 0x76, 0x22, 0x61, 0x66, 0x75, 0xfb, 0x88, 0x9a, 0xa2, 0xd7, 0x29,
	0xce, 0xbb, 0xa6, 0x6e, 0x60, 0x2d, 0x37, 0x3b, 0x09, 0x87, 0x18, 0x7e, 0x99, 0xea, 0xa2, 0xfb,
	0x90, 0xb2, 0x9f, 0x99, 0x96, 0x63, 0xa8, 0x5d, 0x9c, 0x4b, 0x5d, 0xe0, 0x6a, 0xe1, 0xa9, 0xcb,
	0x1f, 0x49, 0xb0, 0xa0, 0xe0, 0xf7, 0xfa, 0xd8, 0x76, 0xbc, 0x24, 0x42, 0x5f, 0xf2, 0x5a, 0xc4,
	0xd8, 0x5a, 0x8c, 0xea, 0x1d, 0x24, 0xb0, 0x66, 0xcf, 0xd1, 0xbb, 0xfa, 0xfb, 0xec, 0x3e, 0x4a,
	0x0b, 0xfa, 0x8a, 0x37, 0x71, 0x8e, 0x7b, 0x24, 0x06, 0x35, 0x9f, 0x8a, 0xe8, 0x93, 0xa0, 0xfd,
	0xfd, 0xd5, 0xc1, 0x83, 0x65, 0x58, 0xd2, 0xbb, 0x45, 0xad, 0xd3, 0x2e, 0xb6, 0xad, 0x5e, 0xab,
	0xf8, 0xc8, 0xea, 0xb5, 0x38, 0x6b, 0xf9, 0xe7, 0x53, 0x80, 0x14, 0x6c, 0xf7, 0x4c, 0xc3, 0xf6,
	0x5d, 0x0f, 0xd0, 0x03, 0xb8, 0xc2, 0x3a, 0x6f, 0xd3, 0xa2, 0x25, 0x61, 0xf3, 0xb3, 0xe4, 0xfc,
	0xb5, 0xe0, 0xaf, 0x19, 0x65, 0xce, 0xf6, 0xfd, 0xb2, 0x49, 0x45, 0xd0, 0x2b, 0x30, 0xef, 0x47,
	0xc3, 0x1a, 0x22, 0x57, 0x08, 0x85, 0x89, 0xd0, 0x75, 0x48, 0xb2, 0x2b, 0x75, 0x2e, 0x4e, 0x95,
	0xe6, 0x5c, 0xa5, 0x47, 0x64, 0x55, 0xe1, 0x42, 0xb4, 0x03, 0x40, 0xf4, 0x9b, 0xf4, 0xc2, 0x9d,
	0x4b, 0x50, 0xd5, 0x45, 0x3f, 0x1e, 0xef, 0x46, 0x4a, 0x8a, 0xde, 0x40, 0x88, 0x16, 0x7a, 0x15,
	0xd2, 0xd4, 0x9a, 0x1b, 0x4d, 0x53, 0xa3, 0x97, 0x02, 0xf8, 0xae, 0x15, 0x50, 0x45, 0x6a, 0x76,
	0x7f, 0x6d, 0xf0, 0x20, 0x0f, 0xb9, 0xb0, 0xaf, 0x98, 0x7f, 0xe4, 0x26, 0xf1, 0x15, 0xf5, 0x9b,
	0x82, 0x6d, 0xb3, 0x73, 0x46, 0x3d, 0x86, 0x5e, 0xf1, 0x27, 0x10, 0x9b, 0x0a, 0x42, 0x44, 0x3c,
	0xf9, 0x84, 0x68, 0x3c, 0x85, 0x45, 0x77, 0x33, 0xff, 0x0e, 0x2f, 0x8f, 0xed, 0xc2, 0xac, 0x07,
	0x4d, 0xe2, 0xfe, 0x4f, 0x09, 0x16, 0x03, 0xd7, 0xc7, 0x7f, 0xb7, 0xd7, 0xad, 0x43, 0xdc, 0xd2,
	0x35, 0xda, 0xe9, 0x42, 0xfd, 0x81, 0x48, 0xd0, 0x26, 0x24, 0x48, 0x8a, 0xd2, 0x0e, 0x17, 0xd2,
	0xa0, 0xa2, 0x60, 0x87, 0x4e, 0x8c, 0xed, 0xd0, 0xe8, 0x01, 0xbb, 0x55, 0x63, 0xc3, 0xe1, 0x57,
	0x9c, 0xe1, 0x10, 0xe7, 0xc7, 0xe1, 0x13, 0x23, 0xdc, 0x61, 0xd8, 0xba, 0x5c, 0x85, 0x85, 0xc0,
	0xc1, 0xf7, 0x1d, 0xdc, 0x45, 0x77, 0x21, 0xc9, 0x32, 0x9b, 0x1f, 0x7c, 0x45, 0x00, 0x0d, 0xe4,
	0x36, 0x57, 0x95, 0x07, 0x71, 0x58, 0x73, 0x1d, 0x2a, 0xea, 0xd1, 0x45, 0x54, 0x1b, 0x51, 0x37,
	0xcb, 0x91, 0xf0, 0x84, 0x49, 0xa8, 0x7a, 0x83, 0x75, 0x74, 0x67, 0x4c, 0x1d, 0x89, 0xa6, 0xbc,
	0xac, 0xee, 0x8d, 0x2d, 0x2b, 0xd1, 0xc8, 0xad, 0xb2, 0xb7, 0x61, 0xbe, 0x63, 0xaa, 0x5a, 0xb3,
	0x6b, 0x5a, 0xb8, 0x69, 0x3b, 0x24, 0x80, 0xa3, 0x46, 0xca, 0xde, 0xb9, 0x83, 0xed, 0xa8, 0x09,
	0x35, 0x47, 0x10, 0x9e, 0x98, 0x16, 0xae, 0x13, 0x7b, 0x54, 0x85, 0x2b, 0xb4, 0x70, 0xcd, 0xbe,
	0x13, 0xa8, 0xc3, 0xa8, 0xe2, 0x0d, 0x0d, 0xa7, 0xbe, 0x27, 0xb3, 0xd1, 0x63, 0x98, 0x67, 0xe5,
	0xec, 0x41, 0x25, 0x47, 0x97, 0x74, 0xc8, 0xa5, 0x6d, 0x9f, 0x70, 0x62, 0x91, 0xff, 0x4e, 0x82,
	0x97, 0x78, 0x3d, 0x06, 0x82, 0xe5, 0x6f, 0xeb, 0xd2, 0xff, 0x7b, 0x5b, 0xff, 0x48, 0x82, 0x5c,
	0xd4, 0x21, 0x48, 0x70, 0xd0, 0xbd, 0x70, 0xa8, 0xc9, 0x91, 0x32, 0xe3, 0xa3, 0xf9, 0x19, 0x9f,
	0xe0, 0x97, 0x12, 0xe9, 0x85, 0xf4, 0xbb, 0xff, 0xb5, 0x8d, 0xbe, 0x08, 0xb3, 0xfc, 0x65, 0xa9,
	0xf2, 0xda, 0x5a, 0x0b, 0x3e, 0x52, 0x85, 0x70, 0x28, 0x43, 0x75, 0xf4, 0xe6, 0xa5, 0x4f, 0x70,
	0x39, 0xca, 0x3f, 0x91, 0x60, 0x29, 0x82, 0x32, 0xf5, 0xf9, 0x8d, 0x11, 0x3e, 0x17, 0xbd, 0xfc,
	0xbf, 0xe6, 0xf8, 0x43, 0x2f, 0x31, 0x1e, 0xea, 0xb8, 0xa3, 0xed, 0xf6, 0x1d, 0xb3, 0x65, 0x12,
	0xb2, 0x0e, 0x46, 0xb7, 0x01, 0x4e, 0xc9, 0x62, 0x73, 0xcc, 0x28, 0xa3, 0x0a, 0x87, 0x6a, 0x17,
	0xa3, 0x22, 0xa4, 0x99, 0xf6, 0x19, 0x69, 0x05, 0xfc, 0xea, 0x2b, 0xa8, 0x33, 0x3c, 0xda, 0x2b,
	0x26, 0x10, 0xfb, 0xb1, 0x04, 0xcb, 0x6e, 0x0d, 0xfe, 0xd7, 0x99, 0xc5, 0xc7, 0x33, 0x9b, 0xd0,
	0x11, 0x7e, 0x3a, 0x05, 0x5b, 0x9c, 0xe6, 0x81, 0xa9, 0x6a, 0xa4, 0x6b, 0xb1, 0xc8, 0xee, 0x9d,
	0x1f, 0x59, 0x58, 0xd3, 0x5b, 0xaa, 0x83, 0x6d, 0xb7, 0x61, 0x3f, 0x04, 0xe8, 0x0d, 0x17, 0xa3,
	0x6f, 0x80, 0x43, 0xa3, 0x10, 0x27, 0xcf, 0x12, 0x6d, 0xc1, 0x2c, 0x6b, 0x79, 0x7c, 0xd6, 0x86,
	0x26, 0xe4, 0x0c, 0x15, 0xef, 0x6b, 0x68, 0xd7, 0xed, 0x4b, 0x17, 0x79, 0x52, 0x88, 0x23, 0x83,
	0x75, 0xa7, 0x97, 0x61, 0xba, 0xa3, 0x77, 0x75, 0x27, 0x7a, 0x16, 0x33, 0xd9, 0x84, 0xf8, 0x75,
	0x21, 0x45, 0x1c, 0xf3, 0x44, 0x75, 0x5a, 0xcf, 0xd0, 0x0d, 0x98, 0xa1, 0x9d, 0x7f, 0xd4, 0xfb,
	0x2b, 0x49, 0xa4, 0xfb, 0x1a, 0xfa, 0x02, 0x64, 0xbb, 0xc4, 0xa0, 0xe9, 0x73, 0x19, 0x39, 0xec,
	0xac, 0x68, 0x30, 0x4f, 0xd5, 0x3c, 0x6f, 0xcb, 0xbf, 0x92, 0xe0, 0xf3, 0x6e, 0x80, 0x26, 0x07,
	0xe5, 0x35, 0x77, 0x8a, 0xb2, 0x78, 0x2c, 0xf8, 0x07, 0x10, 0x65, 0x3c, 0x62, 0x94, 0x6e, 0x43,
	0x86, 0xcd, 0x71, 0xfe, 0xc8, 0x8a, 0x0c, 0x44, 0x9a, 0xa9, 0xd0, 0x67, 0xd4, 0xa4, 0x54, 0xfa,
	0xb5, 0x04, 0x37, 0x26, 0xa6, 0x12, 0x7b, 0x90, 0x7d, 0xe6, 0x89, 0x34, 0x21, 0xc0, 0xef, 0xc3,
	0xcd, 0xc9, 0x0e, 0x1f, 0xbe, 0x25, 0x03, 0x6e, 0x93, 0xfe, 0x43, 0xb7, 0xdd, 0xfa, 0x0e, 0x5c,
	0x09, 0xfe, 0x63, 0x83, 0xf2, 0x70, 0xad, 0x5e, 0xd9, 0x55, 0xca, 0xd5, 0xa3, 0x4a, 0x45, 0x69,
	0x3c, 0x3d, 0xaa, 0x34, 0x8f, 0x0f, 0x1f, 0x1f, 0xd6, 0xbe, 0x72, 0x98, 0x8d, 0xa1, 0x65, 0xb8,
	0x2a, 0xc8, 0x1e, 0x29, 0xb5, 0xe3, 0xa3, 0x7a, 0x56, 0x42, 0x2b, 0xb0, 0x24, 0x88, 0xca, 0xb5,
	0xc3, 0xc6, 0x6e, 0xb9, 0x51, 0xcf, 0x4e, 0x45, 0xd8, 0x1d, 0x1d, 0xef, 0x1d, 0xec, 0x97, 0xb3,
	0xf1, 0x5b, 0xbf, 0x97, 0xdc, 0xff, 0x5d, 0xfc, 0x7f, 0x68, 0xac, 0xc1, 0x32, 0x33, 0x20, 0x20,
	0x95, 0xc3, 0xc6, 0x28, 0x1e, 0x7e, 0xf1, 0xee, 0xe1, 0xd3, 0xac, 0xe4, 0xd1, 0xf7, 0x8b, 0x1a,
	0x95, 0xaf, 0x36, 0xb2, 0x53, 0x1e, 0x47, 0xbf, 0xec, 0x60, 0xff, 0xf0, 0x71, 0x3d, 0x1b, 0x47,
	0xeb, 0xb0, 0x12, 0x16, 0xbe, 0x55, 0x2b, 0x1f, 0x3f, 0xa9, 0x1c, 0x36, 0xea, 0xd9, 0x04, 0x5a,
	0x85, 0x5c, 0x58, 0xe1, 0xa8, 0x5a, 0x6b, 0xd4, 0xea, 0xd9, 0xe9, 0x9d, 0x1f, 0x01, 0x24, 0xf9,
	0x20, 0x7d, 0x17, 0xc0, 0xf7, 0xe0, 0x1b, 0x5e, 0x50, 0x43, 0xcf, 0xd9, 0x7c, 0xde, 0x13, 0x89,
	0xef, 0x44, 0xf9, 0xfa, 0x07, 0x7f, 0xfa, 0xfb, 0x0f, 0xa6, 0xd6, 0xe5, 0x7c, 0xe9, 0xec, 0x4e,
	0x89, 0xc4, 0xad, 0xc4, 0x04, 0x25, 0x4f, 0xe7, 0xbe, 0x74, 0x0b, 0x19, 0x90, 0xf6, 0xbf, 0x67,
	0xf2, 0xc2, 0x66, 0x3e, 0x59, 0x7e, 0x45, 0xdc, 0xcd, 0x27, 0x94, 0x6f, 0xd0, 0xed, 0x36, 0xe4,
	0x15, 0x71, 0x3b, 0x9f, 0x12, 0xd9, 0xef, 0xdb, 0x30, 0x17, 0xbc, 0xbb, 0xad, 0x0a, 0x3b, 0x06,
	0xa4, 0xf9, 0xeb, 0xe2, 0x9e, 0x91, 0x97, 0x7b, 0x79, 0x8b, 0xee, 0x2e, 0xcb, 0x6b, 0xe2, 0xee,
	0x01, 0x75, 0xb2, 0xff, 0x73, 0x49, 0x78, 0x73, 0xd0, 0x3b, 0xc0, 0xc6, 0x38, 0x12, 0x44, 0xe3,
	0xa2, 0x44, 0x6e, 0x53, 0x22, 0x37, 0xe4, 0xcd, 0xb1, 0x44, 0x08, 0x22, 0x21, 0xf3, 0x2d, 0xc8,
	0x04, 0x6e, 0x50, 0x2b, 0x02, 0x0d, 0xbf, 0xf0, 0xa2, 0x0c, 0x6e, 0x52, 0x06, 0x9b, 0xf2, 0xaa,
	0xc8, 0xc0, 0x0f, 0x46, 0x36, 0xff, 0x9e, 0x04, 0xd9, 0xd0, 0x65, 0x68, 0x7d, 0x0c, 0x83, 0xcb,
	0xf8, 0xe1, 0x15, 0xca, 0xe2, 0xba, 0xbc, 0x31, 0x8e, 0x85, 0xeb, 0x86, 0x0f, 0x25, 0x58, 0xf2,
	0xdf, 0x29, 0xea, 0xfd, 0x76, 0x1b, 0xdb, 0xf4, 0xce, 0x14, 0x8a, 0x4c, 0xe8, 0x02, 0x92, 0xdf,
	0x14, 0x19, 0x85, 0x54, 0xe4, 0x1d, 0xca, 0xe6, 0xb6, 0x7c, 0x53, 0x64, 0x33, 0x62, 0x57, 0x42,
	0xea, 0x0f, 0x12, 0x6c, 0x4e, 0x1e, 0x5f, 0xdb, 0x02, 0xbd, 0x89, 0x16, 0xf9, 0x3b, 0x22, 0xdd,
	0x89, 0x26, 0xf2, 0x1b, 0x94, 0xfe, 0x6b, 0xf2, 0x1d, 0x91, 0xfe, 0x44, 0x53, 0x72, 0x90, 0xdf,
	0x4a, 0xb0, 0x3e, 0x69, 0x2c, 0x14, 0x2f, 0x7c, 0x0c, 0xaa, 0x9f, 0x2f, 0x5d, 0xfc, 0x10, 0xd4,
	0x40, 0xbe, 0x4f, 0x8f, 0x70, 0x4f, 0x2e, 0x5d, 0xfc, 0x08, 0x6c, 0xfc, 0x48, 0xb7, 0xf6, 0x2a,
	0x83, 0x07, 0xd7, 0xe0, 0x25, 0xff, 0x04, 0xb2, 0xb1, 0x75, 0xa6, 0xb7, 0xb0, 0xfd, 0xf1, 0x8b,
	0x42, 0xec, 0xcf, 0x2f, 0x0a, 0xb1, 0x4f, 0x5f, 0x14, 0xa4, 0xef, 0x0e, 0x0a, 0xd2, 0xcf, 0x06,
	0x05, 0xe9, 0x8f, 0x83, 0x82, 0xf4, 0xf1, 0xa0, 0x20, 0xfd, 0x75, 0x50, 0x90, 0xfe, 0x31, 0x28,
	0xc4, 0x3e, 0x1d, 0x14, 0xa4, 0xef, 0xff, 0xad, 0x10, 0x3b, 0x49, 0xd2, 0x5b, 0xd7, 0xdd, 0x7f,
	0x05, 0x00, 0x00, 0xff, 0xff, 0xce, 0x05, 0xe8, 0x68, 0x94, 0x1e, 0x00, 0x00,
}
