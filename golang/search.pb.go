// Code generated by protoc-gen-go.
// source: search.proto
// DO NOT EDIT!

package dialog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SearchPeerType int32

const (
	SearchPeerType_SEARCHPEERTYPE_UNKNOWN  SearchPeerType = 0
	SearchPeerType_SEARCHPEERTYPE_GROUPS   SearchPeerType = 1
	SearchPeerType_SEARCHPEERTYPE_CONTACTS SearchPeerType = 2
	SearchPeerType_SEARCHPEERTYPE_PUBLIC   SearchPeerType = 3
)

var SearchPeerType_name = map[int32]string{
	0: "SEARCHPEERTYPE_UNKNOWN",
	1: "SEARCHPEERTYPE_GROUPS",
	2: "SEARCHPEERTYPE_CONTACTS",
	3: "SEARCHPEERTYPE_PUBLIC",
}
var SearchPeerType_value = map[string]int32{
	"SEARCHPEERTYPE_UNKNOWN":  0,
	"SEARCHPEERTYPE_GROUPS":   1,
	"SEARCHPEERTYPE_CONTACTS": 2,
	"SEARCHPEERTYPE_PUBLIC":   3,
}

func (x SearchPeerType) String() string {
	return proto.EnumName(SearchPeerType_name, int32(x))
}
func (SearchPeerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor21, []int{0} }

type SearchContentType int32

const (
	SearchContentType_SEARCHCONTENTTYPE_UNKNOWN   SearchContentType = 0
	SearchContentType_SEARCHCONTENTTYPE_ANY       SearchContentType = 1
	SearchContentType_SEARCHCONTENTTYPE_TEXT      SearchContentType = 2
	SearchContentType_SEARCHCONTENTTYPE_LINKS     SearchContentType = 3
	SearchContentType_SEARCHCONTENTTYPE_DOCUMENTS SearchContentType = 4
	SearchContentType_SEARCHCONTENTTYPE_PHOTOS    SearchContentType = 5
)

var SearchContentType_name = map[int32]string{
	0: "SEARCHCONTENTTYPE_UNKNOWN",
	1: "SEARCHCONTENTTYPE_ANY",
	2: "SEARCHCONTENTTYPE_TEXT",
	3: "SEARCHCONTENTTYPE_LINKS",
	4: "SEARCHCONTENTTYPE_DOCUMENTS",
	5: "SEARCHCONTENTTYPE_PHOTOS",
}
var SearchContentType_value = map[string]int32{
	"SEARCHCONTENTTYPE_UNKNOWN":   0,
	"SEARCHCONTENTTYPE_ANY":       1,
	"SEARCHCONTENTTYPE_TEXT":      2,
	"SEARCHCONTENTTYPE_LINKS":     3,
	"SEARCHCONTENTTYPE_DOCUMENTS": 4,
	"SEARCHCONTENTTYPE_PHOTOS":    5,
}

func (x SearchContentType) String() string {
	return proto.EnumName(SearchContentType_name, int32(x))
}
func (SearchContentType) EnumDescriptor() ([]byte, []int) { return fileDescriptor21, []int{1} }

type SimpleContactSearchCondition struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *SimpleContactSearchCondition) Reset()                    { *m = SimpleContactSearchCondition{} }
func (m *SimpleContactSearchCondition) String() string            { return proto.CompactTextString(m) }
func (*SimpleContactSearchCondition) ProtoMessage()               {}
func (*SimpleContactSearchCondition) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{0} }

func (m *SimpleContactSearchCondition) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type SimpleMessageSearchCondition struct {
	Peer        *Peer             `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Text        string            `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	ContentType SearchContentType `protobuf:"varint,3,opt,name=content_type,json=contentType,enum=dialog.SearchContentType" json:"content_type,omitempty"`
}

func (m *SimpleMessageSearchCondition) Reset()                    { *m = SimpleMessageSearchCondition{} }
func (m *SimpleMessageSearchCondition) String() string            { return proto.CompactTextString(m) }
func (*SimpleMessageSearchCondition) ProtoMessage()               {}
func (*SimpleMessageSearchCondition) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{1} }

func (m *SimpleMessageSearchCondition) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *SimpleMessageSearchCondition) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *SimpleMessageSearchCondition) GetContentType() SearchContentType {
	if m != nil {
		return m.ContentType
	}
	return SearchContentType_SEARCHCONTENTTYPE_UNKNOWN
}

// / Search among contacts/groups/users
type SimplePeerSearchCondition struct {
	PeerType SearchPeerType               `protobuf:"varint,1,opt,name=peer_type,json=peerType,enum=dialog.SearchPeerType" json:"peer_type,omitempty"`
	Text     *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (m *SimplePeerSearchCondition) Reset()                    { *m = SimplePeerSearchCondition{} }
func (m *SimplePeerSearchCondition) String() string            { return proto.CompactTextString(m) }
func (*SimplePeerSearchCondition) ProtoMessage()               {}
func (*SimplePeerSearchCondition) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{2} }

func (m *SimplePeerSearchCondition) GetPeerType() SearchPeerType {
	if m != nil {
		return m.PeerType
	}
	return SearchPeerType_SEARCHPEERTYPE_UNKNOWN
}

func (m *SimplePeerSearchCondition) GetText() *google_protobuf.StringValue {
	if m != nil {
		return m.Text
	}
	return nil
}

type SimpleUserProfileSearchCondition struct {
	QueryString string `protobuf:"bytes,1,opt,name=query_string,json=queryString" json:"query_string,omitempty"`
}

func (m *SimpleUserProfileSearchCondition) Reset()         { *m = SimpleUserProfileSearchCondition{} }
func (m *SimpleUserProfileSearchCondition) String() string { return proto.CompactTextString(m) }
func (*SimpleUserProfileSearchCondition) ProtoMessage()    {}
func (*SimpleUserProfileSearchCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{3}
}

func (m *SimpleUserProfileSearchCondition) GetQueryString() string {
	if m != nil {
		return m.QueryString
	}
	return ""
}

type Criterion struct {
}

func (m *Criterion) Reset()                    { *m = Criterion{} }
func (m *Criterion) String() string            { return proto.CompactTextString(m) }
func (*Criterion) ProtoMessage()               {}
func (*Criterion) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{4} }

type SimpleSearchCondition struct {
	// Types that are valid to be assigned to Criterion:
	//	*SimpleSearchCondition_Contact
	//	*SimpleSearchCondition_Message
	//	*SimpleSearchCondition_Peer
	//	*SimpleSearchCondition_UserProfile
	Criterion isSimpleSearchCondition_Criterion `protobuf_oneof:"criterion"`
}

func (m *SimpleSearchCondition) Reset()                    { *m = SimpleSearchCondition{} }
func (m *SimpleSearchCondition) String() string            { return proto.CompactTextString(m) }
func (*SimpleSearchCondition) ProtoMessage()               {}
func (*SimpleSearchCondition) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{5} }

type isSimpleSearchCondition_Criterion interface {
	isSimpleSearchCondition_Criterion()
}

type SimpleSearchCondition_Contact struct {
	Contact *SimpleContactSearchCondition `protobuf:"bytes,1,opt,name=contact,oneof"`
}
type SimpleSearchCondition_Message struct {
	Message *SimpleMessageSearchCondition `protobuf:"bytes,2,opt,name=message,oneof"`
}
type SimpleSearchCondition_Peer struct {
	Peer *SimplePeerSearchCondition `protobuf:"bytes,3,opt,name=peer,oneof"`
}
type SimpleSearchCondition_UserProfile struct {
	UserProfile *SimpleUserProfileSearchCondition `protobuf:"bytes,4,opt,name=userProfile,oneof"`
}

func (*SimpleSearchCondition_Contact) isSimpleSearchCondition_Criterion()     {}
func (*SimpleSearchCondition_Message) isSimpleSearchCondition_Criterion()     {}
func (*SimpleSearchCondition_Peer) isSimpleSearchCondition_Criterion()        {}
func (*SimpleSearchCondition_UserProfile) isSimpleSearchCondition_Criterion() {}

func (m *SimpleSearchCondition) GetCriterion() isSimpleSearchCondition_Criterion {
	if m != nil {
		return m.Criterion
	}
	return nil
}

func (m *SimpleSearchCondition) GetContact() *SimpleContactSearchCondition {
	if x, ok := m.GetCriterion().(*SimpleSearchCondition_Contact); ok {
		return x.Contact
	}
	return nil
}

func (m *SimpleSearchCondition) GetMessage() *SimpleMessageSearchCondition {
	if x, ok := m.GetCriterion().(*SimpleSearchCondition_Message); ok {
		return x.Message
	}
	return nil
}

func (m *SimpleSearchCondition) GetPeer() *SimplePeerSearchCondition {
	if x, ok := m.GetCriterion().(*SimpleSearchCondition_Peer); ok {
		return x.Peer
	}
	return nil
}

func (m *SimpleSearchCondition) GetUserProfile() *SimpleUserProfileSearchCondition {
	if x, ok := m.GetCriterion().(*SimpleSearchCondition_UserProfile); ok {
		return x.UserProfile
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SimpleSearchCondition) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SimpleSearchCondition_OneofMarshaler, _SimpleSearchCondition_OneofUnmarshaler, _SimpleSearchCondition_OneofSizer, []interface{}{
		(*SimpleSearchCondition_Contact)(nil),
		(*SimpleSearchCondition_Message)(nil),
		(*SimpleSearchCondition_Peer)(nil),
		(*SimpleSearchCondition_UserProfile)(nil),
	}
}

func _SimpleSearchCondition_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SimpleSearchCondition)
	// criterion
	switch x := m.Criterion.(type) {
	case *SimpleSearchCondition_Contact:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Contact); err != nil {
			return err
		}
	case *SimpleSearchCondition_Message:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Message); err != nil {
			return err
		}
	case *SimpleSearchCondition_Peer:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Peer); err != nil {
			return err
		}
	case *SimpleSearchCondition_UserProfile:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserProfile); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SimpleSearchCondition.Criterion has unexpected type %T", x)
	}
	return nil
}

func _SimpleSearchCondition_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SimpleSearchCondition)
	switch tag {
	case 1: // criterion.contact
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SimpleContactSearchCondition)
		err := b.DecodeMessage(msg)
		m.Criterion = &SimpleSearchCondition_Contact{msg}
		return true, err
	case 2: // criterion.message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SimpleMessageSearchCondition)
		err := b.DecodeMessage(msg)
		m.Criterion = &SimpleSearchCondition_Message{msg}
		return true, err
	case 3: // criterion.peer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SimplePeerSearchCondition)
		err := b.DecodeMessage(msg)
		m.Criterion = &SimpleSearchCondition_Peer{msg}
		return true, err
	case 4: // criterion.userProfile
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SimpleUserProfileSearchCondition)
		err := b.DecodeMessage(msg)
		m.Criterion = &SimpleSearchCondition_UserProfile{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SimpleSearchCondition_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SimpleSearchCondition)
	// criterion
	switch x := m.Criterion.(type) {
	case *SimpleSearchCondition_Contact:
		s := proto.Size(x.Contact)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SimpleSearchCondition_Message:
		s := proto.Size(x.Message)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SimpleSearchCondition_Peer:
		s := proto.Size(x.Peer)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SimpleSearchCondition_UserProfile:
		s := proto.Size(x.UserProfile)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SearchCondition struct {
	// Types that are valid to be assigned to Body:
	//	*SearchCondition_SearchPeerTypeCondition
	//	*SearchCondition_SearchPieceText
	//	*SearchCondition_SearchAndCondition
	//	*SearchCondition_SearchOrCondition
	//	*SearchCondition_SearchPeerCondition
	//	*SearchCondition_SearchPeerContentType
	//	*SearchCondition_SearchSenderIdConfition
	Body isSearchCondition_Body `protobuf_oneof:"body"`
}

func (m *SearchCondition) Reset()                    { *m = SearchCondition{} }
func (m *SearchCondition) String() string            { return proto.CompactTextString(m) }
func (*SearchCondition) ProtoMessage()               {}
func (*SearchCondition) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{6} }

type isSearchCondition_Body interface {
	isSearchCondition_Body()
}

type SearchCondition_SearchPeerTypeCondition struct {
	SearchPeerTypeCondition *SearchPeerTypeCondition `protobuf:"bytes,1,opt,name=searchPeerTypeCondition,oneof"`
}
type SearchCondition_SearchPieceText struct {
	SearchPieceText *SearchPieceText `protobuf:"bytes,2,opt,name=searchPieceText,oneof"`
}
type SearchCondition_SearchAndCondition struct {
	SearchAndCondition *SearchAndCondition `protobuf:"bytes,3,opt,name=searchAndCondition,oneof"`
}
type SearchCondition_SearchOrCondition struct {
	SearchOrCondition *SearchOrCondition `protobuf:"bytes,4,opt,name=searchOrCondition,oneof"`
}
type SearchCondition_SearchPeerCondition struct {
	SearchPeerCondition *SearchPeerCondition `protobuf:"bytes,5,opt,name=searchPeerCondition,oneof"`
}
type SearchCondition_SearchPeerContentType struct {
	SearchPeerContentType *SearchPeerContentType `protobuf:"bytes,6,opt,name=searchPeerContentType,oneof"`
}
type SearchCondition_SearchSenderIdConfition struct {
	SearchSenderIdConfition *SearchSenderIdConfition `protobuf:"bytes,7,opt,name=searchSenderIdConfition,oneof"`
}

func (*SearchCondition_SearchPeerTypeCondition) isSearchCondition_Body() {}
func (*SearchCondition_SearchPieceText) isSearchCondition_Body()         {}
func (*SearchCondition_SearchAndCondition) isSearchCondition_Body()      {}
func (*SearchCondition_SearchOrCondition) isSearchCondition_Body()       {}
func (*SearchCondition_SearchPeerCondition) isSearchCondition_Body()     {}
func (*SearchCondition_SearchPeerContentType) isSearchCondition_Body()   {}
func (*SearchCondition_SearchSenderIdConfition) isSearchCondition_Body() {}

func (m *SearchCondition) GetBody() isSearchCondition_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *SearchCondition) GetSearchPeerTypeCondition() *SearchPeerTypeCondition {
	if x, ok := m.GetBody().(*SearchCondition_SearchPeerTypeCondition); ok {
		return x.SearchPeerTypeCondition
	}
	return nil
}

func (m *SearchCondition) GetSearchPieceText() *SearchPieceText {
	if x, ok := m.GetBody().(*SearchCondition_SearchPieceText); ok {
		return x.SearchPieceText
	}
	return nil
}

func (m *SearchCondition) GetSearchAndCondition() *SearchAndCondition {
	if x, ok := m.GetBody().(*SearchCondition_SearchAndCondition); ok {
		return x.SearchAndCondition
	}
	return nil
}

func (m *SearchCondition) GetSearchOrCondition() *SearchOrCondition {
	if x, ok := m.GetBody().(*SearchCondition_SearchOrCondition); ok {
		return x.SearchOrCondition
	}
	return nil
}

func (m *SearchCondition) GetSearchPeerCondition() *SearchPeerCondition {
	if x, ok := m.GetBody().(*SearchCondition_SearchPeerCondition); ok {
		return x.SearchPeerCondition
	}
	return nil
}

func (m *SearchCondition) GetSearchPeerContentType() *SearchPeerContentType {
	if x, ok := m.GetBody().(*SearchCondition_SearchPeerContentType); ok {
		return x.SearchPeerContentType
	}
	return nil
}

func (m *SearchCondition) GetSearchSenderIdConfition() *SearchSenderIdConfition {
	if x, ok := m.GetBody().(*SearchCondition_SearchSenderIdConfition); ok {
		return x.SearchSenderIdConfition
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SearchCondition) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SearchCondition_OneofMarshaler, _SearchCondition_OneofUnmarshaler, _SearchCondition_OneofSizer, []interface{}{
		(*SearchCondition_SearchPeerTypeCondition)(nil),
		(*SearchCondition_SearchPieceText)(nil),
		(*SearchCondition_SearchAndCondition)(nil),
		(*SearchCondition_SearchOrCondition)(nil),
		(*SearchCondition_SearchPeerCondition)(nil),
		(*SearchCondition_SearchPeerContentType)(nil),
		(*SearchCondition_SearchSenderIdConfition)(nil),
	}
}

func _SearchCondition_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SearchCondition)
	// body
	switch x := m.Body.(type) {
	case *SearchCondition_SearchPeerTypeCondition:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SearchPeerTypeCondition); err != nil {
			return err
		}
	case *SearchCondition_SearchPieceText:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SearchPieceText); err != nil {
			return err
		}
	case *SearchCondition_SearchAndCondition:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SearchAndCondition); err != nil {
			return err
		}
	case *SearchCondition_SearchOrCondition:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SearchOrCondition); err != nil {
			return err
		}
	case *SearchCondition_SearchPeerCondition:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SearchPeerCondition); err != nil {
			return err
		}
	case *SearchCondition_SearchPeerContentType:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SearchPeerContentType); err != nil {
			return err
		}
	case *SearchCondition_SearchSenderIdConfition:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SearchSenderIdConfition); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SearchCondition.Body has unexpected type %T", x)
	}
	return nil
}

func _SearchCondition_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SearchCondition)
	switch tag {
	case 1: // body.searchPeerTypeCondition
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SearchPeerTypeCondition)
		err := b.DecodeMessage(msg)
		m.Body = &SearchCondition_SearchPeerTypeCondition{msg}
		return true, err
	case 2: // body.searchPieceText
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SearchPieceText)
		err := b.DecodeMessage(msg)
		m.Body = &SearchCondition_SearchPieceText{msg}
		return true, err
	case 3: // body.searchAndCondition
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SearchAndCondition)
		err := b.DecodeMessage(msg)
		m.Body = &SearchCondition_SearchAndCondition{msg}
		return true, err
	case 4: // body.searchOrCondition
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SearchOrCondition)
		err := b.DecodeMessage(msg)
		m.Body = &SearchCondition_SearchOrCondition{msg}
		return true, err
	case 5: // body.searchPeerCondition
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SearchPeerCondition)
		err := b.DecodeMessage(msg)
		m.Body = &SearchCondition_SearchPeerCondition{msg}
		return true, err
	case 6: // body.searchPeerContentType
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SearchPeerContentType)
		err := b.DecodeMessage(msg)
		m.Body = &SearchCondition_SearchPeerContentType{msg}
		return true, err
	case 7: // body.searchSenderIdConfition
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SearchSenderIdConfition)
		err := b.DecodeMessage(msg)
		m.Body = &SearchCondition_SearchSenderIdConfition{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SearchCondition_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SearchCondition)
	// body
	switch x := m.Body.(type) {
	case *SearchCondition_SearchPeerTypeCondition:
		s := proto.Size(x.SearchPeerTypeCondition)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SearchCondition_SearchPieceText:
		s := proto.Size(x.SearchPieceText)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SearchCondition_SearchAndCondition:
		s := proto.Size(x.SearchAndCondition)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SearchCondition_SearchOrCondition:
		s := proto.Size(x.SearchOrCondition)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SearchCondition_SearchPeerCondition:
		s := proto.Size(x.SearchPeerCondition)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SearchCondition_SearchPeerContentType:
		s := proto.Size(x.SearchPeerContentType)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SearchCondition_SearchSenderIdConfition:
		s := proto.Size(x.SearchSenderIdConfition)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Search peer type condition
type SearchPeerTypeCondition struct {
	PeerType SearchPeerType `protobuf:"varint,1,opt,name=peer_type,json=peerType,enum=dialog.SearchPeerType" json:"peer_type,omitempty"`
}

func (m *SearchPeerTypeCondition) Reset()                    { *m = SearchPeerTypeCondition{} }
func (m *SearchPeerTypeCondition) String() string            { return proto.CompactTextString(m) }
func (*SearchPeerTypeCondition) ProtoMessage()               {}
func (*SearchPeerTypeCondition) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{7} }

func (m *SearchPeerTypeCondition) GetPeerType() SearchPeerType {
	if m != nil {
		return m.PeerType
	}
	return SearchPeerType_SEARCHPEERTYPE_UNKNOWN
}

// Search peer name condition
type SearchPieceText struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *SearchPieceText) Reset()                    { *m = SearchPieceText{} }
func (m *SearchPieceText) String() string            { return proto.CompactTextString(m) }
func (*SearchPieceText) ProtoMessage()               {}
func (*SearchPieceText) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{8} }

func (m *SearchPieceText) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

// Search AND condion
type SearchAndCondition struct {
	// / "And" query
	AndQuery []*SearchCondition `protobuf:"bytes,1,rep,name=and_query,json=andQuery" json:"and_query,omitempty"`
}

func (m *SearchAndCondition) Reset()                    { *m = SearchAndCondition{} }
func (m *SearchAndCondition) String() string            { return proto.CompactTextString(m) }
func (*SearchAndCondition) ProtoMessage()               {}
func (*SearchAndCondition) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{9} }

func (m *SearchAndCondition) GetAndQuery() []*SearchCondition {
	if m != nil {
		return m.AndQuery
	}
	return nil
}

// Search OR condition
type SearchOrCondition struct {
	// / "Or" query
	OrQuery []*SearchCondition `protobuf:"bytes,2,rep,name=or_query,json=orQuery" json:"or_query,omitempty"`
}

func (m *SearchOrCondition) Reset()                    { *m = SearchOrCondition{} }
func (m *SearchOrCondition) String() string            { return proto.CompactTextString(m) }
func (*SearchOrCondition) ProtoMessage()               {}
func (*SearchOrCondition) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{10} }

func (m *SearchOrCondition) GetOrQuery() []*SearchCondition {
	if m != nil {
		return m.OrQuery
	}
	return nil
}

// Serch Peer condition
type SearchPeerCondition struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *SearchPeerCondition) Reset()                    { *m = SearchPeerCondition{} }
func (m *SearchPeerCondition) String() string            { return proto.CompactTextString(m) }
func (*SearchPeerCondition) ProtoMessage()               {}
func (*SearchPeerCondition) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{11} }

func (m *SearchPeerCondition) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Search content type condition
type SearchPeerContentType struct {
	ContentType SearchContentType `protobuf:"varint,1,opt,name=content_type,json=contentType,enum=dialog.SearchContentType" json:"content_type,omitempty"`
}

func (m *SearchPeerContentType) Reset()                    { *m = SearchPeerContentType{} }
func (m *SearchPeerContentType) String() string            { return proto.CompactTextString(m) }
func (*SearchPeerContentType) ProtoMessage()               {}
func (*SearchPeerContentType) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{12} }

func (m *SearchPeerContentType) GetContentType() SearchContentType {
	if m != nil {
		return m.ContentType
	}
	return SearchContentType_SEARCHCONTENTTYPE_UNKNOWN
}

// Searching sender uid condition
type SearchSenderIdConfition struct {
	SenderId int32 `protobuf:"varint,1,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
}

func (m *SearchSenderIdConfition) Reset()                    { *m = SearchSenderIdConfition{} }
func (m *SearchSenderIdConfition) String() string            { return proto.CompactTextString(m) }
func (*SearchSenderIdConfition) ProtoMessage()               {}
func (*SearchSenderIdConfition) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{13} }

func (m *SearchSenderIdConfition) GetSenderId() int32 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

// Peer search result
type PeerSearchResult struct {
	Peer         *Peer                        `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Title        string                       `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Shortname    *google_protobuf.StringValue `protobuf:"bytes,9,opt,name=shortname" json:"shortname,omitempty"`
	Description  *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	MembersCount *google_protobuf.Int32Value  `protobuf:"bytes,4,opt,name=members_count,json=membersCount" json:"members_count,omitempty"`
	// / Group Creation Date
	DateCreated int64                       `protobuf:"varint,5,opt,name=date_created,json=dateCreated" json:"date_created,omitempty"`
	Creator     *google_protobuf.Int32Value `protobuf:"bytes,6,opt,name=creator" json:"creator,omitempty"`
	IsPublic    *google_protobuf.BoolValue  `protobuf:"bytes,7,opt,name=is_public,json=isPublic" json:"is_public,omitempty"`
	// / Are you joined?
	IsJoined *google_protobuf.BoolValue `protobuf:"bytes,8,opt,name=is_joined,json=isJoined" json:"is_joined,omitempty"`
}

func (m *PeerSearchResult) Reset()                    { *m = PeerSearchResult{} }
func (m *PeerSearchResult) String() string            { return proto.CompactTextString(m) }
func (*PeerSearchResult) ProtoMessage()               {}
func (*PeerSearchResult) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{14} }

func (m *PeerSearchResult) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *PeerSearchResult) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PeerSearchResult) GetShortname() *google_protobuf.StringValue {
	if m != nil {
		return m.Shortname
	}
	return nil
}

func (m *PeerSearchResult) GetDescription() *google_protobuf.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *PeerSearchResult) GetMembersCount() *google_protobuf.Int32Value {
	if m != nil {
		return m.MembersCount
	}
	return nil
}

func (m *PeerSearchResult) GetDateCreated() int64 {
	if m != nil {
		return m.DateCreated
	}
	return 0
}

func (m *PeerSearchResult) GetCreator() *google_protobuf.Int32Value {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *PeerSearchResult) GetIsPublic() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsPublic
	}
	return nil
}

func (m *PeerSearchResult) GetIsJoined() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsJoined
	}
	return nil
}

// Performing peer search
type RequestPeerSearch struct {
	Query         []*SearchCondition   `protobuf:"bytes,1,rep,name=query" json:"query,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,2,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestPeerSearch) Reset()                    { *m = RequestPeerSearch{} }
func (m *RequestPeerSearch) String() string            { return proto.CompactTextString(m) }
func (*RequestPeerSearch) ProtoMessage()               {}
func (*RequestPeerSearch) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{15} }

func (m *RequestPeerSearch) GetQuery() []*SearchCondition {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *RequestPeerSearch) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// / Response with related peers and entities
type ResponsePeerSearch struct {
	SearchResults []*PeerSearchResult `protobuf:"bytes,1,rep,name=search_results,json=searchResults" json:"search_results,omitempty"`
	Users         []*User             `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	Groups        []*Group            `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
	UserPeers     []*UserOutPeer      `protobuf:"bytes,4,rep,name=user_peers,json=userPeers" json:"user_peers,omitempty"`
	GroupPeers    []*GroupOutPeer     `protobuf:"bytes,5,rep,name=group_peers,json=groupPeers" json:"group_peers,omitempty"`
}

func (m *ResponsePeerSearch) Reset()                    { *m = ResponsePeerSearch{} }
func (m *ResponsePeerSearch) String() string            { return proto.CompactTextString(m) }
func (*ResponsePeerSearch) ProtoMessage()               {}
func (*ResponsePeerSearch) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{16} }

func (m *ResponsePeerSearch) GetSearchResults() []*PeerSearchResult {
	if m != nil {
		return m.SearchResults
	}
	return nil
}

func (m *ResponsePeerSearch) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponsePeerSearch) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ResponsePeerSearch) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

func (m *ResponsePeerSearch) GetGroupPeers() []*GroupOutPeer {
	if m != nil {
		return m.GroupPeers
	}
	return nil
}

// Resolve peer by shortname
type RequestResolvePeer struct {
	Shortname string `protobuf:"bytes,1,opt,name=shortname" json:"shortname,omitempty"`
}

func (m *RequestResolvePeer) Reset()                    { *m = RequestResolvePeer{} }
func (m *RequestResolvePeer) String() string            { return proto.CompactTextString(m) }
func (*RequestResolvePeer) ProtoMessage()               {}
func (*RequestResolvePeer) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{17} }

func (m *RequestResolvePeer) GetShortname() string {
	if m != nil {
		return m.Shortname
	}
	return ""
}

type ResponseResolvePeer struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *ResponseResolvePeer) Reset()                    { *m = ResponseResolvePeer{} }
func (m *ResponseResolvePeer) String() string            { return proto.CompactTextString(m) }
func (*ResponseResolvePeer) ProtoMessage()               {}
func (*ResponseResolvePeer) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{18} }

func (m *ResponseResolvePeer) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Message container
type MessageSearchResult struct {
	Peer     *Peer           `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Rid      int64           `protobuf:"varint,2,opt,name=rid" json:"rid,omitempty"`
	Date     int64           `protobuf:"varint,3,opt,name=date" json:"date,omitempty"`
	SenderId int32           `protobuf:"varint,4,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	Content  *MessageContent `protobuf:"bytes,5,opt,name=content" json:"content,omitempty"`
}

func (m *MessageSearchResult) Reset()                    { *m = MessageSearchResult{} }
func (m *MessageSearchResult) String() string            { return proto.CompactTextString(m) }
func (*MessageSearchResult) ProtoMessage()               {}
func (*MessageSearchResult) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{19} }

func (m *MessageSearchResult) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessageSearchResult) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *MessageSearchResult) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *MessageSearchResult) GetSenderId() int32 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *MessageSearchResult) GetContent() *MessageContent {
	if m != nil {
		return m.Content
	}
	return nil
}

// Message Search result container
type MessageSearchItem struct {
	Result *MessageSearchResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *MessageSearchItem) Reset()                    { *m = MessageSearchItem{} }
func (m *MessageSearchItem) String() string            { return proto.CompactTextString(m) }
func (*MessageSearchItem) ProtoMessage()               {}
func (*MessageSearchItem) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{20} }

func (m *MessageSearchItem) GetResult() *MessageSearchResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// Search Result with related peers and entities
type ResponseMessageSearchResponse struct {
	SearchResults []*MessageSearchItem        `protobuf:"bytes,1,rep,name=search_results,json=searchResults" json:"search_results,omitempty"`
	Users         []*User                     `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	Groups        []*Group                    `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
	LoadMoreState *google_protobuf.BytesValue `protobuf:"bytes,4,opt,name=load_more_state,json=loadMoreState" json:"load_more_state,omitempty"`
	UserOutPeers  []*UserOutPeer              `protobuf:"bytes,5,rep,name=user_out_peers,json=userOutPeers" json:"user_out_peers,omitempty"`
	GroupOutPeers []*GroupOutPeer             `protobuf:"bytes,6,rep,name=group_out_peers,json=groupOutPeers" json:"group_out_peers,omitempty"`
}

func (m *ResponseMessageSearchResponse) Reset()                    { *m = ResponseMessageSearchResponse{} }
func (m *ResponseMessageSearchResponse) String() string            { return proto.CompactTextString(m) }
func (*ResponseMessageSearchResponse) ProtoMessage()               {}
func (*ResponseMessageSearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{21} }

func (m *ResponseMessageSearchResponse) GetSearchResults() []*MessageSearchItem {
	if m != nil {
		return m.SearchResults
	}
	return nil
}

func (m *ResponseMessageSearchResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseMessageSearchResponse) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ResponseMessageSearchResponse) GetLoadMoreState() *google_protobuf.BytesValue {
	if m != nil {
		return m.LoadMoreState
	}
	return nil
}

func (m *ResponseMessageSearchResponse) GetUserOutPeers() []*UserOutPeer {
	if m != nil {
		return m.UserOutPeers
	}
	return nil
}

func (m *ResponseMessageSearchResponse) GetGroupOutPeers() []*GroupOutPeer {
	if m != nil {
		return m.GroupOutPeers
	}
	return nil
}

// Performing message search
type RequestMessageSearch struct {
	Query         *SearchCondition     `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,2,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestMessageSearch) Reset()                    { *m = RequestMessageSearch{} }
func (m *RequestMessageSearch) String() string            { return proto.CompactTextString(m) }
func (*RequestMessageSearch) ProtoMessage()               {}
func (*RequestMessageSearch) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{22} }

func (m *RequestMessageSearch) GetQuery() *SearchCondition {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *RequestMessageSearch) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Performing message search paging
type RequestMessageSearchMore struct {
	LoadMoreState []byte               `protobuf:"bytes,1,opt,name=load_more_state,json=loadMoreState,proto3" json:"load_more_state,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,2,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestMessageSearchMore) Reset()                    { *m = RequestMessageSearchMore{} }
func (m *RequestMessageSearchMore) String() string            { return proto.CompactTextString(m) }
func (*RequestMessageSearchMore) ProtoMessage()               {}
func (*RequestMessageSearchMore) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{23} }

func (m *RequestMessageSearchMore) GetLoadMoreState() []byte {
	if m != nil {
		return m.LoadMoreState
	}
	return nil
}

func (m *RequestMessageSearchMore) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type RequestSimpleSearch struct {
	Criteria      []*SimpleSearchCondition `protobuf:"bytes,1,rep,name=criteria" json:"criteria,omitempty"`
	Optimizations []UpdateOptimization     `protobuf:"varint,2,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestSimpleSearch) Reset()                    { *m = RequestSimpleSearch{} }
func (m *RequestSimpleSearch) String() string            { return proto.CompactTextString(m) }
func (*RequestSimpleSearch) ProtoMessage()               {}
func (*RequestSimpleSearch) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{24} }

func (m *RequestSimpleSearch) GetCriteria() []*SimpleSearchCondition {
	if m != nil {
		return m.Criteria
	}
	return nil
}

func (m *RequestSimpleSearch) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type RequestSimpleSearchMore struct {
	LoadMoreState []byte               `protobuf:"bytes,1,opt,name=load_more_state,json=loadMoreState,proto3" json:"load_more_state,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,2,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestSimpleSearchMore) Reset()                    { *m = RequestSimpleSearchMore{} }
func (m *RequestSimpleSearchMore) String() string            { return proto.CompactTextString(m) }
func (*RequestSimpleSearchMore) ProtoMessage()               {}
func (*RequestSimpleSearchMore) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{25} }

func (m *RequestSimpleSearchMore) GetLoadMoreState() []byte {
	if m != nil {
		return m.LoadMoreState
	}
	return nil
}

func (m *RequestSimpleSearchMore) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type RequestFieldAutocomplete struct {
	FieldName  string `protobuf:"bytes,1,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	FieldValue string `protobuf:"bytes,2,opt,name=field_value,json=fieldValue" json:"field_value,omitempty"`
}

func (m *RequestFieldAutocomplete) Reset()                    { *m = RequestFieldAutocomplete{} }
func (m *RequestFieldAutocomplete) String() string            { return proto.CompactTextString(m) }
func (*RequestFieldAutocomplete) ProtoMessage()               {}
func (*RequestFieldAutocomplete) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{26} }

func (m *RequestFieldAutocomplete) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *RequestFieldAutocomplete) GetFieldValue() string {
	if m != nil {
		return m.FieldValue
	}
	return ""
}

type ResponseFieldAutocomplete struct {
	FieldName  string   `protobuf:"bytes,1,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	FieldValue []string `protobuf:"bytes,2,rep,name=field_value,json=fieldValue" json:"field_value,omitempty"`
}

func (m *ResponseFieldAutocomplete) Reset()                    { *m = ResponseFieldAutocomplete{} }
func (m *ResponseFieldAutocomplete) String() string            { return proto.CompactTextString(m) }
func (*ResponseFieldAutocomplete) ProtoMessage()               {}
func (*ResponseFieldAutocomplete) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{27} }

func (m *ResponseFieldAutocomplete) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *ResponseFieldAutocomplete) GetFieldValue() []string {
	if m != nil {
		return m.FieldValue
	}
	return nil
}

type RequestLoadUserSearchByPredicatesResults struct {
	Predicates []*SearchPredicate           `protobuf:"bytes,1,rep,name=predicates" json:"predicates,omitempty"`
	GroupId    int32                        `protobuf:"varint,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Query      *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	Limit      int32                        `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (m *RequestLoadUserSearchByPredicatesResults) Reset() {
	*m = RequestLoadUserSearchByPredicatesResults{}
}
func (m *RequestLoadUserSearchByPredicatesResults) String() string { return proto.CompactTextString(m) }
func (*RequestLoadUserSearchByPredicatesResults) ProtoMessage()    {}
func (*RequestLoadUserSearchByPredicatesResults) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{28}
}

func (m *RequestLoadUserSearchByPredicatesResults) GetPredicates() []*SearchPredicate {
	if m != nil {
		return m.Predicates
	}
	return nil
}

func (m *RequestLoadUserSearchByPredicatesResults) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *RequestLoadUserSearchByPredicatesResults) GetQuery() *google_protobuf.StringValue {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *RequestLoadUserSearchByPredicatesResults) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type UserMatch struct {
	UserId          int32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	MatchPredicates bool  `protobuf:"varint,2,opt,name=match_predicates,json=matchPredicates" json:"match_predicates,omitempty"`
}

func (m *UserMatch) Reset()                    { *m = UserMatch{} }
func (m *UserMatch) String() string            { return proto.CompactTextString(m) }
func (*UserMatch) ProtoMessage()               {}
func (*UserMatch) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{29} }

func (m *UserMatch) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserMatch) GetMatchPredicates() bool {
	if m != nil {
		return m.MatchPredicates
	}
	return false
}

type ResponseLoadUserSearchByPredicatesResults struct {
	Users       []*UserMatch `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	ResultCount int32        `protobuf:"varint,2,opt,name=result_count,json=resultCount" json:"result_count,omitempty"`
}

func (m *ResponseLoadUserSearchByPredicatesResults) Reset() {
	*m = ResponseLoadUserSearchByPredicatesResults{}
}
func (m *ResponseLoadUserSearchByPredicatesResults) String() string { return proto.CompactTextString(m) }
func (*ResponseLoadUserSearchByPredicatesResults) ProtoMessage()    {}
func (*ResponseLoadUserSearchByPredicatesResults) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{30}
}

func (m *ResponseLoadUserSearchByPredicatesResults) GetUsers() []*UserMatch {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseLoadUserSearchByPredicatesResults) GetResultCount() int32 {
	if m != nil {
		return m.ResultCount
	}
	return 0
}

type RequestLoadUserSearchByPredicatesCount struct {
	Predicates []*SearchPredicate `protobuf:"bytes,1,rep,name=predicates" json:"predicates,omitempty"`
	GroupId    int32              `protobuf:"varint,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *RequestLoadUserSearchByPredicatesCount) Reset() {
	*m = RequestLoadUserSearchByPredicatesCount{}
}
func (m *RequestLoadUserSearchByPredicatesCount) String() string { return proto.CompactTextString(m) }
func (*RequestLoadUserSearchByPredicatesCount) ProtoMessage()    {}
func (*RequestLoadUserSearchByPredicatesCount) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{31}
}

func (m *RequestLoadUserSearchByPredicatesCount) GetPredicates() []*SearchPredicate {
	if m != nil {
		return m.Predicates
	}
	return nil
}

func (m *RequestLoadUserSearchByPredicatesCount) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type ResponseLoadUserSearchByPredicatesCount struct {
	ResultCount int32 `protobuf:"varint,1,opt,name=result_count,json=resultCount" json:"result_count,omitempty"`
}

func (m *ResponseLoadUserSearchByPredicatesCount) Reset() {
	*m = ResponseLoadUserSearchByPredicatesCount{}
}
func (m *ResponseLoadUserSearchByPredicatesCount) String() string { return proto.CompactTextString(m) }
func (*ResponseLoadUserSearchByPredicatesCount) ProtoMessage()    {}
func (*ResponseLoadUserSearchByPredicatesCount) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{32}
}

func (m *ResponseLoadUserSearchByPredicatesCount) GetResultCount() int32 {
	if m != nil {
		return m.ResultCount
	}
	return 0
}

func init() {
	proto.RegisterType((*SimpleContactSearchCondition)(nil), "dialog.SimpleContactSearchCondition")
	proto.RegisterType((*SimpleMessageSearchCondition)(nil), "dialog.SimpleMessageSearchCondition")
	proto.RegisterType((*SimplePeerSearchCondition)(nil), "dialog.SimplePeerSearchCondition")
	proto.RegisterType((*SimpleUserProfileSearchCondition)(nil), "dialog.SimpleUserProfileSearchCondition")
	proto.RegisterType((*Criterion)(nil), "dialog.criterion")
	proto.RegisterType((*SimpleSearchCondition)(nil), "dialog.SimpleSearchCondition")
	proto.RegisterType((*SearchCondition)(nil), "dialog.SearchCondition")
	proto.RegisterType((*SearchPeerTypeCondition)(nil), "dialog.SearchPeerTypeCondition")
	proto.RegisterType((*SearchPieceText)(nil), "dialog.SearchPieceText")
	proto.RegisterType((*SearchAndCondition)(nil), "dialog.SearchAndCondition")
	proto.RegisterType((*SearchOrCondition)(nil), "dialog.SearchOrCondition")
	proto.RegisterType((*SearchPeerCondition)(nil), "dialog.SearchPeerCondition")
	proto.RegisterType((*SearchPeerContentType)(nil), "dialog.SearchPeerContentType")
	proto.RegisterType((*SearchSenderIdConfition)(nil), "dialog.SearchSenderIdConfition")
	proto.RegisterType((*PeerSearchResult)(nil), "dialog.PeerSearchResult")
	proto.RegisterType((*RequestPeerSearch)(nil), "dialog.RequestPeerSearch")
	proto.RegisterType((*ResponsePeerSearch)(nil), "dialog.ResponsePeerSearch")
	proto.RegisterType((*RequestResolvePeer)(nil), "dialog.RequestResolvePeer")
	proto.RegisterType((*ResponseResolvePeer)(nil), "dialog.ResponseResolvePeer")
	proto.RegisterType((*MessageSearchResult)(nil), "dialog.MessageSearchResult")
	proto.RegisterType((*MessageSearchItem)(nil), "dialog.MessageSearchItem")
	proto.RegisterType((*ResponseMessageSearchResponse)(nil), "dialog.ResponseMessageSearchResponse")
	proto.RegisterType((*RequestMessageSearch)(nil), "dialog.RequestMessageSearch")
	proto.RegisterType((*RequestMessageSearchMore)(nil), "dialog.RequestMessageSearchMore")
	proto.RegisterType((*RequestSimpleSearch)(nil), "dialog.RequestSimpleSearch")
	proto.RegisterType((*RequestSimpleSearchMore)(nil), "dialog.RequestSimpleSearchMore")
	proto.RegisterType((*RequestFieldAutocomplete)(nil), "dialog.RequestFieldAutocomplete")
	proto.RegisterType((*ResponseFieldAutocomplete)(nil), "dialog.ResponseFieldAutocomplete")
	proto.RegisterType((*RequestLoadUserSearchByPredicatesResults)(nil), "dialog.RequestLoadUserSearchByPredicatesResults")
	proto.RegisterType((*UserMatch)(nil), "dialog.UserMatch")
	proto.RegisterType((*ResponseLoadUserSearchByPredicatesResults)(nil), "dialog.ResponseLoadUserSearchByPredicatesResults")
	proto.RegisterType((*RequestLoadUserSearchByPredicatesCount)(nil), "dialog.RequestLoadUserSearchByPredicatesCount")
	proto.RegisterType((*ResponseLoadUserSearchByPredicatesCount)(nil), "dialog.ResponseLoadUserSearchByPredicatesCount")
	proto.RegisterEnum("dialog.SearchPeerType", SearchPeerType_name, SearchPeerType_value)
	proto.RegisterEnum("dialog.SearchContentType", SearchContentType_name, SearchContentType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Search service

type SearchClient interface {
	// / Search among groups/users/contacts
	PeerSearch(ctx context.Context, in *RequestPeerSearch, opts ...grpc.CallOption) (*ResponsePeerSearch, error)
	ResolvePeer(ctx context.Context, in *RequestResolvePeer, opts ...grpc.CallOption) (*ResponseResolvePeer, error)
	// / Search by messages
	MessageSearch(ctx context.Context, in *RequestMessageSearch, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error)
	MessageSearchMore(ctx context.Context, in *RequestMessageSearchMore, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error)
	// / Custom search by conditions
	SimpleSearch(ctx context.Context, in *RequestSimpleSearch, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error)
	SimpleSearchMore(ctx context.Context, in *RequestSimpleSearchMore, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error)
	// / Search for autocomplete suggestions among custom user profile
	AutocompleteSuggestions(ctx context.Context, in *RequestFieldAutocomplete, opts ...grpc.CallOption) (*ResponseFieldAutocomplete, error)
	LoadUserSearchByPredicatesResults(ctx context.Context, in *RequestLoadUserSearchByPredicatesResults, opts ...grpc.CallOption) (*ResponseLoadUserSearchByPredicatesResults, error)
	LoadUserSearchByPredicatesCount(ctx context.Context, in *RequestLoadUserSearchByPredicatesCount, opts ...grpc.CallOption) (*ResponseLoadUserSearchByPredicatesCount, error)
}

type searchClient struct {
	cc *grpc.ClientConn
}

func NewSearchClient(cc *grpc.ClientConn) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) PeerSearch(ctx context.Context, in *RequestPeerSearch, opts ...grpc.CallOption) (*ResponsePeerSearch, error) {
	out := new(ResponsePeerSearch)
	err := grpc.Invoke(ctx, "/dialog.Search/PeerSearch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) ResolvePeer(ctx context.Context, in *RequestResolvePeer, opts ...grpc.CallOption) (*ResponseResolvePeer, error) {
	out := new(ResponseResolvePeer)
	err := grpc.Invoke(ctx, "/dialog.Search/ResolvePeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) MessageSearch(ctx context.Context, in *RequestMessageSearch, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error) {
	out := new(ResponseMessageSearchResponse)
	err := grpc.Invoke(ctx, "/dialog.Search/MessageSearch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) MessageSearchMore(ctx context.Context, in *RequestMessageSearchMore, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error) {
	out := new(ResponseMessageSearchResponse)
	err := grpc.Invoke(ctx, "/dialog.Search/MessageSearchMore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) SimpleSearch(ctx context.Context, in *RequestSimpleSearch, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error) {
	out := new(ResponseMessageSearchResponse)
	err := grpc.Invoke(ctx, "/dialog.Search/SimpleSearch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) SimpleSearchMore(ctx context.Context, in *RequestSimpleSearchMore, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error) {
	out := new(ResponseMessageSearchResponse)
	err := grpc.Invoke(ctx, "/dialog.Search/SimpleSearchMore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) AutocompleteSuggestions(ctx context.Context, in *RequestFieldAutocomplete, opts ...grpc.CallOption) (*ResponseFieldAutocomplete, error) {
	out := new(ResponseFieldAutocomplete)
	err := grpc.Invoke(ctx, "/dialog.Search/AutocompleteSuggestions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) LoadUserSearchByPredicatesResults(ctx context.Context, in *RequestLoadUserSearchByPredicatesResults, opts ...grpc.CallOption) (*ResponseLoadUserSearchByPredicatesResults, error) {
	out := new(ResponseLoadUserSearchByPredicatesResults)
	err := grpc.Invoke(ctx, "/dialog.Search/LoadUserSearchByPredicatesResults", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) LoadUserSearchByPredicatesCount(ctx context.Context, in *RequestLoadUserSearchByPredicatesCount, opts ...grpc.CallOption) (*ResponseLoadUserSearchByPredicatesCount, error) {
	out := new(ResponseLoadUserSearchByPredicatesCount)
	err := grpc.Invoke(ctx, "/dialog.Search/LoadUserSearchByPredicatesCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Search service

type SearchServer interface {
	// / Search among groups/users/contacts
	PeerSearch(context.Context, *RequestPeerSearch) (*ResponsePeerSearch, error)
	ResolvePeer(context.Context, *RequestResolvePeer) (*ResponseResolvePeer, error)
	// / Search by messages
	MessageSearch(context.Context, *RequestMessageSearch) (*ResponseMessageSearchResponse, error)
	MessageSearchMore(context.Context, *RequestMessageSearchMore) (*ResponseMessageSearchResponse, error)
	// / Custom search by conditions
	SimpleSearch(context.Context, *RequestSimpleSearch) (*ResponseMessageSearchResponse, error)
	SimpleSearchMore(context.Context, *RequestSimpleSearchMore) (*ResponseMessageSearchResponse, error)
	// / Search for autocomplete suggestions among custom user profile
	AutocompleteSuggestions(context.Context, *RequestFieldAutocomplete) (*ResponseFieldAutocomplete, error)
	LoadUserSearchByPredicatesResults(context.Context, *RequestLoadUserSearchByPredicatesResults) (*ResponseLoadUserSearchByPredicatesResults, error)
	LoadUserSearchByPredicatesCount(context.Context, *RequestLoadUserSearchByPredicatesCount) (*ResponseLoadUserSearchByPredicatesCount, error)
}

func RegisterSearchServer(s *grpc.Server, srv SearchServer) {
	s.RegisterService(&_Search_serviceDesc, srv)
}

func _Search_PeerSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPeerSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).PeerSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/PeerSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).PeerSearch(ctx, req.(*RequestPeerSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_ResolvePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestResolvePeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).ResolvePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/ResolvePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).ResolvePeer(ctx, req.(*RequestResolvePeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_MessageSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessageSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).MessageSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/MessageSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).MessageSearch(ctx, req.(*RequestMessageSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_MessageSearchMore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessageSearchMore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).MessageSearchMore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/MessageSearchMore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).MessageSearchMore(ctx, req.(*RequestMessageSearchMore))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_SimpleSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSimpleSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SimpleSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/SimpleSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SimpleSearch(ctx, req.(*RequestSimpleSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_SimpleSearchMore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSimpleSearchMore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SimpleSearchMore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/SimpleSearchMore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SimpleSearchMore(ctx, req.(*RequestSimpleSearchMore))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_AutocompleteSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFieldAutocomplete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).AutocompleteSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/AutocompleteSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).AutocompleteSuggestions(ctx, req.(*RequestFieldAutocomplete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_LoadUserSearchByPredicatesResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadUserSearchByPredicatesResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).LoadUserSearchByPredicatesResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/LoadUserSearchByPredicatesResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).LoadUserSearchByPredicatesResults(ctx, req.(*RequestLoadUserSearchByPredicatesResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_LoadUserSearchByPredicatesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadUserSearchByPredicatesCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).LoadUserSearchByPredicatesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/LoadUserSearchByPredicatesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).LoadUserSearchByPredicatesCount(ctx, req.(*RequestLoadUserSearchByPredicatesCount))
	}
	return interceptor(ctx, in, info, handler)
}

var _Search_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PeerSearch",
			Handler:    _Search_PeerSearch_Handler,
		},
		{
			MethodName: "ResolvePeer",
			Handler:    _Search_ResolvePeer_Handler,
		},
		{
			MethodName: "MessageSearch",
			Handler:    _Search_MessageSearch_Handler,
		},
		{
			MethodName: "MessageSearchMore",
			Handler:    _Search_MessageSearchMore_Handler,
		},
		{
			MethodName: "SimpleSearch",
			Handler:    _Search_SimpleSearch_Handler,
		},
		{
			MethodName: "SimpleSearchMore",
			Handler:    _Search_SimpleSearchMore_Handler,
		},
		{
			MethodName: "AutocompleteSuggestions",
			Handler:    _Search_AutocompleteSuggestions_Handler,
		},
		{
			MethodName: "LoadUserSearchByPredicatesResults",
			Handler:    _Search_LoadUserSearchByPredicatesResults_Handler,
		},
		{
			MethodName: "LoadUserSearchByPredicatesCount",
			Handler:    _Search_LoadUserSearchByPredicatesCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search.proto",
}

func init() { proto.RegisterFile("search.proto", fileDescriptor21) }

var fileDescriptor21 = []byte{
	// 2167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x58, 0xcd, 0x4f, 0x23, 0xc9,
	0x15, 0xa7, 0xb1, 0x31, 0xf8, 0xd9, 0x80, 0x29, 0x86, 0xc1, 0x18, 0x08, 0xd0, 0x9b, 0x61, 0x08,
	0x3b, 0xb2, 0x19, 0x66, 0x76, 0x37, 0x21, 0x2b, 0xb1, 0xe0, 0x65, 0xc6, 0x64, 0x18, 0xcc, 0xb6,
	0xcd, 0x26, 0xa3, 0x44, 0xb2, 0x9a, 0xee, 0xc2, 0xd3, 0x2b, 0xbb, 0xbb, 0xb7, 0xbb, 0x4d, 0xc2,
	0x46, 0x4a, 0xa4, 0xbd, 0x44, 0x9a, 0xe3, 0x46, 0x4a, 0x72, 0x4d, 0x8e, 0xb9, 0x24, 0x87, 0x1c,
	0x22, 0x45, 0xca, 0x4a, 0x91, 0x92, 0x7f, 0x20, 0xa7, 0x5c, 0x47, 0x39, 0xed, 0x3f, 0x90, 0x6b,
	0x54, 0x1f, 0xed, 0xee, 0xae, 0x6e, 0xdb, 0x90, 0x8f, 0xd5, 0x9e, 0x6c, 0xd7, 0x7b, 0xef, 0x57,
	0xbf, 0x7a, 0x9f, 0x55, 0x86, 0xbc, 0x8b, 0x55, 0x47, 0x7b, 0x59, 0xb6, 0x1d, 0xcb, 0xb3, 0x50,
	0x46, 0x37, 0xd4, 0x8e, 0xd5, 0x2e, 0x7d, 0xad, 0x6d, 0x59, 0xed, 0x0e, 0xae, 0xd0, 0xd5, 0x8b,
	0xde, 0x65, 0xe5, 0x87, 0x8e, 0x6a, 0xdb, 0xd8, 0x71, 0x99, 0x5e, 0x69, 0x85, 0xcb, 0x55, 0xdb,
	0xa8, 0xa8, 0xa6, 0x69, 0x79, 0xaa, 0x67, 0x58, 0xa6, 0x2f, 0x9d, 0xd3, 0xf1, 0xa5, 0x61, 0x1a,
	0xe1, 0xa5, 0x7c, 0xdb, 0xb1, 0x7a, 0xb6, 0xff, 0x2b, 0x67, 0xe3, 0x00, 0x6b, 0xb6, 0x8b, 0x5d,
	0x57, 0x6d, 0x1b, 0x66, 0xdb, 0x97, 0xf6, 0xdc, 0x40, 0x3a, 0xdf, 0x35, 0x5c, 0x0d, 0x77, 0x3a,
	0xaa, 0x89, 0xad, 0x9e, 0xbf, 0xb8, 0xe0, 0x6a, 0x6a, 0x47, 0xb5, 0x2f, 0x2a, 0xfc, 0x93, 0x2d,
	0xcb, 0xbb, 0xb0, 0xd2, 0x30, 0xba, 0x76, 0x07, 0x57, 0x2d, 0xd3, 0x53, 0x35, 0xaf, 0x41, 0x8f,
	0x56, 0xb5, 0x4c, 0x9d, 0x72, 0x41, 0x08, 0xd2, 0x1e, 0xfe, 0x91, 0x57, 0x94, 0xd6, 0xa5, 0xad,
	0xac, 0x42, 0xbf, 0xcb, 0x9f, 0x49, 0xbe, 0xd1, 0x73, 0x4a, 0x03, 0x8b, 0x46, 0xeb, 0x90, 0x26,
	0x6c, 0xa9, 0x51, 0x6e, 0x37, 0x5f, 0x66, 0x1e, 0x2a, 0x9f, 0x61, 0xec, 0x28, 0x54, 0xd2, 0x87,
	0x1d, 0x0f, 0x60, 0xd1, 0xbb, 0x90, 0xd7, 0x2c, 0xd3, 0xc3, 0xa6, 0xd7, 0xf2, 0xae, 0x6d, 0x5c,
	0x4c, 0xad, 0x4b, 0x5b, 0x33, 0xbb, 0x4b, 0xbe, 0x75, 0x7f, 0x13, 0xa2, 0xd1, 0xbc, 0xb6, 0xb1,
	0x92, 0xd3, 0x82, 0x1f, 0xf2, 0xa7, 0x12, 0x2c, 0x31, 0x52, 0x64, 0x1b, 0x91, 0xd1, 0x23, 0xc8,
	0x92, 0x7d, 0x19, 0xb0, 0x44, 0x81, 0xef, 0x46, 0x81, 0x89, 0x15, 0x45, 0x9d, 0xb2, 0xf9, 0x37,
	0xb4, 0x13, 0x22, 0x99, 0xdb, 0x5d, 0x29, 0xb3, 0x00, 0x96, 0xfd, 0x00, 0x97, 0x1b, 0x9e, 0x63,
	0x98, 0xed, 0x0f, 0xd5, 0x4e, 0x0f, 0x73, 0xcf, 0x1c, 0xc1, 0x3a, 0xe3, 0x70, 0xee, 0x62, 0xe7,
	0xcc, 0xb1, 0x2e, 0x8d, 0x4e, 0xcc, 0x39, 0x1b, 0x90, 0xff, 0xb8, 0x87, 0x9d, 0xeb, 0x96, 0x4b,
	0xcd, 0xb9, 0x67, 0x73, 0x74, 0x8d, 0x21, 0xca, 0x39, 0xc8, 0x6a, 0x8e, 0xe1, 0x61, 0xc7, 0xb0,
	0x4c, 0xf9, 0x77, 0xe3, 0xb0, 0xc0, 0x40, 0x45, 0xa4, 0xf7, 0x60, 0x52, 0x63, 0x51, 0xe3, 0x9e,
	0xfe, 0x7a, 0xff, 0x48, 0x43, 0x42, 0x5a, 0x1b, 0x53, 0x7c, 0x33, 0x82, 0xc0, 0x32, 0x09, 0xf3,
	0x43, 0x0a, 0x08, 0xc9, 0xf1, 0x25, 0x08, 0xdc, 0x0c, 0xbd, 0xc3, 0x43, 0x9d, 0xa2, 0xe6, 0x1b,
	0x51, 0xf3, 0x84, 0x48, 0xd4, 0xc6, 0x78, 0x06, 0x9c, 0x00, 0xcd, 0x59, 0xee, 0xa4, 0x62, 0x9a,
	0xda, 0x6f, 0x45, 0xed, 0x07, 0x7b, 0xb1, 0x36, 0xa6, 0x84, 0xcd, 0x0f, 0x23, 0x1e, 0xfb, 0x47,
	0x1a, 0x66, 0x45, 0x5f, 0x7d, 0x1f, 0x16, 0xdd, 0x48, 0x9c, 0xfb, 0x22, 0xee, 0xbb, 0xb5, 0xe4,
	0x74, 0x08, 0xef, 0x38, 0x08, 0x01, 0x55, 0x61, 0x96, 0x8b, 0x0c, 0xac, 0xe1, 0x66, 0x90, 0x33,
	0x8b, 0x02, 0xa8, 0x2f, 0xae, 0x8d, 0x29, 0xa2, 0x05, 0x3a, 0x01, 0xc4, 0x96, 0x0e, 0x4c, 0x3d,
	0x20, 0xc7, 0xfc, 0x5a, 0x8a, 0xe2, 0x84, 0x35, 0x6a, 0x63, 0x4a, 0x82, 0x1d, 0x3a, 0x86, 0x39,
	0xb6, 0x5a, 0x77, 0x02, 0x30, 0xe6, 0x64, 0xa1, 0xa2, 0x42, 0x0a, 0xb5, 0x31, 0x25, 0x6e, 0x85,
	0xea, 0x30, 0x1f, 0x1c, 0x3c, 0x00, 0x9b, 0xa0, 0x60, 0xcb, 0x71, 0xb7, 0x85, 0xe1, 0x92, 0x2c,
	0xd1, 0x39, 0x2c, 0x44, 0x96, 0xfd, 0x1a, 0x2e, 0x66, 0x28, 0xe4, 0x6a, 0x22, 0xa4, 0xaf, 0x54,
	0x1b, 0x53, 0x92, 0xad, 0x83, 0x10, 0x37, 0xb0, 0xa9, 0x63, 0xe7, 0x98, 0x78, 0xe3, 0x92, 0x71,
	0x9d, 0x4c, 0x0a, 0x71, 0x4c, 0x2d, 0x08, 0x71, 0x4c, 0x74, 0x98, 0x81, 0xf4, 0x85, 0xa5, 0x5f,
	0xcb, 0x3f, 0x80, 0xc5, 0x01, 0x09, 0x82, 0x0e, 0x6e, 0xdc, 0x63, 0x0e, 0xf3, 0xaf, 0xbe, 0xd8,
	0x99, 0x82, 0xcc, 0x4b, 0x43, 0xd7, 0xb1, 0x19, 0x74, 0x1c, 0xf9, 0x2d, 0x3f, 0x71, 0x83, 0xb4,
	0x90, 0x61, 0x82, 0xb6, 0x06, 0xd6, 0x27, 0x04, 0x4b, 0x26, 0x92, 0x5f, 0x00, 0x8a, 0x27, 0x06,
	0xaa, 0x42, 0x56, 0x35, 0xf5, 0x96, 0x6f, 0x9d, 0x8a, 0xe7, 0x63, 0x5f, 0xf7, 0x70, 0xfa, 0xd5,
	0x17, 0x3b, 0x59, 0x98, 0xbc, 0x32, 0x5c, 0xe3, 0xa2, 0x83, 0x95, 0x29, 0xd5, 0xd4, 0x3f, 0xa0,
	0xd0, 0x1f, 0xc2, 0x5c, 0x2c, 0x4d, 0xd0, 0x01, 0x4c, 0x59, 0x0e, 0x07, 0x1e, 0xbf, 0x15, 0xf0,
	0xa4, 0xe5, 0x30, 0xdc, 0x63, 0x98, 0x4f, 0xc8, 0x18, 0xb4, 0x1b, 0x99, 0x1c, 0xb3, 0x3e, 0x6a,
	0xbd, 0xe7, 0x11, 0x3d, 0x11, 0x8d, 0xea, 0xca, 0x3a, 0x2c, 0x24, 0x66, 0x0a, 0x7a, 0x26, 0x0c,
	0x14, 0x69, 0xc4, 0x40, 0x11, 0xe1, 0x23, 0xf3, 0xe5, 0xc8, 0x0f, 0x7c, 0x2c, 0x37, 0xd0, 0x36,
	0x64, 0x5d, 0xba, 0xd8, 0x32, 0x74, 0xba, 0xc9, 0x44, 0xcc, 0x9f, 0x2e, 0x37, 0x92, 0xff, 0x94,
	0x86, 0x42, 0xd0, 0x16, 0x15, 0xec, 0xf6, 0x3a, 0x1e, 0xaa, 0x0c, 0x9e, 0x97, 0x89, 0x47, 0x26,
	0x49, 0xe1, 0x19, 0x5e, 0x87, 0x75, 0xed, 0x58, 0x52, 0x50, 0x11, 0xda, 0x83, 0xac, 0xfb, 0xd2,
	0x72, 0x3c, 0x53, 0xed, 0xe2, 0x62, 0xf6, 0x06, 0x23, 0x2c, 0x50, 0x27, 0xcd, 0x59, 0xc7, 0xae,
	0xe6, 0x18, 0x76, 0xa8, 0x09, 0x0d, 0xb5, 0x16, 0x38, 0x84, 0xcd, 0x51, 0x1d, 0xa6, 0xbb, 0xb8,
	0x7b, 0x81, 0x1d, 0xb7, 0xa5, 0x59, 0x3d, 0xd3, 0xe3, 0x7d, 0x68, 0x39, 0x86, 0x77, 0x6c, 0x7a,
	0x8f, 0x76, 0x19, 0x9c, 0x70, 0xec, 0x3c, 0x07, 0xa8, 0x12, 0x7b, 0xb4, 0x03, 0x79, 0x5d, 0xf5,
	0x70, 0x4b, 0x73, 0xb0, 0xea, 0x61, 0x9d, 0xb6, 0xa2, 0x54, 0x2c, 0x7a, 0x44, 0xa5, 0xca, 0x34,
	0xd0, 0xfb, 0x30, 0x49, 0x95, 0x2d, 0x87, 0x37, 0x99, 0xdb, 0x6c, 0xee, 0x9b, 0xa2, 0x27, 0x90,
	0x35, 0xdc, 0x96, 0xdd, 0xbb, 0xe8, 0x18, 0x1a, 0xef, 0x29, 0xa5, 0x18, 0xce, 0xa1, 0x65, 0x75,
	0x12, 0x61, 0xa6, 0x0c, 0xf7, 0x8c, 0x9a, 0xa2, 0x77, 0x28, 0xce, 0x47, 0x96, 0x61, 0x62, 0xbd,
	0x38, 0x35, 0x0a, 0x87, 0x18, 0x7e, 0x87, 0xea, 0xca, 0x9f, 0x4b, 0x30, 0xa7, 0xe0, 0x8f, 0x7b,
	0xd8, 0xf5, 0x82, 0x24, 0x42, 0xdf, 0x0e, 0x5a, 0xc4, 0xd0, 0x5a, 0x4c, 0xea, 0x1d, 0x24, 0x38,
	0x96, 0xed, 0x19, 0x5d, 0xe3, 0x13, 0x76, 0x1f, 0xa5, 0x05, 0x3d, 0x13, 0x4c, 0x9c, 0x73, 0x9b,
	0xf8, 0xb1, 0x1e, 0x52, 0x11, 0xcf, 0x15, 0xb5, 0xdf, 0x5b, 0x79, 0xbd, 0xbf, 0x04, 0x8b, 0x46,
	0xb7, 0xac, 0x77, 0xda, 0xe5, 0xb6, 0x63, 0x6b, 0xe5, 0xa7, 0x8e, 0xad, 0x71, 0xd6, 0xf2, 0x6f,
	0xc7, 0x01, 0x29, 0xd8, 0xb5, 0x2d, 0xd3, 0x0d, 0x5d, 0x0f, 0xd0, 0x3e, 0xcc, 0xb0, 0xce, 0xdb,
	0x72, 0x68, 0x49, 0xb8, 0xfc, 0x2c, 0xc5, 0x70, 0x2d, 0x84, 0x6b, 0x46, 0x99, 0x76, 0x43, 0xbf,
	0x5c, 0x52, 0x11, 0xf4, 0x0a, 0xcc, 0xfb, 0x51, 0xbf, 0x86, 0xc8, 0x15, 0x42, 0x61, 0x22, 0x74,
	0x0f, 0x32, 0xec, 0x4a, 0x5d, 0x4c, 0x51, 0xa5, 0x69, 0x5f, 0xe9, 0x29, 0x59, 0x55, 0xb8, 0x10,
	0xed, 0x02, 0x10, 0xfd, 0x16, 0xbd, 0x70, 0x17, 0xd3, 0x54, 0x75, 0x3e, 0x8c, 0xc7, 0xbb, 0x91,
	0x92, 0xa5, 0x37, 0x10, 0xa2, 0x85, 0xde, 0x82, 0x1c, 0xb5, 0xe6, 0x46, 0x13, 0xd4, 0xe8, 0x4e,
	0x04, 0xdf, 0xb7, 0x02, 0xaa, 0x48, 0xcd, 0xf6, 0x56, 0x5f, 0xef, 0x97, 0xa0, 0x18, 0xf7, 0x15,
	0xf3, 0x8f, 0xdc, 0x22, 0xbe, 0xa2, 0x7e, 0x53, 0xb0, 0x6b, 0x75, 0xae, 0xa8, 0xc7, 0xd0, 0x9b,
	0xe1, 0xc2, 0x66, 0x53, 0x41, 0x88, 0x48, 0x20, 0x1f, 0x11, 0x8d, 0x17, 0x30, 0xef, 0x6f, 0x16,
	0xde, 0xe1, 0x8d, 0xa1, 0x5d, 0x98, 0xf5, 0xa0, 0x51, 0xdc, 0xff, 0x25, 0xc1, 0x7c, 0xe4, 0xfa,
	0xf8, 0x9f, 0xf6, 0xba, 0x35, 0x48, 0x39, 0x86, 0x4e, 0x3b, 0x5d, 0xac, 0xc6, 0x89, 0x04, 0x6d,
	0x40, 0x9a, 0xa4, 0x28, 0xed, 0x52, 0x31, 0x0d, 0x2a, 0x8a, 0x76, 0xe8, 0xf4, 0xd0, 0x0e, 0x8d,
	0xf6, 0xd9, 0xad, 0x1a, 0x9b, 0x1e, 0xbf, 0xe2, 0xf4, 0x87, 0x38, 0x3f, 0x0e, 0x9f, 0x18, 0xf1,
	0x2e, 0xc1, 0xd6, 0xe5, 0x1a, 0xcc, 0x45, 0x0e, 0x7e, 0xec, 0xe1, 0x2e, 0x7a, 0x04, 0x19, 0x96,
	0xd9, 0xfc, 0xe0, 0xcb, 0x02, 0x68, 0x24, 0xb7, 0xb9, 0xaa, 0xfc, 0x3a, 0x05, 0xab, 0xbe, 0x43,
	0x45, 0x3d, 0xba, 0x88, 0xea, 0x03, 0xea, 0x66, 0x29, 0x11, 0x9e, 0x30, 0x89, 0x55, 0x6f, 0xb4,
	0x8e, 0x1e, 0x0e, 0xa9, 0x23, 0xd1, 0x94, 0x97, 0xd5, 0xe3, 0xa1, 0x65, 0x25, 0x1a, 0xf9, 0x55,
	0xf6, 0x01, 0xcc, 0x76, 0x2c, 0x55, 0x6f, 0x75, 0x2d, 0x07, 0xb7, 0x5c, 0x8f, 0x04, 0x70, 0xd0,
	0x58, 0x38, 0xbc, 0xf6, 0xb0, 0x9b, 0x34, 0x65, 0xa6, 0x09, 0xc2, 0x73, 0xcb, 0xc1, 0x0d, 0x62,
	0x8f, 0x6a, 0x30, 0x43, 0x0b, 0xd7, 0xea, 0x79, 0x91, 0x3a, 0x4c, 0x2a, 0xde, 0xd8, 0x80, 0xe9,
	0x05, 0x32, 0x17, 0x3d, 0x83, 0x59, 0x56, 0xce, 0x01, 0x54, 0x66, 0x70, 0x49, 0xc7, 0x5c, 0xda,
	0x0e, 0x09, 0x47, 0x16, 0xf9, 0x5f, 0x24, 0xb8, 0xc3, 0xeb, 0x31, 0x12, 0xac, 0x70, 0x5b, 0x97,
	0xbe, 0xea, 0x6d, 0xfd, 0x73, 0x09, 0x8a, 0x49, 0x87, 0x20, 0xc1, 0x41, 0x8f, 0xe3, 0xa1, 0x26,
	0x47, 0xca, 0x0f, 0x8f, 0xe6, 0x97, 0x7c, 0x82, 0xdf, 0x4b, 0xa4, 0x17, 0xd2, 0xef, 0xe1, 0xd7,
	0x36, 0xfa, 0x16, 0x4c, 0xf1, 0x97, 0xa5, 0xca, 0x6b, 0x6b, 0x35, 0xfa, 0x48, 0x15, 0xc2, 0xa1,
	0xf4, 0xd5, 0xd1, 0x7b, 0xb7, 0x3e, 0xc1, 0xed, 0x28, 0xff, 0x5a, 0x82, 0xc5, 0x04, 0xca, 0xd4,
	0xe7, 0x9b, 0x03, 0x7c, 0x2e, 0x7a, 0xf9, 0xff, 0xcd, 0xf1, 0x17, 0x41, 0x62, 0x3c, 0x31, 0x70,
	0x47, 0x3f, 0xe8, 0x79, 0x96, 0x66, 0x11, 0xb2, 0x1e, 0x46, 0x0f, 0x00, 0x2e, 0xc9, 0x62, 0x6b,
	0xc8, 0x28, 0xa3, 0x0a, 0xa7, 0xe4, 0x52, 0x5a, 0x86, 0x1c, 0xd3, 0xbe, 0x22, 0xad, 0x80, 0x5f,
	0x7d, 0x05, 0x75, 0x86, 0x47, 0x7b, 0xc5, 0x08, 0x62, 0xbf, 0x92, 0x60, 0xc9, 0xaf, 0xc1, 0xff,
	0x39, 0xb3, 0xd4, 0x70, 0x66, 0x23, 0x3a, 0xc2, 0x6f, 0xc6, 0x61, 0x8b, 0xd3, 0x3c, 0xb1, 0x54,
	0x9d, 0x74, 0x2d, 0x16, 0xd9, 0xc3, 0xeb, 0x33, 0x07, 0xeb, 0x86, 0xa6, 0x7a, 0xd8, 0xf5, 0x1b,
	0xf6, 0x13, 0x00, 0xbb, 0xbf, 0x98, 0x7c, 0x03, 0xec, 0x1b, 0xc5, 0x38, 0x05, 0x96, 0x68, 0x0b,
	0xa6, 0x58, 0xcb, 0xe3, 0xb3, 0x36, 0x36, 0x21, 0x27, 0xa9, 0xf8, 0x58, 0x47, 0x07, 0x7e, 0x5f,
	0xba, 0xc9, 0xb3, 0x40, 0x1c, 0x19, 0xac, 0x3b, 0xbd, 0x01, 0x13, 0x1d, 0xa3, 0x6b, 0x78, 0xc9,
	0xb3, 0x98, 0xc9, 0x46, 0xc4, 0xaf, 0x0b, 0x59, 0xe2, 0x98, 0xe7, 0xaa, 0xa7, 0xbd, 0x44, 0x9b,
	0x30, 0x49, 0x3b, 0xff, 0xa0, 0xf7, 0x57, 0x86, 0x48, 0x8f, 0x75, 0xf4, 0x4d, 0x28, 0x74, 0x89,
	0x41, 0x2b, 0xe4, 0x32, 0x72, 0xd8, 0x29, 0xd1, 0x60, 0x96, 0xaa, 0x05, 0xde, 0x96, 0xff, 0x20,
	0xc1, 0x37, 0xfc, 0x00, 0x8d, 0x0e, 0xca, 0xdb, 0xfe, 0x14, 0x65, 0xf1, 0x98, 0x0b, 0x0f, 0x20,
	0xca, 0x78, 0xc0, 0x28, 0xdd, 0x81, 0x3c, 0x9b, 0xe3, 0xfc, 0xa1, 0x94, 0x18, 0x88, 0x1c, 0x53,
	0xa1, 0x4f, 0xa1, 0x51, 0xa9, 0xf4, 0x47, 0x09, 0x36, 0x47, 0xa6, 0x12, 0x7b, 0x54, 0x7d, 0xe9,
	0x89, 0x34, 0x22, 0xc0, 0x9f, 0xc0, 0xfd, 0xd1, 0x0e, 0xef, 0xbf, 0x07, 0x23, 0x6e, 0x93, 0xfe,
	0x4b, 0xb7, 0x6d, 0xff, 0x14, 0x66, 0xa2, 0xff, 0xd8, 0xa0, 0x12, 0xdc, 0x6d, 0x1c, 0x1d, 0x28,
	0xd5, 0xda, 0xd9, 0xd1, 0x91, 0xd2, 0x7c, 0x71, 0x76, 0xd4, 0x3a, 0x3f, 0x7d, 0x76, 0x5a, 0xff,
	0xee, 0x69, 0x61, 0x0c, 0x2d, 0xc1, 0x82, 0x20, 0x7b, 0xaa, 0xd4, 0xcf, 0xcf, 0x1a, 0x05, 0x09,
	0x2d, 0xc3, 0xa2, 0x20, 0xaa, 0xd6, 0x4f, 0x9b, 0x07, 0xd5, 0x66, 0xa3, 0x30, 0x9e, 0x60, 0x77,
	0x76, 0x7e, 0x78, 0x72, 0x5c, 0x2d, 0xa4, 0xb6, 0xff, 0x2a, 0xf9, 0xff, 0xbb, 0x84, 0xff, 0xd0,
	0x58, 0x85, 0x25, 0x66, 0x40, 0x40, 0x8e, 0x4e, 0x9b, 0x83, 0x78, 0x84, 0xc5, 0x07, 0xa7, 0x2f,
	0x0a, 0x52, 0x40, 0x3f, 0x2c, 0x6a, 0x1e, 0x7d, 0xaf, 0x59, 0x18, 0x0f, 0x38, 0x86, 0x65, 0x27,
	0xc7, 0xa7, 0xcf, 0x1a, 0x85, 0x14, 0x5a, 0x83, 0xe5, 0xb8, 0xf0, 0xfd, 0x7a, 0xf5, 0xfc, 0xf9,
	0xd1, 0x69, 0xb3, 0x51, 0x48, 0xa3, 0x15, 0x28, 0xc6, 0x15, 0xce, 0x6a, 0xf5, 0x66, 0xbd, 0x51,
	0x98, 0xd8, 0xfd, 0x25, 0x40, 0x86, 0x0f, 0xd2, 0x8f, 0x00, 0x42, 0x0f, 0xbe, 0xfe, 0x05, 0x35,
	0xf6, 0x9c, 0x2d, 0x95, 0x02, 0x91, 0xf8, 0x4e, 0x94, 0xef, 0x7d, 0xfa, 0xf7, 0x7f, 0xfe, 0x7c,
	0x7c, 0x4d, 0x2e, 0x55, 0xae, 0x1e, 0x56, 0x48, 0xdc, 0x2a, 0x4c, 0x50, 0x09, 0x74, 0xf6, 0xa4,
	0x6d, 0x64, 0x42, 0x2e, 0xfc, 0x9e, 0x29, 0x09, 0x9b, 0x85, 0x64, 0xa5, 0x65, 0x71, 0xb7, 0x90,
	0x50, 0xde, 0xa4, 0xdb, 0xad, 0xcb, 0xcb, 0xe2, 0x76, 0x21, 0x25, 0xb2, 0xdf, 0x4f, 0x60, 0x3a,
	0x7a, 0x77, 0x5b, 0x11, 0x76, 0x8c, 0x48, 0x4b, 0xf7, 0xc4, 0x3d, 0x13, 0x2f, 0xf7, 0xf2, 0x16,
	0xdd, 0x5d, 0x96, 0x57, 0xc5, 0xdd, 0x23, 0xea, 0x64, 0xff, 0x57, 0x92, 0xf0, 0xe6, 0xa0, 0x77,
	0x80, 0xf5, 0x61, 0x24, 0x88, 0xc6, 0x4d, 0x89, 0x3c, 0xa0, 0x44, 0x36, 0xe5, 0x8d, 0xa1, 0x44,
	0x08, 0x22, 0x21, 0xf3, 0x63, 0xc8, 0x47, 0x6e, 0x50, 0xcb, 0x02, 0x8d, 0xb0, 0xf0, 0xa6, 0x0c,
	0xee, 0x53, 0x06, 0x1b, 0xf2, 0x8a, 0xc8, 0x20, 0x0c, 0x46, 0x36, 0xff, 0x99, 0x04, 0x85, 0xd8,
	0x65, 0x68, 0x6d, 0x08, 0x83, 0xdb, 0xf8, 0xe1, 0x4d, 0xca, 0xe2, 0x9e, 0xbc, 0x3e, 0x8c, 0x85,
	0xef, 0x86, 0xcf, 0x24, 0x58, 0x0c, 0xdf, 0x29, 0x1a, 0xbd, 0x76, 0x1b, 0xbb, 0xf4, 0xce, 0x14,
	0x8b, 0x4c, 0xec, 0x02, 0x52, 0xda, 0x10, 0x19, 0xc5, 0x54, 0xe4, 0x5d, 0xca, 0xe6, 0x81, 0x7c,
	0x5f, 0x64, 0x33, 0x60, 0x57, 0x42, 0xea, 0x6f, 0x12, 0x6c, 0x8c, 0x1e, 0x5f, 0x3b, 0x02, 0xbd,
	0x91, 0x16, 0xa5, 0x87, 0x22, 0xdd, 0x91, 0x26, 0xf2, 0xbb, 0x94, 0xfe, 0xdb, 0xf2, 0x43, 0x91,
	0xfe, 0x48, 0x53, 0x72, 0x90, 0x3f, 0x4b, 0xb0, 0x36, 0x6a, 0x2c, 0x94, 0x6f, 0x7c, 0x0c, 0xaa,
	0x5f, 0xaa, 0xdc, 0xfc, 0x10, 0xd4, 0x40, 0xde, 0xa3, 0x47, 0x78, 0x2c, 0x57, 0x6e, 0x7e, 0x04,
	0x36, 0x7e, 0xa4, 0xed, 0xc3, 0xa5, 0xd7, 0xfb, 0x77, 0xe1, 0x4e, 0x78, 0x02, 0xb9, 0xd8, 0xb9,
	0x32, 0x34, 0xec, 0x5e, 0x64, 0xe8, 0x4d, 0xea, 0xd1, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x34,
	0xa0, 0x3d, 0x83, 0x68, 0x1e, 0x00, 0x00,
}
