// Code generated by protoc-gen-gogo.
// source: integrations.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Group token response
type ResponseIntegrationToken struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Url   string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *ResponseIntegrationToken) Reset()      { *m = ResponseIntegrationToken{} }
func (*ResponseIntegrationToken) ProtoMessage() {}
func (*ResponseIntegrationToken) Descriptor() ([]byte, []int) {
	return fileDescriptorIntegrations, []int{0}
}

func (m *ResponseIntegrationToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ResponseIntegrationToken) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// Getting current group token
type RequestGetIntegrationToken struct {
	GroupPeer *OutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
}

func (m *RequestGetIntegrationToken) Reset()      { *m = RequestGetIntegrationToken{} }
func (*RequestGetIntegrationToken) ProtoMessage() {}
func (*RequestGetIntegrationToken) Descriptor() ([]byte, []int) {
	return fileDescriptorIntegrations, []int{1}
}

func (m *RequestGetIntegrationToken) GetGroupPeer() *OutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

// Revoke group token
type RequestRevokeIntegrationToken struct {
	GroupPeer *OutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
}

func (m *RequestRevokeIntegrationToken) Reset()      { *m = RequestRevokeIntegrationToken{} }
func (*RequestRevokeIntegrationToken) ProtoMessage() {}
func (*RequestRevokeIntegrationToken) Descriptor() ([]byte, []int) {
	return fileDescriptorIntegrations, []int{2}
}

func (m *RequestRevokeIntegrationToken) GetGroupPeer() *OutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func init() {
	proto.RegisterType((*ResponseIntegrationToken)(nil), "dialog.ResponseIntegrationToken")
	proto.RegisterType((*RequestGetIntegrationToken)(nil), "dialog.RequestGetIntegrationToken")
	proto.RegisterType((*RequestRevokeIntegrationToken)(nil), "dialog.RequestRevokeIntegrationToken")
}
func (this *ResponseIntegrationToken) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseIntegrationToken)
	if !ok {
		that2, ok := that.(ResponseIntegrationToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *RequestGetIntegrationToken) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestGetIntegrationToken)
	if !ok {
		that2, ok := that.(RequestGetIntegrationToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	return true
}
func (this *RequestRevokeIntegrationToken) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestRevokeIntegrationToken)
	if !ok {
		that2, ok := that.(RequestRevokeIntegrationToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	return true
}
func (this *ResponseIntegrationToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseIntegrationToken{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetIntegrationToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestGetIntegrationToken{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRevokeIntegrationToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestRevokeIntegrationToken{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringIntegrations(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Integrations service

type IntegrationsClient interface {
	// / Get token for posting to group
	GetIntegrationToken(ctx context.Context, in *RequestGetIntegrationToken, opts ...grpc.CallOption) (*ResponseIntegrationToken, error)
	// / Revoke token
	RevokeIntegrationToken(ctx context.Context, in *RequestRevokeIntegrationToken, opts ...grpc.CallOption) (*ResponseIntegrationToken, error)
}

type integrationsClient struct {
	cc *grpc.ClientConn
}

func NewIntegrationsClient(cc *grpc.ClientConn) IntegrationsClient {
	return &integrationsClient{cc}
}

func (c *integrationsClient) GetIntegrationToken(ctx context.Context, in *RequestGetIntegrationToken, opts ...grpc.CallOption) (*ResponseIntegrationToken, error) {
	out := new(ResponseIntegrationToken)
	err := grpc.Invoke(ctx, "/dialog.Integrations/GetIntegrationToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) RevokeIntegrationToken(ctx context.Context, in *RequestRevokeIntegrationToken, opts ...grpc.CallOption) (*ResponseIntegrationToken, error) {
	out := new(ResponseIntegrationToken)
	err := grpc.Invoke(ctx, "/dialog.Integrations/RevokeIntegrationToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Integrations service

type IntegrationsServer interface {
	// / Get token for posting to group
	GetIntegrationToken(context.Context, *RequestGetIntegrationToken) (*ResponseIntegrationToken, error)
	// / Revoke token
	RevokeIntegrationToken(context.Context, *RequestRevokeIntegrationToken) (*ResponseIntegrationToken, error)
}

func RegisterIntegrationsServer(s *grpc.Server, srv IntegrationsServer) {
	s.RegisterService(&_Integrations_serviceDesc, srv)
}

func _Integrations_GetIntegrationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetIntegrationToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).GetIntegrationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Integrations/GetIntegrationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).GetIntegrationToken(ctx, req.(*RequestGetIntegrationToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_RevokeIntegrationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRevokeIntegrationToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).RevokeIntegrationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Integrations/RevokeIntegrationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).RevokeIntegrationToken(ctx, req.(*RequestRevokeIntegrationToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _Integrations_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Integrations",
	HandlerType: (*IntegrationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIntegrationToken",
			Handler:    _Integrations_GetIntegrationToken_Handler,
		},
		{
			MethodName: "RevokeIntegrationToken",
			Handler:    _Integrations_RevokeIntegrationToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integrations.proto",
}

func (m *ResponseIntegrationToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseIntegrationToken) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIntegrations(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIntegrations(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *RequestGetIntegrationToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetIntegrationToken) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupPeer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIntegrations(dAtA, i, uint64(m.GroupPeer.Size()))
		n1, err := m.GroupPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *RequestRevokeIntegrationToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRevokeIntegrationToken) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupPeer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIntegrations(dAtA, i, uint64(m.GroupPeer.Size()))
		n2, err := m.GroupPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeFixed64Integrations(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Integrations(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintIntegrations(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ResponseIntegrationToken) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovIntegrations(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovIntegrations(uint64(l))
	}
	return n
}

func (m *RequestGetIntegrationToken) Size() (n int) {
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovIntegrations(uint64(l))
	}
	return n
}

func (m *RequestRevokeIntegrationToken) Size() (n int) {
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovIntegrations(uint64(l))
	}
	return n
}

func sovIntegrations(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIntegrations(x uint64) (n int) {
	return sovIntegrations(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ResponseIntegrationToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseIntegrationToken{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetIntegrationToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetIntegrationToken{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRevokeIntegrationToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRevokeIntegrationToken{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringIntegrations(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ResponseIntegrationToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIntegrations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseIntegrationToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseIntegrationToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntegrations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIntegrations
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntegrations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIntegrations
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIntegrations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIntegrations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetIntegrationToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIntegrations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetIntegrationToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetIntegrationToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntegrations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIntegrations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &OutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIntegrations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIntegrations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRevokeIntegrationToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIntegrations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRevokeIntegrationToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRevokeIntegrationToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntegrations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIntegrations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &OutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIntegrations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIntegrations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIntegrations(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIntegrations
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIntegrations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIntegrations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIntegrations
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIntegrations
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIntegrations(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIntegrations = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIntegrations   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("integrations.proto", fileDescriptorIntegrations) }

var fileDescriptorIntegrations = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x93, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0x77, 0x56, 0x5c, 0xdd, 0xd7, 0x8a, 0x18, 0xb5, 0xae, 0xa1, 0x1d, 0xca, 0x80, 0xa0,
	0x45, 0x92, 0xb6, 0x0a, 0xc2, 0x82, 0x2c, 0x2c, 0x48, 0xf1, 0xa4, 0x04, 0xef, 0x92, 0xdd, 0x3c,
	0x87, 0xa1, 0x71, 0x66, 0x9c, 0x99, 0x04, 0x04, 0x05, 0xf1, 0xd8, 0x93, 0xe2, 0xcd, 0x4f, 0xe0,
	0xb7, 0xf0, 0xea, 0xb1, 0xe0, 0xc5, 0xa3, 0x3b, 0x7a, 0x90, 0x9e, 0xfa, 0x11, 0x24, 0xd9, 0x2e,
	0x0d, 0x36, 0x05, 0x4f, 0x3d, 0xe5, 0xe5, 0xbd, 0x7f, 0xde, 0xef, 0x9f, 0xff, 0x30, 0x10, 0x08,
	0xe9, 0x90, 0x9b, 0xd4, 0x09, 0x25, 0x6d, 0xa4, 0x8d, 0x72, 0x2a, 0xe8, 0x65, 0x22, 0xcd, 0x15,
	0x0f, 0x57, 0xb9, 0x52, 0x3c, 0xc7, 0x38, 0xd5, 0x22, 0x4e, 0xa5, 0x54, 0xae, 0xa9, 0x0a, 0xaf,
	0x64, 0xf8, 0x42, 0x48, 0xd1, 0x6c, 0x2d, 0x69, 0x44, 0xb3, 0x78, 0xb9, 0x6e, 0xa7, 0x69, 0x9e,
	0xea, 0x49, 0x7c, 0xf4, 0x9c, 0xb7, 0xd9, 0x5b, 0x18, 0x24, 0x68, 0xb5, 0x92, 0x16, 0x1f, 0x1f,
	0xa3, 0x9f, 0xa9, 0x5d, 0x94, 0x01, 0x83, 0xf3, 0xae, 0x2a, 0x06, 0x64, 0x9d, 0xdc, 0xee, 0x8f,
	0x97, 0xf7, 0x0e, 0x36, 0x2f, 0x42, 0x2f, 0x4b, 0x25, 0x47, 0x93, 0xcc, 0x47, 0x01, 0x85, 0x73,
	0x85, 0xc9, 0x07, 0xdd, 0x16, 0x45, 0x35, 0x18, 0xae, 0xf9, 0x51, 0x08, 0x03, 0xf1, 0x32, 0xca,
	0x72, 0x1e, 0x71, 0xa3, 0xa7, 0xd1, 0x8e, 0xd1, 0xd3, 0x05, 0x92, 0xbd, 0x86, 0x30, 0xc1, 0x57,
	0x05, 0x5a, 0xb7, 0x83, 0xee, 0x84, 0x81, 0x87, 0x00, 0xdc, 0xa8, 0x42, 0x3f, 0xaf, 0x7e, 0xa4,
	0x76, 0xb1, 0xb4, 0x7d, 0x39, 0x9a, 0xc7, 0x11, 0x3d, 0x29, 0xdc, 0x53, 0x44, 0x33, 0xbe, 0xb4,
	0x77, 0xb0, 0xd9, 0x87, 0x0b, 0xa5, 0xb0, 0x62, 0x92, 0x63, 0xd2, 0xaf, 0xbf, 0xa8, 0x26, 0xc3,
	0x55, 0x3f, 0xba, 0x09, 0x37, 0x4e, 0xb2, 0x6b, 0x1e, 0x7b, 0x03, 0x6b, 0x47, 0x65, 0x82, 0xa5,
	0xda, 0xc5, 0x33, 0xa5, 0x6f, 0x7f, 0xed, 0xc2, 0x72, 0x83, 0x68, 0x83, 0x8f, 0x04, 0xae, 0xb6,
	0x65, 0xc0, 0x16, 0xc4, 0xd3, 0x73, 0x0a, 0xd7, 0x8f, 0x35, 0xed, 0x47, 0xc9, 0xee, 0xbf, 0xff,
	0xfe, 0xfb, 0x53, 0x37, 0x62, 0x77, 0xe2, 0x72, 0x2b, 0xae, 0xcc, 0xc4, 0x4d, 0x78, 0xdc, 0xb2,
	0x74, 0x48, 0x36, 0x82, 0xcf, 0x04, 0x56, 0x4e, 0x09, 0xe7, 0xd6, 0x3f, 0xb6, 0xda, 0x65, 0xff,
	0xe1, 0xec, 0x41, 0xed, 0x6c, 0x8b, 0xdd, 0x6d, 0x77, 0xd6, 0xbe, 0x77, 0x48, 0x36, 0xc6, 0x8f,
	0xfc, 0x68, 0x05, 0xae, 0x35, 0xf3, 0xb5, 0x68, 0x4a, 0x31, 0x45, 0xbb, 0x3f, 0xa3, 0x9d, 0x1f,
	0x33, 0xda, 0x39, 0x9c, 0x51, 0xf2, 0xce, 0x53, 0xf2, 0xc5, 0x53, 0xf2, 0xcd, 0x53, 0xb2, 0xef,
	0x29, 0xf9, 0xe9, 0x29, 0xf9, 0xe3, 0x69, 0xe7, 0xd0, 0x53, 0xf2, 0xe1, 0x17, 0xed, 0x4c, 0x7a,
	0xf5, 0x3d, 0xb8, 0xf7, 0x37, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xf4, 0x62, 0x2c, 0x7a, 0x03, 0x00,
	0x00,
}
