// Code generated by protoc-gen-gogo.
// source: peers.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PeerType int32

const (
	PEERTYPE_UNKNOWN          PeerType = 0
	PEERTYPE_PRIVATE          PeerType = 1
	PEERTYPE_GROUP            PeerType = 2
	PEERTYPE_ENCRYPTEDPRIVATE PeerType = 3
	PEERTYPE_SIP              PeerType = 4
)

var PeerType_name = map[int32]string{
	0: "PEERTYPE_UNKNOWN",
	1: "PEERTYPE_PRIVATE",
	2: "PEERTYPE_GROUP",
	3: "PEERTYPE_ENCRYPTEDPRIVATE",
	4: "PEERTYPE_SIP",
}
var PeerType_value = map[string]int32{
	"PEERTYPE_UNKNOWN":          0,
	"PEERTYPE_PRIVATE":          1,
	"PEERTYPE_GROUP":            2,
	"PEERTYPE_ENCRYPTEDPRIVATE": 3,
	"PEERTYPE_SIP":              4,
}

func (PeerType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPeers, []int{0} }

// Peer
type Peer struct {
	Type  PeerType                     `protobuf:"varint,1,opt,name=type,proto3,enum=dialog.PeerType" json:"type,omitempty"`
	Id    int32                        `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	StrId *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=str_id,json=strId" json:"str_id,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptorPeers, []int{0} }

func (m *Peer) GetType() PeerType {
	if m != nil {
		return m.Type
	}
	return PEERTYPE_UNKNOWN
}

func (m *Peer) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Peer) GetStrId() *google_protobuf.StringValue {
	if m != nil {
		return m.StrId
	}
	return nil
}

// Out peer with access hash
type OutPeer struct {
	Type       PeerType                     `protobuf:"varint,1,opt,name=type,proto3,enum=dialog.PeerType" json:"type,omitempty"`
	Id         int32                        `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash int64                        `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	StrId      *google_protobuf.StringValue `protobuf:"bytes,4,opt,name=str_id,json=strId" json:"str_id,omitempty"`
}

func (m *OutPeer) Reset()                    { *m = OutPeer{} }
func (*OutPeer) ProtoMessage()               {}
func (*OutPeer) Descriptor() ([]byte, []int) { return fileDescriptorPeers, []int{1} }

func (m *OutPeer) GetType() PeerType {
	if m != nil {
		return m.Type
	}
	return PEERTYPE_UNKNOWN
}

func (m *OutPeer) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OutPeer) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *OutPeer) GetStrId() *google_protobuf.StringValue {
	if m != nil {
		return m.StrId
	}
	return nil
}

// User's out peer
type UserOutPeer struct {
	Uid        int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (m *UserOutPeer) Reset()                    { *m = UserOutPeer{} }
func (*UserOutPeer) ProtoMessage()               {}
func (*UserOutPeer) Descriptor() ([]byte, []int) { return fileDescriptorPeers, []int{2} }

func (m *UserOutPeer) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserOutPeer) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// Group's out peer
type GroupOutPeer struct {
	GroupId    int32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (m *GroupOutPeer) Reset()                    { *m = GroupOutPeer{} }
func (*GroupOutPeer) ProtoMessage()               {}
func (*GroupOutPeer) Descriptor() ([]byte, []int) { return fileDescriptorPeers, []int{3} }

func (m *GroupOutPeer) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupOutPeer) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func init() {
	proto.RegisterType((*Peer)(nil), "dialog.Peer")
	proto.RegisterType((*OutPeer)(nil), "dialog.OutPeer")
	proto.RegisterType((*UserOutPeer)(nil), "dialog.UserOutPeer")
	proto.RegisterType((*GroupOutPeer)(nil), "dialog.GroupOutPeer")
	proto.RegisterEnum("dialog.PeerType", PeerType_name, PeerType_value)
}
func (x PeerType) String() string {
	s, ok := PeerType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Peer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Peer)
	if !ok {
		that2, ok := that.(Peer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.StrId.Equal(that1.StrId) {
		return false
	}
	return true
}
func (this *OutPeer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OutPeer)
	if !ok {
		that2, ok := that.(OutPeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.AccessHash != that1.AccessHash {
		return false
	}
	if !this.StrId.Equal(that1.StrId) {
		return false
	}
	return true
}
func (this *UserOutPeer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UserOutPeer)
	if !ok {
		that2, ok := that.(UserOutPeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.AccessHash != that1.AccessHash {
		return false
	}
	return true
}
func (this *GroupOutPeer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GroupOutPeer)
	if !ok {
		that2, ok := that.(GroupOutPeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if this.AccessHash != that1.AccessHash {
		return false
	}
	return true
}
func (this *Peer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.Peer{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.StrId != nil {
		s = append(s, "StrId: "+fmt.Sprintf("%#v", this.StrId)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OutPeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.OutPeer{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	if this.StrId != nil {
		s = append(s, "StrId: "+fmt.Sprintf("%#v", this.StrId)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserOutPeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UserOutPeer{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GroupOutPeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.GroupOutPeer{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPeers(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Peer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Peer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPeers(dAtA, i, uint64(m.Type))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPeers(dAtA, i, uint64(m.Id))
	}
	if m.StrId != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPeers(dAtA, i, uint64(m.StrId.Size()))
		n1, err := m.StrId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *OutPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutPeer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPeers(dAtA, i, uint64(m.Type))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPeers(dAtA, i, uint64(m.Id))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPeers(dAtA, i, uint64(m.AccessHash))
	}
	if m.StrId != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPeers(dAtA, i, uint64(m.StrId.Size()))
		n2, err := m.StrId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *UserOutPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserOutPeer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPeers(dAtA, i, uint64(m.Uid))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPeers(dAtA, i, uint64(m.AccessHash))
	}
	return i, nil
}

func (m *GroupOutPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupOutPeer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPeers(dAtA, i, uint64(m.GroupId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPeers(dAtA, i, uint64(m.AccessHash))
	}
	return i, nil
}

func encodeFixed64Peers(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Peers(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPeers(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Peer) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPeers(uint64(m.Type))
	}
	if m.Id != 0 {
		n += 1 + sovPeers(uint64(m.Id))
	}
	if m.StrId != nil {
		l = m.StrId.Size()
		n += 1 + l + sovPeers(uint64(l))
	}
	return n
}

func (m *OutPeer) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPeers(uint64(m.Type))
	}
	if m.Id != 0 {
		n += 1 + sovPeers(uint64(m.Id))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPeers(uint64(m.AccessHash))
	}
	if m.StrId != nil {
		l = m.StrId.Size()
		n += 1 + l + sovPeers(uint64(l))
	}
	return n
}

func (m *UserOutPeer) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovPeers(uint64(m.Uid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPeers(uint64(m.AccessHash))
	}
	return n
}

func (m *GroupOutPeer) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovPeers(uint64(m.GroupId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPeers(uint64(m.AccessHash))
	}
	return n
}

func sovPeers(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPeers(x uint64) (n int) {
	return sovPeers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Peer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Peer{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`StrId:` + strings.Replace(fmt.Sprintf("%v", this.StrId), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OutPeer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OutPeer{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`AccessHash:` + fmt.Sprintf("%v", this.AccessHash) + `,`,
		`StrId:` + strings.Replace(fmt.Sprintf("%v", this.StrId), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserOutPeer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserOutPeer{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`AccessHash:` + fmt.Sprintf("%v", this.AccessHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GroupOutPeer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GroupOutPeer{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`AccessHash:` + fmt.Sprintf("%v", this.AccessHash) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPeers(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Peer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Peer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Peer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PeerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StrId == nil {
				m.StrId = &google_protobuf.StringValue{}
			}
			if err := m.StrId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PeerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StrId == nil {
				m.StrId = &google_protobuf.StringValue{}
			}
			if err := m.StrId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserOutPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserOutPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserOutPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPeers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupOutPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupOutPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupOutPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPeers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPeers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPeers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPeers
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPeers
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPeers(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPeers = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPeers   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("peers.proto", fileDescriptorPeers) }

var fileDescriptorPeers = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x91, 0xc1, 0x6e, 0xd3, 0x30,
	0x1c, 0xc6, 0xe3, 0xb4, 0xeb, 0xca, 0xbf, 0x65, 0x0a, 0xd1, 0x40, 0x65, 0xda, 0x4c, 0xd5, 0x53,
	0x85, 0x44, 0x3a, 0x6d, 0x0f, 0x80, 0x28, 0x44, 0xa3, 0x42, 0x6a, 0xa3, 0xac, 0x1d, 0xda, 0x01,
	0x55, 0x6e, 0xec, 0xb9, 0x96, 0x42, 0x62, 0xd9, 0xc9, 0xd0, 0xc4, 0x85, 0xf3, 0x4e, 0x3c, 0x01,
	0x67, 0x1e, 0x85, 0x63, 0x8f, 0x1c, 0x69, 0xb8, 0xa0, 0x9d, 0xf6, 0x08, 0xa8, 0xe9, 0x52, 0x8d,
	0x4d, 0x20, 0x81, 0xc4, 0xc9, 0xf2, 0xf7, 0x7d, 0xf6, 0xff, 0xf7, 0xd9, 0x50, 0x93, 0x8c, 0x29,
	0xed, 0x48, 0x15, 0x27, 0xb1, 0x5d, 0xa1, 0x82, 0x84, 0x31, 0xdf, 0xc2, 0x3c, 0x8e, 0x79, 0xc8,
	0x3a, 0xb9, 0x3a, 0x49, 0x4f, 0x3a, 0xef, 0x14, 0x91, 0x72, 0x95, 0xdb, 0xda, 0xbe, 0xf2, 0x89,
	0x14, 0x1d, 0x12, 0x45, 0x71, 0x42, 0x12, 0x11, 0x47, 0x85, 0x7b, 0x8f, 0xb2, 0x13, 0x11, 0x89,
	0xeb, 0xd2, 0x7d, 0x1d, 0x90, 0x90, 0xc8, 0x49, 0xe7, 0x6a, 0x5d, 0xca, 0xad, 0x4f, 0x08, 0xca,
	0x1e, 0x63, 0xca, 0xde, 0x87, 0x72, 0x72, 0x26, 0x59, 0x03, 0x35, 0x51, 0x7b, 0x63, 0xcf, 0x72,
	0x96, 0x1c, 0xce, 0xc2, 0x1b, 0x9e, 0x49, 0xd6, 0xbd, 0x7b, 0x7e, 0xb1, 0x7b, 0x07, 0xd6, 0x4f,
	0x85, 0x16, 0x93, 0x90, 0xf9, 0x79, 0xd8, 0xde, 0x01, 0x53, 0xd0, 0x86, 0xd9, 0x44, 0xed, 0xb5,
	0x9b, 0x01, 0x53, 0x50, 0xbb, 0x0b, 0x15, 0x9d, 0xa8, 0xb1, 0xa0, 0x8d, 0x52, 0x13, 0xb5, 0x6b,
	0x7b, 0xdb, 0xce, 0x92, 0xda, 0x29, 0x5a, 0x39, 0x87, 0x89, 0x12, 0x11, 0x3f, 0x22, 0x61, 0x7a,
	0x6b, 0xc2, 0x9a, 0x4e, 0x54, 0x8f, 0xb6, 0x66, 0x08, 0xd6, 0x07, 0x69, 0xf2, 0xdf, 0x18, 0x9f,
	0x40, 0x8d, 0x04, 0x01, 0xd3, 0x7a, 0x3c, 0x25, 0x7a, 0x9a, 0x83, 0x96, 0xba, 0xf5, 0xf3, 0x8b,
	0xdd, 0x2a, 0x54, 0x28, 0x89, 0x38, 0x53, 0x3e, 0x2c, 0x03, 0x2f, 0x89, 0x9e, 0x5e, 0xab, 0x54,
	0xfe, 0xe7, 0x4a, 0x6f, 0xa0, 0x36, 0xd2, 0x4c, 0x15, 0xad, 0x1e, 0x41, 0x29, 0x15, 0x34, 0x2f,
	0x75, 0x8b, 0x70, 0xe1, 0xdc, 0x44, 0x34, 0xff, 0x8c, 0xd8, 0xe2, 0x50, 0x3f, 0x50, 0x71, 0x2a,
	0x8b, 0xfb, 0xdb, 0x50, 0xe5, 0x8b, 0xfd, 0xf8, 0x77, 0x43, 0xd6, 0x73, 0xbb, 0xf7, 0xb7, 0x83,
	0x1e, 0xbf, 0x87, 0x6a, 0xf1, 0xf4, 0xf6, 0x26, 0x58, 0x9e, 0xeb, 0xfa, 0xc3, 0x63, 0xcf, 0x1d,
	0x8f, 0xfa, 0xaf, 0xfa, 0x83, 0xd7, 0x7d, 0xcb, 0xf8, 0x45, 0xf5, 0xfc, 0xde, 0xd1, 0xb3, 0xa1,
	0x6b, 0x21, 0xdb, 0x86, 0x8d, 0x95, 0x7a, 0xe0, 0x0f, 0x46, 0x9e, 0x65, 0xda, 0x3b, 0xf0, 0x70,
	0xa5, 0xb9, 0xfd, 0xe7, 0xfe, 0xb1, 0x37, 0x74, 0x5f, 0x14, 0x47, 0x4a, 0xb6, 0x05, 0xf5, 0x95,
	0x7d, 0xd8, 0xf3, 0xac, 0x72, 0xd7, 0xcd, 0x9e, 0x3e, 0x80, 0x4d, 0xf1, 0xd6, 0xa1, 0x21, 0x77,
	0xb8, 0x92, 0x81, 0xa3, 0x99, 0x3a, 0x15, 0x01, 0xd3, 0xb3, 0x39, 0x36, 0xbe, 0xce, 0xb1, 0x71,
	0x39, 0xc7, 0xe8, 0x43, 0x86, 0xd1, 0xe7, 0x0c, 0xa3, 0x2f, 0x19, 0x46, 0xb3, 0x0c, 0xa3, 0x6f,
	0x19, 0x46, 0x3f, 0x32, 0x6c, 0x5c, 0x66, 0x18, 0x7d, 0xfc, 0x8e, 0x8d, 0x49, 0x25, 0xff, 0xb7,
	0xfd, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x9a, 0xb7, 0xc9, 0x85, 0x03, 0x00, 0x00,
}
