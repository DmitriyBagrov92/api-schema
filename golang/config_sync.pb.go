// Code generated by protoc-gen-gogo.
// source: config_sync.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Syncing Parameter
type Parameter struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Parameter) Reset()                    { *m = Parameter{} }
func (*Parameter) ProtoMessage()               {}
func (*Parameter) Descriptor() ([]byte, []int) { return fileDescriptorConfigSync, []int{0} }

func (m *Parameter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Parameter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Getting Parameters
type RequestGetParameters struct {
}

func (m *RequestGetParameters) Reset()                    { *m = RequestGetParameters{} }
func (*RequestGetParameters) ProtoMessage()               {}
func (*RequestGetParameters) Descriptor() ([]byte, []int) { return fileDescriptorConfigSync, []int{1} }

type ResponseGetParameters struct {
	Parameters []*Parameter `protobuf:"bytes,1,rep,name=parameters" json:"parameters,omitempty"`
}

func (m *ResponseGetParameters) Reset()                    { *m = ResponseGetParameters{} }
func (*ResponseGetParameters) ProtoMessage()               {}
func (*ResponseGetParameters) Descriptor() ([]byte, []int) { return fileDescriptorConfigSync, []int{2} }

func (m *ResponseGetParameters) GetParameters() []*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// Change parameter value
type RequestEditParameter struct {
	Key   string                       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *RequestEditParameter) Reset()                    { *m = RequestEditParameter{} }
func (*RequestEditParameter) ProtoMessage()               {}
func (*RequestEditParameter) Descriptor() ([]byte, []int) { return fileDescriptorConfigSync, []int{3} }

func (m *RequestEditParameter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RequestEditParameter) GetValue() *google_protobuf.StringValue {
	if m != nil {
		return m.Value
	}
	return nil
}

// Update about parameter change
type UpdateParameterChanged struct {
	Key   string                       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *UpdateParameterChanged) Reset()                    { *m = UpdateParameterChanged{} }
func (*UpdateParameterChanged) ProtoMessage()               {}
func (*UpdateParameterChanged) Descriptor() ([]byte, []int) { return fileDescriptorConfigSync, []int{4} }

func (m *UpdateParameterChanged) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UpdateParameterChanged) GetValue() *google_protobuf.StringValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameter)(nil), "dialog.Parameter")
	proto.RegisterType((*RequestGetParameters)(nil), "dialog.RequestGetParameters")
	proto.RegisterType((*ResponseGetParameters)(nil), "dialog.ResponseGetParameters")
	proto.RegisterType((*RequestEditParameter)(nil), "dialog.RequestEditParameter")
	proto.RegisterType((*UpdateParameterChanged)(nil), "dialog.UpdateParameterChanged")
}
func (this *Parameter) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Parameter)
	if !ok {
		that2, ok := that.(Parameter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *RequestGetParameters) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestGetParameters)
	if !ok {
		that2, ok := that.(RequestGetParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResponseGetParameters) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseGetParameters)
	if !ok {
		that2, ok := that.(ResponseGetParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return false
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return false
		}
	}
	return true
}
func (this *RequestEditParameter) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestEditParameter)
	if !ok {
		that2, ok := that.(RequestEditParameter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *UpdateParameterChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateParameterChanged)
	if !ok {
		that2, ok := that.(UpdateParameterChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *Parameter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.Parameter{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestGetParameters{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseGetParameters{")
	if this.Parameters != nil {
		s = append(s, "Parameters: "+fmt.Sprintf("%#v", this.Parameters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditParameter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestEditParameter{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateParameterChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateParameterChanged{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringConfigSync(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ConfigSync service

type ConfigSyncClient interface {
	GetParameters(ctx context.Context, in *RequestGetParameters, opts ...grpc.CallOption) (*ResponseGetParameters, error)
	EditParameter(ctx context.Context, in *RequestEditParameter, opts ...grpc.CallOption) (*ResponseSeq, error)
}

type configSyncClient struct {
	cc *grpc.ClientConn
}

func NewConfigSyncClient(cc *grpc.ClientConn) ConfigSyncClient {
	return &configSyncClient{cc}
}

func (c *configSyncClient) GetParameters(ctx context.Context, in *RequestGetParameters, opts ...grpc.CallOption) (*ResponseGetParameters, error) {
	out := new(ResponseGetParameters)
	err := grpc.Invoke(ctx, "/dialog.ConfigSync/GetParameters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSyncClient) EditParameter(ctx context.Context, in *RequestEditParameter, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.ConfigSync/EditParameter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigSync service

type ConfigSyncServer interface {
	GetParameters(context.Context, *RequestGetParameters) (*ResponseGetParameters, error)
	EditParameter(context.Context, *RequestEditParameter) (*ResponseSeq, error)
}

func RegisterConfigSyncServer(s *grpc.Server, srv ConfigSyncServer) {
	s.RegisterService(&_ConfigSync_serviceDesc, srv)
}

func _ConfigSync_GetParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSyncServer).GetParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.ConfigSync/GetParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSyncServer).GetParameters(ctx, req.(*RequestGetParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSync_EditParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSyncServer).EditParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.ConfigSync/EditParameter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSyncServer).EditParameter(ctx, req.(*RequestEditParameter))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.ConfigSync",
	HandlerType: (*ConfigSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetParameters",
			Handler:    _ConfigSync_GetParameters_Handler,
		},
		{
			MethodName: "EditParameter",
			Handler:    _ConfigSync_EditParameter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config_sync.proto",
}

func (m *Parameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Parameter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfigSync(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfigSync(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *RequestGetParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetParameters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResponseGetParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetParameters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Parameters) > 0 {
		for _, msg := range m.Parameters {
			dAtA[i] = 0xa
			i++
			i = encodeVarintConfigSync(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestEditParameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditParameter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfigSync(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfigSync(dAtA, i, uint64(m.Value.Size()))
		n1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *UpdateParameterChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateParameterChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfigSync(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfigSync(dAtA, i, uint64(m.Value.Size()))
		n2, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeFixed64ConfigSync(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ConfigSync(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintConfigSync(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Parameter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovConfigSync(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovConfigSync(uint64(l))
	}
	return n
}

func (m *RequestGetParameters) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ResponseGetParameters) Size() (n int) {
	var l int
	_ = l
	if len(m.Parameters) > 0 {
		for _, e := range m.Parameters {
			l = e.Size()
			n += 1 + l + sovConfigSync(uint64(l))
		}
	}
	return n
}

func (m *RequestEditParameter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovConfigSync(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovConfigSync(uint64(l))
	}
	return n
}

func (m *UpdateParameterChanged) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovConfigSync(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovConfigSync(uint64(l))
	}
	return n
}

func sovConfigSync(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConfigSync(x uint64) (n int) {
	return sovConfigSync(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Parameter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Parameter{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetParameters{`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseGetParameters{`,
		`Parameters:` + strings.Replace(fmt.Sprintf("%v", this.Parameters), "Parameter", "Parameter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditParameter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditParameter{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateParameterChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateParameterChanged{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringConfigSync(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Parameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Parameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Parameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConfigSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters, &Parameter{})
			if err := m.Parameters[len(m.Parameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditParameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditParameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditParameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &google_protobuf.StringValue{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateParameterChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateParameterChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateParameterChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &google_protobuf.StringValue{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfigSync(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfigSync
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthConfigSync
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfigSync
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfigSync(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfigSync = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfigSync   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("config_sync.proto", fileDescriptorConfigSync) }

var fileDescriptorConfigSync = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x52, 0xbf, 0x6f, 0xd3, 0x40,
	0x18, 0xcd, 0xb5, 0x22, 0x90, 0xaf, 0x64, 0x88, 0xfb, 0x83, 0x10, 0xa5, 0x47, 0xf1, 0x80, 0xaa,
	0x0a, 0xd9, 0x6d, 0x60, 0xca, 0x12, 0xd4, 0xaa, 0xea, 0x5a, 0x39, 0x82, 0x15, 0x5d, 0xec, 0x2f,
	0xee, 0x09, 0xe7, 0xee, 0xea, 0x73, 0x82, 0x02, 0x0b, 0x62, 0xec, 0x84, 0xc4, 0xc0, 0xbf, 0xc0,
	0x9f, 0xc2, 0x58, 0x89, 0x85, 0x91, 0x1c, 0x0c, 0xa8, 0x53, 0x67, 0x26, 0x94, 0x38, 0x71, 0xe3,
	0x12, 0x81, 0x58, 0x98, 0x2c, 0xbf, 0xf7, 0xee, 0xde, 0xf7, 0xbd, 0x77, 0x50, 0xf1, 0xa5, 0xe8,
	0xf2, 0xf0, 0xb9, 0x1e, 0x0a, 0xdf, 0x51, 0xb1, 0x4c, 0xa4, 0x55, 0x0c, 0x38, 0x8b, 0x64, 0x58,
	0xa3, 0xa1, 0x94, 0x61, 0x84, 0xee, 0x04, 0xed, 0xf4, 0xbb, 0xee, 0xcb, 0x98, 0x29, 0x85, 0xb1,
	0x4e, 0x75, 0xb5, 0xfa, 0x94, 0x67, 0x8a, 0xbb, 0x4c, 0x08, 0x99, 0xb0, 0x84, 0x4b, 0x31, 0x63,
	0x2b, 0x01, 0x76, 0xb9, 0xe0, 0xf3, 0xd0, 0x6a, 0x8f, 0x6b, 0x1f, 0xa3, 0x88, 0x09, 0x94, 0xfd,
	0x19, 0xb8, 0xae, 0x7d, 0x16, 0x31, 0xd5, 0x71, 0xa7, 0xdf, 0x14, 0xb6, 0x8f, 0xa1, 0x74, 0xcc,
	0x62, 0xd6, 0xc3, 0x04, 0x63, 0xeb, 0x1e, 0x2c, 0xbf, 0xc0, 0x61, 0x95, 0x6c, 0x91, 0xed, 0xd2,
	0x7e, 0xf9, 0xec, 0x62, 0xb7, 0x04, 0x37, 0x07, 0x5c, 0xf3, 0x4e, 0x84, 0xde, 0x98, 0xb1, 0x6c,
	0xb8, 0x31, 0x60, 0x51, 0x1f, 0xab, 0x4b, 0x13, 0xc9, 0xed, 0xb3, 0x8b, 0xdd, 0x5b, 0x50, 0x3c,
	0xe1, 0x41, 0x80, 0xc2, 0x4b, 0x29, 0xfb, 0x31, 0xac, 0x79, 0x78, 0xda, 0x47, 0x9d, 0x1c, 0x61,
	0x92, 0xdd, 0xad, 0x9b, 0x75, 0xd3, 0xba, 0x0b, 0x77, 0x78, 0xcf, 0x09, 0xa2, 0xd0, 0x09, 0x63,
	0xe5, 0x3b, 0x47, 0xb1, 0xf2, 0xa7, 0x52, 0x9b, 0xc3, 0xba, 0x87, 0x5a, 0x49, 0xa1, 0x31, 0x77,
	0xcc, 0xda, 0x03, 0x50, 0xd9, 0x5f, 0x95, 0x6c, 0x2d, 0x6f, 0xaf, 0x34, 0x2a, 0x4e, 0x1a, 0x9d,
	0x93, 0xe9, 0xbc, 0x39, 0x51, 0x73, 0xd3, 0xb4, 0x6a, 0x50, 0xfd, 0xdd, 0x29, 0xbd, 0xde, 0xfe,
	0x40, 0xb2, 0x09, 0x0f, 0x03, 0x9e, 0xfc, 0xc3, 0xfa, 0x4f, 0xe6, 0xd7, 0x5f, 0x69, 0xd4, 0x9d,
	0xb4, 0x19, 0x67, 0xd6, 0x9c, 0xd3, 0x4e, 0x62, 0x2e, 0xc2, 0x67, 0x63, 0xcd, 0xc2, 0x70, 0xfe,
	0x12, 0xc2, 0x6b, 0xd8, 0x78, 0xaa, 0x02, 0x96, 0x60, 0x36, 0xd3, 0xc1, 0x09, 0x13, 0x21, 0x06,
	0xff, 0x61, 0xb4, 0xc6, 0x4f, 0x02, 0x70, 0x30, 0x79, 0xa4, 0xed, 0xa1, 0xf0, 0xad, 0x57, 0x50,
	0xce, 0x17, 0x51, 0x9f, 0x85, 0xbe, 0xa8, 0xdd, 0xda, 0xe6, 0x15, 0xbb, 0xa0, 0x45, 0xfb, 0xe1,
	0xdb, 0xcf, 0xdf, 0xdf, 0x2f, 0x3d, 0xb0, 0xef, 0xbb, 0x83, 0x3d, 0x77, 0xbc, 0xb7, 0x7b, 0x65,
	0xe5, 0xe6, 0xdf, 0x09, 0xd9, 0xb1, 0x14, 0x94, 0xf3, 0xcd, 0x5c, 0xf7, 0xce, 0xb1, 0xb5, 0xd5,
	0xeb, 0xde, 0x6d, 0x3c, 0xfd, 0xb3, 0x63, 0xee, 0x7c, 0x93, 0xec, 0xec, 0x1f, 0x9a, 0xd6, 0x06,
	0xac, 0xcd, 0xf7, 0xa2, 0x31, 0x1e, 0x70, 0x1f, 0xf5, 0xf9, 0x88, 0x16, 0xbe, 0x8c, 0x68, 0xe1,
	0x72, 0x44, 0xc9, 0x1b, 0x43, 0xc9, 0x47, 0x43, 0xc9, 0x27, 0x43, 0xc9, 0xb9, 0xa1, 0xe4, 0xab,
	0xa1, 0xe4, 0x87, 0xa1, 0x85, 0x4b, 0x43, 0xc9, 0xbb, 0x6f, 0xb4, 0xd0, 0x29, 0x4e, 0xe2, 0x7e,
	0xf4, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x30, 0xc1, 0x81, 0x79, 0xee, 0x03, 0x00, 0x00,
}
