// Code generated by protoc-gen-gogo.
// source: counters.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Unread dialogs
type UnreadDialog struct {
	Peer    *Peer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Counter int32 `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (m *UnreadDialog) Reset()                    { *m = UnreadDialog{} }
func (*UnreadDialog) ProtoMessage()               {}
func (*UnreadDialog) Descriptor() ([]byte, []int) { return fileDescriptorCounters, []int{0} }

func (m *UnreadDialog) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UnreadDialog) GetCounter() int32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

type AppCounters struct {
	// / Global unread counter
	GlobalCounter *google_protobuf.Int32Value `protobuf:"bytes,1,opt,name=global_counter,json=globalCounter" json:"global_counter,omitempty"`
	// / Global count of dialogs with positive counter values
	GlobalDialogsCounter *google_protobuf.Int32Value `protobuf:"bytes,2,opt,name=global_dialogs_counter,json=globalDialogsCounter" json:"global_dialogs_counter,omitempty"`
	// / map of chat peer id to unread to counters
	UnreadDialogs []*UnreadDialog `protobuf:"bytes,3,rep,name=unread_dialogs,json=unreadDialogs" json:"unread_dialogs,omitempty"`
}

func (m *AppCounters) Reset()                    { *m = AppCounters{} }
func (*AppCounters) ProtoMessage()               {}
func (*AppCounters) Descriptor() ([]byte, []int) { return fileDescriptorCounters, []int{1} }

func (m *AppCounters) GetGlobalCounter() *google_protobuf.Int32Value {
	if m != nil {
		return m.GlobalCounter
	}
	return nil
}

func (m *AppCounters) GetGlobalDialogsCounter() *google_protobuf.Int32Value {
	if m != nil {
		return m.GlobalDialogsCounter
	}
	return nil
}

func (m *AppCounters) GetUnreadDialogs() []*UnreadDialog {
	if m != nil {
		return m.UnreadDialogs
	}
	return nil
}

// / deprecated
type UpdateCountersChanged struct {
	Counters *AppCounters                `protobuf:"bytes,1,opt,name=counters" json:"counters,omitempty"`
	Ts       *google_protobuf.Int64Value `protobuf:"bytes,2,opt,name=ts" json:"ts,omitempty"`
}

func (m *UpdateCountersChanged) Reset()                    { *m = UpdateCountersChanged{} }
func (*UpdateCountersChanged) ProtoMessage()               {}
func (*UpdateCountersChanged) Descriptor() ([]byte, []int) { return fileDescriptorCounters, []int{2} }

func (m *UpdateCountersChanged) GetCounters() *AppCounters {
	if m != nil {
		return m.Counters
	}
	return nil
}

func (m *UpdateCountersChanged) GetTs() *google_protobuf.Int64Value {
	if m != nil {
		return m.Ts
	}
	return nil
}

func init() {
	proto.RegisterType((*UnreadDialog)(nil), "dialog.UnreadDialog")
	proto.RegisterType((*AppCounters)(nil), "dialog.AppCounters")
	proto.RegisterType((*UpdateCountersChanged)(nil), "dialog.UpdateCountersChanged")
}
func (this *UnreadDialog) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnreadDialog)
	if !ok {
		that2, ok := that.(UnreadDialog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Counter != that1.Counter {
		return false
	}
	return true
}
func (this *AppCounters) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AppCounters)
	if !ok {
		that2, ok := that.(AppCounters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GlobalCounter.Equal(that1.GlobalCounter) {
		return false
	}
	if !this.GlobalDialogsCounter.Equal(that1.GlobalDialogsCounter) {
		return false
	}
	if len(this.UnreadDialogs) != len(that1.UnreadDialogs) {
		return false
	}
	for i := range this.UnreadDialogs {
		if !this.UnreadDialogs[i].Equal(that1.UnreadDialogs[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateCountersChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateCountersChanged)
	if !ok {
		that2, ok := that.(UpdateCountersChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Counters.Equal(that1.Counters) {
		return false
	}
	if !this.Ts.Equal(that1.Ts) {
		return false
	}
	return true
}
func (this *UnreadDialog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UnreadDialog{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Counter: "+fmt.Sprintf("%#v", this.Counter)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AppCounters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.AppCounters{")
	if this.GlobalCounter != nil {
		s = append(s, "GlobalCounter: "+fmt.Sprintf("%#v", this.GlobalCounter)+",\n")
	}
	if this.GlobalDialogsCounter != nil {
		s = append(s, "GlobalDialogsCounter: "+fmt.Sprintf("%#v", this.GlobalDialogsCounter)+",\n")
	}
	if this.UnreadDialogs != nil {
		s = append(s, "UnreadDialogs: "+fmt.Sprintf("%#v", this.UnreadDialogs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateCountersChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateCountersChanged{")
	if this.Counters != nil {
		s = append(s, "Counters: "+fmt.Sprintf("%#v", this.Counters)+",\n")
	}
	if this.Ts != nil {
		s = append(s, "Ts: "+fmt.Sprintf("%#v", this.Ts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCounters(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UnreadDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnreadDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCounters(dAtA, i, uint64(m.Peer.Size()))
		n1, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Counter != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCounters(dAtA, i, uint64(m.Counter))
	}
	return i, nil
}

func (m *AppCounters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppCounters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GlobalCounter != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCounters(dAtA, i, uint64(m.GlobalCounter.Size()))
		n2, err := m.GlobalCounter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.GlobalDialogsCounter != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCounters(dAtA, i, uint64(m.GlobalDialogsCounter.Size()))
		n3, err := m.GlobalDialogsCounter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.UnreadDialogs) > 0 {
		for _, msg := range m.UnreadDialogs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCounters(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateCountersChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCountersChanged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Counters != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCounters(dAtA, i, uint64(m.Counters.Size()))
		n4, err := m.Counters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Ts != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCounters(dAtA, i, uint64(m.Ts.Size()))
		n5, err := m.Ts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeFixed64Counters(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Counters(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCounters(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UnreadDialog) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovCounters(uint64(l))
	}
	if m.Counter != 0 {
		n += 1 + sovCounters(uint64(m.Counter))
	}
	return n
}

func (m *AppCounters) Size() (n int) {
	var l int
	_ = l
	if m.GlobalCounter != nil {
		l = m.GlobalCounter.Size()
		n += 1 + l + sovCounters(uint64(l))
	}
	if m.GlobalDialogsCounter != nil {
		l = m.GlobalDialogsCounter.Size()
		n += 1 + l + sovCounters(uint64(l))
	}
	if len(m.UnreadDialogs) > 0 {
		for _, e := range m.UnreadDialogs {
			l = e.Size()
			n += 1 + l + sovCounters(uint64(l))
		}
	}
	return n
}

func (m *UpdateCountersChanged) Size() (n int) {
	var l int
	_ = l
	if m.Counters != nil {
		l = m.Counters.Size()
		n += 1 + l + sovCounters(uint64(l))
	}
	if m.Ts != nil {
		l = m.Ts.Size()
		n += 1 + l + sovCounters(uint64(l))
	}
	return n
}

func sovCounters(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCounters(x uint64) (n int) {
	return sovCounters(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UnreadDialog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnreadDialog{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Counter:` + fmt.Sprintf("%v", this.Counter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppCounters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppCounters{`,
		`GlobalCounter:` + strings.Replace(fmt.Sprintf("%v", this.GlobalCounter), "Int32Value", "google_protobuf.Int32Value", 1) + `,`,
		`GlobalDialogsCounter:` + strings.Replace(fmt.Sprintf("%v", this.GlobalDialogsCounter), "Int32Value", "google_protobuf.Int32Value", 1) + `,`,
		`UnreadDialogs:` + strings.Replace(fmt.Sprintf("%v", this.UnreadDialogs), "UnreadDialog", "UnreadDialog", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateCountersChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateCountersChanged{`,
		`Counters:` + strings.Replace(fmt.Sprintf("%v", this.Counters), "AppCounters", "AppCounters", 1) + `,`,
		`Ts:` + strings.Replace(fmt.Sprintf("%v", this.Ts), "Int64Value", "google_protobuf.Int64Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCounters(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UnreadDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCounters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnreadDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnreadDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCounters
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCounters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCounters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppCounters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCounters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppCounters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppCounters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCounters
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalCounter == nil {
				m.GlobalCounter = &google_protobuf.Int32Value{}
			}
			if err := m.GlobalCounter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalDialogsCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCounters
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalDialogsCounter == nil {
				m.GlobalDialogsCounter = &google_protobuf.Int32Value{}
			}
			if err := m.GlobalDialogsCounter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadDialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCounters
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnreadDialogs = append(m.UnreadDialogs, &UnreadDialog{})
			if err := m.UnreadDialogs[len(m.UnreadDialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCounters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCounters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCountersChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCounters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCountersChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCountersChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCounters
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counters == nil {
				m.Counters = &AppCounters{}
			}
			if err := m.Counters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCounters
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ts == nil {
				m.Ts = &google_protobuf.Int64Value{}
			}
			if err := m.Ts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCounters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCounters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCounters(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCounters
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCounters
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCounters
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCounters
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCounters
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCounters(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCounters = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCounters   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("counters.proto", fileDescriptorCounters) }

var fileDescriptorCounters = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0x3f, 0x8f, 0xd3, 0x30,
	0x18, 0xc6, 0xe3, 0x1c, 0xdc, 0x81, 0x73, 0x57, 0x89, 0xd0, 0x3b, 0x55, 0x05, 0x59, 0x55, 0x17,
	0x3a, 0x39, 0xa8, 0x45, 0x0c, 0x0c, 0x20, 0x5a, 0x18, 0x60, 0x02, 0xa4, 0xb2, 0x16, 0x27, 0x71,
	0x53, 0x4b, 0xc6, 0xb6, 0x62, 0xa7, 0xac, 0xcc, 0x0c, 0x08, 0x89, 0x2f, 0xc1, 0x47, 0x61, 0xec,
	0xc8, 0x48, 0xcd, 0x82, 0x98, 0xfa, 0x11, 0x10, 0x71, 0x5c, 0xa2, 0x82, 0x90, 0x98, 0x2c, 0xbd,
	0x7f, 0x9e, 0xf7, 0x79, 0x7e, 0x32, 0xec, 0x64, 0xb2, 0x12, 0x86, 0x96, 0x1a, 0xab, 0x52, 0x1a,
	0x19, 0x1f, 0xe7, 0x8c, 0x70, 0x59, 0xf4, 0x51, 0x21, 0x65, 0xc1, 0x69, 0x52, 0x57, 0xd3, 0x6a,
	0x99, 0xbc, 0x29, 0x89, 0x52, 0xfb, 0xb9, 0xfe, 0xcd, 0xa6, 0x4f, 0x14, 0x4b, 0x88, 0x10, 0xd2,
	0x10, 0xc3, 0xa4, 0xf0, 0xdd, 0x6b, 0x39, 0x5d, 0x32, 0xc1, 0xda, 0xa5, 0x48, 0xd1, 0xdf, 0xdb,
	0xe7, 0x3a, 0x23, 0x9c, 0xa8, 0x34, 0x69, 0x5e, 0x57, 0x1e, 0xae, 0xe0, 0xe9, 0x5c, 0x94, 0x94,
	0xe4, 0x8f, 0x6a, 0x13, 0x71, 0x02, 0x2f, 0xfd, 0xda, 0xea, 0x81, 0x01, 0x18, 0x45, 0xe3, 0x53,
	0xec, 0xbc, 0xe1, 0x67, 0x94, 0x96, 0xd3, 0xb3, 0x77, 0x3f, 0x6e, 0x5f, 0x85, 0x27, 0x6b, 0xa6,
	0x59, 0xca, 0xe9, 0x8b, 0x7a, 0x30, 0xbe, 0x05, 0x4f, 0x9a, 0x3c, 0xbd, 0x70, 0x00, 0x46, 0x97,
	0x0f, 0xa7, 0x7c, 0x77, 0xf8, 0x3e, 0x84, 0xd1, 0x43, 0xa5, 0x66, 0x4d, 0xf8, 0xf8, 0x39, 0xec,
	0x14, 0x5c, 0xa6, 0x84, 0x2f, 0xfc, 0xbe, 0xbb, 0x79, 0x03, 0xbb, 0x9c, 0xd8, 0x73, 0xc0, 0x4f,
	0x84, 0x99, 0x8c, 0x5f, 0x12, 0x5e, 0xd1, 0x43, 0xf1, 0x33, 0xa7, 0xd0, 0x68, 0xc6, 0xaf, 0xe0,
	0x45, 0x23, 0xe9, 0x6c, 0xeb, 0x45, 0xdb, 0xda, 0xff, 0x49, 0x77, 0x9d, 0x92, 0xc3, 0xa2, 0xfd,
	0x85, 0xa7, 0xb0, 0x53, 0xd5, 0xb8, 0xfc, 0x85, 0xde, 0xd1, 0xe0, 0x68, 0x14, 0x8d, 0xbb, 0x1e,
	0x54, 0x1b, 0xe6, 0x1f, 0x6e, 0xab, 0x56, 0x53, 0x0f, 0x3f, 0x02, 0x78, 0x3e, 0x57, 0x39, 0x31,
	0xd4, 0x33, 0x99, 0xad, 0x88, 0x28, 0x68, 0x1e, 0xdf, 0x87, 0x57, 0xfc, 0x1f, 0x69, 0xa0, 0x5c,
	0xf7, 0xfa, 0x2d, 0x82, 0x87, 0xf2, 0xfb, 0x9d, 0xf8, 0x1e, 0x0c, 0x8d, 0xfe, 0x57, 0xe6, 0xbb,
	0x77, 0xfe, 0x9a, 0x39, 0x34, 0x7a, 0xfa, 0xd8, 0x3e, 0xb8, 0x80, 0x5d, 0xf6, 0x1a, 0xe7, 0xbc,
	0xc0, 0x45, 0xa9, 0x32, 0xac, 0x69, 0xb9, 0x66, 0x19, 0xd5, 0x9b, 0x2d, 0x0a, 0xbe, 0x6c, 0x51,
	0xb0, 0xdb, 0x22, 0xf0, 0xd6, 0x22, 0xf0, 0xc9, 0x22, 0xf0, 0xd9, 0x22, 0xb0, 0xb1, 0x08, 0x7c,
	0xb5, 0x08, 0x7c, 0xb7, 0x28, 0xd8, 0x59, 0x04, 0x3e, 0x7c, 0x43, 0x41, 0x7a, 0x5c, 0x9f, 0x9b,
	0xfc, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x56, 0x89, 0xe0, 0xb4, 0xed, 0x02, 0x00, 0x00,
}
