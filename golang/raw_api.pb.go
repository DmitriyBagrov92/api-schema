// Code generated by protoc-gen-gogo.
// source: raw_api.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RequestRawRequest struct {
	Service *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Body    *google_protobuf.BytesValue  `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
}

func (m *RequestRawRequest) Reset()                    { *m = RequestRawRequest{} }
func (*RequestRawRequest) ProtoMessage()               {}
func (*RequestRawRequest) Descriptor() ([]byte, []int) { return fileDescriptorRawApi, []int{0} }

func (m *RequestRawRequest) GetService() *google_protobuf.StringValue {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *RequestRawRequest) GetBody() *google_protobuf.BytesValue {
	if m != nil {
		return m.Body
	}
	return nil
}

type ResponseRawRequest struct {
	Body *google_protobuf.BytesValue `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
}

func (m *ResponseRawRequest) Reset()                    { *m = ResponseRawRequest{} }
func (*ResponseRawRequest) ProtoMessage()               {}
func (*ResponseRawRequest) Descriptor() ([]byte, []int) { return fileDescriptorRawApi, []int{1} }

func (m *ResponseRawRequest) GetBody() *google_protobuf.BytesValue {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestRawRequest)(nil), "dialog.RequestRawRequest")
	proto.RegisterType((*ResponseRawRequest)(nil), "dialog.ResponseRawRequest")
}
func (this *RequestRawRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestRawRequest)
	if !ok {
		that2, ok := that.(RequestRawRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Service.Equal(that1.Service) {
		return false
	}
	if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *ResponseRawRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseRawRequest)
	if !ok {
		that2, ok := that.(ResponseRawRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *RequestRawRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestRawRequest{")
	if this.Service != nil {
		s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	}
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseRawRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseRawRequest{")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRawApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RawAPI service

type RawAPIClient interface {
	RawRequest(ctx context.Context, in *RequestRawRequest, opts ...grpc.CallOption) (*ResponseRawRequest, error)
}

type rawAPIClient struct {
	cc *grpc.ClientConn
}

func NewRawAPIClient(cc *grpc.ClientConn) RawAPIClient {
	return &rawAPIClient{cc}
}

func (c *rawAPIClient) RawRequest(ctx context.Context, in *RequestRawRequest, opts ...grpc.CallOption) (*ResponseRawRequest, error) {
	out := new(ResponseRawRequest)
	err := grpc.Invoke(ctx, "/dialog.RawAPI/RawRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RawAPI service

type RawAPIServer interface {
	RawRequest(context.Context, *RequestRawRequest) (*ResponseRawRequest, error)
}

func RegisterRawAPIServer(s *grpc.Server, srv RawAPIServer) {
	s.RegisterService(&_RawAPI_serviceDesc, srv)
}

func _RawAPI_RawRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawAPIServer).RawRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RawAPI/RawRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawAPIServer).RawRequest(ctx, req.(*RequestRawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RawAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.RawAPI",
	HandlerType: (*RawAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RawRequest",
			Handler:    _RawAPI_RawRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raw_api.proto",
}

func (m *RequestRawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRawRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Service != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRawApi(dAtA, i, uint64(m.Service.Size()))
		n1, err := m.Service.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Body != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRawApi(dAtA, i, uint64(m.Body.Size()))
		n2, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ResponseRawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseRawRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRawApi(dAtA, i, uint64(m.Body.Size()))
		n3, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeFixed64RawApi(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32RawApi(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRawApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RequestRawRequest) Size() (n int) {
	var l int
	_ = l
	if m.Service != nil {
		l = m.Service.Size()
		n += 1 + l + sovRawApi(uint64(l))
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovRawApi(uint64(l))
	}
	return n
}

func (m *ResponseRawRequest) Size() (n int) {
	var l int
	_ = l
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovRawApi(uint64(l))
	}
	return n
}

func sovRawApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRawApi(x uint64) (n int) {
	return sovRawApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestRawRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRawRequest{`,
		`Service:` + strings.Replace(fmt.Sprintf("%v", this.Service), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Body:` + strings.Replace(fmt.Sprintf("%v", this.Body), "BytesValue", "google_protobuf.BytesValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseRawRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseRawRequest{`,
		`Body:` + strings.Replace(fmt.Sprintf("%v", this.Body), "BytesValue", "google_protobuf.BytesValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRawApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestRawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRawApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &google_protobuf.StringValue{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &google_protobuf.BytesValue{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRawApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRawApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseRawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRawApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseRawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseRawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &google_protobuf.BytesValue{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRawApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRawApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRawApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRawApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRawApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRawApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRawApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRawApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRawApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRawApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRawApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("raw_api.proto", fileDescriptorRawApi) }

var fileDescriptorRawApi = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x91, 0x3f, 0x8b, 0xdb, 0x30,
	0x18, 0xc6, 0xad, 0x50, 0x9c, 0x56, 0x6d, 0x86, 0x98, 0xfe, 0x49, 0xdc, 0x54, 0x2d, 0x86, 0x42,
	0xe9, 0x20, 0xa5, 0xe9, 0x16, 0x28, 0xa1, 0x81, 0x50, 0xba, 0x15, 0x17, 0xba, 0x16, 0xd9, 0x56,
	0x5c, 0x15, 0xd7, 0x52, 0x25, 0x27, 0x26, 0x5b, 0xe9, 0x98, 0xa9, 0xd0, 0x2f, 0x71, 0xdf, 0xe0,
	0xbe, 0xc2, 0x8d, 0x81, 0x5b, 0x6e, 0xbc, 0xe8, 0x6e, 0x38, 0x32, 0xe5, 0x23, 0x1c, 0x67, 0x3b,
	0xc4, 0x5c, 0x86, 0x9b, 0x24, 0xde, 0xe7, 0x7d, 0x9f, 0xdf, 0xa3, 0x57, 0xb0, 0xa5, 0x68, 0xfe,
	0x9d, 0x4a, 0x8e, 0xa5, 0x12, 0x99, 0x70, 0xec, 0x88, 0xd3, 0x44, 0xc4, 0x2e, 0x8a, 0x85, 0x88,
	0x13, 0x46, 0x8a, 0x6a, 0x30, 0x9b, 0x92, 0x5c, 0x51, 0x29, 0x99, 0xd2, 0x65, 0x9f, 0xdb, 0xab,
	0x74, 0x2a, 0x39, 0xa1, 0x69, 0x2a, 0x32, 0x9a, 0x71, 0x91, 0xee, 0xd4, 0x76, 0xc4, 0xa6, 0x3c,
	0xe5, 0xf5, 0xd2, 0x13, 0x1d, 0xd2, 0x84, 0xca, 0x80, 0x54, 0x67, 0x59, 0xf6, 0x8e, 0x01, 0x6c,
	0xfb, 0xec, 0xf7, 0x8c, 0xe9, 0xcc, 0xa7, 0x79, 0x75, 0x73, 0x26, 0xb0, 0xa9, 0x99, 0x9a, 0xf3,
	0x90, 0x75, 0xc0, 0x2b, 0xf0, 0xe6, 0xe1, 0xa0, 0x87, 0x4b, 0x1e, 0xde, 0xe5, 0xc1, 0x5f, 0x33,
	0xc5, 0xd3, 0xf8, 0x1b, 0x4d, 0x66, 0x6c, 0xdc, 0x5a, 0x6e, 0xfa, 0x0f, 0x60, 0x73, 0xce, 0x35,
	0x0f, 0x12, 0xe6, 0xef, 0x66, 0x9d, 0x0f, 0xf0, 0x5e, 0x20, 0xa2, 0x45, 0xa7, 0x51, 0x78, 0x3c,
	0x3f, 0xf0, 0x18, 0x2f, 0x32, 0xa6, 0x4b, 0x8b, 0x47, 0xcb, 0x4d, 0xff, 0x3e, 0xb4, 0x7f, 0xf0,
	0x28, 0x62, 0xa9, 0x5f, 0x8c, 0x0d, 0x7b, 0x66, 0xd4, 0x85, 0xcf, 0xf8, 0x2f, 0x1c, 0x25, 0x31,
	0x8e, 0x95, 0x0c, 0xf1, 0x27, 0x25, 0xc3, 0x2a, 0xa3, 0x17, 0x41, 0xc7, 0x67, 0x5a, 0x8a, 0x54,
	0xb3, 0x5a, 0x72, 0x52, 0x21, 0xc1, 0x9d, 0xc8, 0x0a, 0xf2, 0xc2, 0x8c, 0x5c, 0xd8, 0x39, 0x84,
	0x94, 0xce, 0x83, 0x0c, 0xda, 0x3e, 0xcd, 0x3f, 0x7e, 0xf9, 0xec, 0xfc, 0x84, 0xb0, 0xc6, 0xe9,
	0xe2, 0xf2, 0xa3, 0xf0, 0xc1, 0xf2, 0x5c, 0x77, 0x2f, 0xdd, 0x8e, 0xe7, 0xbd, 0xfe, 0x7b, 0x7a,
	0xf9, 0xbf, 0xf1, 0xd2, 0x73, 0xc9, 0xfc, 0x1d, 0xb9, 0xa1, 0x91, 0xd2, 0x9d, 0xec, 0x7b, 0x86,
	0xe0, 0xed, 0x78, 0x62, 0x46, 0x4f, 0xe1, 0xe3, 0x7a, 0xa8, 0x6a, 0xa5, 0x7a, 0xb5, 0x46, 0xd6,
	0xd9, 0x1a, 0x59, 0xdb, 0x35, 0x02, 0x7f, 0x0c, 0x02, 0x47, 0x06, 0x81, 0x13, 0x83, 0xc0, 0xca,
	0x20, 0x70, 0x6e, 0x10, 0xb8, 0x32, 0xc8, 0xda, 0x1a, 0x04, 0xfe, 0x5d, 0x20, 0x2b, 0xb0, 0x8b,
	0x67, 0xbf, 0xbf, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x57, 0xda, 0x73, 0x64, 0x02, 0x00, 0x00,
}
