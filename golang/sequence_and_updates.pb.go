// Code generated by protoc-gen-gogo.
// source: sequence_and_updates.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Sequence update
type UpdateSeqUpdate struct {
	Seq          int32  `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State        []byte `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	UpdateHeader int32  `protobuf:"varint,3,opt,name=update_header,json=updateHeader,proto3" json:"update_header,omitempty"`
	// Types that are valid to be assigned to Update:
	//	*UpdateSeqUpdate_UpdateForceReloadState
	//	*UpdateSeqUpdate_UpdateUserAvatarChanged
	//	*UpdateSeqUpdate_UpdateUserNameChanged
	//	*UpdateSeqUpdate_UpdateUserLocalNameChanged
	//	*UpdateSeqUpdate_UpdateUserContactsChanged
	//	*UpdateSeqUpdate_UpdateUserNickChanged
	//	*UpdateSeqUpdate_UpdateUserAboutChanged
	//	*UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged
	//	*UpdateSeqUpdate_UpdateUserTimeZoneChanged
	//	*UpdateSeqUpdate_UpdateUserBotCommandsChanged
	//	*UpdateSeqUpdate_UpdateUserExtChanged
	//	*UpdateSeqUpdate_UpdateUserFullExtChanged
	//	*UpdateSeqUpdate_UpdateUserSexChanged
	//	*UpdateSeqUpdate_UpdateUserCustomProfileChanged
	//	*UpdateSeqUpdate_UpdateUserStatusChanged
	//	*UpdateSeqUpdate_UpdateContactRegistered
	//	*UpdateSeqUpdate_UpdateContactsAdded
	//	*UpdateSeqUpdate_UpdateContactsAddTaskSuspended
	//	*UpdateSeqUpdate_UpdateContactsRemoved
	//	*UpdateSeqUpdate_UpdateUserBlocked
	//	*UpdateSeqUpdate_UpdateUserUnblocked
	//	*UpdateSeqUpdate_UpdateInteractiveMediaEvent
	//	*UpdateSeqUpdate_UpdateMessage
	//	*UpdateSeqUpdate_UpdateMessageContentChanged
	//	*UpdateSeqUpdate_UpdateMessageSent
	//	*UpdateSeqUpdate_UpdateMessageReceived
	//	*UpdateSeqUpdate_UpdateMessageRead
	//	*UpdateSeqUpdate_UpdateMessageReadByMe
	//	*UpdateSeqUpdate_UpdateMessageDelete
	//	*UpdateSeqUpdate_UpdateChatClear
	//	*UpdateSeqUpdate_UpdateChatDelete
	//	*UpdateSeqUpdate_UpdateChatArchive
	//	*UpdateSeqUpdate_UpdateChatGroupsChanged
	//	*UpdateSeqUpdate_UpdateReactionsUpdate
	//	*UpdateSeqUpdate_UpdateDialogFavouriteChanged
	//	*UpdateSeqUpdate_UpdatePinnedMessagesChanged
	//	*UpdateSeqUpdate_UpdateGroupTitleChanged
	//	*UpdateSeqUpdate_UpdateGroupAvatarChanged
	//	*UpdateSeqUpdate_UpdateGroupTopicChanged
	//	*UpdateSeqUpdate_UpdateGroupAboutChanged
	//	*UpdateSeqUpdate_UpdateGroupOwnerChanged
	//	*UpdateSeqUpdate_UpdateGroupHistoryShared
	//	*UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged
	//	*UpdateSeqUpdate_UpdateGroupCanViewMembersChanged
	//	*UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged
	//	*UpdateSeqUpdate_UpdateGroupMemberChanged
	//	*UpdateSeqUpdate_UpdateGroupMembersBecameAsync
	//	*UpdateSeqUpdate_UpdateGroupMembersUpdated
	//	*UpdateSeqUpdate_UpdateGroupMemberDiff
	//	*UpdateSeqUpdate_UpdateGroupMembersCountChanged
	//	*UpdateSeqUpdate_UpdateGroupMemberAdminChanged
	//	*UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged
	//	*UpdateSeqUpdate_UpdateGroupInviteObsolete
	//	*UpdateSeqUpdate_UpdateGroupUserInvitedObsolete
	//	*UpdateSeqUpdate_UpdateGroupUserLeaveObsolete
	//	*UpdateSeqUpdate_UpdateGroupUserKickObsolete
	//	*UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete
	//	*UpdateSeqUpdate_UpdateGroupTitleChangedObsolete
	//	*UpdateSeqUpdate_UpdateGroupTopicChangedObsolete
	//	*UpdateSeqUpdate_UpdateGroupAboutChangedObsolete
	//	*UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete
	//	*UpdateSeqUpdate_UpdateGroupShortnameChanged
	//	*UpdateSeqUpdate_UpdateStickerCollectionsChanged
	//	*UpdateSeqUpdate_UpdateStickerPackRemoved
	//	*UpdateSeqUpdate_UpdateStickerPackAdded
	//	*UpdateSeqUpdate_UpdatePauseNotifications
	//	*UpdateSeqUpdate_UpdateRestoreNotifications
	//	*UpdateSeqUpdate_UpdateTyping
	//	*UpdateSeqUpdate_UpdateTypingStop
	//	*UpdateSeqUpdate_UpdateUserOnline
	//	*UpdateSeqUpdate_UpdateUserOffline
	//	*UpdateSeqUpdate_UpdateUserLastSeen
	//	*UpdateSeqUpdate_UpdateGroupOnline
	//	*UpdateSeqUpdate_UpdateEventBusDeviceConnected
	//	*UpdateSeqUpdate_UpdateEventBusDeviceDisconnected
	//	*UpdateSeqUpdate_UpdateEventBusMessage
	//	*UpdateSeqUpdate_UpdateEventBusDisposed
	//	*UpdateSeqUpdate_UpdateIncomingCallDeprecated
	//	*UpdateSeqUpdate_UpdateIncomingCall
	//	*UpdateSeqUpdate_UpdateCallHandled
	//	*UpdateSeqUpdate_UpdateCallDisposed
	//	*UpdateSeqUpdate_UpdateParameterChanged
	//	*UpdateSeqUpdate_UpdateRawUpdate
	//	*UpdateSeqUpdate_UpdateEmptyUpdate
	//	*UpdateSeqUpdate_UpdateCountersChanged
	//	*UpdateSeqUpdate_UpdateConfig
	//	*UpdateSeqUpdate_UpdateSpaceModified
	//	*UpdateSeqUpdate_UpdateSpaceMemberModified
	//	*UpdateSeqUpdate_UpdateMessageRejectedByHook
	//	*UpdateSeqUpdate_UpdateMessageEditRejectedByHook
	Update isUpdateSeqUpdate_Update `protobuf_oneof:"update"`
}

func (m *UpdateSeqUpdate) Reset()      { *m = UpdateSeqUpdate{} }
func (*UpdateSeqUpdate) ProtoMessage() {}
func (*UpdateSeqUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{0}
}

type isUpdateSeqUpdate_Update interface {
	isUpdateSeqUpdate_Update()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type UpdateSeqUpdate_UpdateForceReloadState struct {
	UpdateForceReloadState *UpdateForceReloadState `protobuf:"bytes,4,opt,name=updateForceReloadState,oneof"`
}
type UpdateSeqUpdate_UpdateUserAvatarChanged struct {
	UpdateUserAvatarChanged *UpdateUserAvatarChanged `protobuf:"bytes,5,opt,name=updateUserAvatarChanged,oneof"`
}
type UpdateSeqUpdate_UpdateUserNameChanged struct {
	UpdateUserNameChanged *UpdateUserNameChanged `protobuf:"bytes,6,opt,name=updateUserNameChanged,oneof"`
}
type UpdateSeqUpdate_UpdateUserLocalNameChanged struct {
	UpdateUserLocalNameChanged *UpdateUserLocalNameChanged `protobuf:"bytes,7,opt,name=updateUserLocalNameChanged,oneof"`
}
type UpdateSeqUpdate_UpdateUserContactsChanged struct {
	UpdateUserContactsChanged *UpdateUserContactsChanged `protobuf:"bytes,8,opt,name=updateUserContactsChanged,oneof"`
}
type UpdateSeqUpdate_UpdateUserNickChanged struct {
	UpdateUserNickChanged *UpdateUserNickChanged `protobuf:"bytes,9,opt,name=updateUserNickChanged,oneof"`
}
type UpdateSeqUpdate_UpdateUserAboutChanged struct {
	UpdateUserAboutChanged *UpdateUserAboutChanged `protobuf:"bytes,10,opt,name=updateUserAboutChanged,oneof"`
}
type UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged struct {
	UpdateUserPreferredLanguagesChanged *UpdateUserPreferredLanguagesChanged `protobuf:"bytes,11,opt,name=updateUserPreferredLanguagesChanged,oneof"`
}
type UpdateSeqUpdate_UpdateUserTimeZoneChanged struct {
	UpdateUserTimeZoneChanged *UpdateUserTimeZoneChanged `protobuf:"bytes,12,opt,name=updateUserTimeZoneChanged,oneof"`
}
type UpdateSeqUpdate_UpdateUserBotCommandsChanged struct {
	UpdateUserBotCommandsChanged *UpdateUserBotCommandsChanged `protobuf:"bytes,13,opt,name=updateUserBotCommandsChanged,oneof"`
}
type UpdateSeqUpdate_UpdateUserExtChanged struct {
	UpdateUserExtChanged *UpdateUserExtChanged `protobuf:"bytes,14,opt,name=updateUserExtChanged,oneof"`
}
type UpdateSeqUpdate_UpdateUserFullExtChanged struct {
	UpdateUserFullExtChanged *UpdateUserFullExtChanged `protobuf:"bytes,15,opt,name=updateUserFullExtChanged,oneof"`
}
type UpdateSeqUpdate_UpdateUserSexChanged struct {
	UpdateUserSexChanged *UpdateUserSexChanged `protobuf:"bytes,16,opt,name=updateUserSexChanged,oneof"`
}
type UpdateSeqUpdate_UpdateUserCustomProfileChanged struct {
	UpdateUserCustomProfileChanged *UpdateUserCustomProfileChanged `protobuf:"bytes,17,opt,name=updateUserCustomProfileChanged,oneof"`
}
type UpdateSeqUpdate_UpdateUserStatusChanged struct {
	UpdateUserStatusChanged *UpdateUserStatusChanged `protobuf:"bytes,18,opt,name=updateUserStatusChanged,oneof"`
}
type UpdateSeqUpdate_UpdateContactRegistered struct {
	UpdateContactRegistered *UpdateContactRegistered `protobuf:"bytes,19,opt,name=updateContactRegistered,oneof"`
}
type UpdateSeqUpdate_UpdateContactsAdded struct {
	UpdateContactsAdded *UpdateContactsAdded `protobuf:"bytes,20,opt,name=updateContactsAdded,oneof"`
}
type UpdateSeqUpdate_UpdateContactsAddTaskSuspended struct {
	UpdateContactsAddTaskSuspended *UpdateContactsAddTaskSuspended `protobuf:"bytes,21,opt,name=updateContactsAddTaskSuspended,oneof"`
}
type UpdateSeqUpdate_UpdateContactsRemoved struct {
	UpdateContactsRemoved *UpdateContactsRemoved `protobuf:"bytes,22,opt,name=updateContactsRemoved,oneof"`
}
type UpdateSeqUpdate_UpdateUserBlocked struct {
	UpdateUserBlocked *UpdateUserBlocked `protobuf:"bytes,23,opt,name=updateUserBlocked,oneof"`
}
type UpdateSeqUpdate_UpdateUserUnblocked struct {
	UpdateUserUnblocked *UpdateUserUnblocked `protobuf:"bytes,24,opt,name=updateUserUnblocked,oneof"`
}
type UpdateSeqUpdate_UpdateInteractiveMediaEvent struct {
	UpdateInteractiveMediaEvent *UpdateInteractiveMediaEvent `protobuf:"bytes,25,opt,name=updateInteractiveMediaEvent,oneof"`
}
type UpdateSeqUpdate_UpdateMessage struct {
	UpdateMessage *UpdateMessage `protobuf:"bytes,26,opt,name=updateMessage,oneof"`
}
type UpdateSeqUpdate_UpdateMessageContentChanged struct {
	UpdateMessageContentChanged *UpdateMessageContentChanged `protobuf:"bytes,27,opt,name=updateMessageContentChanged,oneof"`
}
type UpdateSeqUpdate_UpdateMessageSent struct {
	UpdateMessageSent *UpdateMessageSent `protobuf:"bytes,28,opt,name=updateMessageSent,oneof"`
}
type UpdateSeqUpdate_UpdateMessageReceived struct {
	UpdateMessageReceived *UpdateMessageReceived `protobuf:"bytes,29,opt,name=updateMessageReceived,oneof"`
}
type UpdateSeqUpdate_UpdateMessageRead struct {
	UpdateMessageRead *UpdateMessageRead `protobuf:"bytes,30,opt,name=updateMessageRead,oneof"`
}
type UpdateSeqUpdate_UpdateMessageReadByMe struct {
	UpdateMessageReadByMe *UpdateMessageReadByMe `protobuf:"bytes,31,opt,name=updateMessageReadByMe,oneof"`
}
type UpdateSeqUpdate_UpdateMessageDelete struct {
	UpdateMessageDelete *UpdateMessageDelete `protobuf:"bytes,32,opt,name=updateMessageDelete,oneof"`
}
type UpdateSeqUpdate_UpdateChatClear struct {
	UpdateChatClear *UpdateChatClear `protobuf:"bytes,33,opt,name=updateChatClear,oneof"`
}
type UpdateSeqUpdate_UpdateChatDelete struct {
	UpdateChatDelete *UpdateChatDelete `protobuf:"bytes,34,opt,name=updateChatDelete,oneof"`
}
type UpdateSeqUpdate_UpdateChatArchive struct {
	UpdateChatArchive *UpdateChatArchive `protobuf:"bytes,35,opt,name=updateChatArchive,oneof"`
}
type UpdateSeqUpdate_UpdateChatGroupsChanged struct {
	UpdateChatGroupsChanged *UpdateChatGroupsChanged `protobuf:"bytes,36,opt,name=updateChatGroupsChanged,oneof"`
}
type UpdateSeqUpdate_UpdateReactionsUpdate struct {
	UpdateReactionsUpdate *UpdateReactionsUpdate `protobuf:"bytes,37,opt,name=updateReactionsUpdate,oneof"`
}
type UpdateSeqUpdate_UpdateDialogFavouriteChanged struct {
	UpdateDialogFavouriteChanged *UpdateDialogFavouriteChanged `protobuf:"bytes,38,opt,name=updateDialogFavouriteChanged,oneof"`
}
type UpdateSeqUpdate_UpdatePinnedMessagesChanged struct {
	UpdatePinnedMessagesChanged *UpdatePinnedMessagesChanged `protobuf:"bytes,39,opt,name=updatePinnedMessagesChanged,oneof"`
}
type UpdateSeqUpdate_UpdateGroupTitleChanged struct {
	UpdateGroupTitleChanged *UpdateGroupTitleChanged `protobuf:"bytes,40,opt,name=updateGroupTitleChanged,oneof"`
}
type UpdateSeqUpdate_UpdateGroupAvatarChanged struct {
	UpdateGroupAvatarChanged *UpdateGroupAvatarChanged `protobuf:"bytes,41,opt,name=updateGroupAvatarChanged,oneof"`
}
type UpdateSeqUpdate_UpdateGroupTopicChanged struct {
	UpdateGroupTopicChanged *UpdateGroupTopicChanged `protobuf:"bytes,42,opt,name=updateGroupTopicChanged,oneof"`
}
type UpdateSeqUpdate_UpdateGroupAboutChanged struct {
	UpdateGroupAboutChanged *UpdateGroupAboutChanged `protobuf:"bytes,43,opt,name=updateGroupAboutChanged,oneof"`
}
type UpdateSeqUpdate_UpdateGroupOwnerChanged struct {
	UpdateGroupOwnerChanged *UpdateGroupOwnerChanged `protobuf:"bytes,44,opt,name=updateGroupOwnerChanged,oneof"`
}
type UpdateSeqUpdate_UpdateGroupHistoryShared struct {
	UpdateGroupHistoryShared *UpdateGroupHistoryShared `protobuf:"bytes,45,opt,name=updateGroupHistoryShared,oneof"`
}
type UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged struct {
	UpdateGroupCanSendMessagesChanged *UpdateGroupCanSendMessagesChanged `protobuf:"bytes,46,opt,name=updateGroupCanSendMessagesChanged,oneof"`
}
type UpdateSeqUpdate_UpdateGroupCanViewMembersChanged struct {
	UpdateGroupCanViewMembersChanged *UpdateGroupCanViewMembersChanged `protobuf:"bytes,47,opt,name=updateGroupCanViewMembersChanged,oneof"`
}
type UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged struct {
	UpdateGroupCanInviteMembersChanged *UpdateGroupCanInviteMembersChanged `protobuf:"bytes,48,opt,name=updateGroupCanInviteMembersChanged,oneof"`
}
type UpdateSeqUpdate_UpdateGroupMemberChanged struct {
	UpdateGroupMemberChanged *UpdateGroupMemberChanged `protobuf:"bytes,49,opt,name=updateGroupMemberChanged,oneof"`
}
type UpdateSeqUpdate_UpdateGroupMembersBecameAsync struct {
	UpdateGroupMembersBecameAsync *UpdateGroupMembersBecameAsync `protobuf:"bytes,50,opt,name=updateGroupMembersBecameAsync,oneof"`
}
type UpdateSeqUpdate_UpdateGroupMembersUpdated struct {
	UpdateGroupMembersUpdated *UpdateGroupMembersUpdated `protobuf:"bytes,51,opt,name=updateGroupMembersUpdated,oneof"`
}
type UpdateSeqUpdate_UpdateGroupMemberDiff struct {
	UpdateGroupMemberDiff *UpdateGroupMemberDiff `protobuf:"bytes,52,opt,name=updateGroupMemberDiff,oneof"`
}
type UpdateSeqUpdate_UpdateGroupMembersCountChanged struct {
	UpdateGroupMembersCountChanged *UpdateGroupMembersCountChanged `protobuf:"bytes,53,opt,name=updateGroupMembersCountChanged,oneof"`
}
type UpdateSeqUpdate_UpdateGroupMemberAdminChanged struct {
	UpdateGroupMemberAdminChanged *UpdateGroupMemberAdminChanged `protobuf:"bytes,54,opt,name=updateGroupMemberAdminChanged,oneof"`
}
type UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged struct {
	UpdateGroupMemberPermissionsChanged *UpdateGroupMemberPermissionsChanged `protobuf:"bytes,55,opt,name=updateGroupMemberPermissionsChanged,oneof"`
}
type UpdateSeqUpdate_UpdateGroupInviteObsolete struct {
	UpdateGroupInviteObsolete *UpdateGroupInviteObsolete `protobuf:"bytes,56,opt,name=updateGroupInviteObsolete,oneof"`
}
type UpdateSeqUpdate_UpdateGroupUserInvitedObsolete struct {
	UpdateGroupUserInvitedObsolete *UpdateGroupUserInvitedObsolete `protobuf:"bytes,57,opt,name=updateGroupUserInvitedObsolete,oneof"`
}
type UpdateSeqUpdate_UpdateGroupUserLeaveObsolete struct {
	UpdateGroupUserLeaveObsolete *UpdateGroupUserLeaveObsolete `protobuf:"bytes,58,opt,name=updateGroupUserLeaveObsolete,oneof"`
}
type UpdateSeqUpdate_UpdateGroupUserKickObsolete struct {
	UpdateGroupUserKickObsolete *UpdateGroupUserKickObsolete `protobuf:"bytes,59,opt,name=updateGroupUserKickObsolete,oneof"`
}
type UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete struct {
	UpdateGroupMembersUpdateObsolete *UpdateGroupMembersUpdateObsolete `protobuf:"bytes,60,opt,name=updateGroupMembersUpdateObsolete,oneof"`
}
type UpdateSeqUpdate_UpdateGroupTitleChangedObsolete struct {
	UpdateGroupTitleChangedObsolete *UpdateGroupTitleChangedObsolete `protobuf:"bytes,61,opt,name=updateGroupTitleChangedObsolete,oneof"`
}
type UpdateSeqUpdate_UpdateGroupTopicChangedObsolete struct {
	UpdateGroupTopicChangedObsolete *UpdateGroupTopicChangedObsolete `protobuf:"bytes,62,opt,name=updateGroupTopicChangedObsolete,oneof"`
}
type UpdateSeqUpdate_UpdateGroupAboutChangedObsolete struct {
	UpdateGroupAboutChangedObsolete *UpdateGroupAboutChangedObsolete `protobuf:"bytes,63,opt,name=updateGroupAboutChangedObsolete,oneof"`
}
type UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete struct {
	UpdateGroupAvatarChangedObsolete *UpdateGroupAvatarChangedObsolete `protobuf:"bytes,64,opt,name=updateGroupAvatarChangedObsolete,oneof"`
}
type UpdateSeqUpdate_UpdateGroupShortnameChanged struct {
	UpdateGroupShortnameChanged *UpdateGroupShortnameChanged `protobuf:"bytes,65,opt,name=updateGroupShortnameChanged,oneof"`
}
type UpdateSeqUpdate_UpdateStickerCollectionsChanged struct {
	UpdateStickerCollectionsChanged *UpdateStickerCollectionsChanged `protobuf:"bytes,66,opt,name=updateStickerCollectionsChanged,oneof"`
}
type UpdateSeqUpdate_UpdateStickerPackRemoved struct {
	UpdateStickerPackRemoved *UpdateStickerPackRemoved `protobuf:"bytes,67,opt,name=updateStickerPackRemoved,oneof"`
}
type UpdateSeqUpdate_UpdateStickerPackAdded struct {
	UpdateStickerPackAdded *UpdateStickerPackAdded `protobuf:"bytes,68,opt,name=updateStickerPackAdded,oneof"`
}
type UpdateSeqUpdate_UpdatePauseNotifications struct {
	UpdatePauseNotifications *UpdatePauseNotifications `protobuf:"bytes,69,opt,name=updatePauseNotifications,oneof"`
}
type UpdateSeqUpdate_UpdateRestoreNotifications struct {
	UpdateRestoreNotifications *UpdateRestoreNotifications `protobuf:"bytes,70,opt,name=updateRestoreNotifications,oneof"`
}
type UpdateSeqUpdate_UpdateTyping struct {
	UpdateTyping *UpdateTyping `protobuf:"bytes,71,opt,name=updateTyping,oneof"`
}
type UpdateSeqUpdate_UpdateTypingStop struct {
	UpdateTypingStop *UpdateTypingStop `protobuf:"bytes,72,opt,name=updateTypingStop,oneof"`
}
type UpdateSeqUpdate_UpdateUserOnline struct {
	UpdateUserOnline *UpdateUserOnline `protobuf:"bytes,73,opt,name=updateUserOnline,oneof"`
}
type UpdateSeqUpdate_UpdateUserOffline struct {
	UpdateUserOffline *UpdateUserOffline `protobuf:"bytes,74,opt,name=updateUserOffline,oneof"`
}
type UpdateSeqUpdate_UpdateUserLastSeen struct {
	UpdateUserLastSeen *UpdateUserLastSeen `protobuf:"bytes,75,opt,name=updateUserLastSeen,oneof"`
}
type UpdateSeqUpdate_UpdateGroupOnline struct {
	UpdateGroupOnline *UpdateGroupOnline `protobuf:"bytes,76,opt,name=updateGroupOnline,oneof"`
}
type UpdateSeqUpdate_UpdateEventBusDeviceConnected struct {
	UpdateEventBusDeviceConnected *UpdateEventBusDeviceConnected `protobuf:"bytes,77,opt,name=updateEventBusDeviceConnected,oneof"`
}
type UpdateSeqUpdate_UpdateEventBusDeviceDisconnected struct {
	UpdateEventBusDeviceDisconnected *UpdateEventBusDeviceDisconnected `protobuf:"bytes,78,opt,name=updateEventBusDeviceDisconnected,oneof"`
}
type UpdateSeqUpdate_UpdateEventBusMessage struct {
	UpdateEventBusMessage *UpdateEventBusMessage `protobuf:"bytes,79,opt,name=updateEventBusMessage,oneof"`
}
type UpdateSeqUpdate_UpdateEventBusDisposed struct {
	UpdateEventBusDisposed *UpdateEventBusDisposed `protobuf:"bytes,80,opt,name=updateEventBusDisposed,oneof"`
}
type UpdateSeqUpdate_UpdateIncomingCallDeprecated struct {
	UpdateIncomingCallDeprecated *UpdateIncomingCallDeprecated `protobuf:"bytes,81,opt,name=updateIncomingCallDeprecated,oneof"`
}
type UpdateSeqUpdate_UpdateIncomingCall struct {
	UpdateIncomingCall *UpdateIncomingCall `protobuf:"bytes,82,opt,name=updateIncomingCall,oneof"`
}
type UpdateSeqUpdate_UpdateCallHandled struct {
	UpdateCallHandled *UpdateCallHandled `protobuf:"bytes,83,opt,name=updateCallHandled,oneof"`
}
type UpdateSeqUpdate_UpdateCallDisposed struct {
	UpdateCallDisposed *UpdateCallDisposed `protobuf:"bytes,84,opt,name=updateCallDisposed,oneof"`
}
type UpdateSeqUpdate_UpdateParameterChanged struct {
	UpdateParameterChanged *UpdateParameterChanged `protobuf:"bytes,85,opt,name=updateParameterChanged,oneof"`
}
type UpdateSeqUpdate_UpdateRawUpdate struct {
	UpdateRawUpdate *UpdateRawUpdate `protobuf:"bytes,86,opt,name=updateRawUpdate,oneof"`
}
type UpdateSeqUpdate_UpdateEmptyUpdate struct {
	UpdateEmptyUpdate *UpdateEmptyUpdate `protobuf:"bytes,87,opt,name=updateEmptyUpdate,oneof"`
}
type UpdateSeqUpdate_UpdateCountersChanged struct {
	UpdateCountersChanged *UpdateCountersChanged `protobuf:"bytes,88,opt,name=updateCountersChanged,oneof"`
}
type UpdateSeqUpdate_UpdateConfig struct {
	UpdateConfig *UpdateConfig `protobuf:"bytes,89,opt,name=updateConfig,oneof"`
}
type UpdateSeqUpdate_UpdateSpaceModified struct {
	UpdateSpaceModified *UpdateSpaceModified `protobuf:"bytes,90,opt,name=updateSpaceModified,oneof"`
}
type UpdateSeqUpdate_UpdateSpaceMemberModified struct {
	UpdateSpaceMemberModified *UpdateSpaceMemberModified `protobuf:"bytes,91,opt,name=updateSpaceMemberModified,oneof"`
}
type UpdateSeqUpdate_UpdateMessageRejectedByHook struct {
	UpdateMessageRejectedByHook *UpdateMessageRejectedByHook `protobuf:"bytes,92,opt,name=updateMessageRejectedByHook,oneof"`
}
type UpdateSeqUpdate_UpdateMessageEditRejectedByHook struct {
	UpdateMessageEditRejectedByHook *UpdateMessageEditRejectedByHook `protobuf:"bytes,93,opt,name=updateMessageEditRejectedByHook,oneof"`
}

func (*UpdateSeqUpdate_UpdateForceReloadState) isUpdateSeqUpdate_Update()              {}
func (*UpdateSeqUpdate_UpdateUserAvatarChanged) isUpdateSeqUpdate_Update()             {}
func (*UpdateSeqUpdate_UpdateUserNameChanged) isUpdateSeqUpdate_Update()               {}
func (*UpdateSeqUpdate_UpdateUserLocalNameChanged) isUpdateSeqUpdate_Update()          {}
func (*UpdateSeqUpdate_UpdateUserContactsChanged) isUpdateSeqUpdate_Update()           {}
func (*UpdateSeqUpdate_UpdateUserNickChanged) isUpdateSeqUpdate_Update()               {}
func (*UpdateSeqUpdate_UpdateUserAboutChanged) isUpdateSeqUpdate_Update()              {}
func (*UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged) isUpdateSeqUpdate_Update() {}
func (*UpdateSeqUpdate_UpdateUserTimeZoneChanged) isUpdateSeqUpdate_Update()           {}
func (*UpdateSeqUpdate_UpdateUserBotCommandsChanged) isUpdateSeqUpdate_Update()        {}
func (*UpdateSeqUpdate_UpdateUserExtChanged) isUpdateSeqUpdate_Update()                {}
func (*UpdateSeqUpdate_UpdateUserFullExtChanged) isUpdateSeqUpdate_Update()            {}
func (*UpdateSeqUpdate_UpdateUserSexChanged) isUpdateSeqUpdate_Update()                {}
func (*UpdateSeqUpdate_UpdateUserCustomProfileChanged) isUpdateSeqUpdate_Update()      {}
func (*UpdateSeqUpdate_UpdateUserStatusChanged) isUpdateSeqUpdate_Update()             {}
func (*UpdateSeqUpdate_UpdateContactRegistered) isUpdateSeqUpdate_Update()             {}
func (*UpdateSeqUpdate_UpdateContactsAdded) isUpdateSeqUpdate_Update()                 {}
func (*UpdateSeqUpdate_UpdateContactsAddTaskSuspended) isUpdateSeqUpdate_Update()      {}
func (*UpdateSeqUpdate_UpdateContactsRemoved) isUpdateSeqUpdate_Update()               {}
func (*UpdateSeqUpdate_UpdateUserBlocked) isUpdateSeqUpdate_Update()                   {}
func (*UpdateSeqUpdate_UpdateUserUnblocked) isUpdateSeqUpdate_Update()                 {}
func (*UpdateSeqUpdate_UpdateInteractiveMediaEvent) isUpdateSeqUpdate_Update()         {}
func (*UpdateSeqUpdate_UpdateMessage) isUpdateSeqUpdate_Update()                       {}
func (*UpdateSeqUpdate_UpdateMessageContentChanged) isUpdateSeqUpdate_Update()         {}
func (*UpdateSeqUpdate_UpdateMessageSent) isUpdateSeqUpdate_Update()                   {}
func (*UpdateSeqUpdate_UpdateMessageReceived) isUpdateSeqUpdate_Update()               {}
func (*UpdateSeqUpdate_UpdateMessageRead) isUpdateSeqUpdate_Update()                   {}
func (*UpdateSeqUpdate_UpdateMessageReadByMe) isUpdateSeqUpdate_Update()               {}
func (*UpdateSeqUpdate_UpdateMessageDelete) isUpdateSeqUpdate_Update()                 {}
func (*UpdateSeqUpdate_UpdateChatClear) isUpdateSeqUpdate_Update()                     {}
func (*UpdateSeqUpdate_UpdateChatDelete) isUpdateSeqUpdate_Update()                    {}
func (*UpdateSeqUpdate_UpdateChatArchive) isUpdateSeqUpdate_Update()                   {}
func (*UpdateSeqUpdate_UpdateChatGroupsChanged) isUpdateSeqUpdate_Update()             {}
func (*UpdateSeqUpdate_UpdateReactionsUpdate) isUpdateSeqUpdate_Update()               {}
func (*UpdateSeqUpdate_UpdateDialogFavouriteChanged) isUpdateSeqUpdate_Update()        {}
func (*UpdateSeqUpdate_UpdatePinnedMessagesChanged) isUpdateSeqUpdate_Update()         {}
func (*UpdateSeqUpdate_UpdateGroupTitleChanged) isUpdateSeqUpdate_Update()             {}
func (*UpdateSeqUpdate_UpdateGroupAvatarChanged) isUpdateSeqUpdate_Update()            {}
func (*UpdateSeqUpdate_UpdateGroupTopicChanged) isUpdateSeqUpdate_Update()             {}
func (*UpdateSeqUpdate_UpdateGroupAboutChanged) isUpdateSeqUpdate_Update()             {}
func (*UpdateSeqUpdate_UpdateGroupOwnerChanged) isUpdateSeqUpdate_Update()             {}
func (*UpdateSeqUpdate_UpdateGroupHistoryShared) isUpdateSeqUpdate_Update()            {}
func (*UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged) isUpdateSeqUpdate_Update()   {}
func (*UpdateSeqUpdate_UpdateGroupCanViewMembersChanged) isUpdateSeqUpdate_Update()    {}
func (*UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged) isUpdateSeqUpdate_Update()  {}
func (*UpdateSeqUpdate_UpdateGroupMemberChanged) isUpdateSeqUpdate_Update()            {}
func (*UpdateSeqUpdate_UpdateGroupMembersBecameAsync) isUpdateSeqUpdate_Update()       {}
func (*UpdateSeqUpdate_UpdateGroupMembersUpdated) isUpdateSeqUpdate_Update()           {}
func (*UpdateSeqUpdate_UpdateGroupMemberDiff) isUpdateSeqUpdate_Update()               {}
func (*UpdateSeqUpdate_UpdateGroupMembersCountChanged) isUpdateSeqUpdate_Update()      {}
func (*UpdateSeqUpdate_UpdateGroupMemberAdminChanged) isUpdateSeqUpdate_Update()       {}
func (*UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged) isUpdateSeqUpdate_Update() {}
func (*UpdateSeqUpdate_UpdateGroupInviteObsolete) isUpdateSeqUpdate_Update()           {}
func (*UpdateSeqUpdate_UpdateGroupUserInvitedObsolete) isUpdateSeqUpdate_Update()      {}
func (*UpdateSeqUpdate_UpdateGroupUserLeaveObsolete) isUpdateSeqUpdate_Update()        {}
func (*UpdateSeqUpdate_UpdateGroupUserKickObsolete) isUpdateSeqUpdate_Update()         {}
func (*UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete) isUpdateSeqUpdate_Update()    {}
func (*UpdateSeqUpdate_UpdateGroupTitleChangedObsolete) isUpdateSeqUpdate_Update()     {}
func (*UpdateSeqUpdate_UpdateGroupTopicChangedObsolete) isUpdateSeqUpdate_Update()     {}
func (*UpdateSeqUpdate_UpdateGroupAboutChangedObsolete) isUpdateSeqUpdate_Update()     {}
func (*UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete) isUpdateSeqUpdate_Update()    {}
func (*UpdateSeqUpdate_UpdateGroupShortnameChanged) isUpdateSeqUpdate_Update()         {}
func (*UpdateSeqUpdate_UpdateStickerCollectionsChanged) isUpdateSeqUpdate_Update()     {}
func (*UpdateSeqUpdate_UpdateStickerPackRemoved) isUpdateSeqUpdate_Update()            {}
func (*UpdateSeqUpdate_UpdateStickerPackAdded) isUpdateSeqUpdate_Update()              {}
func (*UpdateSeqUpdate_UpdatePauseNotifications) isUpdateSeqUpdate_Update()            {}
func (*UpdateSeqUpdate_UpdateRestoreNotifications) isUpdateSeqUpdate_Update()          {}
func (*UpdateSeqUpdate_UpdateTyping) isUpdateSeqUpdate_Update()                        {}
func (*UpdateSeqUpdate_UpdateTypingStop) isUpdateSeqUpdate_Update()                    {}
func (*UpdateSeqUpdate_UpdateUserOnline) isUpdateSeqUpdate_Update()                    {}
func (*UpdateSeqUpdate_UpdateUserOffline) isUpdateSeqUpdate_Update()                   {}
func (*UpdateSeqUpdate_UpdateUserLastSeen) isUpdateSeqUpdate_Update()                  {}
func (*UpdateSeqUpdate_UpdateGroupOnline) isUpdateSeqUpdate_Update()                   {}
func (*UpdateSeqUpdate_UpdateEventBusDeviceConnected) isUpdateSeqUpdate_Update()       {}
func (*UpdateSeqUpdate_UpdateEventBusDeviceDisconnected) isUpdateSeqUpdate_Update()    {}
func (*UpdateSeqUpdate_UpdateEventBusMessage) isUpdateSeqUpdate_Update()               {}
func (*UpdateSeqUpdate_UpdateEventBusDisposed) isUpdateSeqUpdate_Update()              {}
func (*UpdateSeqUpdate_UpdateIncomingCallDeprecated) isUpdateSeqUpdate_Update()        {}
func (*UpdateSeqUpdate_UpdateIncomingCall) isUpdateSeqUpdate_Update()                  {}
func (*UpdateSeqUpdate_UpdateCallHandled) isUpdateSeqUpdate_Update()                   {}
func (*UpdateSeqUpdate_UpdateCallDisposed) isUpdateSeqUpdate_Update()                  {}
func (*UpdateSeqUpdate_UpdateParameterChanged) isUpdateSeqUpdate_Update()              {}
func (*UpdateSeqUpdate_UpdateRawUpdate) isUpdateSeqUpdate_Update()                     {}
func (*UpdateSeqUpdate_UpdateEmptyUpdate) isUpdateSeqUpdate_Update()                   {}
func (*UpdateSeqUpdate_UpdateCountersChanged) isUpdateSeqUpdate_Update()               {}
func (*UpdateSeqUpdate_UpdateConfig) isUpdateSeqUpdate_Update()                        {}
func (*UpdateSeqUpdate_UpdateSpaceModified) isUpdateSeqUpdate_Update()                 {}
func (*UpdateSeqUpdate_UpdateSpaceMemberModified) isUpdateSeqUpdate_Update()           {}
func (*UpdateSeqUpdate_UpdateMessageRejectedByHook) isUpdateSeqUpdate_Update()         {}
func (*UpdateSeqUpdate_UpdateMessageEditRejectedByHook) isUpdateSeqUpdate_Update()     {}

func (m *UpdateSeqUpdate) GetUpdate() isUpdateSeqUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateSeqUpdate) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateSeqUpdate) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateHeader() int32 {
	if m != nil {
		return m.UpdateHeader
	}
	return 0
}

func (m *UpdateSeqUpdate) GetUpdateForceReloadState() *UpdateForceReloadState {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateForceReloadState); ok {
		return x.UpdateForceReloadState
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserAvatarChanged() *UpdateUserAvatarChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserAvatarChanged); ok {
		return x.UpdateUserAvatarChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserNameChanged() *UpdateUserNameChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserNameChanged); ok {
		return x.UpdateUserNameChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserLocalNameChanged() *UpdateUserLocalNameChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserLocalNameChanged); ok {
		return x.UpdateUserLocalNameChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserContactsChanged() *UpdateUserContactsChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserContactsChanged); ok {
		return x.UpdateUserContactsChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserNickChanged() *UpdateUserNickChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserNickChanged); ok {
		return x.UpdateUserNickChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserAboutChanged() *UpdateUserAboutChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserAboutChanged); ok {
		return x.UpdateUserAboutChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserPreferredLanguagesChanged() *UpdateUserPreferredLanguagesChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged); ok {
		return x.UpdateUserPreferredLanguagesChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserTimeZoneChanged() *UpdateUserTimeZoneChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserTimeZoneChanged); ok {
		return x.UpdateUserTimeZoneChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserBotCommandsChanged() *UpdateUserBotCommandsChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserBotCommandsChanged); ok {
		return x.UpdateUserBotCommandsChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserExtChanged() *UpdateUserExtChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserExtChanged); ok {
		return x.UpdateUserExtChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserFullExtChanged() *UpdateUserFullExtChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserFullExtChanged); ok {
		return x.UpdateUserFullExtChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserSexChanged() *UpdateUserSexChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserSexChanged); ok {
		return x.UpdateUserSexChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserCustomProfileChanged() *UpdateUserCustomProfileChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserCustomProfileChanged); ok {
		return x.UpdateUserCustomProfileChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserStatusChanged() *UpdateUserStatusChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserStatusChanged); ok {
		return x.UpdateUserStatusChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateContactRegistered() *UpdateContactRegistered {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateContactRegistered); ok {
		return x.UpdateContactRegistered
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateContactsAdded() *UpdateContactsAdded {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateContactsAdded); ok {
		return x.UpdateContactsAdded
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateContactsAddTaskSuspended() *UpdateContactsAddTaskSuspended {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateContactsAddTaskSuspended); ok {
		return x.UpdateContactsAddTaskSuspended
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateContactsRemoved() *UpdateContactsRemoved {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateContactsRemoved); ok {
		return x.UpdateContactsRemoved
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserBlocked() *UpdateUserBlocked {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserBlocked); ok {
		return x.UpdateUserBlocked
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserUnblocked() *UpdateUserUnblocked {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserUnblocked); ok {
		return x.UpdateUserUnblocked
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateInteractiveMediaEvent() *UpdateInteractiveMediaEvent {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateInteractiveMediaEvent); ok {
		return x.UpdateInteractiveMediaEvent
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessage() *UpdateMessage {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessage); ok {
		return x.UpdateMessage
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageContentChanged() *UpdateMessageContentChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageContentChanged); ok {
		return x.UpdateMessageContentChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageSent() *UpdateMessageSent {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageSent); ok {
		return x.UpdateMessageSent
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageReceived() *UpdateMessageReceived {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageReceived); ok {
		return x.UpdateMessageReceived
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageRead() *UpdateMessageRead {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageRead); ok {
		return x.UpdateMessageRead
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageReadByMe() *UpdateMessageReadByMe {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageReadByMe); ok {
		return x.UpdateMessageReadByMe
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageDelete() *UpdateMessageDelete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageDelete); ok {
		return x.UpdateMessageDelete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateChatClear() *UpdateChatClear {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateChatClear); ok {
		return x.UpdateChatClear
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateChatDelete() *UpdateChatDelete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateChatDelete); ok {
		return x.UpdateChatDelete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateChatArchive() *UpdateChatArchive {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateChatArchive); ok {
		return x.UpdateChatArchive
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateChatGroupsChanged() *UpdateChatGroupsChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateChatGroupsChanged); ok {
		return x.UpdateChatGroupsChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateReactionsUpdate() *UpdateReactionsUpdate {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateReactionsUpdate); ok {
		return x.UpdateReactionsUpdate
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateDialogFavouriteChanged() *UpdateDialogFavouriteChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateDialogFavouriteChanged); ok {
		return x.UpdateDialogFavouriteChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdatePinnedMessagesChanged() *UpdatePinnedMessagesChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdatePinnedMessagesChanged); ok {
		return x.UpdatePinnedMessagesChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupTitleChanged() *UpdateGroupTitleChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupTitleChanged); ok {
		return x.UpdateGroupTitleChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupAvatarChanged() *UpdateGroupAvatarChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupAvatarChanged); ok {
		return x.UpdateGroupAvatarChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupTopicChanged() *UpdateGroupTopicChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupTopicChanged); ok {
		return x.UpdateGroupTopicChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupAboutChanged() *UpdateGroupAboutChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupAboutChanged); ok {
		return x.UpdateGroupAboutChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupOwnerChanged() *UpdateGroupOwnerChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupOwnerChanged); ok {
		return x.UpdateGroupOwnerChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupHistoryShared() *UpdateGroupHistoryShared {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupHistoryShared); ok {
		return x.UpdateGroupHistoryShared
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupCanSendMessagesChanged() *UpdateGroupCanSendMessagesChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged); ok {
		return x.UpdateGroupCanSendMessagesChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupCanViewMembersChanged() *UpdateGroupCanViewMembersChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupCanViewMembersChanged); ok {
		return x.UpdateGroupCanViewMembersChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupCanInviteMembersChanged() *UpdateGroupCanInviteMembersChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged); ok {
		return x.UpdateGroupCanInviteMembersChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMemberChanged() *UpdateGroupMemberChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMemberChanged); ok {
		return x.UpdateGroupMemberChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMembersBecameAsync() *UpdateGroupMembersBecameAsync {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMembersBecameAsync); ok {
		return x.UpdateGroupMembersBecameAsync
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMembersUpdated() *UpdateGroupMembersUpdated {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMembersUpdated); ok {
		return x.UpdateGroupMembersUpdated
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMemberDiff() *UpdateGroupMemberDiff {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMemberDiff); ok {
		return x.UpdateGroupMemberDiff
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMembersCountChanged() *UpdateGroupMembersCountChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMembersCountChanged); ok {
		return x.UpdateGroupMembersCountChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMemberAdminChanged() *UpdateGroupMemberAdminChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMemberAdminChanged); ok {
		return x.UpdateGroupMemberAdminChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMemberPermissionsChanged() *UpdateGroupMemberPermissionsChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged); ok {
		return x.UpdateGroupMemberPermissionsChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupInviteObsolete() *UpdateGroupInviteObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupInviteObsolete); ok {
		return x.UpdateGroupInviteObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupUserInvitedObsolete() *UpdateGroupUserInvitedObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupUserInvitedObsolete); ok {
		return x.UpdateGroupUserInvitedObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupUserLeaveObsolete() *UpdateGroupUserLeaveObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupUserLeaveObsolete); ok {
		return x.UpdateGroupUserLeaveObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupUserKickObsolete() *UpdateGroupUserKickObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupUserKickObsolete); ok {
		return x.UpdateGroupUserKickObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMembersUpdateObsolete() *UpdateGroupMembersUpdateObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete); ok {
		return x.UpdateGroupMembersUpdateObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupTitleChangedObsolete() *UpdateGroupTitleChangedObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupTitleChangedObsolete); ok {
		return x.UpdateGroupTitleChangedObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupTopicChangedObsolete() *UpdateGroupTopicChangedObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupTopicChangedObsolete); ok {
		return x.UpdateGroupTopicChangedObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupAboutChangedObsolete() *UpdateGroupAboutChangedObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupAboutChangedObsolete); ok {
		return x.UpdateGroupAboutChangedObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupAvatarChangedObsolete() *UpdateGroupAvatarChangedObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete); ok {
		return x.UpdateGroupAvatarChangedObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupShortnameChanged() *UpdateGroupShortnameChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupShortnameChanged); ok {
		return x.UpdateGroupShortnameChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateStickerCollectionsChanged() *UpdateStickerCollectionsChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateStickerCollectionsChanged); ok {
		return x.UpdateStickerCollectionsChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateStickerPackRemoved() *UpdateStickerPackRemoved {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateStickerPackRemoved); ok {
		return x.UpdateStickerPackRemoved
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateStickerPackAdded() *UpdateStickerPackAdded {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateStickerPackAdded); ok {
		return x.UpdateStickerPackAdded
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdatePauseNotifications() *UpdatePauseNotifications {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdatePauseNotifications); ok {
		return x.UpdatePauseNotifications
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateRestoreNotifications() *UpdateRestoreNotifications {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateRestoreNotifications); ok {
		return x.UpdateRestoreNotifications
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateTyping() *UpdateTyping {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateTyping); ok {
		return x.UpdateTyping
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateTypingStop() *UpdateTypingStop {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateTypingStop); ok {
		return x.UpdateTypingStop
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserOnline() *UpdateUserOnline {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserOnline); ok {
		return x.UpdateUserOnline
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserOffline() *UpdateUserOffline {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserOffline); ok {
		return x.UpdateUserOffline
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserLastSeen() *UpdateUserLastSeen {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserLastSeen); ok {
		return x.UpdateUserLastSeen
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupOnline() *UpdateGroupOnline {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupOnline); ok {
		return x.UpdateGroupOnline
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateEventBusDeviceConnected() *UpdateEventBusDeviceConnected {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateEventBusDeviceConnected); ok {
		return x.UpdateEventBusDeviceConnected
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateEventBusDeviceDisconnected() *UpdateEventBusDeviceDisconnected {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateEventBusDeviceDisconnected); ok {
		return x.UpdateEventBusDeviceDisconnected
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateEventBusMessage() *UpdateEventBusMessage {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateEventBusMessage); ok {
		return x.UpdateEventBusMessage
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateEventBusDisposed() *UpdateEventBusDisposed {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateEventBusDisposed); ok {
		return x.UpdateEventBusDisposed
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateIncomingCallDeprecated() *UpdateIncomingCallDeprecated {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateIncomingCallDeprecated); ok {
		return x.UpdateIncomingCallDeprecated
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateIncomingCall() *UpdateIncomingCall {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateIncomingCall); ok {
		return x.UpdateIncomingCall
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateCallHandled() *UpdateCallHandled {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateCallHandled); ok {
		return x.UpdateCallHandled
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateCallDisposed() *UpdateCallDisposed {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateCallDisposed); ok {
		return x.UpdateCallDisposed
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateParameterChanged() *UpdateParameterChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateParameterChanged); ok {
		return x.UpdateParameterChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateRawUpdate() *UpdateRawUpdate {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateRawUpdate); ok {
		return x.UpdateRawUpdate
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateEmptyUpdate() *UpdateEmptyUpdate {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateEmptyUpdate); ok {
		return x.UpdateEmptyUpdate
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateCountersChanged() *UpdateCountersChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateCountersChanged); ok {
		return x.UpdateCountersChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateConfig() *UpdateConfig {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateConfig); ok {
		return x.UpdateConfig
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateSpaceModified() *UpdateSpaceModified {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateSpaceModified); ok {
		return x.UpdateSpaceModified
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateSpaceMemberModified() *UpdateSpaceMemberModified {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateSpaceMemberModified); ok {
		return x.UpdateSpaceMemberModified
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageRejectedByHook() *UpdateMessageRejectedByHook {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageRejectedByHook); ok {
		return x.UpdateMessageRejectedByHook
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageEditRejectedByHook() *UpdateMessageEditRejectedByHook {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageEditRejectedByHook); ok {
		return x.UpdateMessageEditRejectedByHook
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UpdateSeqUpdate) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UpdateSeqUpdate_OneofMarshaler, _UpdateSeqUpdate_OneofUnmarshaler, _UpdateSeqUpdate_OneofSizer, []interface{}{
		(*UpdateSeqUpdate_UpdateForceReloadState)(nil),
		(*UpdateSeqUpdate_UpdateUserAvatarChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserNameChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserLocalNameChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserContactsChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserNickChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserAboutChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserTimeZoneChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserBotCommandsChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserExtChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserFullExtChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserSexChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserCustomProfileChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserStatusChanged)(nil),
		(*UpdateSeqUpdate_UpdateContactRegistered)(nil),
		(*UpdateSeqUpdate_UpdateContactsAdded)(nil),
		(*UpdateSeqUpdate_UpdateContactsAddTaskSuspended)(nil),
		(*UpdateSeqUpdate_UpdateContactsRemoved)(nil),
		(*UpdateSeqUpdate_UpdateUserBlocked)(nil),
		(*UpdateSeqUpdate_UpdateUserUnblocked)(nil),
		(*UpdateSeqUpdate_UpdateInteractiveMediaEvent)(nil),
		(*UpdateSeqUpdate_UpdateMessage)(nil),
		(*UpdateSeqUpdate_UpdateMessageContentChanged)(nil),
		(*UpdateSeqUpdate_UpdateMessageSent)(nil),
		(*UpdateSeqUpdate_UpdateMessageReceived)(nil),
		(*UpdateSeqUpdate_UpdateMessageRead)(nil),
		(*UpdateSeqUpdate_UpdateMessageReadByMe)(nil),
		(*UpdateSeqUpdate_UpdateMessageDelete)(nil),
		(*UpdateSeqUpdate_UpdateChatClear)(nil),
		(*UpdateSeqUpdate_UpdateChatDelete)(nil),
		(*UpdateSeqUpdate_UpdateChatArchive)(nil),
		(*UpdateSeqUpdate_UpdateChatGroupsChanged)(nil),
		(*UpdateSeqUpdate_UpdateReactionsUpdate)(nil),
		(*UpdateSeqUpdate_UpdateDialogFavouriteChanged)(nil),
		(*UpdateSeqUpdate_UpdatePinnedMessagesChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupTitleChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupAvatarChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupTopicChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupAboutChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupOwnerChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupHistoryShared)(nil),
		(*UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupCanViewMembersChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupMemberChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupMembersBecameAsync)(nil),
		(*UpdateSeqUpdate_UpdateGroupMembersUpdated)(nil),
		(*UpdateSeqUpdate_UpdateGroupMemberDiff)(nil),
		(*UpdateSeqUpdate_UpdateGroupMembersCountChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupMemberAdminChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupInviteObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupUserInvitedObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupUserLeaveObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupUserKickObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupTitleChangedObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupTopicChangedObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupAboutChangedObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupShortnameChanged)(nil),
		(*UpdateSeqUpdate_UpdateStickerCollectionsChanged)(nil),
		(*UpdateSeqUpdate_UpdateStickerPackRemoved)(nil),
		(*UpdateSeqUpdate_UpdateStickerPackAdded)(nil),
		(*UpdateSeqUpdate_UpdatePauseNotifications)(nil),
		(*UpdateSeqUpdate_UpdateRestoreNotifications)(nil),
		(*UpdateSeqUpdate_UpdateTyping)(nil),
		(*UpdateSeqUpdate_UpdateTypingStop)(nil),
		(*UpdateSeqUpdate_UpdateUserOnline)(nil),
		(*UpdateSeqUpdate_UpdateUserOffline)(nil),
		(*UpdateSeqUpdate_UpdateUserLastSeen)(nil),
		(*UpdateSeqUpdate_UpdateGroupOnline)(nil),
		(*UpdateSeqUpdate_UpdateEventBusDeviceConnected)(nil),
		(*UpdateSeqUpdate_UpdateEventBusDeviceDisconnected)(nil),
		(*UpdateSeqUpdate_UpdateEventBusMessage)(nil),
		(*UpdateSeqUpdate_UpdateEventBusDisposed)(nil),
		(*UpdateSeqUpdate_UpdateIncomingCallDeprecated)(nil),
		(*UpdateSeqUpdate_UpdateIncomingCall)(nil),
		(*UpdateSeqUpdate_UpdateCallHandled)(nil),
		(*UpdateSeqUpdate_UpdateCallDisposed)(nil),
		(*UpdateSeqUpdate_UpdateParameterChanged)(nil),
		(*UpdateSeqUpdate_UpdateRawUpdate)(nil),
		(*UpdateSeqUpdate_UpdateEmptyUpdate)(nil),
		(*UpdateSeqUpdate_UpdateCountersChanged)(nil),
		(*UpdateSeqUpdate_UpdateConfig)(nil),
		(*UpdateSeqUpdate_UpdateSpaceModified)(nil),
		(*UpdateSeqUpdate_UpdateSpaceMemberModified)(nil),
		(*UpdateSeqUpdate_UpdateMessageRejectedByHook)(nil),
		(*UpdateSeqUpdate_UpdateMessageEditRejectedByHook)(nil),
	}
}

func _UpdateSeqUpdate_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UpdateSeqUpdate)
	// update
	switch x := m.Update.(type) {
	case *UpdateSeqUpdate_UpdateForceReloadState:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateForceReloadState); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserAvatarChanged:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserAvatarChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserNameChanged:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserNameChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserLocalNameChanged:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserLocalNameChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserContactsChanged:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserContactsChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserNickChanged:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserNickChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserAboutChanged:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserAboutChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserPreferredLanguagesChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserTimeZoneChanged:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserTimeZoneChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserBotCommandsChanged:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserBotCommandsChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserExtChanged:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserExtChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserFullExtChanged:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserFullExtChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserSexChanged:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserSexChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserCustomProfileChanged:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserCustomProfileChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserStatusChanged:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserStatusChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateContactRegistered:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateContactRegistered); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateContactsAdded:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateContactsAdded); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateContactsAddTaskSuspended:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateContactsAddTaskSuspended); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateContactsRemoved:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateContactsRemoved); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserBlocked:
		_ = b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserBlocked); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserUnblocked:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserUnblocked); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateInteractiveMediaEvent:
		_ = b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateInteractiveMediaEvent); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateMessage:
		_ = b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateMessage); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateMessageContentChanged:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateMessageContentChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateMessageSent:
		_ = b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateMessageSent); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateMessageReceived:
		_ = b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateMessageReceived); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateMessageRead:
		_ = b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateMessageRead); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateMessageReadByMe:
		_ = b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateMessageReadByMe); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateMessageDelete:
		_ = b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateMessageDelete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateChatClear:
		_ = b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateChatClear); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateChatDelete:
		_ = b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateChatDelete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateChatArchive:
		_ = b.EncodeVarint(35<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateChatArchive); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateChatGroupsChanged:
		_ = b.EncodeVarint(36<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateChatGroupsChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateReactionsUpdate:
		_ = b.EncodeVarint(37<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateReactionsUpdate); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateDialogFavouriteChanged:
		_ = b.EncodeVarint(38<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateDialogFavouriteChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdatePinnedMessagesChanged:
		_ = b.EncodeVarint(39<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdatePinnedMessagesChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupTitleChanged:
		_ = b.EncodeVarint(40<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupTitleChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupAvatarChanged:
		_ = b.EncodeVarint(41<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupAvatarChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupTopicChanged:
		_ = b.EncodeVarint(42<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupTopicChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupAboutChanged:
		_ = b.EncodeVarint(43<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupAboutChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupOwnerChanged:
		_ = b.EncodeVarint(44<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupOwnerChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupHistoryShared:
		_ = b.EncodeVarint(45<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupHistoryShared); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged:
		_ = b.EncodeVarint(46<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupCanSendMessagesChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupCanViewMembersChanged:
		_ = b.EncodeVarint(47<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupCanViewMembersChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged:
		_ = b.EncodeVarint(48<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupCanInviteMembersChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupMemberChanged:
		_ = b.EncodeVarint(49<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupMemberChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupMembersBecameAsync:
		_ = b.EncodeVarint(50<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupMembersBecameAsync); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupMembersUpdated:
		_ = b.EncodeVarint(51<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupMembersUpdated); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupMemberDiff:
		_ = b.EncodeVarint(52<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupMemberDiff); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupMembersCountChanged:
		_ = b.EncodeVarint(53<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupMembersCountChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupMemberAdminChanged:
		_ = b.EncodeVarint(54<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupMemberAdminChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged:
		_ = b.EncodeVarint(55<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupMemberPermissionsChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupInviteObsolete:
		_ = b.EncodeVarint(56<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupInviteObsolete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupUserInvitedObsolete:
		_ = b.EncodeVarint(57<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupUserInvitedObsolete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupUserLeaveObsolete:
		_ = b.EncodeVarint(58<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupUserLeaveObsolete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupUserKickObsolete:
		_ = b.EncodeVarint(59<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupUserKickObsolete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete:
		_ = b.EncodeVarint(60<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupMembersUpdateObsolete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupTitleChangedObsolete:
		_ = b.EncodeVarint(61<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupTitleChangedObsolete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupTopicChangedObsolete:
		_ = b.EncodeVarint(62<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupTopicChangedObsolete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupAboutChangedObsolete:
		_ = b.EncodeVarint(63<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupAboutChangedObsolete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete:
		_ = b.EncodeVarint(64<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupAvatarChangedObsolete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupShortnameChanged:
		_ = b.EncodeVarint(65<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupShortnameChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateStickerCollectionsChanged:
		_ = b.EncodeVarint(66<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateStickerCollectionsChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateStickerPackRemoved:
		_ = b.EncodeVarint(67<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateStickerPackRemoved); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateStickerPackAdded:
		_ = b.EncodeVarint(68<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateStickerPackAdded); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdatePauseNotifications:
		_ = b.EncodeVarint(69<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdatePauseNotifications); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateRestoreNotifications:
		_ = b.EncodeVarint(70<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateRestoreNotifications); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateTyping:
		_ = b.EncodeVarint(71<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateTyping); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateTypingStop:
		_ = b.EncodeVarint(72<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateTypingStop); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserOnline:
		_ = b.EncodeVarint(73<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserOnline); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserOffline:
		_ = b.EncodeVarint(74<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserOffline); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserLastSeen:
		_ = b.EncodeVarint(75<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserLastSeen); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupOnline:
		_ = b.EncodeVarint(76<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupOnline); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateEventBusDeviceConnected:
		_ = b.EncodeVarint(77<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateEventBusDeviceConnected); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateEventBusDeviceDisconnected:
		_ = b.EncodeVarint(78<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateEventBusDeviceDisconnected); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateEventBusMessage:
		_ = b.EncodeVarint(79<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateEventBusMessage); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateEventBusDisposed:
		_ = b.EncodeVarint(80<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateEventBusDisposed); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateIncomingCallDeprecated:
		_ = b.EncodeVarint(81<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateIncomingCallDeprecated); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateIncomingCall:
		_ = b.EncodeVarint(82<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateIncomingCall); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateCallHandled:
		_ = b.EncodeVarint(83<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateCallHandled); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateCallDisposed:
		_ = b.EncodeVarint(84<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateCallDisposed); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateParameterChanged:
		_ = b.EncodeVarint(85<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateParameterChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateRawUpdate:
		_ = b.EncodeVarint(86<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateRawUpdate); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateEmptyUpdate:
		_ = b.EncodeVarint(87<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateEmptyUpdate); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateCountersChanged:
		_ = b.EncodeVarint(88<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateCountersChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateConfig:
		_ = b.EncodeVarint(89<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateConfig); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateSpaceModified:
		_ = b.EncodeVarint(90<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateSpaceModified); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateSpaceMemberModified:
		_ = b.EncodeVarint(91<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateSpaceMemberModified); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateMessageRejectedByHook:
		_ = b.EncodeVarint(92<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateMessageRejectedByHook); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateMessageEditRejectedByHook:
		_ = b.EncodeVarint(93<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateMessageEditRejectedByHook); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UpdateSeqUpdate.Update has unexpected type %T", x)
	}
	return nil
}

func _UpdateSeqUpdate_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UpdateSeqUpdate)
	switch tag {
	case 4: // update.updateForceReloadState
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateForceReloadState)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateForceReloadState{msg}
		return true, err
	case 5: // update.updateUserAvatarChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserAvatarChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserAvatarChanged{msg}
		return true, err
	case 6: // update.updateUserNameChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserNameChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserNameChanged{msg}
		return true, err
	case 7: // update.updateUserLocalNameChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserLocalNameChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserLocalNameChanged{msg}
		return true, err
	case 8: // update.updateUserContactsChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserContactsChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserContactsChanged{msg}
		return true, err
	case 9: // update.updateUserNickChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserNickChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserNickChanged{msg}
		return true, err
	case 10: // update.updateUserAboutChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserAboutChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserAboutChanged{msg}
		return true, err
	case 11: // update.updateUserPreferredLanguagesChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserPreferredLanguagesChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged{msg}
		return true, err
	case 12: // update.updateUserTimeZoneChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserTimeZoneChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserTimeZoneChanged{msg}
		return true, err
	case 13: // update.updateUserBotCommandsChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserBotCommandsChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserBotCommandsChanged{msg}
		return true, err
	case 14: // update.updateUserExtChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserExtChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserExtChanged{msg}
		return true, err
	case 15: // update.updateUserFullExtChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserFullExtChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserFullExtChanged{msg}
		return true, err
	case 16: // update.updateUserSexChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserSexChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserSexChanged{msg}
		return true, err
	case 17: // update.updateUserCustomProfileChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserCustomProfileChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserCustomProfileChanged{msg}
		return true, err
	case 18: // update.updateUserStatusChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserStatusChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserStatusChanged{msg}
		return true, err
	case 19: // update.updateContactRegistered
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateContactRegistered)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateContactRegistered{msg}
		return true, err
	case 20: // update.updateContactsAdded
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateContactsAdded)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateContactsAdded{msg}
		return true, err
	case 21: // update.updateContactsAddTaskSuspended
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateContactsAddTaskSuspended)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateContactsAddTaskSuspended{msg}
		return true, err
	case 22: // update.updateContactsRemoved
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateContactsRemoved)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateContactsRemoved{msg}
		return true, err
	case 23: // update.updateUserBlocked
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserBlocked)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserBlocked{msg}
		return true, err
	case 24: // update.updateUserUnblocked
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserUnblocked)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserUnblocked{msg}
		return true, err
	case 25: // update.updateInteractiveMediaEvent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateInteractiveMediaEvent)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateInteractiveMediaEvent{msg}
		return true, err
	case 26: // update.updateMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateMessage)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateMessage{msg}
		return true, err
	case 27: // update.updateMessageContentChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateMessageContentChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateMessageContentChanged{msg}
		return true, err
	case 28: // update.updateMessageSent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateMessageSent)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateMessageSent{msg}
		return true, err
	case 29: // update.updateMessageReceived
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateMessageReceived)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateMessageReceived{msg}
		return true, err
	case 30: // update.updateMessageRead
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateMessageRead)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateMessageRead{msg}
		return true, err
	case 31: // update.updateMessageReadByMe
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateMessageReadByMe)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateMessageReadByMe{msg}
		return true, err
	case 32: // update.updateMessageDelete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateMessageDelete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateMessageDelete{msg}
		return true, err
	case 33: // update.updateChatClear
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateChatClear)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateChatClear{msg}
		return true, err
	case 34: // update.updateChatDelete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateChatDelete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateChatDelete{msg}
		return true, err
	case 35: // update.updateChatArchive
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateChatArchive)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateChatArchive{msg}
		return true, err
	case 36: // update.updateChatGroupsChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateChatGroupsChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateChatGroupsChanged{msg}
		return true, err
	case 37: // update.updateReactionsUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateReactionsUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateReactionsUpdate{msg}
		return true, err
	case 38: // update.updateDialogFavouriteChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateDialogFavouriteChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateDialogFavouriteChanged{msg}
		return true, err
	case 39: // update.updatePinnedMessagesChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdatePinnedMessagesChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdatePinnedMessagesChanged{msg}
		return true, err
	case 40: // update.updateGroupTitleChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupTitleChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupTitleChanged{msg}
		return true, err
	case 41: // update.updateGroupAvatarChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupAvatarChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupAvatarChanged{msg}
		return true, err
	case 42: // update.updateGroupTopicChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupTopicChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupTopicChanged{msg}
		return true, err
	case 43: // update.updateGroupAboutChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupAboutChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupAboutChanged{msg}
		return true, err
	case 44: // update.updateGroupOwnerChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupOwnerChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupOwnerChanged{msg}
		return true, err
	case 45: // update.updateGroupHistoryShared
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupHistoryShared)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupHistoryShared{msg}
		return true, err
	case 46: // update.updateGroupCanSendMessagesChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupCanSendMessagesChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged{msg}
		return true, err
	case 47: // update.updateGroupCanViewMembersChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupCanViewMembersChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupCanViewMembersChanged{msg}
		return true, err
	case 48: // update.updateGroupCanInviteMembersChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupCanInviteMembersChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged{msg}
		return true, err
	case 49: // update.updateGroupMemberChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupMemberChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupMemberChanged{msg}
		return true, err
	case 50: // update.updateGroupMembersBecameAsync
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupMembersBecameAsync)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupMembersBecameAsync{msg}
		return true, err
	case 51: // update.updateGroupMembersUpdated
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupMembersUpdated)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupMembersUpdated{msg}
		return true, err
	case 52: // update.updateGroupMemberDiff
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupMemberDiff)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupMemberDiff{msg}
		return true, err
	case 53: // update.updateGroupMembersCountChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupMembersCountChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupMembersCountChanged{msg}
		return true, err
	case 54: // update.updateGroupMemberAdminChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupMemberAdminChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupMemberAdminChanged{msg}
		return true, err
	case 55: // update.updateGroupMemberPermissionsChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupMemberPermissionsChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged{msg}
		return true, err
	case 56: // update.updateGroupInviteObsolete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupInviteObsolete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupInviteObsolete{msg}
		return true, err
	case 57: // update.updateGroupUserInvitedObsolete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupUserInvitedObsolete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupUserInvitedObsolete{msg}
		return true, err
	case 58: // update.updateGroupUserLeaveObsolete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupUserLeaveObsolete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupUserLeaveObsolete{msg}
		return true, err
	case 59: // update.updateGroupUserKickObsolete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupUserKickObsolete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupUserKickObsolete{msg}
		return true, err
	case 60: // update.updateGroupMembersUpdateObsolete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupMembersUpdateObsolete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete{msg}
		return true, err
	case 61: // update.updateGroupTitleChangedObsolete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupTitleChangedObsolete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupTitleChangedObsolete{msg}
		return true, err
	case 62: // update.updateGroupTopicChangedObsolete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupTopicChangedObsolete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupTopicChangedObsolete{msg}
		return true, err
	case 63: // update.updateGroupAboutChangedObsolete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupAboutChangedObsolete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupAboutChangedObsolete{msg}
		return true, err
	case 64: // update.updateGroupAvatarChangedObsolete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupAvatarChangedObsolete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete{msg}
		return true, err
	case 65: // update.updateGroupShortnameChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupShortnameChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupShortnameChanged{msg}
		return true, err
	case 66: // update.updateStickerCollectionsChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateStickerCollectionsChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateStickerCollectionsChanged{msg}
		return true, err
	case 67: // update.updateStickerPackRemoved
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateStickerPackRemoved)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateStickerPackRemoved{msg}
		return true, err
	case 68: // update.updateStickerPackAdded
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateStickerPackAdded)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateStickerPackAdded{msg}
		return true, err
	case 69: // update.updatePauseNotifications
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdatePauseNotifications)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdatePauseNotifications{msg}
		return true, err
	case 70: // update.updateRestoreNotifications
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateRestoreNotifications)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateRestoreNotifications{msg}
		return true, err
	case 71: // update.updateTyping
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateTyping)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateTyping{msg}
		return true, err
	case 72: // update.updateTypingStop
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateTypingStop)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateTypingStop{msg}
		return true, err
	case 73: // update.updateUserOnline
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserOnline)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserOnline{msg}
		return true, err
	case 74: // update.updateUserOffline
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserOffline)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserOffline{msg}
		return true, err
	case 75: // update.updateUserLastSeen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserLastSeen)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserLastSeen{msg}
		return true, err
	case 76: // update.updateGroupOnline
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupOnline)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupOnline{msg}
		return true, err
	case 77: // update.updateEventBusDeviceConnected
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateEventBusDeviceConnected)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateEventBusDeviceConnected{msg}
		return true, err
	case 78: // update.updateEventBusDeviceDisconnected
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateEventBusDeviceDisconnected)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateEventBusDeviceDisconnected{msg}
		return true, err
	case 79: // update.updateEventBusMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateEventBusMessage)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateEventBusMessage{msg}
		return true, err
	case 80: // update.updateEventBusDisposed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateEventBusDisposed)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateEventBusDisposed{msg}
		return true, err
	case 81: // update.updateIncomingCallDeprecated
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateIncomingCallDeprecated)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateIncomingCallDeprecated{msg}
		return true, err
	case 82: // update.updateIncomingCall
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateIncomingCall)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateIncomingCall{msg}
		return true, err
	case 83: // update.updateCallHandled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateCallHandled)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateCallHandled{msg}
		return true, err
	case 84: // update.updateCallDisposed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateCallDisposed)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateCallDisposed{msg}
		return true, err
	case 85: // update.updateParameterChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateParameterChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateParameterChanged{msg}
		return true, err
	case 86: // update.updateRawUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateRawUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateRawUpdate{msg}
		return true, err
	case 87: // update.updateEmptyUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateEmptyUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateEmptyUpdate{msg}
		return true, err
	case 88: // update.updateCountersChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateCountersChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateCountersChanged{msg}
		return true, err
	case 89: // update.updateConfig
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateConfig)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateConfig{msg}
		return true, err
	case 90: // update.updateSpaceModified
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateSpaceModified)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateSpaceModified{msg}
		return true, err
	case 91: // update.updateSpaceMemberModified
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateSpaceMemberModified)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateSpaceMemberModified{msg}
		return true, err
	case 92: // update.updateMessageRejectedByHook
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateMessageRejectedByHook)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateMessageRejectedByHook{msg}
		return true, err
	case 93: // update.updateMessageEditRejectedByHook
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateMessageEditRejectedByHook)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateMessageEditRejectedByHook{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UpdateSeqUpdate_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UpdateSeqUpdate)
	// update
	switch x := m.Update.(type) {
	case *UpdateSeqUpdate_UpdateForceReloadState:
		s := proto.Size(x.UpdateForceReloadState)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserAvatarChanged:
		s := proto.Size(x.UpdateUserAvatarChanged)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserNameChanged:
		s := proto.Size(x.UpdateUserNameChanged)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserLocalNameChanged:
		s := proto.Size(x.UpdateUserLocalNameChanged)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserContactsChanged:
		s := proto.Size(x.UpdateUserContactsChanged)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserNickChanged:
		s := proto.Size(x.UpdateUserNickChanged)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserAboutChanged:
		s := proto.Size(x.UpdateUserAboutChanged)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged:
		s := proto.Size(x.UpdateUserPreferredLanguagesChanged)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserTimeZoneChanged:
		s := proto.Size(x.UpdateUserTimeZoneChanged)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserBotCommandsChanged:
		s := proto.Size(x.UpdateUserBotCommandsChanged)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserExtChanged:
		s := proto.Size(x.UpdateUserExtChanged)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserFullExtChanged:
		s := proto.Size(x.UpdateUserFullExtChanged)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserSexChanged:
		s := proto.Size(x.UpdateUserSexChanged)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserCustomProfileChanged:
		s := proto.Size(x.UpdateUserCustomProfileChanged)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserStatusChanged:
		s := proto.Size(x.UpdateUserStatusChanged)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateContactRegistered:
		s := proto.Size(x.UpdateContactRegistered)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateContactsAdded:
		s := proto.Size(x.UpdateContactsAdded)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateContactsAddTaskSuspended:
		s := proto.Size(x.UpdateContactsAddTaskSuspended)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateContactsRemoved:
		s := proto.Size(x.UpdateContactsRemoved)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserBlocked:
		s := proto.Size(x.UpdateUserBlocked)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserUnblocked:
		s := proto.Size(x.UpdateUserUnblocked)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateInteractiveMediaEvent:
		s := proto.Size(x.UpdateInteractiveMediaEvent)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateMessage:
		s := proto.Size(x.UpdateMessage)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateMessageContentChanged:
		s := proto.Size(x.UpdateMessageContentChanged)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateMessageSent:
		s := proto.Size(x.UpdateMessageSent)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateMessageReceived:
		s := proto.Size(x.UpdateMessageReceived)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateMessageRead:
		s := proto.Size(x.UpdateMessageRead)
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateMessageReadByMe:
		s := proto.Size(x.UpdateMessageReadByMe)
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateMessageDelete:
		s := proto.Size(x.UpdateMessageDelete)
		n += proto.SizeVarint(32<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateChatClear:
		s := proto.Size(x.UpdateChatClear)
		n += proto.SizeVarint(33<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateChatDelete:
		s := proto.Size(x.UpdateChatDelete)
		n += proto.SizeVarint(34<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateChatArchive:
		s := proto.Size(x.UpdateChatArchive)
		n += proto.SizeVarint(35<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateChatGroupsChanged:
		s := proto.Size(x.UpdateChatGroupsChanged)
		n += proto.SizeVarint(36<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateReactionsUpdate:
		s := proto.Size(x.UpdateReactionsUpdate)
		n += proto.SizeVarint(37<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateDialogFavouriteChanged:
		s := proto.Size(x.UpdateDialogFavouriteChanged)
		n += proto.SizeVarint(38<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdatePinnedMessagesChanged:
		s := proto.Size(x.UpdatePinnedMessagesChanged)
		n += proto.SizeVarint(39<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupTitleChanged:
		s := proto.Size(x.UpdateGroupTitleChanged)
		n += proto.SizeVarint(40<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupAvatarChanged:
		s := proto.Size(x.UpdateGroupAvatarChanged)
		n += proto.SizeVarint(41<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupTopicChanged:
		s := proto.Size(x.UpdateGroupTopicChanged)
		n += proto.SizeVarint(42<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupAboutChanged:
		s := proto.Size(x.UpdateGroupAboutChanged)
		n += proto.SizeVarint(43<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupOwnerChanged:
		s := proto.Size(x.UpdateGroupOwnerChanged)
		n += proto.SizeVarint(44<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupHistoryShared:
		s := proto.Size(x.UpdateGroupHistoryShared)
		n += proto.SizeVarint(45<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged:
		s := proto.Size(x.UpdateGroupCanSendMessagesChanged)
		n += proto.SizeVarint(46<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupCanViewMembersChanged:
		s := proto.Size(x.UpdateGroupCanViewMembersChanged)
		n += proto.SizeVarint(47<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged:
		s := proto.Size(x.UpdateGroupCanInviteMembersChanged)
		n += proto.SizeVarint(48<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupMemberChanged:
		s := proto.Size(x.UpdateGroupMemberChanged)
		n += proto.SizeVarint(49<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupMembersBecameAsync:
		s := proto.Size(x.UpdateGroupMembersBecameAsync)
		n += proto.SizeVarint(50<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupMembersUpdated:
		s := proto.Size(x.UpdateGroupMembersUpdated)
		n += proto.SizeVarint(51<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupMemberDiff:
		s := proto.Size(x.UpdateGroupMemberDiff)
		n += proto.SizeVarint(52<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupMembersCountChanged:
		s := proto.Size(x.UpdateGroupMembersCountChanged)
		n += proto.SizeVarint(53<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupMemberAdminChanged:
		s := proto.Size(x.UpdateGroupMemberAdminChanged)
		n += proto.SizeVarint(54<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged:
		s := proto.Size(x.UpdateGroupMemberPermissionsChanged)
		n += proto.SizeVarint(55<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupInviteObsolete:
		s := proto.Size(x.UpdateGroupInviteObsolete)
		n += proto.SizeVarint(56<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupUserInvitedObsolete:
		s := proto.Size(x.UpdateGroupUserInvitedObsolete)
		n += proto.SizeVarint(57<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupUserLeaveObsolete:
		s := proto.Size(x.UpdateGroupUserLeaveObsolete)
		n += proto.SizeVarint(58<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupUserKickObsolete:
		s := proto.Size(x.UpdateGroupUserKickObsolete)
		n += proto.SizeVarint(59<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete:
		s := proto.Size(x.UpdateGroupMembersUpdateObsolete)
		n += proto.SizeVarint(60<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupTitleChangedObsolete:
		s := proto.Size(x.UpdateGroupTitleChangedObsolete)
		n += proto.SizeVarint(61<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupTopicChangedObsolete:
		s := proto.Size(x.UpdateGroupTopicChangedObsolete)
		n += proto.SizeVarint(62<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupAboutChangedObsolete:
		s := proto.Size(x.UpdateGroupAboutChangedObsolete)
		n += proto.SizeVarint(63<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete:
		s := proto.Size(x.UpdateGroupAvatarChangedObsolete)
		n += proto.SizeVarint(64<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupShortnameChanged:
		s := proto.Size(x.UpdateGroupShortnameChanged)
		n += proto.SizeVarint(65<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateStickerCollectionsChanged:
		s := proto.Size(x.UpdateStickerCollectionsChanged)
		n += proto.SizeVarint(66<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateStickerPackRemoved:
		s := proto.Size(x.UpdateStickerPackRemoved)
		n += proto.SizeVarint(67<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateStickerPackAdded:
		s := proto.Size(x.UpdateStickerPackAdded)
		n += proto.SizeVarint(68<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdatePauseNotifications:
		s := proto.Size(x.UpdatePauseNotifications)
		n += proto.SizeVarint(69<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateRestoreNotifications:
		s := proto.Size(x.UpdateRestoreNotifications)
		n += proto.SizeVarint(70<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateTyping:
		s := proto.Size(x.UpdateTyping)
		n += proto.SizeVarint(71<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateTypingStop:
		s := proto.Size(x.UpdateTypingStop)
		n += proto.SizeVarint(72<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserOnline:
		s := proto.Size(x.UpdateUserOnline)
		n += proto.SizeVarint(73<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserOffline:
		s := proto.Size(x.UpdateUserOffline)
		n += proto.SizeVarint(74<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserLastSeen:
		s := proto.Size(x.UpdateUserLastSeen)
		n += proto.SizeVarint(75<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupOnline:
		s := proto.Size(x.UpdateGroupOnline)
		n += proto.SizeVarint(76<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateEventBusDeviceConnected:
		s := proto.Size(x.UpdateEventBusDeviceConnected)
		n += proto.SizeVarint(77<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateEventBusDeviceDisconnected:
		s := proto.Size(x.UpdateEventBusDeviceDisconnected)
		n += proto.SizeVarint(78<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateEventBusMessage:
		s := proto.Size(x.UpdateEventBusMessage)
		n += proto.SizeVarint(79<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateEventBusDisposed:
		s := proto.Size(x.UpdateEventBusDisposed)
		n += proto.SizeVarint(80<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateIncomingCallDeprecated:
		s := proto.Size(x.UpdateIncomingCallDeprecated)
		n += proto.SizeVarint(81<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateIncomingCall:
		s := proto.Size(x.UpdateIncomingCall)
		n += proto.SizeVarint(82<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateCallHandled:
		s := proto.Size(x.UpdateCallHandled)
		n += proto.SizeVarint(83<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateCallDisposed:
		s := proto.Size(x.UpdateCallDisposed)
		n += proto.SizeVarint(84<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateParameterChanged:
		s := proto.Size(x.UpdateParameterChanged)
		n += proto.SizeVarint(85<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateRawUpdate:
		s := proto.Size(x.UpdateRawUpdate)
		n += proto.SizeVarint(86<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateEmptyUpdate:
		s := proto.Size(x.UpdateEmptyUpdate)
		n += proto.SizeVarint(87<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateCountersChanged:
		s := proto.Size(x.UpdateCountersChanged)
		n += proto.SizeVarint(88<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateConfig:
		s := proto.Size(x.UpdateConfig)
		n += proto.SizeVarint(89<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateSpaceModified:
		s := proto.Size(x.UpdateSpaceModified)
		n += proto.SizeVarint(90<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateSpaceMemberModified:
		s := proto.Size(x.UpdateSpaceMemberModified)
		n += proto.SizeVarint(91<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateMessageRejectedByHook:
		s := proto.Size(x.UpdateMessageRejectedByHook)
		n += proto.SizeVarint(92<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateMessageEditRejectedByHook:
		s := proto.Size(x.UpdateMessageEditRejectedByHook)
		n += proto.SizeVarint(93<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Fat sequence update with additional data
type UpdateFatSeqUpdate struct {
	Seq          int32  `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State        []byte `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	UpdateHeader int32  `protobuf:"varint,3,opt,name=update_header,json=updateHeader,proto3" json:"update_header,omitempty"`
	Update       []byte `protobuf:"bytes,4,opt,name=update,proto3" json:"update,omitempty"`
	// / related users
	Users []*User `protobuf:"bytes,5,rep,name=users" json:"users,omitempty"`
	// / related groups
	Groups []*Group `protobuf:"bytes,6,rep,name=groups" json:"groups,omitempty"`
}

func (m *UpdateFatSeqUpdate) Reset()      { *m = UpdateFatSeqUpdate{} }
func (*UpdateFatSeqUpdate) ProtoMessage() {}
func (*UpdateFatSeqUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{1}
}

func (m *UpdateFatSeqUpdate) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateFatSeqUpdate) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *UpdateFatSeqUpdate) GetUpdateHeader() int32 {
	if m != nil {
		return m.UpdateHeader
	}
	return 0
}

func (m *UpdateFatSeqUpdate) GetUpdate() []byte {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateFatSeqUpdate) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UpdateFatSeqUpdate) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Out of sequence update (for typing and online statuses)
type UpdateWeakUpdate struct {
	Date         int64  `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	UpdateHeader int32  `protobuf:"varint,2,opt,name=update_header,json=updateHeader,proto3" json:"update_header,omitempty"`
	Update       []byte `protobuf:"bytes,3,opt,name=update,proto3" json:"update,omitempty"`
}

func (m *UpdateWeakUpdate) Reset()      { *m = UpdateWeakUpdate{} }
func (*UpdateWeakUpdate) ProtoMessage() {}
func (*UpdateWeakUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{2}
}

func (m *UpdateWeakUpdate) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateWeakUpdate) GetUpdateHeader() int32 {
	if m != nil {
		return m.UpdateHeader
	}
	return 0
}

func (m *UpdateWeakUpdate) GetUpdate() []byte {
	if m != nil {
		return m.Update
	}
	return nil
}

// Fat Weak Update
type UpdateWeakFatUpdate struct {
	Date         int64    `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	UpdateHeader int32    `protobuf:"varint,2,opt,name=update_header,json=updateHeader,proto3" json:"update_header,omitempty"`
	Update       []byte   `protobuf:"bytes,3,opt,name=update,proto3" json:"update,omitempty"`
	Users        []*User  `protobuf:"bytes,4,rep,name=users" json:"users,omitempty"`
	Groups       []*Group `protobuf:"bytes,5,rep,name=groups" json:"groups,omitempty"`
}

func (m *UpdateWeakFatUpdate) Reset()      { *m = UpdateWeakFatUpdate{} }
func (*UpdateWeakFatUpdate) ProtoMessage() {}
func (*UpdateWeakFatUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{3}
}

func (m *UpdateWeakFatUpdate) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateWeakFatUpdate) GetUpdateHeader() int32 {
	if m != nil {
		return m.UpdateHeader
	}
	return 0
}

func (m *UpdateWeakFatUpdate) GetUpdate() []byte {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateWeakFatUpdate) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UpdateWeakFatUpdate) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Notification about requiring performing manual GetDifference
type UpdateSeqUpdateTooLong struct {
}

func (m *UpdateSeqUpdateTooLong) Reset()      { *m = UpdateSeqUpdateTooLong{} }
func (*UpdateSeqUpdateTooLong) ProtoMessage() {}
func (*UpdateSeqUpdateTooLong) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{4}
}

// Update container
type UpdateContainer struct {
	UpdateHeader int32  `protobuf:"varint,1,opt,name=update_header,json=updateHeader,proto3" json:"update_header,omitempty"`
	Update       []byte `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"`
}

func (m *UpdateContainer) Reset()      { *m = UpdateContainer{} }
func (*UpdateContainer) ProtoMessage() {}
func (*UpdateContainer) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{5}
}

func (m *UpdateContainer) GetUpdateHeader() int32 {
	if m != nil {
		return m.UpdateHeader
	}
	return 0
}

func (m *UpdateContainer) GetUpdate() []byte {
	if m != nil {
		return m.Update
	}
	return nil
}

// Combined update
type UpdateCombinedUpdate struct {
	// / start of related sequence intervals
	SeqStart int32 `protobuf:"varint,1,opt,name=seq_start,json=seqStart,proto3" json:"seq_start,omitempty"`
	// / end of related sequence intervals
	SeqEnd int32  `protobuf:"varint,2,opt,name=seq_end,json=seqEnd,proto3" json:"seq_end,omitempty"`
	State  []byte `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// / related users
	Users []*User `protobuf:"bytes,4,rep,name=users" json:"users,omitempty"`
	// / related groups
	Groups  []*Group           `protobuf:"bytes,5,rep,name=groups" json:"groups,omitempty"`
	Updates []*UpdateContainer `protobuf:"bytes,6,rep,name=updates" json:"updates,omitempty"`
	// / related messages
	Messages []*HistoryMessage `protobuf:"bytes,7,rep,name=messages" json:"messages,omitempty"`
}

func (m *UpdateCombinedUpdate) Reset()      { *m = UpdateCombinedUpdate{} }
func (*UpdateCombinedUpdate) ProtoMessage() {}
func (*UpdateCombinedUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{6}
}

func (m *UpdateCombinedUpdate) GetSeqStart() int32 {
	if m != nil {
		return m.SeqStart
	}
	return 0
}

func (m *UpdateCombinedUpdate) GetSeqEnd() int32 {
	if m != nil {
		return m.SeqEnd
	}
	return 0
}

func (m *UpdateCombinedUpdate) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *UpdateCombinedUpdate) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UpdateCombinedUpdate) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *UpdateCombinedUpdate) GetUpdates() []*UpdateContainer {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *UpdateCombinedUpdate) GetMessages() []*HistoryMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Get main sequence state
type RequestGetState struct {
	Optimizations []UpdateOptimization `protobuf:"varint,1,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestGetState) Reset()      { *m = RequestGetState{} }
func (*RequestGetState) ProtoMessage() {}
func (*RequestGetState) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{7}
}

func (m *RequestGetState) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Getting difference of sequence
type RequestGetDifference struct {
	Seq           int32                       `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State         []byte                      `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Optimizations []UpdateOptimization        `protobuf:"varint,3,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
	ConfigHash    *google_protobuf.Int64Value `protobuf:"bytes,4,opt,name=config_hash,json=configHash" json:"config_hash,omitempty"`
}

func (m *RequestGetDifference) Reset()      { *m = RequestGetDifference{} }
func (*RequestGetDifference) ProtoMessage() {}
func (*RequestGetDifference) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{8}
}

func (m *RequestGetDifference) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *RequestGetDifference) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *RequestGetDifference) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

func (m *RequestGetDifference) GetConfigHash() *google_protobuf.Int64Value {
	if m != nil {
		return m.ConfigHash
	}
	return nil
}

// / Updates happens after requested seq number + related peers and entities
type ResponseGetDifference struct {
	Seq        int32                       `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State      []byte                      `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Users      []*User                     `protobuf:"bytes,3,rep,name=users" json:"users,omitempty"`
	Groups     []*Group                    `protobuf:"bytes,6,rep,name=groups" json:"groups,omitempty"`
	Updates    []*UpdateSeqUpdate          `protobuf:"bytes,4,rep,name=updates" json:"updates,omitempty"`
	Messages   []*HistoryMessage           `protobuf:"bytes,7,rep,name=messages" json:"messages,omitempty"`
	NeedMore   bool                        `protobuf:"varint,5,opt,name=need_more,json=needMore,proto3" json:"need_more,omitempty"`
	UsersRefs  []*UserOutPeer              `protobuf:"bytes,8,rep,name=users_refs,json=usersRefs" json:"users_refs,omitempty"`
	GroupsRefs []*GroupOutPeer             `protobuf:"bytes,9,rep,name=groups_refs,json=groupsRefs" json:"groups_refs,omitempty"`
	Config     *Config                     `protobuf:"bytes,10,opt,name=config" json:"config,omitempty"`
	ConfigHash *google_protobuf.Int64Value `protobuf:"bytes,11,opt,name=config_hash,json=configHash" json:"config_hash,omitempty"`
}

func (m *ResponseGetDifference) Reset()      { *m = ResponseGetDifference{} }
func (*ResponseGetDifference) ProtoMessage() {}
func (*ResponseGetDifference) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{9}
}

func (m *ResponseGetDifference) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseGetDifference) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseGetDifference) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseGetDifference) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ResponseGetDifference) GetUpdates() []*UpdateSeqUpdate {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *ResponseGetDifference) GetMessages() []*HistoryMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ResponseGetDifference) GetNeedMore() bool {
	if m != nil {
		return m.NeedMore
	}
	return false
}

func (m *ResponseGetDifference) GetUsersRefs() []*UserOutPeer {
	if m != nil {
		return m.UsersRefs
	}
	return nil
}

func (m *ResponseGetDifference) GetGroupsRefs() []*GroupOutPeer {
	if m != nil {
		return m.GroupsRefs
	}
	return nil
}

func (m *ResponseGetDifference) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ResponseGetDifference) GetConfigHash() *google_protobuf.Int64Value {
	if m != nil {
		return m.ConfigHash
	}
	return nil
}

// Getting difference of dialogs
type RequestGetDialogsDifference struct {
	// / max of the last action dates among all user's dialogs
	Clock int64 `protobuf:"varint,1,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *RequestGetDialogsDifference) Reset()      { *m = RequestGetDialogsDifference{} }
func (*RequestGetDialogsDifference) ProtoMessage() {}
func (*RequestGetDialogsDifference) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{10}
}

func (m *RequestGetDialogsDifference) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

// / Dialogs + peers and entities
type ResponseGetDialogsDifference struct {
	Dialogs    []*Dialog       `protobuf:"bytes,1,rep,name=dialogs" json:"dialogs,omitempty"`
	GroupPeers []*GroupOutPeer `protobuf:"bytes,2,rep,name=group_peers,json=groupPeers" json:"group_peers,omitempty"`
	UserPeers  []*UserOutPeer  `protobuf:"bytes,3,rep,name=user_peers,json=userPeers" json:"user_peers,omitempty"`
}

func (m *ResponseGetDialogsDifference) Reset()      { *m = ResponseGetDialogsDifference{} }
func (*ResponseGetDialogsDifference) ProtoMessage() {}
func (*ResponseGetDialogsDifference) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{11}
}

func (m *ResponseGetDialogsDifference) GetDialogs() []*Dialog {
	if m != nil {
		return m.Dialogs
	}
	return nil
}

func (m *ResponseGetDialogsDifference) GetGroupPeers() []*GroupOutPeer {
	if m != nil {
		return m.GroupPeers
	}
	return nil
}

func (m *ResponseGetDialogsDifference) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

// Represents subset of group members
type GroupMembersSubset struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	MemberIds []int32       `protobuf:"varint,2,rep,packed,name=member_ids,json=memberIds" json:"member_ids,omitempty"`
}

func (m *GroupMembersSubset) Reset()      { *m = GroupMembersSubset{} }
func (*GroupMembersSubset) ProtoMessage() {}
func (*GroupMembersSubset) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{12}
}

func (m *GroupMembersSubset) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *GroupMembersSubset) GetMemberIds() []int32 {
	if m != nil {
		return m.MemberIds
	}
	return nil
}

// Loading referenced entities
type RequestGetReferencedEntitites struct {
	// / users needed
	Users []*UserOutPeer `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	// / messages needed
	Mids []*UUIDValue `protobuf:"bytes,3,rep,name=mids" json:"mids,omitempty"`
	// *
	// Group + subset of members to return.
	// For loading members of big groups by chunks.
	GroupMembers []*GroupMembersSubset `protobuf:"bytes,4,rep,name=group_members,json=groupMembers" json:"group_members,omitempty"`
	// / groups needed
	Groups []*GroupOutPeer `protobuf:"bytes,5,rep,name=groups" json:"groups,omitempty"`
}

func (m *RequestGetReferencedEntitites) Reset()      { *m = RequestGetReferencedEntitites{} }
func (*RequestGetReferencedEntitites) ProtoMessage() {}
func (*RequestGetReferencedEntitites) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{13}
}

func (m *RequestGetReferencedEntitites) GetUsers() []*UserOutPeer {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *RequestGetReferencedEntitites) GetMids() []*UUIDValue {
	if m != nil {
		return m.Mids
	}
	return nil
}

func (m *RequestGetReferencedEntitites) GetGroupMembers() []*GroupMembersSubset {
	if m != nil {
		return m.GroupMembers
	}
	return nil
}

func (m *RequestGetReferencedEntitites) GetGroups() []*GroupOutPeer {
	if m != nil {
		return m.Groups
	}
	return nil
}

type ResponseGetReferencedEntitites struct {
	Users    []*User           `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	Groups   []*Group          `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
	Messages []*HistoryMessage `protobuf:"bytes,3,rep,name=messages" json:"messages,omitempty"`
}

func (m *ResponseGetReferencedEntitites) Reset()      { *m = ResponseGetReferencedEntitites{} }
func (*ResponseGetReferencedEntitites) ProtoMessage() {}
func (*ResponseGetReferencedEntitites) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{14}
}

func (m *ResponseGetReferencedEntitites) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseGetReferencedEntitites) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ResponseGetReferencedEntitites) GetMessages() []*HistoryMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Custom Raw Update
type UpdateRawUpdate struct {
	Type  *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Bytes []byte                       `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *UpdateRawUpdate) Reset()      { *m = UpdateRawUpdate{} }
func (*UpdateRawUpdate) ProtoMessage() {}
func (*UpdateRawUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{15}
}

func (m *UpdateRawUpdate) GetType() *google_protobuf.StringValue {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *UpdateRawUpdate) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

// Empty update
type UpdateEmptyUpdate struct {
}

func (m *UpdateEmptyUpdate) Reset()      { *m = UpdateEmptyUpdate{} }
func (*UpdateEmptyUpdate) ProtoMessage() {}
func (*UpdateEmptyUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{16}
}

// Subscribing for users online
type RequestSubscribeToOnline struct {
	Users []*UserOutPeer `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *RequestSubscribeToOnline) Reset()      { *m = RequestSubscribeToOnline{} }
func (*RequestSubscribeToOnline) ProtoMessage() {}
func (*RequestSubscribeToOnline) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{17}
}

func (m *RequestSubscribeToOnline) GetUsers() []*UserOutPeer {
	if m != nil {
		return m.Users
	}
	return nil
}

// Removing subscription for users online
type RequestSubscribeFromOnline struct {
	Users []*UserOutPeer `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *RequestSubscribeFromOnline) Reset()      { *m = RequestSubscribeFromOnline{} }
func (*RequestSubscribeFromOnline) ProtoMessage() {}
func (*RequestSubscribeFromOnline) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{18}
}

func (m *RequestSubscribeFromOnline) GetUsers() []*UserOutPeer {
	if m != nil {
		return m.Users
	}
	return nil
}

// Subscribing for groups online
type RequestSubscribeToGroupOnline struct {
	Groups []*GroupOutPeer `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *RequestSubscribeToGroupOnline) Reset()      { *m = RequestSubscribeToGroupOnline{} }
func (*RequestSubscribeToGroupOnline) ProtoMessage() {}
func (*RequestSubscribeToGroupOnline) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{19}
}

func (m *RequestSubscribeToGroupOnline) GetGroups() []*GroupOutPeer {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Removing subscription for groups online
type RequestSubscribeFromGroupOnline struct {
	Groups []*GroupOutPeer `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *RequestSubscribeFromGroupOnline) Reset()      { *m = RequestSubscribeFromGroupOnline{} }
func (*RequestSubscribeFromGroupOnline) ProtoMessage() {}
func (*RequestSubscribeFromGroupOnline) Descriptor() ([]byte, []int) {
	return fileDescriptorSequenceAndUpdates, []int{20}
}

func (m *RequestSubscribeFromGroupOnline) GetGroups() []*GroupOutPeer {
	if m != nil {
		return m.Groups
	}
	return nil
}

// / Container which contains UpdateSeqUpdate
type SeqUpdateBox struct {
	Seq           int32                       `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State         []byte                      `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Update        *google_protobuf.BytesValue `protobuf:"bytes,3,opt,name=update" json:"update,omitempty"`
	UnboxedUpdate *UpdateSeqUpdate            `protobuf:"bytes,4,opt,name=unboxed_update,json=unboxedUpdate" json:"unboxed_update,omitempty"`
}

func (m *SeqUpdateBox) Reset()                    { *m = SeqUpdateBox{} }
func (*SeqUpdateBox) ProtoMessage()               {}
func (*SeqUpdateBox) Descriptor() ([]byte, []int) { return fileDescriptorSequenceAndUpdates, []int{21} }

func (m *SeqUpdateBox) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *SeqUpdateBox) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *SeqUpdateBox) GetUpdate() *google_protobuf.BytesValue {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *SeqUpdateBox) GetUnboxedUpdate() *UpdateSeqUpdate {
	if m != nil {
		return m.UnboxedUpdate
	}
	return nil
}

func init() {
	proto.RegisterType((*UpdateSeqUpdate)(nil), "dialog.UpdateSeqUpdate")
	proto.RegisterType((*UpdateFatSeqUpdate)(nil), "dialog.UpdateFatSeqUpdate")
	proto.RegisterType((*UpdateWeakUpdate)(nil), "dialog.UpdateWeakUpdate")
	proto.RegisterType((*UpdateWeakFatUpdate)(nil), "dialog.UpdateWeakFatUpdate")
	proto.RegisterType((*UpdateSeqUpdateTooLong)(nil), "dialog.UpdateSeqUpdateTooLong")
	proto.RegisterType((*UpdateContainer)(nil), "dialog.UpdateContainer")
	proto.RegisterType((*UpdateCombinedUpdate)(nil), "dialog.UpdateCombinedUpdate")
	proto.RegisterType((*RequestGetState)(nil), "dialog.RequestGetState")
	proto.RegisterType((*RequestGetDifference)(nil), "dialog.RequestGetDifference")
	proto.RegisterType((*ResponseGetDifference)(nil), "dialog.ResponseGetDifference")
	proto.RegisterType((*RequestGetDialogsDifference)(nil), "dialog.RequestGetDialogsDifference")
	proto.RegisterType((*ResponseGetDialogsDifference)(nil), "dialog.ResponseGetDialogsDifference")
	proto.RegisterType((*GroupMembersSubset)(nil), "dialog.GroupMembersSubset")
	proto.RegisterType((*RequestGetReferencedEntitites)(nil), "dialog.RequestGetReferencedEntitites")
	proto.RegisterType((*ResponseGetReferencedEntitites)(nil), "dialog.ResponseGetReferencedEntitites")
	proto.RegisterType((*UpdateRawUpdate)(nil), "dialog.UpdateRawUpdate")
	proto.RegisterType((*UpdateEmptyUpdate)(nil), "dialog.UpdateEmptyUpdate")
	proto.RegisterType((*RequestSubscribeToOnline)(nil), "dialog.RequestSubscribeToOnline")
	proto.RegisterType((*RequestSubscribeFromOnline)(nil), "dialog.RequestSubscribeFromOnline")
	proto.RegisterType((*RequestSubscribeToGroupOnline)(nil), "dialog.RequestSubscribeToGroupOnline")
	proto.RegisterType((*RequestSubscribeFromGroupOnline)(nil), "dialog.RequestSubscribeFromGroupOnline")
	proto.RegisterType((*SeqUpdateBox)(nil), "dialog.SeqUpdateBox")
}
func (this *UpdateSeqUpdate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if this.UpdateHeader != that1.UpdateHeader {
		return false
	}
	if that1.Update == nil {
		if this.Update != nil {
			return false
		}
	} else if this.Update == nil {
		return false
	} else if !this.Update.Equal(that1.Update) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateForceReloadState) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateForceReloadState)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateForceReloadState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateForceReloadState.Equal(that1.UpdateForceReloadState) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserAvatarChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserAvatarChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserAvatarChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserAvatarChanged.Equal(that1.UpdateUserAvatarChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserNameChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserNameChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserNameChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserNameChanged.Equal(that1.UpdateUserNameChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserLocalNameChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserLocalNameChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserLocalNameChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserLocalNameChanged.Equal(that1.UpdateUserLocalNameChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserContactsChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserContactsChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserContactsChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserContactsChanged.Equal(that1.UpdateUserContactsChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserNickChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserNickChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserNickChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserNickChanged.Equal(that1.UpdateUserNickChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserAboutChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserAboutChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserAboutChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserAboutChanged.Equal(that1.UpdateUserAboutChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserPreferredLanguagesChanged.Equal(that1.UpdateUserPreferredLanguagesChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserTimeZoneChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserTimeZoneChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserTimeZoneChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserTimeZoneChanged.Equal(that1.UpdateUserTimeZoneChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserBotCommandsChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserBotCommandsChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserBotCommandsChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserBotCommandsChanged.Equal(that1.UpdateUserBotCommandsChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserExtChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserExtChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserExtChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserExtChanged.Equal(that1.UpdateUserExtChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserFullExtChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserFullExtChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserFullExtChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserFullExtChanged.Equal(that1.UpdateUserFullExtChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserSexChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserSexChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserSexChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserSexChanged.Equal(that1.UpdateUserSexChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserCustomProfileChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserCustomProfileChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserCustomProfileChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserCustomProfileChanged.Equal(that1.UpdateUserCustomProfileChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserStatusChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserStatusChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserStatusChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserStatusChanged.Equal(that1.UpdateUserStatusChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateContactRegistered) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateContactRegistered)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateContactRegistered)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateContactRegistered.Equal(that1.UpdateContactRegistered) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateContactsAdded) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateContactsAdded)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateContactsAdded)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateContactsAdded.Equal(that1.UpdateContactsAdded) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateContactsAddTaskSuspended) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateContactsAddTaskSuspended)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateContactsAddTaskSuspended)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateContactsAddTaskSuspended.Equal(that1.UpdateContactsAddTaskSuspended) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateContactsRemoved) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateContactsRemoved)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateContactsRemoved)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateContactsRemoved.Equal(that1.UpdateContactsRemoved) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserBlocked) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserBlocked)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserBlocked)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserBlocked.Equal(that1.UpdateUserBlocked) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserUnblocked) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserUnblocked)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserUnblocked)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserUnblocked.Equal(that1.UpdateUserUnblocked) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateInteractiveMediaEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateInteractiveMediaEvent)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateInteractiveMediaEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateInteractiveMediaEvent.Equal(that1.UpdateInteractiveMediaEvent) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateMessage)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateMessage.Equal(that1.UpdateMessage) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateMessageContentChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateMessageContentChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateMessageContentChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateMessageContentChanged.Equal(that1.UpdateMessageContentChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateMessageSent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateMessageSent)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateMessageSent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateMessageSent.Equal(that1.UpdateMessageSent) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateMessageReceived) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateMessageReceived)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateMessageReceived)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateMessageReceived.Equal(that1.UpdateMessageReceived) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateMessageRead) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateMessageRead)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateMessageRead)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateMessageRead.Equal(that1.UpdateMessageRead) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateMessageReadByMe) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateMessageReadByMe)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateMessageReadByMe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateMessageReadByMe.Equal(that1.UpdateMessageReadByMe) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateMessageDelete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateMessageDelete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateMessageDelete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateMessageDelete.Equal(that1.UpdateMessageDelete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateChatClear) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateChatClear)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateChatClear)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateChatClear.Equal(that1.UpdateChatClear) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateChatDelete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateChatDelete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateChatDelete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateChatDelete.Equal(that1.UpdateChatDelete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateChatArchive) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateChatArchive)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateChatArchive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateChatArchive.Equal(that1.UpdateChatArchive) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateChatGroupsChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateChatGroupsChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateChatGroupsChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateChatGroupsChanged.Equal(that1.UpdateChatGroupsChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateReactionsUpdate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateReactionsUpdate)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateReactionsUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateReactionsUpdate.Equal(that1.UpdateReactionsUpdate) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateDialogFavouriteChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateDialogFavouriteChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateDialogFavouriteChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateDialogFavouriteChanged.Equal(that1.UpdateDialogFavouriteChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdatePinnedMessagesChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdatePinnedMessagesChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdatePinnedMessagesChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdatePinnedMessagesChanged.Equal(that1.UpdatePinnedMessagesChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupTitleChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupTitleChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupTitleChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupTitleChanged.Equal(that1.UpdateGroupTitleChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupAvatarChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupAvatarChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupAvatarChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupAvatarChanged.Equal(that1.UpdateGroupAvatarChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupTopicChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupTopicChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupTopicChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupTopicChanged.Equal(that1.UpdateGroupTopicChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupAboutChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupAboutChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupAboutChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupAboutChanged.Equal(that1.UpdateGroupAboutChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupOwnerChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupOwnerChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupOwnerChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupOwnerChanged.Equal(that1.UpdateGroupOwnerChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupHistoryShared) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupHistoryShared)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupHistoryShared)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupHistoryShared.Equal(that1.UpdateGroupHistoryShared) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupCanSendMessagesChanged.Equal(that1.UpdateGroupCanSendMessagesChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupCanViewMembersChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupCanViewMembersChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupCanViewMembersChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupCanViewMembersChanged.Equal(that1.UpdateGroupCanViewMembersChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupCanInviteMembersChanged.Equal(that1.UpdateGroupCanInviteMembersChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupMemberChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupMemberChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupMemberChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupMemberChanged.Equal(that1.UpdateGroupMemberChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupMembersBecameAsync) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupMembersBecameAsync)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupMembersBecameAsync)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupMembersBecameAsync.Equal(that1.UpdateGroupMembersBecameAsync) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupMembersUpdated) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupMembersUpdated)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupMembersUpdated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupMembersUpdated.Equal(that1.UpdateGroupMembersUpdated) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupMemberDiff) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupMemberDiff)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupMemberDiff)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupMemberDiff.Equal(that1.UpdateGroupMemberDiff) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupMembersCountChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupMembersCountChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupMembersCountChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupMembersCountChanged.Equal(that1.UpdateGroupMembersCountChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupMemberAdminChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupMemberAdminChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupMemberAdminChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupMemberAdminChanged.Equal(that1.UpdateGroupMemberAdminChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupMemberPermissionsChanged.Equal(that1.UpdateGroupMemberPermissionsChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupInviteObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupInviteObsolete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupInviteObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupInviteObsolete.Equal(that1.UpdateGroupInviteObsolete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupUserInvitedObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupUserInvitedObsolete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupUserInvitedObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupUserInvitedObsolete.Equal(that1.UpdateGroupUserInvitedObsolete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupUserLeaveObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupUserLeaveObsolete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupUserLeaveObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupUserLeaveObsolete.Equal(that1.UpdateGroupUserLeaveObsolete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupUserKickObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupUserKickObsolete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupUserKickObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupUserKickObsolete.Equal(that1.UpdateGroupUserKickObsolete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupMembersUpdateObsolete.Equal(that1.UpdateGroupMembersUpdateObsolete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupTitleChangedObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupTitleChangedObsolete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupTitleChangedObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupTitleChangedObsolete.Equal(that1.UpdateGroupTitleChangedObsolete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupTopicChangedObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupTopicChangedObsolete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupTopicChangedObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupTopicChangedObsolete.Equal(that1.UpdateGroupTopicChangedObsolete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupAboutChangedObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupAboutChangedObsolete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupAboutChangedObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupAboutChangedObsolete.Equal(that1.UpdateGroupAboutChangedObsolete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupAvatarChangedObsolete.Equal(that1.UpdateGroupAvatarChangedObsolete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupShortnameChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupShortnameChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupShortnameChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupShortnameChanged.Equal(that1.UpdateGroupShortnameChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateStickerCollectionsChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateStickerCollectionsChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateStickerCollectionsChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateStickerCollectionsChanged.Equal(that1.UpdateStickerCollectionsChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateStickerPackRemoved) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateStickerPackRemoved)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateStickerPackRemoved)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateStickerPackRemoved.Equal(that1.UpdateStickerPackRemoved) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateStickerPackAdded) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateStickerPackAdded)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateStickerPackAdded)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateStickerPackAdded.Equal(that1.UpdateStickerPackAdded) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdatePauseNotifications) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdatePauseNotifications)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdatePauseNotifications)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdatePauseNotifications.Equal(that1.UpdatePauseNotifications) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateRestoreNotifications) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateRestoreNotifications)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateRestoreNotifications)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateRestoreNotifications.Equal(that1.UpdateRestoreNotifications) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateTyping) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateTyping)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateTyping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateTyping.Equal(that1.UpdateTyping) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateTypingStop) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateTypingStop)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateTypingStop)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateTypingStop.Equal(that1.UpdateTypingStop) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserOnline) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserOnline)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserOnline.Equal(that1.UpdateUserOnline) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserOffline) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserOffline)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserOffline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserOffline.Equal(that1.UpdateUserOffline) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserLastSeen) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserLastSeen)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserLastSeen)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateUserLastSeen.Equal(that1.UpdateUserLastSeen) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupOnline) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupOnline)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupOnline.Equal(that1.UpdateGroupOnline) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateEventBusDeviceConnected) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateEventBusDeviceConnected)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateEventBusDeviceConnected)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateEventBusDeviceConnected.Equal(that1.UpdateEventBusDeviceConnected) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateEventBusDeviceDisconnected) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateEventBusDeviceDisconnected)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateEventBusDeviceDisconnected)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateEventBusDeviceDisconnected.Equal(that1.UpdateEventBusDeviceDisconnected) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateEventBusMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateEventBusMessage)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateEventBusMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateEventBusMessage.Equal(that1.UpdateEventBusMessage) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateEventBusDisposed) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateEventBusDisposed)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateEventBusDisposed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateEventBusDisposed.Equal(that1.UpdateEventBusDisposed) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateIncomingCallDeprecated) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateIncomingCallDeprecated)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateIncomingCallDeprecated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateIncomingCallDeprecated.Equal(that1.UpdateIncomingCallDeprecated) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateIncomingCall) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateIncomingCall)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateIncomingCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateIncomingCall.Equal(that1.UpdateIncomingCall) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateCallHandled) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateCallHandled)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateCallHandled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateCallHandled.Equal(that1.UpdateCallHandled) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateCallDisposed) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateCallDisposed)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateCallDisposed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateCallDisposed.Equal(that1.UpdateCallDisposed) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateParameterChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateParameterChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateParameterChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateParameterChanged.Equal(that1.UpdateParameterChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateRawUpdate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateRawUpdate)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateRawUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateRawUpdate.Equal(that1.UpdateRawUpdate) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateEmptyUpdate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateEmptyUpdate)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateEmptyUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateEmptyUpdate.Equal(that1.UpdateEmptyUpdate) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateCountersChanged) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateCountersChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateCountersChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateCountersChanged.Equal(that1.UpdateCountersChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateConfig)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateConfig.Equal(that1.UpdateConfig) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateSpaceModified) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateSpaceModified)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateSpaceModified)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateSpaceModified.Equal(that1.UpdateSpaceModified) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateSpaceMemberModified) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateSpaceMemberModified)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateSpaceMemberModified)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateSpaceMemberModified.Equal(that1.UpdateSpaceMemberModified) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateMessageRejectedByHook) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateMessageRejectedByHook)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateMessageRejectedByHook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateMessageRejectedByHook.Equal(that1.UpdateMessageRejectedByHook) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateMessageEditRejectedByHook) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateMessageEditRejectedByHook)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateMessageEditRejectedByHook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UpdateMessageEditRejectedByHook.Equal(that1.UpdateMessageEditRejectedByHook) {
		return false
	}
	return true
}
func (this *UpdateFatSeqUpdate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateFatSeqUpdate)
	if !ok {
		that2, ok := that.(UpdateFatSeqUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if this.UpdateHeader != that1.UpdateHeader {
		return false
	}
	if !bytes.Equal(this.Update, that1.Update) {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateWeakUpdate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateWeakUpdate)
	if !ok {
		that2, ok := that.(UpdateWeakUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if this.UpdateHeader != that1.UpdateHeader {
		return false
	}
	if !bytes.Equal(this.Update, that1.Update) {
		return false
	}
	return true
}
func (this *UpdateWeakFatUpdate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateWeakFatUpdate)
	if !ok {
		that2, ok := that.(UpdateWeakFatUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if this.UpdateHeader != that1.UpdateHeader {
		return false
	}
	if !bytes.Equal(this.Update, that1.Update) {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateSeqUpdateTooLong) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSeqUpdateTooLong)
	if !ok {
		that2, ok := that.(UpdateSeqUpdateTooLong)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *UpdateContainer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateContainer)
	if !ok {
		that2, ok := that.(UpdateContainer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UpdateHeader != that1.UpdateHeader {
		return false
	}
	if !bytes.Equal(this.Update, that1.Update) {
		return false
	}
	return true
}
func (this *UpdateCombinedUpdate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateCombinedUpdate)
	if !ok {
		that2, ok := that.(UpdateCombinedUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SeqStart != that1.SeqStart {
		return false
	}
	if this.SeqEnd != that1.SeqEnd {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if len(this.Updates) != len(that1.Updates) {
		return false
	}
	for i := range this.Updates {
		if !this.Updates[i].Equal(that1.Updates[i]) {
			return false
		}
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	return true
}
func (this *RequestGetState) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestGetState)
	if !ok {
		that2, ok := that.(RequestGetState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *RequestGetDifference) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestGetDifference)
	if !ok {
		that2, ok := that.(RequestGetDifference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	if !this.ConfigHash.Equal(that1.ConfigHash) {
		return false
	}
	return true
}
func (this *ResponseGetDifference) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseGetDifference)
	if !ok {
		that2, ok := that.(ResponseGetDifference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if len(this.Updates) != len(that1.Updates) {
		return false
	}
	for i := range this.Updates {
		if !this.Updates[i].Equal(that1.Updates[i]) {
			return false
		}
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	if this.NeedMore != that1.NeedMore {
		return false
	}
	if len(this.UsersRefs) != len(that1.UsersRefs) {
		return false
	}
	for i := range this.UsersRefs {
		if !this.UsersRefs[i].Equal(that1.UsersRefs[i]) {
			return false
		}
	}
	if len(this.GroupsRefs) != len(that1.GroupsRefs) {
		return false
	}
	for i := range this.GroupsRefs {
		if !this.GroupsRefs[i].Equal(that1.GroupsRefs[i]) {
			return false
		}
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if !this.ConfigHash.Equal(that1.ConfigHash) {
		return false
	}
	return true
}
func (this *RequestGetDialogsDifference) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestGetDialogsDifference)
	if !ok {
		that2, ok := that.(RequestGetDialogsDifference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Clock != that1.Clock {
		return false
	}
	return true
}
func (this *ResponseGetDialogsDifference) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseGetDialogsDifference)
	if !ok {
		that2, ok := that.(ResponseGetDialogsDifference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Dialogs) != len(that1.Dialogs) {
		return false
	}
	for i := range this.Dialogs {
		if !this.Dialogs[i].Equal(that1.Dialogs[i]) {
			return false
		}
	}
	if len(this.GroupPeers) != len(that1.GroupPeers) {
		return false
	}
	for i := range this.GroupPeers {
		if !this.GroupPeers[i].Equal(that1.GroupPeers[i]) {
			return false
		}
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	return true
}
func (this *GroupMembersSubset) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GroupMembersSubset)
	if !ok {
		that2, ok := that.(GroupMembersSubset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	if len(this.MemberIds) != len(that1.MemberIds) {
		return false
	}
	for i := range this.MemberIds {
		if this.MemberIds[i] != that1.MemberIds[i] {
			return false
		}
	}
	return true
}
func (this *RequestGetReferencedEntitites) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestGetReferencedEntitites)
	if !ok {
		that2, ok := that.(RequestGetReferencedEntitites)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Mids) != len(that1.Mids) {
		return false
	}
	for i := range this.Mids {
		if !this.Mids[i].Equal(that1.Mids[i]) {
			return false
		}
	}
	if len(this.GroupMembers) != len(that1.GroupMembers) {
		return false
	}
	for i := range this.GroupMembers {
		if !this.GroupMembers[i].Equal(that1.GroupMembers[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *ResponseGetReferencedEntitites) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseGetReferencedEntitites)
	if !ok {
		that2, ok := that.(ResponseGetReferencedEntitites)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateRawUpdate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateRawUpdate)
	if !ok {
		that2, ok := that.(UpdateRawUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	if !bytes.Equal(this.Bytes, that1.Bytes) {
		return false
	}
	return true
}
func (this *UpdateEmptyUpdate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateEmptyUpdate)
	if !ok {
		that2, ok := that.(UpdateEmptyUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *RequestSubscribeToOnline) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSubscribeToOnline)
	if !ok {
		that2, ok := that.(RequestSubscribeToOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	return true
}
func (this *RequestSubscribeFromOnline) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSubscribeFromOnline)
	if !ok {
		that2, ok := that.(RequestSubscribeFromOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	return true
}
func (this *RequestSubscribeToGroupOnline) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSubscribeToGroupOnline)
	if !ok {
		that2, ok := that.(RequestSubscribeToGroupOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *RequestSubscribeFromGroupOnline) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestSubscribeFromGroupOnline)
	if !ok {
		that2, ok := that.(RequestSubscribeFromGroupOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *SeqUpdateBox) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SeqUpdateBox)
	if !ok {
		that2, ok := that.(SeqUpdateBox)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if !this.Update.Equal(that1.Update) {
		return false
	}
	if !this.UnboxedUpdate.Equal(that1.UnboxedUpdate) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 97)
	s = append(s, "&dialog.UpdateSeqUpdate{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "UpdateHeader: "+fmt.Sprintf("%#v", this.UpdateHeader)+",\n")
	if this.Update != nil {
		s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSeqUpdate_UpdateForceReloadState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateForceReloadState{` +
		`UpdateForceReloadState:` + fmt.Sprintf("%#v", this.UpdateForceReloadState) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserAvatarChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserAvatarChanged{` +
		`UpdateUserAvatarChanged:` + fmt.Sprintf("%#v", this.UpdateUserAvatarChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserNameChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserNameChanged{` +
		`UpdateUserNameChanged:` + fmt.Sprintf("%#v", this.UpdateUserNameChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserLocalNameChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserLocalNameChanged{` +
		`UpdateUserLocalNameChanged:` + fmt.Sprintf("%#v", this.UpdateUserLocalNameChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserContactsChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserContactsChanged{` +
		`UpdateUserContactsChanged:` + fmt.Sprintf("%#v", this.UpdateUserContactsChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserNickChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserNickChanged{` +
		`UpdateUserNickChanged:` + fmt.Sprintf("%#v", this.UpdateUserNickChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserAboutChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserAboutChanged{` +
		`UpdateUserAboutChanged:` + fmt.Sprintf("%#v", this.UpdateUserAboutChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged{` +
		`UpdateUserPreferredLanguagesChanged:` + fmt.Sprintf("%#v", this.UpdateUserPreferredLanguagesChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserTimeZoneChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserTimeZoneChanged{` +
		`UpdateUserTimeZoneChanged:` + fmt.Sprintf("%#v", this.UpdateUserTimeZoneChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserBotCommandsChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserBotCommandsChanged{` +
		`UpdateUserBotCommandsChanged:` + fmt.Sprintf("%#v", this.UpdateUserBotCommandsChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserExtChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserExtChanged{` +
		`UpdateUserExtChanged:` + fmt.Sprintf("%#v", this.UpdateUserExtChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserFullExtChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserFullExtChanged{` +
		`UpdateUserFullExtChanged:` + fmt.Sprintf("%#v", this.UpdateUserFullExtChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserSexChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserSexChanged{` +
		`UpdateUserSexChanged:` + fmt.Sprintf("%#v", this.UpdateUserSexChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserCustomProfileChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserCustomProfileChanged{` +
		`UpdateUserCustomProfileChanged:` + fmt.Sprintf("%#v", this.UpdateUserCustomProfileChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserStatusChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserStatusChanged{` +
		`UpdateUserStatusChanged:` + fmt.Sprintf("%#v", this.UpdateUserStatusChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateContactRegistered) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateContactRegistered{` +
		`UpdateContactRegistered:` + fmt.Sprintf("%#v", this.UpdateContactRegistered) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateContactsAdded) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateContactsAdded{` +
		`UpdateContactsAdded:` + fmt.Sprintf("%#v", this.UpdateContactsAdded) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateContactsAddTaskSuspended) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateContactsAddTaskSuspended{` +
		`UpdateContactsAddTaskSuspended:` + fmt.Sprintf("%#v", this.UpdateContactsAddTaskSuspended) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateContactsRemoved) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateContactsRemoved{` +
		`UpdateContactsRemoved:` + fmt.Sprintf("%#v", this.UpdateContactsRemoved) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserBlocked) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserBlocked{` +
		`UpdateUserBlocked:` + fmt.Sprintf("%#v", this.UpdateUserBlocked) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserUnblocked) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserUnblocked{` +
		`UpdateUserUnblocked:` + fmt.Sprintf("%#v", this.UpdateUserUnblocked) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateInteractiveMediaEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateInteractiveMediaEvent{` +
		`UpdateInteractiveMediaEvent:` + fmt.Sprintf("%#v", this.UpdateInteractiveMediaEvent) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateMessage{` +
		`UpdateMessage:` + fmt.Sprintf("%#v", this.UpdateMessage) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageContentChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateMessageContentChanged{` +
		`UpdateMessageContentChanged:` + fmt.Sprintf("%#v", this.UpdateMessageContentChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageSent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateMessageSent{` +
		`UpdateMessageSent:` + fmt.Sprintf("%#v", this.UpdateMessageSent) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageReceived) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateMessageReceived{` +
		`UpdateMessageReceived:` + fmt.Sprintf("%#v", this.UpdateMessageReceived) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageRead) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateMessageRead{` +
		`UpdateMessageRead:` + fmt.Sprintf("%#v", this.UpdateMessageRead) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageReadByMe) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateMessageReadByMe{` +
		`UpdateMessageReadByMe:` + fmt.Sprintf("%#v", this.UpdateMessageReadByMe) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageDelete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateMessageDelete{` +
		`UpdateMessageDelete:` + fmt.Sprintf("%#v", this.UpdateMessageDelete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateChatClear) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateChatClear{` +
		`UpdateChatClear:` + fmt.Sprintf("%#v", this.UpdateChatClear) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateChatDelete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateChatDelete{` +
		`UpdateChatDelete:` + fmt.Sprintf("%#v", this.UpdateChatDelete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateChatArchive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateChatArchive{` +
		`UpdateChatArchive:` + fmt.Sprintf("%#v", this.UpdateChatArchive) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateChatGroupsChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateChatGroupsChanged{` +
		`UpdateChatGroupsChanged:` + fmt.Sprintf("%#v", this.UpdateChatGroupsChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateReactionsUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateReactionsUpdate{` +
		`UpdateReactionsUpdate:` + fmt.Sprintf("%#v", this.UpdateReactionsUpdate) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateDialogFavouriteChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateDialogFavouriteChanged{` +
		`UpdateDialogFavouriteChanged:` + fmt.Sprintf("%#v", this.UpdateDialogFavouriteChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdatePinnedMessagesChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdatePinnedMessagesChanged{` +
		`UpdatePinnedMessagesChanged:` + fmt.Sprintf("%#v", this.UpdatePinnedMessagesChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupTitleChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupTitleChanged{` +
		`UpdateGroupTitleChanged:` + fmt.Sprintf("%#v", this.UpdateGroupTitleChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupAvatarChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupAvatarChanged{` +
		`UpdateGroupAvatarChanged:` + fmt.Sprintf("%#v", this.UpdateGroupAvatarChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupTopicChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupTopicChanged{` +
		`UpdateGroupTopicChanged:` + fmt.Sprintf("%#v", this.UpdateGroupTopicChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupAboutChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupAboutChanged{` +
		`UpdateGroupAboutChanged:` + fmt.Sprintf("%#v", this.UpdateGroupAboutChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupOwnerChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupOwnerChanged{` +
		`UpdateGroupOwnerChanged:` + fmt.Sprintf("%#v", this.UpdateGroupOwnerChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupHistoryShared) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupHistoryShared{` +
		`UpdateGroupHistoryShared:` + fmt.Sprintf("%#v", this.UpdateGroupHistoryShared) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged{` +
		`UpdateGroupCanSendMessagesChanged:` + fmt.Sprintf("%#v", this.UpdateGroupCanSendMessagesChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupCanViewMembersChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupCanViewMembersChanged{` +
		`UpdateGroupCanViewMembersChanged:` + fmt.Sprintf("%#v", this.UpdateGroupCanViewMembersChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged{` +
		`UpdateGroupCanInviteMembersChanged:` + fmt.Sprintf("%#v", this.UpdateGroupCanInviteMembersChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMemberChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupMemberChanged{` +
		`UpdateGroupMemberChanged:` + fmt.Sprintf("%#v", this.UpdateGroupMemberChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMembersBecameAsync) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupMembersBecameAsync{` +
		`UpdateGroupMembersBecameAsync:` + fmt.Sprintf("%#v", this.UpdateGroupMembersBecameAsync) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMembersUpdated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupMembersUpdated{` +
		`UpdateGroupMembersUpdated:` + fmt.Sprintf("%#v", this.UpdateGroupMembersUpdated) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMemberDiff) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupMemberDiff{` +
		`UpdateGroupMemberDiff:` + fmt.Sprintf("%#v", this.UpdateGroupMemberDiff) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMembersCountChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupMembersCountChanged{` +
		`UpdateGroupMembersCountChanged:` + fmt.Sprintf("%#v", this.UpdateGroupMembersCountChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMemberAdminChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupMemberAdminChanged{` +
		`UpdateGroupMemberAdminChanged:` + fmt.Sprintf("%#v", this.UpdateGroupMemberAdminChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged{` +
		`UpdateGroupMemberPermissionsChanged:` + fmt.Sprintf("%#v", this.UpdateGroupMemberPermissionsChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupInviteObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupInviteObsolete{` +
		`UpdateGroupInviteObsolete:` + fmt.Sprintf("%#v", this.UpdateGroupInviteObsolete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupUserInvitedObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupUserInvitedObsolete{` +
		`UpdateGroupUserInvitedObsolete:` + fmt.Sprintf("%#v", this.UpdateGroupUserInvitedObsolete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupUserLeaveObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupUserLeaveObsolete{` +
		`UpdateGroupUserLeaveObsolete:` + fmt.Sprintf("%#v", this.UpdateGroupUserLeaveObsolete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupUserKickObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupUserKickObsolete{` +
		`UpdateGroupUserKickObsolete:` + fmt.Sprintf("%#v", this.UpdateGroupUserKickObsolete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete{` +
		`UpdateGroupMembersUpdateObsolete:` + fmt.Sprintf("%#v", this.UpdateGroupMembersUpdateObsolete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupTitleChangedObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupTitleChangedObsolete{` +
		`UpdateGroupTitleChangedObsolete:` + fmt.Sprintf("%#v", this.UpdateGroupTitleChangedObsolete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupTopicChangedObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupTopicChangedObsolete{` +
		`UpdateGroupTopicChangedObsolete:` + fmt.Sprintf("%#v", this.UpdateGroupTopicChangedObsolete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupAboutChangedObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupAboutChangedObsolete{` +
		`UpdateGroupAboutChangedObsolete:` + fmt.Sprintf("%#v", this.UpdateGroupAboutChangedObsolete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete{` +
		`UpdateGroupAvatarChangedObsolete:` + fmt.Sprintf("%#v", this.UpdateGroupAvatarChangedObsolete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupShortnameChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupShortnameChanged{` +
		`UpdateGroupShortnameChanged:` + fmt.Sprintf("%#v", this.UpdateGroupShortnameChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateStickerCollectionsChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateStickerCollectionsChanged{` +
		`UpdateStickerCollectionsChanged:` + fmt.Sprintf("%#v", this.UpdateStickerCollectionsChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateStickerPackRemoved) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateStickerPackRemoved{` +
		`UpdateStickerPackRemoved:` + fmt.Sprintf("%#v", this.UpdateStickerPackRemoved) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateStickerPackAdded) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateStickerPackAdded{` +
		`UpdateStickerPackAdded:` + fmt.Sprintf("%#v", this.UpdateStickerPackAdded) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdatePauseNotifications) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdatePauseNotifications{` +
		`UpdatePauseNotifications:` + fmt.Sprintf("%#v", this.UpdatePauseNotifications) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateRestoreNotifications) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateRestoreNotifications{` +
		`UpdateRestoreNotifications:` + fmt.Sprintf("%#v", this.UpdateRestoreNotifications) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateTyping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateTyping{` +
		`UpdateTyping:` + fmt.Sprintf("%#v", this.UpdateTyping) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateTypingStop) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateTypingStop{` +
		`UpdateTypingStop:` + fmt.Sprintf("%#v", this.UpdateTypingStop) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserOnline{` +
		`UpdateUserOnline:` + fmt.Sprintf("%#v", this.UpdateUserOnline) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserOffline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserOffline{` +
		`UpdateUserOffline:` + fmt.Sprintf("%#v", this.UpdateUserOffline) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserLastSeen) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserLastSeen{` +
		`UpdateUserLastSeen:` + fmt.Sprintf("%#v", this.UpdateUserLastSeen) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupOnline{` +
		`UpdateGroupOnline:` + fmt.Sprintf("%#v", this.UpdateGroupOnline) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateEventBusDeviceConnected) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateEventBusDeviceConnected{` +
		`UpdateEventBusDeviceConnected:` + fmt.Sprintf("%#v", this.UpdateEventBusDeviceConnected) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateEventBusDeviceDisconnected) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateEventBusDeviceDisconnected{` +
		`UpdateEventBusDeviceDisconnected:` + fmt.Sprintf("%#v", this.UpdateEventBusDeviceDisconnected) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateEventBusMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateEventBusMessage{` +
		`UpdateEventBusMessage:` + fmt.Sprintf("%#v", this.UpdateEventBusMessage) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateEventBusDisposed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateEventBusDisposed{` +
		`UpdateEventBusDisposed:` + fmt.Sprintf("%#v", this.UpdateEventBusDisposed) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateIncomingCallDeprecated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateIncomingCallDeprecated{` +
		`UpdateIncomingCallDeprecated:` + fmt.Sprintf("%#v", this.UpdateIncomingCallDeprecated) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateIncomingCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateIncomingCall{` +
		`UpdateIncomingCall:` + fmt.Sprintf("%#v", this.UpdateIncomingCall) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateCallHandled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateCallHandled{` +
		`UpdateCallHandled:` + fmt.Sprintf("%#v", this.UpdateCallHandled) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateCallDisposed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateCallDisposed{` +
		`UpdateCallDisposed:` + fmt.Sprintf("%#v", this.UpdateCallDisposed) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateParameterChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateParameterChanged{` +
		`UpdateParameterChanged:` + fmt.Sprintf("%#v", this.UpdateParameterChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateRawUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateRawUpdate{` +
		`UpdateRawUpdate:` + fmt.Sprintf("%#v", this.UpdateRawUpdate) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateEmptyUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateEmptyUpdate{` +
		`UpdateEmptyUpdate:` + fmt.Sprintf("%#v", this.UpdateEmptyUpdate) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateCountersChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateCountersChanged{` +
		`UpdateCountersChanged:` + fmt.Sprintf("%#v", this.UpdateCountersChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateConfig{` +
		`UpdateConfig:` + fmt.Sprintf("%#v", this.UpdateConfig) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateSpaceModified) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateSpaceModified{` +
		`UpdateSpaceModified:` + fmt.Sprintf("%#v", this.UpdateSpaceModified) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateSpaceMemberModified) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateSpaceMemberModified{` +
		`UpdateSpaceMemberModified:` + fmt.Sprintf("%#v", this.UpdateSpaceMemberModified) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageRejectedByHook) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateMessageRejectedByHook{` +
		`UpdateMessageRejectedByHook:` + fmt.Sprintf("%#v", this.UpdateMessageRejectedByHook) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageEditRejectedByHook) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateMessageEditRejectedByHook{` +
		`UpdateMessageEditRejectedByHook:` + fmt.Sprintf("%#v", this.UpdateMessageEditRejectedByHook) + `}`}, ", ")
	return s
}
func (this *UpdateFatSeqUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.UpdateFatSeqUpdate{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "UpdateHeader: "+fmt.Sprintf("%#v", this.UpdateHeader)+",\n")
	s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateWeakUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateWeakUpdate{")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "UpdateHeader: "+fmt.Sprintf("%#v", this.UpdateHeader)+",\n")
	s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateWeakFatUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.UpdateWeakFatUpdate{")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "UpdateHeader: "+fmt.Sprintf("%#v", this.UpdateHeader)+",\n")
	s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSeqUpdateTooLong) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.UpdateSeqUpdateTooLong{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateContainer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateContainer{")
	s = append(s, "UpdateHeader: "+fmt.Sprintf("%#v", this.UpdateHeader)+",\n")
	s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateCombinedUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.UpdateCombinedUpdate{")
	s = append(s, "SeqStart: "+fmt.Sprintf("%#v", this.SeqStart)+",\n")
	s = append(s, "SeqEnd: "+fmt.Sprintf("%#v", this.SeqEnd)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	if this.Updates != nil {
		s = append(s, "Updates: "+fmt.Sprintf("%#v", this.Updates)+",\n")
	}
	if this.Messages != nil {
		s = append(s, "Messages: "+fmt.Sprintf("%#v", this.Messages)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestGetState{")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetDifference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestGetDifference{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	if this.ConfigHash != nil {
		s = append(s, "ConfigHash: "+fmt.Sprintf("%#v", this.ConfigHash)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetDifference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&dialog.ResponseGetDifference{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	if this.Updates != nil {
		s = append(s, "Updates: "+fmt.Sprintf("%#v", this.Updates)+",\n")
	}
	if this.Messages != nil {
		s = append(s, "Messages: "+fmt.Sprintf("%#v", this.Messages)+",\n")
	}
	s = append(s, "NeedMore: "+fmt.Sprintf("%#v", this.NeedMore)+",\n")
	if this.UsersRefs != nil {
		s = append(s, "UsersRefs: "+fmt.Sprintf("%#v", this.UsersRefs)+",\n")
	}
	if this.GroupsRefs != nil {
		s = append(s, "GroupsRefs: "+fmt.Sprintf("%#v", this.GroupsRefs)+",\n")
	}
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	if this.ConfigHash != nil {
		s = append(s, "ConfigHash: "+fmt.Sprintf("%#v", this.ConfigHash)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetDialogsDifference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestGetDialogsDifference{")
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetDialogsDifference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseGetDialogsDifference{")
	if this.Dialogs != nil {
		s = append(s, "Dialogs: "+fmt.Sprintf("%#v", this.Dialogs)+",\n")
	}
	if this.GroupPeers != nil {
		s = append(s, "GroupPeers: "+fmt.Sprintf("%#v", this.GroupPeers)+",\n")
	}
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GroupMembersSubset) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.GroupMembersSubset{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	s = append(s, "MemberIds: "+fmt.Sprintf("%#v", this.MemberIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetReferencedEntitites) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestGetReferencedEntitites{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Mids != nil {
		s = append(s, "Mids: "+fmt.Sprintf("%#v", this.Mids)+",\n")
	}
	if this.GroupMembers != nil {
		s = append(s, "GroupMembers: "+fmt.Sprintf("%#v", this.GroupMembers)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetReferencedEntitites) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseGetReferencedEntitites{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	if this.Messages != nil {
		s = append(s, "Messages: "+fmt.Sprintf("%#v", this.Messages)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateRawUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateRawUpdate{")
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	s = append(s, "Bytes: "+fmt.Sprintf("%#v", this.Bytes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateEmptyUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.UpdateEmptyUpdate{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSubscribeToOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestSubscribeToOnline{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSubscribeFromOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestSubscribeFromOnline{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSubscribeToGroupOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestSubscribeToGroupOnline{")
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSubscribeFromGroupOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestSubscribeFromGroupOnline{")
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SeqUpdateBox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.SeqUpdateBox{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Update != nil {
		s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	}
	if this.UnboxedUpdate != nil {
		s = append(s, "UnboxedUpdate: "+fmt.Sprintf("%#v", this.UnboxedUpdate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSequenceAndUpdates(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SequenceAndUpdates service

type SequenceAndUpdatesClient interface {
	// / Get last seq number
	GetState(ctx context.Context, in *RequestGetState, opts ...grpc.CallOption) (*ResponseSeq, error)
	// / Get all update that happens after given seq number
	GetDifference(ctx context.Context, in *RequestGetDifference, opts ...grpc.CallOption) (*ResponseGetDifference, error)
	// / Load all dialogs that changed after given date
	GetDialogsDifference(ctx context.Context, in *RequestGetDialogsDifference, opts ...grpc.CallOption) (*ResponseGetDialogsDifference, error)
	// / Load some required entities
	GetReferencedEntitites(ctx context.Context, in *RequestGetReferencedEntitites, opts ...grpc.CallOption) (*ResponseGetReferencedEntitites, error)
	SubscribeToOnline(ctx context.Context, in *RequestSubscribeToOnline, opts ...grpc.CallOption) (*ResponseVoid, error)
	SubscribeFromOnline(ctx context.Context, in *RequestSubscribeFromOnline, opts ...grpc.CallOption) (*ResponseVoid, error)
	SubscribeToGroupOnline(ctx context.Context, in *RequestSubscribeToGroupOnline, opts ...grpc.CallOption) (*ResponseVoid, error)
	SubscribeFromGroupOnline(ctx context.Context, in *RequestSubscribeFromGroupOnline, opts ...grpc.CallOption) (*ResponseVoid, error)
	// / Get stream of the user's updates
	SeqUpdates(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (SequenceAndUpdates_SeqUpdatesClient, error)
}

type sequenceAndUpdatesClient struct {
	cc *grpc.ClientConn
}

func NewSequenceAndUpdatesClient(cc *grpc.ClientConn) SequenceAndUpdatesClient {
	return &sequenceAndUpdatesClient{cc}
}

func (c *sequenceAndUpdatesClient) GetState(ctx context.Context, in *RequestGetState, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.SequenceAndUpdates/GetState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) GetDifference(ctx context.Context, in *RequestGetDifference, opts ...grpc.CallOption) (*ResponseGetDifference, error) {
	out := new(ResponseGetDifference)
	err := grpc.Invoke(ctx, "/dialog.SequenceAndUpdates/GetDifference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) GetDialogsDifference(ctx context.Context, in *RequestGetDialogsDifference, opts ...grpc.CallOption) (*ResponseGetDialogsDifference, error) {
	out := new(ResponseGetDialogsDifference)
	err := grpc.Invoke(ctx, "/dialog.SequenceAndUpdates/GetDialogsDifference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) GetReferencedEntitites(ctx context.Context, in *RequestGetReferencedEntitites, opts ...grpc.CallOption) (*ResponseGetReferencedEntitites, error) {
	out := new(ResponseGetReferencedEntitites)
	err := grpc.Invoke(ctx, "/dialog.SequenceAndUpdates/GetReferencedEntitites", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) SubscribeToOnline(ctx context.Context, in *RequestSubscribeToOnline, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.SequenceAndUpdates/SubscribeToOnline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) SubscribeFromOnline(ctx context.Context, in *RequestSubscribeFromOnline, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.SequenceAndUpdates/SubscribeFromOnline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) SubscribeToGroupOnline(ctx context.Context, in *RequestSubscribeToGroupOnline, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.SequenceAndUpdates/SubscribeToGroupOnline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) SubscribeFromGroupOnline(ctx context.Context, in *RequestSubscribeFromGroupOnline, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.SequenceAndUpdates/SubscribeFromGroupOnline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) SeqUpdates(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (SequenceAndUpdates_SeqUpdatesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SequenceAndUpdates_serviceDesc.Streams[0], c.cc, "/dialog.SequenceAndUpdates/SeqUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &sequenceAndUpdatesSeqUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SequenceAndUpdates_SeqUpdatesClient interface {
	Recv() (*SeqUpdateBox, error)
	grpc.ClientStream
}

type sequenceAndUpdatesSeqUpdatesClient struct {
	grpc.ClientStream
}

func (x *sequenceAndUpdatesSeqUpdatesClient) Recv() (*SeqUpdateBox, error) {
	m := new(SeqUpdateBox)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SequenceAndUpdates service

type SequenceAndUpdatesServer interface {
	// / Get last seq number
	GetState(context.Context, *RequestGetState) (*ResponseSeq, error)
	// / Get all update that happens after given seq number
	GetDifference(context.Context, *RequestGetDifference) (*ResponseGetDifference, error)
	// / Load all dialogs that changed after given date
	GetDialogsDifference(context.Context, *RequestGetDialogsDifference) (*ResponseGetDialogsDifference, error)
	// / Load some required entities
	GetReferencedEntitites(context.Context, *RequestGetReferencedEntitites) (*ResponseGetReferencedEntitites, error)
	SubscribeToOnline(context.Context, *RequestSubscribeToOnline) (*ResponseVoid, error)
	SubscribeFromOnline(context.Context, *RequestSubscribeFromOnline) (*ResponseVoid, error)
	SubscribeToGroupOnline(context.Context, *RequestSubscribeToGroupOnline) (*ResponseVoid, error)
	SubscribeFromGroupOnline(context.Context, *RequestSubscribeFromGroupOnline) (*ResponseVoid, error)
	// / Get stream of the user's updates
	SeqUpdates(*google_protobuf2.Empty, SequenceAndUpdates_SeqUpdatesServer) error
}

func RegisterSequenceAndUpdatesServer(s *grpc.Server, srv SequenceAndUpdatesServer) {
	s.RegisterService(&_SequenceAndUpdates_serviceDesc, srv)
}

func _SequenceAndUpdates_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).GetState(ctx, req.(*RequestGetState))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_GetDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).GetDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/GetDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).GetDifference(ctx, req.(*RequestGetDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_GetDialogsDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetDialogsDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).GetDialogsDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/GetDialogsDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).GetDialogsDifference(ctx, req.(*RequestGetDialogsDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_GetReferencedEntitites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetReferencedEntitites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).GetReferencedEntitites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/GetReferencedEntitites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).GetReferencedEntitites(ctx, req.(*RequestGetReferencedEntitites))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_SubscribeToOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSubscribeToOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).SubscribeToOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/SubscribeToOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).SubscribeToOnline(ctx, req.(*RequestSubscribeToOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_SubscribeFromOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSubscribeFromOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).SubscribeFromOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/SubscribeFromOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).SubscribeFromOnline(ctx, req.(*RequestSubscribeFromOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_SubscribeToGroupOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSubscribeToGroupOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).SubscribeToGroupOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/SubscribeToGroupOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).SubscribeToGroupOnline(ctx, req.(*RequestSubscribeToGroupOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_SubscribeFromGroupOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSubscribeFromGroupOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).SubscribeFromGroupOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/SubscribeFromGroupOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).SubscribeFromGroupOnline(ctx, req.(*RequestSubscribeFromGroupOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_SeqUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf2.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SequenceAndUpdatesServer).SeqUpdates(m, &sequenceAndUpdatesSeqUpdatesServer{stream})
}

type SequenceAndUpdates_SeqUpdatesServer interface {
	Send(*SeqUpdateBox) error
	grpc.ServerStream
}

type sequenceAndUpdatesSeqUpdatesServer struct {
	grpc.ServerStream
}

func (x *sequenceAndUpdatesSeqUpdatesServer) Send(m *SeqUpdateBox) error {
	return x.ServerStream.SendMsg(m)
}

var _SequenceAndUpdates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.SequenceAndUpdates",
	HandlerType: (*SequenceAndUpdatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _SequenceAndUpdates_GetState_Handler,
		},
		{
			MethodName: "GetDifference",
			Handler:    _SequenceAndUpdates_GetDifference_Handler,
		},
		{
			MethodName: "GetDialogsDifference",
			Handler:    _SequenceAndUpdates_GetDialogsDifference_Handler,
		},
		{
			MethodName: "GetReferencedEntitites",
			Handler:    _SequenceAndUpdates_GetReferencedEntitites_Handler,
		},
		{
			MethodName: "SubscribeToOnline",
			Handler:    _SequenceAndUpdates_SubscribeToOnline_Handler,
		},
		{
			MethodName: "SubscribeFromOnline",
			Handler:    _SequenceAndUpdates_SubscribeFromOnline_Handler,
		},
		{
			MethodName: "SubscribeToGroupOnline",
			Handler:    _SequenceAndUpdates_SubscribeToGroupOnline_Handler,
		},
		{
			MethodName: "SubscribeFromGroupOnline",
			Handler:    _SequenceAndUpdates_SubscribeFromGroupOnline_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SeqUpdates",
			Handler:       _SequenceAndUpdates_SeqUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sequence_and_updates.proto",
}

func (m *UpdateSeqUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSeqUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Seq))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if m.UpdateHeader != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateHeader))
	}
	if m.Update != nil {
		nn1, err := m.Update.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *UpdateSeqUpdate_UpdateForceReloadState) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateForceReloadState != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateForceReloadState.Size()))
		n2, err := m.UpdateForceReloadState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserAvatarChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserAvatarChanged != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserAvatarChanged.Size()))
		n3, err := m.UpdateUserAvatarChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserNameChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserNameChanged != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserNameChanged.Size()))
		n4, err := m.UpdateUserNameChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserLocalNameChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserLocalNameChanged != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserLocalNameChanged.Size()))
		n5, err := m.UpdateUserLocalNameChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserContactsChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserContactsChanged != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserContactsChanged.Size()))
		n6, err := m.UpdateUserContactsChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserNickChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserNickChanged != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserNickChanged.Size()))
		n7, err := m.UpdateUserNickChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserAboutChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserAboutChanged != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserAboutChanged.Size()))
		n8, err := m.UpdateUserAboutChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserPreferredLanguagesChanged != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserPreferredLanguagesChanged.Size()))
		n9, err := m.UpdateUserPreferredLanguagesChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserTimeZoneChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserTimeZoneChanged != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserTimeZoneChanged.Size()))
		n10, err := m.UpdateUserTimeZoneChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserBotCommandsChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserBotCommandsChanged != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserBotCommandsChanged.Size()))
		n11, err := m.UpdateUserBotCommandsChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserExtChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserExtChanged != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserExtChanged.Size()))
		n12, err := m.UpdateUserExtChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserFullExtChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserFullExtChanged != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserFullExtChanged.Size()))
		n13, err := m.UpdateUserFullExtChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserSexChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserSexChanged != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserSexChanged.Size()))
		n14, err := m.UpdateUserSexChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserCustomProfileChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserCustomProfileChanged != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserCustomProfileChanged.Size()))
		n15, err := m.UpdateUserCustomProfileChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserStatusChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserStatusChanged != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserStatusChanged.Size()))
		n16, err := m.UpdateUserStatusChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateContactRegistered) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateContactRegistered != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateContactRegistered.Size()))
		n17, err := m.UpdateContactRegistered.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateContactsAdded) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateContactsAdded != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateContactsAdded.Size()))
		n18, err := m.UpdateContactsAdded.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateContactsAddTaskSuspended) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateContactsAddTaskSuspended != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateContactsAddTaskSuspended.Size()))
		n19, err := m.UpdateContactsAddTaskSuspended.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateContactsRemoved) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateContactsRemoved != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateContactsRemoved.Size()))
		n20, err := m.UpdateContactsRemoved.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserBlocked) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserBlocked != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserBlocked.Size()))
		n21, err := m.UpdateUserBlocked.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserUnblocked) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserUnblocked != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserUnblocked.Size()))
		n22, err := m.UpdateUserUnblocked.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateInteractiveMediaEvent) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateInteractiveMediaEvent != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateInteractiveMediaEvent.Size()))
		n23, err := m.UpdateInteractiveMediaEvent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateMessage != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateMessage.Size()))
		n24, err := m.UpdateMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateMessageContentChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateMessageContentChanged != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateMessageContentChanged.Size()))
		n25, err := m.UpdateMessageContentChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateMessageSent) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateMessageSent != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateMessageSent.Size()))
		n26, err := m.UpdateMessageSent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateMessageReceived) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateMessageReceived != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateMessageReceived.Size()))
		n27, err := m.UpdateMessageReceived.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateMessageRead) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateMessageRead != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateMessageRead.Size()))
		n28, err := m.UpdateMessageRead.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateMessageReadByMe) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateMessageReadByMe != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateMessageReadByMe.Size()))
		n29, err := m.UpdateMessageReadByMe.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateMessageDelete) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateMessageDelete != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateMessageDelete.Size()))
		n30, err := m.UpdateMessageDelete.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateChatClear) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateChatClear != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateChatClear.Size()))
		n31, err := m.UpdateChatClear.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateChatDelete) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateChatDelete != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateChatDelete.Size()))
		n32, err := m.UpdateChatDelete.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateChatArchive) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateChatArchive != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateChatArchive.Size()))
		n33, err := m.UpdateChatArchive.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateChatGroupsChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateChatGroupsChanged != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateChatGroupsChanged.Size()))
		n34, err := m.UpdateChatGroupsChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateReactionsUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateReactionsUpdate != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateReactionsUpdate.Size()))
		n35, err := m.UpdateReactionsUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateDialogFavouriteChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateDialogFavouriteChanged != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateDialogFavouriteChanged.Size()))
		n36, err := m.UpdateDialogFavouriteChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdatePinnedMessagesChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdatePinnedMessagesChanged != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdatePinnedMessagesChanged.Size()))
		n37, err := m.UpdatePinnedMessagesChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupTitleChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupTitleChanged != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupTitleChanged.Size()))
		n38, err := m.UpdateGroupTitleChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupAvatarChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupAvatarChanged != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupAvatarChanged.Size()))
		n39, err := m.UpdateGroupAvatarChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupTopicChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupTopicChanged != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupTopicChanged.Size()))
		n40, err := m.UpdateGroupTopicChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupAboutChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupAboutChanged != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupAboutChanged.Size()))
		n41, err := m.UpdateGroupAboutChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupOwnerChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupOwnerChanged != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupOwnerChanged.Size()))
		n42, err := m.UpdateGroupOwnerChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupHistoryShared) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupHistoryShared != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupHistoryShared.Size()))
		n43, err := m.UpdateGroupHistoryShared.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupCanSendMessagesChanged != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupCanSendMessagesChanged.Size()))
		n44, err := m.UpdateGroupCanSendMessagesChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupCanViewMembersChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupCanViewMembersChanged != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupCanViewMembersChanged.Size()))
		n45, err := m.UpdateGroupCanViewMembersChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupCanInviteMembersChanged != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupCanInviteMembersChanged.Size()))
		n46, err := m.UpdateGroupCanInviteMembersChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupMemberChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupMemberChanged != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupMemberChanged.Size()))
		n47, err := m.UpdateGroupMemberChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupMembersBecameAsync) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupMembersBecameAsync != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupMembersBecameAsync.Size()))
		n48, err := m.UpdateGroupMembersBecameAsync.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupMembersUpdated) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupMembersUpdated != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupMembersUpdated.Size()))
		n49, err := m.UpdateGroupMembersUpdated.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupMemberDiff) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupMemberDiff != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupMemberDiff.Size()))
		n50, err := m.UpdateGroupMemberDiff.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupMembersCountChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupMembersCountChanged != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupMembersCountChanged.Size()))
		n51, err := m.UpdateGroupMembersCountChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupMemberAdminChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupMemberAdminChanged != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupMemberAdminChanged.Size()))
		n52, err := m.UpdateGroupMemberAdminChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupMemberPermissionsChanged != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupMemberPermissionsChanged.Size()))
		n53, err := m.UpdateGroupMemberPermissionsChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupInviteObsolete) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupInviteObsolete != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupInviteObsolete.Size()))
		n54, err := m.UpdateGroupInviteObsolete.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupUserInvitedObsolete) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupUserInvitedObsolete != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupUserInvitedObsolete.Size()))
		n55, err := m.UpdateGroupUserInvitedObsolete.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupUserLeaveObsolete) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupUserLeaveObsolete != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupUserLeaveObsolete.Size()))
		n56, err := m.UpdateGroupUserLeaveObsolete.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupUserKickObsolete) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupUserKickObsolete != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupUserKickObsolete.Size()))
		n57, err := m.UpdateGroupUserKickObsolete.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupMembersUpdateObsolete != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupMembersUpdateObsolete.Size()))
		n58, err := m.UpdateGroupMembersUpdateObsolete.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupTitleChangedObsolete) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupTitleChangedObsolete != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupTitleChangedObsolete.Size()))
		n59, err := m.UpdateGroupTitleChangedObsolete.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupTopicChangedObsolete) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupTopicChangedObsolete != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupTopicChangedObsolete.Size()))
		n60, err := m.UpdateGroupTopicChangedObsolete.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupAboutChangedObsolete) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupAboutChangedObsolete != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupAboutChangedObsolete.Size()))
		n61, err := m.UpdateGroupAboutChangedObsolete.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupAvatarChangedObsolete != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupAvatarChangedObsolete.Size()))
		n62, err := m.UpdateGroupAvatarChangedObsolete.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupShortnameChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupShortnameChanged != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupShortnameChanged.Size()))
		n63, err := m.UpdateGroupShortnameChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateStickerCollectionsChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateStickerCollectionsChanged != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateStickerCollectionsChanged.Size()))
		n64, err := m.UpdateStickerCollectionsChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateStickerPackRemoved) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateStickerPackRemoved != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateStickerPackRemoved.Size()))
		n65, err := m.UpdateStickerPackRemoved.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateStickerPackAdded) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateStickerPackAdded != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateStickerPackAdded.Size()))
		n66, err := m.UpdateStickerPackAdded.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdatePauseNotifications) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdatePauseNotifications != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdatePauseNotifications.Size()))
		n67, err := m.UpdatePauseNotifications.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateRestoreNotifications) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateRestoreNotifications != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateRestoreNotifications.Size()))
		n68, err := m.UpdateRestoreNotifications.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateTyping) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateTyping != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateTyping.Size()))
		n69, err := m.UpdateTyping.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateTypingStop) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateTypingStop != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateTypingStop.Size()))
		n70, err := m.UpdateTypingStop.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserOnline) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserOnline != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserOnline.Size()))
		n71, err := m.UpdateUserOnline.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserOffline) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserOffline != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserOffline.Size()))
		n72, err := m.UpdateUserOffline.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateUserLastSeen) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateUserLastSeen != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateUserLastSeen.Size()))
		n73, err := m.UpdateUserLastSeen.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupOnline) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateGroupOnline != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateGroupOnline.Size()))
		n74, err := m.UpdateGroupOnline.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateEventBusDeviceConnected) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateEventBusDeviceConnected != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateEventBusDeviceConnected.Size()))
		n75, err := m.UpdateEventBusDeviceConnected.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateEventBusDeviceDisconnected) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateEventBusDeviceDisconnected != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateEventBusDeviceDisconnected.Size()))
		n76, err := m.UpdateEventBusDeviceDisconnected.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateEventBusMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateEventBusMessage != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateEventBusMessage.Size()))
		n77, err := m.UpdateEventBusMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateEventBusDisposed) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateEventBusDisposed != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateEventBusDisposed.Size()))
		n78, err := m.UpdateEventBusDisposed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateIncomingCallDeprecated) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateIncomingCallDeprecated != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateIncomingCallDeprecated.Size()))
		n79, err := m.UpdateIncomingCallDeprecated.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n79
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateIncomingCall) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateIncomingCall != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateIncomingCall.Size()))
		n80, err := m.UpdateIncomingCall.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateCallHandled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateCallHandled != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateCallHandled.Size()))
		n81, err := m.UpdateCallHandled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateCallDisposed) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateCallDisposed != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateCallDisposed.Size()))
		n82, err := m.UpdateCallDisposed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateParameterChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateParameterChanged != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateParameterChanged.Size()))
		n83, err := m.UpdateParameterChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateRawUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateRawUpdate != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateRawUpdate.Size()))
		n84, err := m.UpdateRawUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateEmptyUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateEmptyUpdate != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateEmptyUpdate.Size()))
		n85, err := m.UpdateEmptyUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n85
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateCountersChanged) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateCountersChanged != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateCountersChanged.Size()))
		n86, err := m.UpdateCountersChanged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n86
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateConfig != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateConfig.Size()))
		n87, err := m.UpdateConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n87
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateSpaceModified) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateSpaceModified != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateSpaceModified.Size()))
		n88, err := m.UpdateSpaceModified.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateSpaceMemberModified) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateSpaceMemberModified != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateSpaceMemberModified.Size()))
		n89, err := m.UpdateSpaceMemberModified.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n89
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateMessageRejectedByHook) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateMessageRejectedByHook != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateMessageRejectedByHook.Size()))
		n90, err := m.UpdateMessageRejectedByHook.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n90
	}
	return i, nil
}
func (m *UpdateSeqUpdate_UpdateMessageEditRejectedByHook) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateMessageEditRejectedByHook != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateMessageEditRejectedByHook.Size()))
		n91, err := m.UpdateMessageEditRejectedByHook.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n91
	}
	return i, nil
}
func (m *UpdateFatSeqUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFatSeqUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Seq))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if m.UpdateHeader != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateHeader))
	}
	if len(m.Update) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.Update)))
		i += copy(dAtA[i:], m.Update)
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0x32
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateWeakUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWeakUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Date != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Date))
	}
	if m.UpdateHeader != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateHeader))
	}
	if len(m.Update) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.Update)))
		i += copy(dAtA[i:], m.Update)
	}
	return i, nil
}

func (m *UpdateWeakFatUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWeakFatUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Date != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Date))
	}
	if m.UpdateHeader != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateHeader))
	}
	if len(m.Update) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.Update)))
		i += copy(dAtA[i:], m.Update)
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateSeqUpdateTooLong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSeqUpdateTooLong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdateContainer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateContainer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UpdateHeader != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateHeader))
	}
	if len(m.Update) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.Update)))
		i += copy(dAtA[i:], m.Update)
	}
	return i, nil
}

func (m *UpdateCombinedUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCombinedUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SeqStart != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.SeqStart))
	}
	if m.SeqEnd != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.SeqEnd))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Updates) > 0 {
		for _, msg := range m.Updates {
			dAtA[i] = 0x32
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestGetState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Optimizations) > 0 {
		dAtA93 := make([]byte, len(m.Optimizations)*10)
		var j92 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA93[j92] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j92++
			}
			dAtA93[j92] = uint8(num)
			j92++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(j92))
		i += copy(dAtA[i:], dAtA93[:j92])
	}
	return i, nil
}

func (m *RequestGetDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetDifference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Seq))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if len(m.Optimizations) > 0 {
		dAtA95 := make([]byte, len(m.Optimizations)*10)
		var j94 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA95[j94] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j94++
			}
			dAtA95[j94] = uint8(num)
			j94++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(j94))
		i += copy(dAtA[i:], dAtA95[:j94])
	}
	if m.ConfigHash != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.ConfigHash.Size()))
		n96, err := m.ConfigHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n96
	}
	return i, nil
}

func (m *ResponseGetDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetDifference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Seq))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Updates) > 0 {
		for _, msg := range m.Updates {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NeedMore {
		dAtA[i] = 0x28
		i++
		if m.NeedMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0x32
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UsersRefs) > 0 {
		for _, msg := range m.UsersRefs {
			dAtA[i] = 0x42
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GroupsRefs) > 0 {
		for _, msg := range m.GroupsRefs {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Config != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Config.Size()))
		n97, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n97
	}
	if m.ConfigHash != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.ConfigHash.Size()))
		n98, err := m.ConfigHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n98
	}
	return i, nil
}

func (m *RequestGetDialogsDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetDialogsDifference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Clock != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Clock))
	}
	return i, nil
}

func (m *ResponseGetDialogsDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetDialogsDifference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Dialogs) > 0 {
		for _, msg := range m.Dialogs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, msg := range m.GroupPeers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UserPeers) > 0 {
		for _, msg := range m.UserPeers {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GroupMembersSubset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMembersSubset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupPeer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.GroupPeer.Size()))
		n99, err := m.GroupPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n99
	}
	if len(m.MemberIds) > 0 {
		dAtA101 := make([]byte, len(m.MemberIds)*10)
		var j100 int
		for _, num1 := range m.MemberIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA101[j100] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j100++
			}
			dAtA101[j100] = uint8(num)
			j100++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(j100))
		i += copy(dAtA[i:], dAtA101[:j100])
	}
	return i, nil
}

func (m *RequestGetReferencedEntitites) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetReferencedEntitites) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Mids) > 0 {
		for _, msg := range m.Mids {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GroupMembers) > 0 {
		for _, msg := range m.GroupMembers {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ResponseGetReferencedEntitites) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetReferencedEntitites) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateRawUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRawUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Type.Size()))
		n102, err := m.Type.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n102
	}
	if len(m.Bytes) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.Bytes)))
		i += copy(dAtA[i:], m.Bytes)
	}
	return i, nil
}

func (m *UpdateEmptyUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEmptyUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RequestSubscribeToOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSubscribeToOnline) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestSubscribeFromOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSubscribeFromOnline) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestSubscribeToGroupOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSubscribeToGroupOnline) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestSubscribeFromGroupOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSubscribeFromGroupOnline) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SeqUpdateBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeqUpdateBox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Seq))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if m.Update != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Update.Size()))
		n103, err := m.Update.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n103
	}
	if m.UnboxedUpdate != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UnboxedUpdate.Size()))
		n104, err := m.UnboxedUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n104
	}
	return i, nil
}

func encodeFixed64SequenceAndUpdates(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32SequenceAndUpdates(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSequenceAndUpdates(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UpdateSeqUpdate) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if m.UpdateHeader != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.UpdateHeader))
	}
	if m.Update != nil {
		n += m.Update.Size()
	}
	return n
}

func (m *UpdateSeqUpdate_UpdateForceReloadState) Size() (n int) {
	var l int
	_ = l
	if m.UpdateForceReloadState != nil {
		l = m.UpdateForceReloadState.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserAvatarChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserAvatarChanged != nil {
		l = m.UpdateUserAvatarChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserNameChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserNameChanged != nil {
		l = m.UpdateUserNameChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserLocalNameChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserLocalNameChanged != nil {
		l = m.UpdateUserLocalNameChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserContactsChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserContactsChanged != nil {
		l = m.UpdateUserContactsChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserNickChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserNickChanged != nil {
		l = m.UpdateUserNickChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserAboutChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserAboutChanged != nil {
		l = m.UpdateUserAboutChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserPreferredLanguagesChanged != nil {
		l = m.UpdateUserPreferredLanguagesChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserTimeZoneChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserTimeZoneChanged != nil {
		l = m.UpdateUserTimeZoneChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserBotCommandsChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserBotCommandsChanged != nil {
		l = m.UpdateUserBotCommandsChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserExtChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserExtChanged != nil {
		l = m.UpdateUserExtChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserFullExtChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserFullExtChanged != nil {
		l = m.UpdateUserFullExtChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserSexChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserSexChanged != nil {
		l = m.UpdateUserSexChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserCustomProfileChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserCustomProfileChanged != nil {
		l = m.UpdateUserCustomProfileChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserStatusChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserStatusChanged != nil {
		l = m.UpdateUserStatusChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateContactRegistered) Size() (n int) {
	var l int
	_ = l
	if m.UpdateContactRegistered != nil {
		l = m.UpdateContactRegistered.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateContactsAdded) Size() (n int) {
	var l int
	_ = l
	if m.UpdateContactsAdded != nil {
		l = m.UpdateContactsAdded.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateContactsAddTaskSuspended) Size() (n int) {
	var l int
	_ = l
	if m.UpdateContactsAddTaskSuspended != nil {
		l = m.UpdateContactsAddTaskSuspended.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateContactsRemoved) Size() (n int) {
	var l int
	_ = l
	if m.UpdateContactsRemoved != nil {
		l = m.UpdateContactsRemoved.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserBlocked) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserBlocked != nil {
		l = m.UpdateUserBlocked.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserUnblocked) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserUnblocked != nil {
		l = m.UpdateUserUnblocked.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateInteractiveMediaEvent) Size() (n int) {
	var l int
	_ = l
	if m.UpdateInteractiveMediaEvent != nil {
		l = m.UpdateInteractiveMediaEvent.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateMessage) Size() (n int) {
	var l int
	_ = l
	if m.UpdateMessage != nil {
		l = m.UpdateMessage.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateMessageContentChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateMessageContentChanged != nil {
		l = m.UpdateMessageContentChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateMessageSent) Size() (n int) {
	var l int
	_ = l
	if m.UpdateMessageSent != nil {
		l = m.UpdateMessageSent.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateMessageReceived) Size() (n int) {
	var l int
	_ = l
	if m.UpdateMessageReceived != nil {
		l = m.UpdateMessageReceived.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateMessageRead) Size() (n int) {
	var l int
	_ = l
	if m.UpdateMessageRead != nil {
		l = m.UpdateMessageRead.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateMessageReadByMe) Size() (n int) {
	var l int
	_ = l
	if m.UpdateMessageReadByMe != nil {
		l = m.UpdateMessageReadByMe.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateMessageDelete) Size() (n int) {
	var l int
	_ = l
	if m.UpdateMessageDelete != nil {
		l = m.UpdateMessageDelete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateChatClear) Size() (n int) {
	var l int
	_ = l
	if m.UpdateChatClear != nil {
		l = m.UpdateChatClear.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateChatDelete) Size() (n int) {
	var l int
	_ = l
	if m.UpdateChatDelete != nil {
		l = m.UpdateChatDelete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateChatArchive) Size() (n int) {
	var l int
	_ = l
	if m.UpdateChatArchive != nil {
		l = m.UpdateChatArchive.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateChatGroupsChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateChatGroupsChanged != nil {
		l = m.UpdateChatGroupsChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateReactionsUpdate) Size() (n int) {
	var l int
	_ = l
	if m.UpdateReactionsUpdate != nil {
		l = m.UpdateReactionsUpdate.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateDialogFavouriteChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateDialogFavouriteChanged != nil {
		l = m.UpdateDialogFavouriteChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdatePinnedMessagesChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdatePinnedMessagesChanged != nil {
		l = m.UpdatePinnedMessagesChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupTitleChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupTitleChanged != nil {
		l = m.UpdateGroupTitleChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupAvatarChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupAvatarChanged != nil {
		l = m.UpdateGroupAvatarChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupTopicChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupTopicChanged != nil {
		l = m.UpdateGroupTopicChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupAboutChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupAboutChanged != nil {
		l = m.UpdateGroupAboutChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupOwnerChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupOwnerChanged != nil {
		l = m.UpdateGroupOwnerChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupHistoryShared) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupHistoryShared != nil {
		l = m.UpdateGroupHistoryShared.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupCanSendMessagesChanged != nil {
		l = m.UpdateGroupCanSendMessagesChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupCanViewMembersChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupCanViewMembersChanged != nil {
		l = m.UpdateGroupCanViewMembersChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupCanInviteMembersChanged != nil {
		l = m.UpdateGroupCanInviteMembersChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupMemberChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupMemberChanged != nil {
		l = m.UpdateGroupMemberChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupMembersBecameAsync) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupMembersBecameAsync != nil {
		l = m.UpdateGroupMembersBecameAsync.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupMembersUpdated) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupMembersUpdated != nil {
		l = m.UpdateGroupMembersUpdated.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupMemberDiff) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupMemberDiff != nil {
		l = m.UpdateGroupMemberDiff.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupMembersCountChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupMembersCountChanged != nil {
		l = m.UpdateGroupMembersCountChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupMemberAdminChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupMemberAdminChanged != nil {
		l = m.UpdateGroupMemberAdminChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupMemberPermissionsChanged != nil {
		l = m.UpdateGroupMemberPermissionsChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupInviteObsolete) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupInviteObsolete != nil {
		l = m.UpdateGroupInviteObsolete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupUserInvitedObsolete) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupUserInvitedObsolete != nil {
		l = m.UpdateGroupUserInvitedObsolete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupUserLeaveObsolete) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupUserLeaveObsolete != nil {
		l = m.UpdateGroupUserLeaveObsolete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupUserKickObsolete) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupUserKickObsolete != nil {
		l = m.UpdateGroupUserKickObsolete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupMembersUpdateObsolete != nil {
		l = m.UpdateGroupMembersUpdateObsolete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupTitleChangedObsolete) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupTitleChangedObsolete != nil {
		l = m.UpdateGroupTitleChangedObsolete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupTopicChangedObsolete) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupTopicChangedObsolete != nil {
		l = m.UpdateGroupTopicChangedObsolete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupAboutChangedObsolete) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupAboutChangedObsolete != nil {
		l = m.UpdateGroupAboutChangedObsolete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupAvatarChangedObsolete != nil {
		l = m.UpdateGroupAvatarChangedObsolete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupShortnameChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupShortnameChanged != nil {
		l = m.UpdateGroupShortnameChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateStickerCollectionsChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateStickerCollectionsChanged != nil {
		l = m.UpdateStickerCollectionsChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateStickerPackRemoved) Size() (n int) {
	var l int
	_ = l
	if m.UpdateStickerPackRemoved != nil {
		l = m.UpdateStickerPackRemoved.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateStickerPackAdded) Size() (n int) {
	var l int
	_ = l
	if m.UpdateStickerPackAdded != nil {
		l = m.UpdateStickerPackAdded.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdatePauseNotifications) Size() (n int) {
	var l int
	_ = l
	if m.UpdatePauseNotifications != nil {
		l = m.UpdatePauseNotifications.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateRestoreNotifications) Size() (n int) {
	var l int
	_ = l
	if m.UpdateRestoreNotifications != nil {
		l = m.UpdateRestoreNotifications.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateTyping) Size() (n int) {
	var l int
	_ = l
	if m.UpdateTyping != nil {
		l = m.UpdateTyping.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateTypingStop) Size() (n int) {
	var l int
	_ = l
	if m.UpdateTypingStop != nil {
		l = m.UpdateTypingStop.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserOnline) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserOnline != nil {
		l = m.UpdateUserOnline.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserOffline) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserOffline != nil {
		l = m.UpdateUserOffline.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserLastSeen) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserLastSeen != nil {
		l = m.UpdateUserLastSeen.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupOnline) Size() (n int) {
	var l int
	_ = l
	if m.UpdateGroupOnline != nil {
		l = m.UpdateGroupOnline.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateEventBusDeviceConnected) Size() (n int) {
	var l int
	_ = l
	if m.UpdateEventBusDeviceConnected != nil {
		l = m.UpdateEventBusDeviceConnected.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateEventBusDeviceDisconnected) Size() (n int) {
	var l int
	_ = l
	if m.UpdateEventBusDeviceDisconnected != nil {
		l = m.UpdateEventBusDeviceDisconnected.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateEventBusMessage) Size() (n int) {
	var l int
	_ = l
	if m.UpdateEventBusMessage != nil {
		l = m.UpdateEventBusMessage.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateEventBusDisposed) Size() (n int) {
	var l int
	_ = l
	if m.UpdateEventBusDisposed != nil {
		l = m.UpdateEventBusDisposed.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateIncomingCallDeprecated) Size() (n int) {
	var l int
	_ = l
	if m.UpdateIncomingCallDeprecated != nil {
		l = m.UpdateIncomingCallDeprecated.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateIncomingCall) Size() (n int) {
	var l int
	_ = l
	if m.UpdateIncomingCall != nil {
		l = m.UpdateIncomingCall.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateCallHandled) Size() (n int) {
	var l int
	_ = l
	if m.UpdateCallHandled != nil {
		l = m.UpdateCallHandled.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateCallDisposed) Size() (n int) {
	var l int
	_ = l
	if m.UpdateCallDisposed != nil {
		l = m.UpdateCallDisposed.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateParameterChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateParameterChanged != nil {
		l = m.UpdateParameterChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateRawUpdate) Size() (n int) {
	var l int
	_ = l
	if m.UpdateRawUpdate != nil {
		l = m.UpdateRawUpdate.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateEmptyUpdate) Size() (n int) {
	var l int
	_ = l
	if m.UpdateEmptyUpdate != nil {
		l = m.UpdateEmptyUpdate.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateCountersChanged) Size() (n int) {
	var l int
	_ = l
	if m.UpdateCountersChanged != nil {
		l = m.UpdateCountersChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateConfig) Size() (n int) {
	var l int
	_ = l
	if m.UpdateConfig != nil {
		l = m.UpdateConfig.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateSpaceModified) Size() (n int) {
	var l int
	_ = l
	if m.UpdateSpaceModified != nil {
		l = m.UpdateSpaceModified.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateSpaceMemberModified) Size() (n int) {
	var l int
	_ = l
	if m.UpdateSpaceMemberModified != nil {
		l = m.UpdateSpaceMemberModified.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateMessageRejectedByHook) Size() (n int) {
	var l int
	_ = l
	if m.UpdateMessageRejectedByHook != nil {
		l = m.UpdateMessageRejectedByHook.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateMessageEditRejectedByHook) Size() (n int) {
	var l int
	_ = l
	if m.UpdateMessageEditRejectedByHook != nil {
		l = m.UpdateMessageEditRejectedByHook.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateFatSeqUpdate) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if m.UpdateHeader != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.UpdateHeader))
	}
	l = len(m.Update)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *UpdateWeakUpdate) Size() (n int) {
	var l int
	_ = l
	if m.Date != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.Date))
	}
	if m.UpdateHeader != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.UpdateHeader))
	}
	l = len(m.Update)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}

func (m *UpdateWeakFatUpdate) Size() (n int) {
	var l int
	_ = l
	if m.Date != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.Date))
	}
	if m.UpdateHeader != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.UpdateHeader))
	}
	l = len(m.Update)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *UpdateSeqUpdateTooLong) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpdateContainer) Size() (n int) {
	var l int
	_ = l
	if m.UpdateHeader != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.UpdateHeader))
	}
	l = len(m.Update)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}

func (m *UpdateCombinedUpdate) Size() (n int) {
	var l int
	_ = l
	if m.SeqStart != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.SeqStart))
	}
	if m.SeqEnd != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.SeqEnd))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *RequestGetState) Size() (n int) {
	var l int
	_ = l
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovSequenceAndUpdates(uint64(e))
		}
		n += 1 + sovSequenceAndUpdates(uint64(l)) + l
	}
	return n
}

func (m *RequestGetDifference) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovSequenceAndUpdates(uint64(e))
		}
		n += 1 + sovSequenceAndUpdates(uint64(l)) + l
	}
	if m.ConfigHash != nil {
		l = m.ConfigHash.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}

func (m *ResponseGetDifference) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if m.NeedMore {
		n += 2
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.UsersRefs) > 0 {
		for _, e := range m.UsersRefs {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.GroupsRefs) > 0 {
		for _, e := range m.GroupsRefs {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if m.ConfigHash != nil {
		l = m.ConfigHash.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}

func (m *RequestGetDialogsDifference) Size() (n int) {
	var l int
	_ = l
	if m.Clock != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.Clock))
	}
	return n
}

func (m *ResponseGetDialogsDifference) Size() (n int) {
	var l int
	_ = l
	if len(m.Dialogs) > 0 {
		for _, e := range m.Dialogs {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, e := range m.GroupPeers {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *GroupMembersSubset) Size() (n int) {
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if len(m.MemberIds) > 0 {
		l = 0
		for _, e := range m.MemberIds {
			l += sovSequenceAndUpdates(uint64(e))
		}
		n += 1 + sovSequenceAndUpdates(uint64(l)) + l
	}
	return n
}

func (m *RequestGetReferencedEntitites) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Mids) > 0 {
		for _, e := range m.Mids {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.GroupMembers) > 0 {
		for _, e := range m.GroupMembers {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *ResponseGetReferencedEntitites) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *UpdateRawUpdate) Size() (n int) {
	var l int
	_ = l
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}

func (m *UpdateEmptyUpdate) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RequestSubscribeToOnline) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *RequestSubscribeFromOnline) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *RequestSubscribeToGroupOnline) Size() (n int) {
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *RequestSubscribeFromGroupOnline) Size() (n int) {
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *SeqUpdateBox) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if m.Update != nil {
		l = m.Update.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if m.UnboxedUpdate != nil {
		l = m.UnboxedUpdate.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}

func sovSequenceAndUpdates(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSequenceAndUpdates(x uint64) (n int) {
	return sovSequenceAndUpdates(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UpdateSeqUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`UpdateHeader:` + fmt.Sprintf("%v", this.UpdateHeader) + `,`,
		`Update:` + fmt.Sprintf("%v", this.Update) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateForceReloadState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateForceReloadState{`,
		`UpdateForceReloadState:` + strings.Replace(fmt.Sprintf("%v", this.UpdateForceReloadState), "UpdateForceReloadState", "UpdateForceReloadState", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserAvatarChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserAvatarChanged{`,
		`UpdateUserAvatarChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserAvatarChanged), "UpdateUserAvatarChanged", "UpdateUserAvatarChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserNameChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserNameChanged{`,
		`UpdateUserNameChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserNameChanged), "UpdateUserNameChanged", "UpdateUserNameChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserLocalNameChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserLocalNameChanged{`,
		`UpdateUserLocalNameChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserLocalNameChanged), "UpdateUserLocalNameChanged", "UpdateUserLocalNameChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserContactsChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserContactsChanged{`,
		`UpdateUserContactsChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserContactsChanged), "UpdateUserContactsChanged", "UpdateUserContactsChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserNickChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserNickChanged{`,
		`UpdateUserNickChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserNickChanged), "UpdateUserNickChanged", "UpdateUserNickChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserAboutChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserAboutChanged{`,
		`UpdateUserAboutChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserAboutChanged), "UpdateUserAboutChanged", "UpdateUserAboutChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged{`,
		`UpdateUserPreferredLanguagesChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserPreferredLanguagesChanged), "UpdateUserPreferredLanguagesChanged", "UpdateUserPreferredLanguagesChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserTimeZoneChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserTimeZoneChanged{`,
		`UpdateUserTimeZoneChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserTimeZoneChanged), "UpdateUserTimeZoneChanged", "UpdateUserTimeZoneChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserBotCommandsChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserBotCommandsChanged{`,
		`UpdateUserBotCommandsChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserBotCommandsChanged), "UpdateUserBotCommandsChanged", "UpdateUserBotCommandsChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserExtChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserExtChanged{`,
		`UpdateUserExtChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserExtChanged), "UpdateUserExtChanged", "UpdateUserExtChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserFullExtChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserFullExtChanged{`,
		`UpdateUserFullExtChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserFullExtChanged), "UpdateUserFullExtChanged", "UpdateUserFullExtChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserSexChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserSexChanged{`,
		`UpdateUserSexChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserSexChanged), "UpdateUserSexChanged", "UpdateUserSexChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserCustomProfileChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserCustomProfileChanged{`,
		`UpdateUserCustomProfileChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserCustomProfileChanged), "UpdateUserCustomProfileChanged", "UpdateUserCustomProfileChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserStatusChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserStatusChanged{`,
		`UpdateUserStatusChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserStatusChanged), "UpdateUserStatusChanged", "UpdateUserStatusChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateContactRegistered) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateContactRegistered{`,
		`UpdateContactRegistered:` + strings.Replace(fmt.Sprintf("%v", this.UpdateContactRegistered), "UpdateContactRegistered", "UpdateContactRegistered", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateContactsAdded) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateContactsAdded{`,
		`UpdateContactsAdded:` + strings.Replace(fmt.Sprintf("%v", this.UpdateContactsAdded), "UpdateContactsAdded", "UpdateContactsAdded", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateContactsAddTaskSuspended) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateContactsAddTaskSuspended{`,
		`UpdateContactsAddTaskSuspended:` + strings.Replace(fmt.Sprintf("%v", this.UpdateContactsAddTaskSuspended), "UpdateContactsAddTaskSuspended", "UpdateContactsAddTaskSuspended", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateContactsRemoved) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateContactsRemoved{`,
		`UpdateContactsRemoved:` + strings.Replace(fmt.Sprintf("%v", this.UpdateContactsRemoved), "UpdateContactsRemoved", "UpdateContactsRemoved", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserBlocked) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserBlocked{`,
		`UpdateUserBlocked:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserBlocked), "UpdateUserBlocked", "UpdateUserBlocked", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserUnblocked) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserUnblocked{`,
		`UpdateUserUnblocked:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserUnblocked), "UpdateUserUnblocked", "UpdateUserUnblocked", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateInteractiveMediaEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateInteractiveMediaEvent{`,
		`UpdateInteractiveMediaEvent:` + strings.Replace(fmt.Sprintf("%v", this.UpdateInteractiveMediaEvent), "UpdateInteractiveMediaEvent", "UpdateInteractiveMediaEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateMessage{`,
		`UpdateMessage:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMessage), "UpdateMessage", "UpdateMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageContentChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateMessageContentChanged{`,
		`UpdateMessageContentChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMessageContentChanged), "UpdateMessageContentChanged", "UpdateMessageContentChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageSent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateMessageSent{`,
		`UpdateMessageSent:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMessageSent), "UpdateMessageSent", "UpdateMessageSent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageReceived) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateMessageReceived{`,
		`UpdateMessageReceived:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMessageReceived), "UpdateMessageReceived", "UpdateMessageReceived", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageRead) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateMessageRead{`,
		`UpdateMessageRead:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMessageRead), "UpdateMessageRead", "UpdateMessageRead", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageReadByMe) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateMessageReadByMe{`,
		`UpdateMessageReadByMe:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMessageReadByMe), "UpdateMessageReadByMe", "UpdateMessageReadByMe", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageDelete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateMessageDelete{`,
		`UpdateMessageDelete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMessageDelete), "UpdateMessageDelete", "UpdateMessageDelete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateChatClear) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateChatClear{`,
		`UpdateChatClear:` + strings.Replace(fmt.Sprintf("%v", this.UpdateChatClear), "UpdateChatClear", "UpdateChatClear", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateChatDelete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateChatDelete{`,
		`UpdateChatDelete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateChatDelete), "UpdateChatDelete", "UpdateChatDelete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateChatArchive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateChatArchive{`,
		`UpdateChatArchive:` + strings.Replace(fmt.Sprintf("%v", this.UpdateChatArchive), "UpdateChatArchive", "UpdateChatArchive", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateChatGroupsChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateChatGroupsChanged{`,
		`UpdateChatGroupsChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateChatGroupsChanged), "UpdateChatGroupsChanged", "UpdateChatGroupsChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateReactionsUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateReactionsUpdate{`,
		`UpdateReactionsUpdate:` + strings.Replace(fmt.Sprintf("%v", this.UpdateReactionsUpdate), "UpdateReactionsUpdate", "UpdateReactionsUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateDialogFavouriteChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateDialogFavouriteChanged{`,
		`UpdateDialogFavouriteChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateDialogFavouriteChanged), "UpdateDialogFavouriteChanged", "UpdateDialogFavouriteChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdatePinnedMessagesChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdatePinnedMessagesChanged{`,
		`UpdatePinnedMessagesChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdatePinnedMessagesChanged), "UpdatePinnedMessagesChanged", "UpdatePinnedMessagesChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupTitleChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupTitleChanged{`,
		`UpdateGroupTitleChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupTitleChanged), "UpdateGroupTitleChanged", "UpdateGroupTitleChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupAvatarChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupAvatarChanged{`,
		`UpdateGroupAvatarChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupAvatarChanged), "UpdateGroupAvatarChanged", "UpdateGroupAvatarChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupTopicChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupTopicChanged{`,
		`UpdateGroupTopicChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupTopicChanged), "UpdateGroupTopicChanged", "UpdateGroupTopicChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupAboutChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupAboutChanged{`,
		`UpdateGroupAboutChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupAboutChanged), "UpdateGroupAboutChanged", "UpdateGroupAboutChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupOwnerChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupOwnerChanged{`,
		`UpdateGroupOwnerChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupOwnerChanged), "UpdateGroupOwnerChanged", "UpdateGroupOwnerChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupHistoryShared) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupHistoryShared{`,
		`UpdateGroupHistoryShared:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupHistoryShared), "UpdateGroupHistoryShared", "UpdateGroupHistoryShared", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged{`,
		`UpdateGroupCanSendMessagesChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupCanSendMessagesChanged), "UpdateGroupCanSendMessagesChanged", "UpdateGroupCanSendMessagesChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupCanViewMembersChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupCanViewMembersChanged{`,
		`UpdateGroupCanViewMembersChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupCanViewMembersChanged), "UpdateGroupCanViewMembersChanged", "UpdateGroupCanViewMembersChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged{`,
		`UpdateGroupCanInviteMembersChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupCanInviteMembersChanged), "UpdateGroupCanInviteMembersChanged", "UpdateGroupCanInviteMembersChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMemberChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupMemberChanged{`,
		`UpdateGroupMemberChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupMemberChanged), "UpdateGroupMemberChanged", "UpdateGroupMemberChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMembersBecameAsync) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupMembersBecameAsync{`,
		`UpdateGroupMembersBecameAsync:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupMembersBecameAsync), "UpdateGroupMembersBecameAsync", "UpdateGroupMembersBecameAsync", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMembersUpdated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupMembersUpdated{`,
		`UpdateGroupMembersUpdated:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupMembersUpdated), "UpdateGroupMembersUpdated", "UpdateGroupMembersUpdated", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMemberDiff) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupMemberDiff{`,
		`UpdateGroupMemberDiff:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupMemberDiff), "UpdateGroupMemberDiff", "UpdateGroupMemberDiff", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMembersCountChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupMembersCountChanged{`,
		`UpdateGroupMembersCountChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupMembersCountChanged), "UpdateGroupMembersCountChanged", "UpdateGroupMembersCountChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMemberAdminChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupMemberAdminChanged{`,
		`UpdateGroupMemberAdminChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupMemberAdminChanged), "UpdateGroupMemberAdminChanged", "UpdateGroupMemberAdminChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged{`,
		`UpdateGroupMemberPermissionsChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupMemberPermissionsChanged), "UpdateGroupMemberPermissionsChanged", "UpdateGroupMemberPermissionsChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupInviteObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupInviteObsolete{`,
		`UpdateGroupInviteObsolete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupInviteObsolete), "UpdateGroupInviteObsolete", "UpdateGroupInviteObsolete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupUserInvitedObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupUserInvitedObsolete{`,
		`UpdateGroupUserInvitedObsolete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupUserInvitedObsolete), "UpdateGroupUserInvitedObsolete", "UpdateGroupUserInvitedObsolete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupUserLeaveObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupUserLeaveObsolete{`,
		`UpdateGroupUserLeaveObsolete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupUserLeaveObsolete), "UpdateGroupUserLeaveObsolete", "UpdateGroupUserLeaveObsolete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupUserKickObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupUserKickObsolete{`,
		`UpdateGroupUserKickObsolete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupUserKickObsolete), "UpdateGroupUserKickObsolete", "UpdateGroupUserKickObsolete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete{`,
		`UpdateGroupMembersUpdateObsolete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupMembersUpdateObsolete), "UpdateGroupMembersUpdateObsolete", "UpdateGroupMembersUpdateObsolete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupTitleChangedObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupTitleChangedObsolete{`,
		`UpdateGroupTitleChangedObsolete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupTitleChangedObsolete), "UpdateGroupTitleChangedObsolete", "UpdateGroupTitleChangedObsolete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupTopicChangedObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupTopicChangedObsolete{`,
		`UpdateGroupTopicChangedObsolete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupTopicChangedObsolete), "UpdateGroupTopicChangedObsolete", "UpdateGroupTopicChangedObsolete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupAboutChangedObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupAboutChangedObsolete{`,
		`UpdateGroupAboutChangedObsolete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupAboutChangedObsolete), "UpdateGroupAboutChangedObsolete", "UpdateGroupAboutChangedObsolete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete{`,
		`UpdateGroupAvatarChangedObsolete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupAvatarChangedObsolete), "UpdateGroupAvatarChangedObsolete", "UpdateGroupAvatarChangedObsolete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupShortnameChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupShortnameChanged{`,
		`UpdateGroupShortnameChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupShortnameChanged), "UpdateGroupShortnameChanged", "UpdateGroupShortnameChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateStickerCollectionsChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateStickerCollectionsChanged{`,
		`UpdateStickerCollectionsChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateStickerCollectionsChanged), "UpdateStickerCollectionsChanged", "UpdateStickerCollectionsChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateStickerPackRemoved) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateStickerPackRemoved{`,
		`UpdateStickerPackRemoved:` + strings.Replace(fmt.Sprintf("%v", this.UpdateStickerPackRemoved), "UpdateStickerPackRemoved", "UpdateStickerPackRemoved", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateStickerPackAdded) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateStickerPackAdded{`,
		`UpdateStickerPackAdded:` + strings.Replace(fmt.Sprintf("%v", this.UpdateStickerPackAdded), "UpdateStickerPackAdded", "UpdateStickerPackAdded", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdatePauseNotifications) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdatePauseNotifications{`,
		`UpdatePauseNotifications:` + strings.Replace(fmt.Sprintf("%v", this.UpdatePauseNotifications), "UpdatePauseNotifications", "UpdatePauseNotifications", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateRestoreNotifications) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateRestoreNotifications{`,
		`UpdateRestoreNotifications:` + strings.Replace(fmt.Sprintf("%v", this.UpdateRestoreNotifications), "UpdateRestoreNotifications", "UpdateRestoreNotifications", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateTyping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateTyping{`,
		`UpdateTyping:` + strings.Replace(fmt.Sprintf("%v", this.UpdateTyping), "UpdateTyping", "UpdateTyping", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateTypingStop) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateTypingStop{`,
		`UpdateTypingStop:` + strings.Replace(fmt.Sprintf("%v", this.UpdateTypingStop), "UpdateTypingStop", "UpdateTypingStop", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserOnline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserOnline{`,
		`UpdateUserOnline:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserOnline), "UpdateUserOnline", "UpdateUserOnline", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserOffline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserOffline{`,
		`UpdateUserOffline:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserOffline), "UpdateUserOffline", "UpdateUserOffline", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserLastSeen) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserLastSeen{`,
		`UpdateUserLastSeen:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserLastSeen), "UpdateUserLastSeen", "UpdateUserLastSeen", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupOnline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupOnline{`,
		`UpdateGroupOnline:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupOnline), "UpdateGroupOnline", "UpdateGroupOnline", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateEventBusDeviceConnected) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateEventBusDeviceConnected{`,
		`UpdateEventBusDeviceConnected:` + strings.Replace(fmt.Sprintf("%v", this.UpdateEventBusDeviceConnected), "UpdateEventBusDeviceConnected", "UpdateEventBusDeviceConnected", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateEventBusDeviceDisconnected) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateEventBusDeviceDisconnected{`,
		`UpdateEventBusDeviceDisconnected:` + strings.Replace(fmt.Sprintf("%v", this.UpdateEventBusDeviceDisconnected), "UpdateEventBusDeviceDisconnected", "UpdateEventBusDeviceDisconnected", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateEventBusMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateEventBusMessage{`,
		`UpdateEventBusMessage:` + strings.Replace(fmt.Sprintf("%v", this.UpdateEventBusMessage), "UpdateEventBusMessage", "UpdateEventBusMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateEventBusDisposed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateEventBusDisposed{`,
		`UpdateEventBusDisposed:` + strings.Replace(fmt.Sprintf("%v", this.UpdateEventBusDisposed), "UpdateEventBusDisposed", "UpdateEventBusDisposed", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateIncomingCallDeprecated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateIncomingCallDeprecated{`,
		`UpdateIncomingCallDeprecated:` + strings.Replace(fmt.Sprintf("%v", this.UpdateIncomingCallDeprecated), "UpdateIncomingCallDeprecated", "UpdateIncomingCallDeprecated", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateIncomingCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateIncomingCall{`,
		`UpdateIncomingCall:` + strings.Replace(fmt.Sprintf("%v", this.UpdateIncomingCall), "UpdateIncomingCall", "UpdateIncomingCall", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateCallHandled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateCallHandled{`,
		`UpdateCallHandled:` + strings.Replace(fmt.Sprintf("%v", this.UpdateCallHandled), "UpdateCallHandled", "UpdateCallHandled", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateCallDisposed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateCallDisposed{`,
		`UpdateCallDisposed:` + strings.Replace(fmt.Sprintf("%v", this.UpdateCallDisposed), "UpdateCallDisposed", "UpdateCallDisposed", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateParameterChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateParameterChanged{`,
		`UpdateParameterChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateParameterChanged), "UpdateParameterChanged", "UpdateParameterChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateRawUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateRawUpdate{`,
		`UpdateRawUpdate:` + strings.Replace(fmt.Sprintf("%v", this.UpdateRawUpdate), "UpdateRawUpdate", "UpdateRawUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateEmptyUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateEmptyUpdate{`,
		`UpdateEmptyUpdate:` + strings.Replace(fmt.Sprintf("%v", this.UpdateEmptyUpdate), "UpdateEmptyUpdate", "UpdateEmptyUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateCountersChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateCountersChanged{`,
		`UpdateCountersChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateCountersChanged), "UpdateCountersChanged", "UpdateCountersChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateConfig{`,
		`UpdateConfig:` + strings.Replace(fmt.Sprintf("%v", this.UpdateConfig), "UpdateConfig", "UpdateConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateSpaceModified) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateSpaceModified{`,
		`UpdateSpaceModified:` + strings.Replace(fmt.Sprintf("%v", this.UpdateSpaceModified), "UpdateSpaceModified", "UpdateSpaceModified", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateSpaceMemberModified) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateSpaceMemberModified{`,
		`UpdateSpaceMemberModified:` + strings.Replace(fmt.Sprintf("%v", this.UpdateSpaceMemberModified), "UpdateSpaceMemberModified", "UpdateSpaceMemberModified", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageRejectedByHook) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateMessageRejectedByHook{`,
		`UpdateMessageRejectedByHook:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMessageRejectedByHook), "UpdateMessageRejectedByHook", "UpdateMessageRejectedByHook", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageEditRejectedByHook) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateMessageEditRejectedByHook{`,
		`UpdateMessageEditRejectedByHook:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMessageEditRejectedByHook), "UpdateMessageEditRejectedByHook", "UpdateMessageEditRejectedByHook", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateFatSeqUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateFatSeqUpdate{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`UpdateHeader:` + fmt.Sprintf("%v", this.UpdateHeader) + `,`,
		`Update:` + fmt.Sprintf("%v", this.Update) + `,`,
		`Users:` + strings.Replace(fmt.Sprintf("%v", this.Users), "User", "User", 1) + `,`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "Group", "Group", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateWeakUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateWeakUpdate{`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`UpdateHeader:` + fmt.Sprintf("%v", this.UpdateHeader) + `,`,
		`Update:` + fmt.Sprintf("%v", this.Update) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateWeakFatUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateWeakFatUpdate{`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`UpdateHeader:` + fmt.Sprintf("%v", this.UpdateHeader) + `,`,
		`Update:` + fmt.Sprintf("%v", this.Update) + `,`,
		`Users:` + strings.Replace(fmt.Sprintf("%v", this.Users), "User", "User", 1) + `,`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "Group", "Group", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdateTooLong) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdateTooLong{`,
		`}`,
	}, "")
	return s
}
func (this *UpdateContainer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateContainer{`,
		`UpdateHeader:` + fmt.Sprintf("%v", this.UpdateHeader) + `,`,
		`Update:` + fmt.Sprintf("%v", this.Update) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateCombinedUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateCombinedUpdate{`,
		`SeqStart:` + fmt.Sprintf("%v", this.SeqStart) + `,`,
		`SeqEnd:` + fmt.Sprintf("%v", this.SeqEnd) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Users:` + strings.Replace(fmt.Sprintf("%v", this.Users), "User", "User", 1) + `,`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "Group", "Group", 1) + `,`,
		`Updates:` + strings.Replace(fmt.Sprintf("%v", this.Updates), "UpdateContainer", "UpdateContainer", 1) + `,`,
		`Messages:` + strings.Replace(fmt.Sprintf("%v", this.Messages), "HistoryMessage", "HistoryMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetState{`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetDifference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetDifference{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`ConfigHash:` + strings.Replace(fmt.Sprintf("%v", this.ConfigHash), "Int64Value", "google_protobuf.Int64Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetDifference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseGetDifference{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Users:` + strings.Replace(fmt.Sprintf("%v", this.Users), "User", "User", 1) + `,`,
		`Updates:` + strings.Replace(fmt.Sprintf("%v", this.Updates), "UpdateSeqUpdate", "UpdateSeqUpdate", 1) + `,`,
		`NeedMore:` + fmt.Sprintf("%v", this.NeedMore) + `,`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "Group", "Group", 1) + `,`,
		`Messages:` + strings.Replace(fmt.Sprintf("%v", this.Messages), "HistoryMessage", "HistoryMessage", 1) + `,`,
		`UsersRefs:` + strings.Replace(fmt.Sprintf("%v", this.UsersRefs), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`GroupsRefs:` + strings.Replace(fmt.Sprintf("%v", this.GroupsRefs), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`Config:` + strings.Replace(fmt.Sprintf("%v", this.Config), "Config", "Config", 1) + `,`,
		`ConfigHash:` + strings.Replace(fmt.Sprintf("%v", this.ConfigHash), "Int64Value", "google_protobuf.Int64Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetDialogsDifference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetDialogsDifference{`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetDialogsDifference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseGetDialogsDifference{`,
		`Dialogs:` + strings.Replace(fmt.Sprintf("%v", this.Dialogs), "Dialog", "Dialog", 1) + `,`,
		`GroupPeers:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeers), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`UserPeers:` + strings.Replace(fmt.Sprintf("%v", this.UserPeers), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GroupMembersSubset) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GroupMembersSubset{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`MemberIds:` + fmt.Sprintf("%v", this.MemberIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetReferencedEntitites) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetReferencedEntitites{`,
		`Users:` + strings.Replace(fmt.Sprintf("%v", this.Users), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`Mids:` + strings.Replace(fmt.Sprintf("%v", this.Mids), "UUIDValue", "UUIDValue", 1) + `,`,
		`GroupMembers:` + strings.Replace(fmt.Sprintf("%v", this.GroupMembers), "GroupMembersSubset", "GroupMembersSubset", 1) + `,`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetReferencedEntitites) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseGetReferencedEntitites{`,
		`Users:` + strings.Replace(fmt.Sprintf("%v", this.Users), "User", "User", 1) + `,`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "Group", "Group", 1) + `,`,
		`Messages:` + strings.Replace(fmt.Sprintf("%v", this.Messages), "HistoryMessage", "HistoryMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateRawUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateRawUpdate{`,
		`Type:` + strings.Replace(fmt.Sprintf("%v", this.Type), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`Bytes:` + fmt.Sprintf("%v", this.Bytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateEmptyUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateEmptyUpdate{`,
		`}`,
	}, "")
	return s
}
func (this *RequestSubscribeToOnline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSubscribeToOnline{`,
		`Users:` + strings.Replace(fmt.Sprintf("%v", this.Users), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSubscribeFromOnline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSubscribeFromOnline{`,
		`Users:` + strings.Replace(fmt.Sprintf("%v", this.Users), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSubscribeToGroupOnline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSubscribeToGroupOnline{`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSubscribeFromGroupOnline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSubscribeFromGroupOnline{`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SeqUpdateBox) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SeqUpdateBox{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Update:` + strings.Replace(fmt.Sprintf("%v", this.Update), "BytesValue", "google_protobuf.BytesValue", 1) + `,`,
		`UnboxedUpdate:` + strings.Replace(fmt.Sprintf("%v", this.UnboxedUpdate), "UpdateSeqUpdate", "UpdateSeqUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSequenceAndUpdates(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UpdateSeqUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSeqUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSeqUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateHeader", wireType)
			}
			m.UpdateHeader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateHeader |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateForceReloadState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateForceReloadState{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateForceReloadState{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserAvatarChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserAvatarChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserAvatarChanged{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserNameChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserNameChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserNameChanged{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserLocalNameChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserLocalNameChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserLocalNameChanged{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserContactsChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserContactsChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserContactsChanged{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserNickChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserNickChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserNickChanged{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserAboutChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserAboutChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserAboutChanged{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserPreferredLanguagesChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserPreferredLanguagesChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserTimeZoneChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserTimeZoneChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserTimeZoneChanged{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserBotCommandsChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserBotCommandsChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserBotCommandsChanged{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserExtChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserExtChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserExtChanged{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserFullExtChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserFullExtChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserFullExtChanged{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserSexChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserSexChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserSexChanged{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserCustomProfileChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserCustomProfileChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserCustomProfileChanged{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserStatusChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserStatusChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserStatusChanged{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateContactRegistered", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateContactRegistered{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateContactRegistered{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateContactsAdded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateContactsAdded{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateContactsAdded{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateContactsAddTaskSuspended", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateContactsAddTaskSuspended{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateContactsAddTaskSuspended{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateContactsRemoved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateContactsRemoved{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateContactsRemoved{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserBlocked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserBlocked{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserBlocked{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserUnblocked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserUnblocked{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserUnblocked{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateInteractiveMediaEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateInteractiveMediaEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateInteractiveMediaEvent{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateMessage{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMessageContentChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageContentChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateMessageContentChanged{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMessageSent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageSent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateMessageSent{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMessageReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageReceived{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateMessageReceived{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMessageRead", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageRead{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateMessageRead{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMessageReadByMe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageReadByMe{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateMessageReadByMe{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMessageDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageDelete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateMessageDelete{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateChatClear", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateChatClear{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateChatClear{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateChatDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateChatDelete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateChatDelete{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateChatArchive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateChatArchive{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateChatArchive{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateChatGroupsChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateChatGroupsChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateChatGroupsChanged{v}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateReactionsUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateReactionsUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateReactionsUpdate{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDialogFavouriteChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateDialogFavouriteChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateDialogFavouriteChanged{v}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePinnedMessagesChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdatePinnedMessagesChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdatePinnedMessagesChanged{v}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupTitleChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupTitleChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupTitleChanged{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupAvatarChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupAvatarChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupAvatarChanged{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupTopicChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupTopicChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupTopicChanged{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupAboutChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupAboutChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupAboutChanged{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupOwnerChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupOwnerChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupOwnerChanged{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupHistoryShared", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupHistoryShared{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupHistoryShared{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupCanSendMessagesChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupCanSendMessagesChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupCanViewMembersChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupCanViewMembersChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupCanViewMembersChanged{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupCanInviteMembersChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupCanInviteMembersChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupMemberChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupMemberChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupMemberChanged{v}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupMembersBecameAsync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupMembersBecameAsync{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupMembersBecameAsync{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupMembersUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupMembersUpdated{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupMembersUpdated{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupMemberDiff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupMemberDiff{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupMemberDiff{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupMembersCountChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupMembersCountChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupMembersCountChanged{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupMemberAdminChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupMemberAdminChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupMemberAdminChanged{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupMemberPermissionsChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupMemberPermissionsChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged{v}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupInviteObsolete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupInviteObsolete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupInviteObsolete{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupUserInvitedObsolete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupUserInvitedObsolete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupUserInvitedObsolete{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupUserLeaveObsolete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupUserLeaveObsolete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupUserLeaveObsolete{v}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupUserKickObsolete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupUserKickObsolete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupUserKickObsolete{v}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupMembersUpdateObsolete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupMembersUpdateObsolete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupTitleChangedObsolete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupTitleChangedObsolete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupTitleChangedObsolete{v}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupTopicChangedObsolete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupTopicChangedObsolete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupTopicChangedObsolete{v}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupAboutChangedObsolete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupAboutChangedObsolete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupAboutChangedObsolete{v}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupAvatarChangedObsolete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupAvatarChangedObsolete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete{v}
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupShortnameChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupShortnameChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupShortnameChanged{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateStickerCollectionsChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateStickerCollectionsChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateStickerCollectionsChanged{v}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateStickerPackRemoved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateStickerPackRemoved{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateStickerPackRemoved{v}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateStickerPackAdded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateStickerPackAdded{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateStickerPackAdded{v}
			iNdEx = postIndex
		case 69:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePauseNotifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdatePauseNotifications{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdatePauseNotifications{v}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateRestoreNotifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateRestoreNotifications{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateRestoreNotifications{v}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTyping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateTyping{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateTyping{v}
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTypingStop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateTypingStop{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateTypingStop{v}
			iNdEx = postIndex
		case 73:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserOnline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserOnline{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserOnline{v}
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserOffline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserOffline{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserOffline{v}
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserLastSeen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserLastSeen{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserLastSeen{v}
			iNdEx = postIndex
		case 76:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupOnline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupOnline{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupOnline{v}
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEventBusDeviceConnected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateEventBusDeviceConnected{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateEventBusDeviceConnected{v}
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEventBusDeviceDisconnected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateEventBusDeviceDisconnected{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateEventBusDeviceDisconnected{v}
			iNdEx = postIndex
		case 79:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEventBusMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateEventBusMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateEventBusMessage{v}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEventBusDisposed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateEventBusDisposed{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateEventBusDisposed{v}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateIncomingCallDeprecated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateIncomingCallDeprecated{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateIncomingCallDeprecated{v}
			iNdEx = postIndex
		case 82:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateIncomingCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateIncomingCall{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateIncomingCall{v}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCallHandled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateCallHandled{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateCallHandled{v}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCallDisposed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateCallDisposed{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateCallDisposed{v}
			iNdEx = postIndex
		case 85:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateParameterChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateParameterChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateParameterChanged{v}
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateRawUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateRawUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateRawUpdate{v}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEmptyUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateEmptyUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateEmptyUpdate{v}
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCountersChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateCountersChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateCountersChanged{v}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateConfig{v}
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateSpaceModified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateSpaceModified{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateSpaceModified{v}
			iNdEx = postIndex
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateSpaceMemberModified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateSpaceMemberModified{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateSpaceMemberModified{v}
			iNdEx = postIndex
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMessageRejectedByHook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageRejectedByHook{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateMessageRejectedByHook{v}
			iNdEx = postIndex
		case 93:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMessageEditRejectedByHook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageEditRejectedByHook{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateMessageEditRejectedByHook{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFatSeqUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFatSeqUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFatSeqUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateHeader", wireType)
			}
			m.UpdateHeader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateHeader |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Update = append(m.Update[:0], dAtA[iNdEx:postIndex]...)
			if m.Update == nil {
				m.Update = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWeakUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWeakUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWeakUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateHeader", wireType)
			}
			m.UpdateHeader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateHeader |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Update = append(m.Update[:0], dAtA[iNdEx:postIndex]...)
			if m.Update == nil {
				m.Update = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWeakFatUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWeakFatUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWeakFatUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateHeader", wireType)
			}
			m.UpdateHeader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateHeader |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Update = append(m.Update[:0], dAtA[iNdEx:postIndex]...)
			if m.Update == nil {
				m.Update = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSeqUpdateTooLong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSeqUpdateTooLong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSeqUpdateTooLong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateContainer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateContainer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateContainer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateHeader", wireType)
			}
			m.UpdateHeader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateHeader |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Update = append(m.Update[:0], dAtA[iNdEx:postIndex]...)
			if m.Update == nil {
				m.Update = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCombinedUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCombinedUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCombinedUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqStart", wireType)
			}
			m.SeqStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqStart |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqEnd", wireType)
			}
			m.SeqEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqEnd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, &UpdateContainer{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &HistoryMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSequenceAndUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSequenceAndUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSequenceAndUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSequenceAndUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSequenceAndUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UpdateOptimization(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSequenceAndUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSequenceAndUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSequenceAndUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UpdateOptimization(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigHash == nil {
				m.ConfigHash = &google_protobuf.Int64Value{}
			}
			if err := m.ConfigHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, &UpdateSeqUpdate{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedMore = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &HistoryMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsersRefs = append(m.UsersRefs, &UserOutPeer{})
			if err := m.UsersRefs[len(m.UsersRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupsRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupsRefs = append(m.GroupsRefs, &GroupOutPeer{})
			if err := m.GroupsRefs[len(m.GroupsRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigHash == nil {
				m.ConfigHash = &google_protobuf.Int64Value{}
			}
			if err := m.ConfigHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetDialogsDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetDialogsDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetDialogsDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetDialogsDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetDialogsDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetDialogsDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dialogs = append(m.Dialogs, &Dialog{})
			if err := m.Dialogs[len(m.Dialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPeers = append(m.GroupPeers, &GroupOutPeer{})
			if err := m.GroupPeers[len(m.GroupPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMembersSubset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMembersSubset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMembersSubset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &GroupOutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSequenceAndUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MemberIds = append(m.MemberIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSequenceAndUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSequenceAndUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSequenceAndUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MemberIds = append(m.MemberIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetReferencedEntitites) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetReferencedEntitites: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetReferencedEntitites: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserOutPeer{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mids = append(m.Mids, &UUIDValue{})
			if err := m.Mids[len(m.Mids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupMembers = append(m.GroupMembers, &GroupMembersSubset{})
			if err := m.GroupMembers[len(m.GroupMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupOutPeer{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetReferencedEntitites) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetReferencedEntitites: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetReferencedEntitites: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &HistoryMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRawUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRawUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRawUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &google_protobuf.StringValue{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEmptyUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEmptyUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEmptyUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSubscribeToOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSubscribeToOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSubscribeToOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserOutPeer{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSubscribeFromOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSubscribeFromOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSubscribeFromOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserOutPeer{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSubscribeToGroupOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSubscribeToGroupOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSubscribeToGroupOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupOutPeer{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSubscribeFromGroupOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSubscribeFromGroupOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSubscribeFromGroupOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupOutPeer{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeqUpdateBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeqUpdateBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeqUpdateBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Update == nil {
				m.Update = &google_protobuf.BytesValue{}
			}
			if err := m.Update.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnboxedUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnboxedUpdate == nil {
				m.UnboxedUpdate = &UpdateSeqUpdate{}
			}
			if err := m.UnboxedUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSequenceAndUpdates(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSequenceAndUpdates
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSequenceAndUpdates
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSequenceAndUpdates(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSequenceAndUpdates = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSequenceAndUpdates   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sequence_and_updates.proto", fileDescriptorSequenceAndUpdates) }

var fileDescriptorSequenceAndUpdates = []byte{
	// 3487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x5b, 0x4b, 0x73, 0xdc, 0xc6,
	0xf1, 0x5f, 0x90, 0x22, 0x45, 0x8e, 0x44, 0x3d, 0x40, 0x8a, 0x82, 0x56, 0xd4, 0x8a, 0x82, 0x1e,
	0xa6, 0x64, 0x9b, 0x94, 0x68, 0xf9, 0x25, 0x3f, 0x64, 0xbe, 0xa4, 0xe5, 0xdf, 0x92, 0xc8, 0x3f,
	0x56, 0x92, 0x1d, 0x3b, 0x09, 0x33, 0x0b, 0xcc, 0x2e, 0x61, 0xee, 0x02, 0x4b, 0x00, 0xbb, 0x12,
	0x5d, 0xae, 0x8a, 0xcb, 0x55, 0x49, 0x55, 0x92, 0x8b, 0xab, 0x92, 0x43, 0x2a, 0x07, 0x1f, 0x53,
	0xa9, 0xca, 0x37, 0xc8, 0x21, 0xe7, 0x1c, 0x5d, 0xc9, 0x25, 0xc7, 0x98, 0xc9, 0x21, 0x95, 0x4b,
	0xfc, 0x01, 0x92, 0x54, 0x0a, 0x83, 0x47, 0x0f, 0x06, 0x8d, 0x5d, 0x3a, 0xef, 0x93, 0xb4, 0xf3,
	0xfb, 0x4d, 0x77, 0x4f, 0x77, 0x4f, 0x4f, 0x63, 0x00, 0x92, 0xb2, 0xcf, 0x76, 0xbb, 0xcc, 0x31,
	0xd9, 0x16, 0x75, 0xac, 0xad, 0x6e, 0xc7, 0xa2, 0x01, 0xf3, 0xe7, 0x3b, 0x9e, 0x1b, 0xb8, 0xea,
	0xa8, 0x65, 0xd3, 0x96, 0xdb, 0x2c, 0x57, 0x9a, 0xae, 0xdb, 0x6c, 0xb1, 0x05, 0x3e, 0x5a, 0xef,
	0x36, 0x16, 0x9e, 0x78, 0xb4, 0xd3, 0x61, 0x5e, 0xcc, 0x2b, 0x9f, 0x95, 0x71, 0xd6, 0xee, 0x04,
	0x7b, 0x31, 0x38, 0x13, 0x83, 0xb4, 0x63, 0x2f, 0x50, 0xc7, 0x71, 0x03, 0x1a, 0xd8, 0xae, 0x93,
	0x4c, 0x3d, 0x69, 0xb1, 0x86, 0xed, 0xd8, 0xe2, 0xd0, 0x64, 0xdb, 0xf6, 0x4d, 0xd6, 0x6a, 0x51,
	0x87, 0xb9, 0xdd, 0x64, 0x70, 0x8a, 0x76, 0x83, 0x6d, 0xe6, 0x04, 0xb6, 0xc9, 0xa7, 0xc7, 0xa3,
	0x47, 0x9b, 0x9e, 0xdb, 0xed, 0x24, 0x9c, 0x63, 0x7e, 0x60, 0x9b, 0x3b, 0x60, 0xd6, 0xe9, 0x60,
	0xaf, 0x63, 0x3b, 0x4d, 0xbe, 0x30, 0xd7, 0x69, 0xd9, 0x0e, 0x8b, 0x81, 0xe3, 0xac, 0xc7, 0x9c,
	0x60, 0xab, 0x9e, 0x4a, 0x9f, 0x78, 0xc2, 0xea, 0x5b, 0x5e, 0x60, 0x26, 0x46, 0x99, 0xae, 0xd3,
	0xb0, 0x9b, 0x5b, 0xfe, 0x9e, 0x93, 0x0c, 0x1d, 0x33, 0xdd, 0xae, 0x13, 0x80, 0xec, 0x63, 0xa6,
	0xeb, 0x04, 0xd4, 0x0c, 0x52, 0x09, 0x1d, 0xcf, 0xee, 0x51, 0x33, 0x59, 0xf4, 0x91, 0x0e, 0x03,
	0xee, 0xf1, 0x36, 0xf3, 0x7d, 0xda, 0xb4, 0x9d, 0x66, 0x82, 0x76, 0x7d, 0x40, 0x8f, 0xfa, 0x1d,
	0x6a, 0x26, 0x2e, 0x2f, 0x9f, 0xf2, 0x4d, 0xda, 0xa2, 0x9d, 0xfa, 0x42, 0xfc, 0x6f, 0x34, 0xac,
	0xff, 0x79, 0x85, 0x1c, 0x7f, 0xc4, 0x63, 0x53, 0x63, 0xbb, 0xd1, 0x7f, 0xd4, 0xf3, 0x64, 0xd8,
	0x67, 0xbb, 0x9a, 0x32, 0xab, 0xcc, 0x8d, 0x2c, 0x4f, 0x7c, 0xff, 0x4f, 0xd7, 0xc7, 0xc9, 0xe1,
	0x9e, 0xed, 0xdb, 0xf5, 0x16, 0x33, 0x42, 0x44, 0xbd, 0x48, 0x46, 0xfc, 0x80, 0x06, 0x4c, 0x1b,
	0x9a, 0x55, 0xe6, 0x8e, 0x26, 0x14, 0xd3, 0x6d, 0x77, 0xa8, 0x19, 0x18, 0x11, 0xa6, 0x2e, 0x92,
	0x89, 0x28, 0xe8, 0x5b, 0xdb, 0x8c, 0x5a, 0xcc, 0xd3, 0x86, 0x31, 0x79, 0x47, 0x23, 0x4e, 0x95,
	0x53, 0xd4, 0x77, 0xc9, 0x74, 0xf4, 0xfb, 0x8e, 0xeb, 0x99, 0xcc, 0x60, 0x2d, 0x97, 0x5a, 0x35,
	0xae, 0xe9, 0xd0, 0xac, 0x32, 0x77, 0x64, 0xb1, 0x32, 0x1f, 0x25, 0xce, 0xfc, 0x23, 0x94, 0x55,
	0x2d, 0x19, 0x05, 0xf3, 0xd5, 0xf7, 0xc9, 0xe9, 0x08, 0x79, 0xe4, 0x33, 0x6f, 0xa9, 0x47, 0x03,
	0xea, 0xad, 0x6c, 0x53, 0xa7, 0xc9, 0x2c, 0x6d, 0x84, 0x8b, 0x3e, 0x9f, 0x15, 0x9d, 0xa3, 0x55,
	0x4b, 0x46, 0x91, 0x04, 0xf5, 0x11, 0x39, 0x05, 0xd0, 0x03, 0xda, 0x66, 0x89, 0xe8, 0x51, 0x2e,
	0xfa, 0x5c, 0x5e, 0xb4, 0x40, 0xaa, 0x96, 0x0c, 0x7c, 0xb6, 0x6a, 0x91, 0x32, 0x00, 0xf7, 0x5c,
	0x93, 0xb6, 0x44, 0xd9, 0x87, 0xb9, 0x6c, 0x3d, 0x2f, 0x5b, 0x66, 0x56, 0x4b, 0x46, 0x1f, 0x39,
	0x2a, 0x25, 0x67, 0x00, 0x5d, 0x89, 0x93, 0x2f, 0x51, 0x32, 0xc6, 0x95, 0x5c, 0xc8, 0x2b, 0x91,
	0x88, 0xd5, 0x92, 0x51, 0x2c, 0x45, 0xf2, 0x8f, 0x6d, 0xee, 0x24, 0xe2, 0xc7, 0x0b, 0xfd, 0x03,
	0x24, 0xc9, 0x3f, 0x00, 0x40, 0xb6, 0xf0, 0x88, 0xd4, 0xdd, 0x6e, 0x90, 0xc8, 0x25, 0x58, 0xb6,
	0xc8, 0x2c, 0xc8, 0x16, 0x19, 0x51, 0xbf, 0x4d, 0x2e, 0x02, 0xb2, 0xe9, 0xb1, 0x06, 0xf3, 0x3c,
	0x66, 0xdd, 0xa3, 0x4e, 0xb3, 0x4b, 0x9b, 0x2c, 0xf5, 0xce, 0x11, 0xae, 0xe6, 0xd9, 0xbc, 0x9a,
	0xc2, 0x29, 0xd5, 0x92, 0x71, 0x10, 0xc9, 0xd9, 0xa0, 0x3c, 0xb4, 0xdb, 0xec, 0x3d, 0xd7, 0x49,
	0x23, 0x7f, 0xb4, 0x28, 0x28, 0x12, 0x31, 0x1b, 0x14, 0x09, 0x54, 0x3f, 0x20, 0x33, 0x00, 0x2e,
	0xbb, 0xc1, 0x8a, 0xdb, 0x6e, 0x53, 0xc7, 0x4a, 0x17, 0x37, 0xc1, 0xb5, 0x5c, 0xca, 0x6b, 0xc9,
	0x73, 0xab, 0x25, 0xa3, 0xaf, 0x2c, 0xd5, 0x20, 0x53, 0x80, 0xaf, 0x3d, 0x4d, 0xe3, 0x74, 0x8c,
	0xeb, 0x98, 0xc9, 0xeb, 0x00, 0x4e, 0xb5, 0x64, 0xa0, 0x73, 0xd5, 0x6f, 0x12, 0x0d, 0xc6, 0xef,
	0x74, 0x5b, 0x2d, 0x41, 0xee, 0x71, 0x2e, 0x77, 0x36, 0x2f, 0x37, 0xcb, 0xab, 0x96, 0x8c, 0x42,
	0x19, 0x59, 0x9b, 0x6b, 0xec, 0x69, 0x22, 0xfb, 0x44, 0x91, 0xcd, 0xc0, 0xc9, 0xda, 0x0c, 0xe3,
	0x6a, 0x87, 0x54, 0x84, 0x5d, 0xd2, 0xf5, 0x03, 0xb7, 0xbd, 0xe9, 0xb9, 0x0d, 0xbb, 0x95, 0xc6,
	0xf6, 0x24, 0x97, 0x7e, 0x05, 0xd9, 0x70, 0x08, 0xbb, 0x5a, 0x32, 0x06, 0xc8, 0xcb, 0xd6, 0xbd,
	0xb0, 0x14, 0x76, 0xd3, 0x00, 0xab, 0x45, 0x75, 0x2f, 0x43, 0xcb, 0xd6, 0xbd, 0x0c, 0x04, 0xc2,
	0xe3, 0x0d, 0x6f, 0xb0, 0xa6, 0xed, 0x07, 0xcc, 0x63, 0x96, 0x36, 0x89, 0x09, 0xcf, 0xd1, 0x40,
	0x78, 0x0e, 0x52, 0x37, 0xc8, 0x64, 0x06, 0xf2, 0x97, 0x2c, 0x8b, 0x59, 0xda, 0x14, 0x17, 0x7c,
	0x16, 0x15, 0x1c, 0x51, 0xaa, 0x25, 0x03, 0x9b, 0x09, 0xce, 0x17, 0x86, 0x1f, 0x52, 0x7f, 0xa7,
	0xd6, 0xf5, 0x3b, 0xcc, 0x09, 0x65, 0x9f, 0xc2, 0x9c, 0x5f, 0xc4, 0x06, 0xe7, 0x17, 0x31, 0xa0,
	0xee, 0x25, 0x0c, 0x83, 0xb5, 0xdd, 0x1e, 0xb3, 0xb4, 0x69, 0xac, 0xee, 0x49, 0x24, 0xa8, 0x7b,
	0x12, 0xa0, 0xae, 0x93, 0x93, 0xc2, 0x6e, 0x6b, 0xb9, 0xe6, 0x0e, 0xb3, 0xb4, 0xd3, 0x5c, 0xe4,
	0x19, 0x64, 0xbb, 0x46, 0x84, 0x6a, 0xc9, 0xc8, 0xcf, 0x02, 0x27, 0x87, 0x83, 0x8f, 0x9c, 0x7a,
	0x2c, 0x4c, 0xc3, 0x9c, 0x9c, 0xa1, 0x80, 0x93, 0x33, 0xc3, 0x6a, 0x93, 0x9c, 0x8d, 0x86, 0xd7,
	0xc3, 0xa6, 0x86, 0x9a, 0x81, 0xdd, 0x63, 0xf7, 0x99, 0x65, 0xd3, 0xb5, 0xb0, 0x33, 0xd2, 0xce,
	0x70, 0xc1, 0x17, 0xb3, 0x82, 0x51, 0x6a, 0xb5, 0x64, 0xf4, 0x93, 0xa4, 0xbe, 0x91, 0xb4, 0x17,
	0xf7, 0x79, 0x0f, 0xc4, 0xb4, 0x32, 0x17, 0x7d, 0x2a, 0x2b, 0x3a, 0x06, 0xab, 0x25, 0x23, 0xcb,
	0x06, 0x3b, 0xe3, 0x81, 0xd0, 0xc7, 0xcc, 0x49, 0x0b, 0xc8, 0x59, 0xcc, 0x4e, 0x94, 0x0a, 0x76,
	0xa2, 0x30, 0x04, 0x2b, 0x86, 0x6b, 0xa1, 0x1b, 0x66, 0xb0, 0x60, 0x09, 0x04, 0x08, 0x96, 0x30,
	0x08, 0xe9, 0x14, 0x0f, 0x1a, 0xcc, 0x64, 0x76, 0x98, 0x4e, 0xe7, 0xb0, 0x74, 0x92, 0x48, 0x90,
	0x4e, 0x12, 0x90, 0xb3, 0xd0, 0x60, 0xd4, 0xd2, 0x2a, 0x7d, 0x2c, 0x0c, 0x09, 0x39, 0x0b, 0xc3,
	0x41, 0xc4, 0x42, 0x6a, 0x2d, 0xef, 0xdd, 0x67, 0xda, 0xf9, 0xbe, 0x16, 0x46, 0x24, 0xc4, 0xc2,
	0x08, 0x80, 0x2c, 0x8d, 0x81, 0x55, 0xd6, 0x62, 0x01, 0xd3, 0x66, 0xb1, 0x2c, 0xcd, 0x50, 0x20,
	0x4b, 0x33, 0xc3, 0xea, 0x0a, 0x39, 0x1e, 0x6f, 0xad, 0x6d, 0x1a, 0xac, 0xb4, 0x18, 0xf5, 0xb4,
	0x0b, 0x5c, 0xd8, 0x69, 0x69, 0x4b, 0x26, 0x70, 0xb5, 0x64, 0xc8, 0x33, 0xd4, 0x3b, 0xe4, 0x04,
	0x0c, 0xc5, 0x26, 0xe9, 0x5c, 0x8a, 0x96, 0x97, 0x92, 0xda, 0x93, 0x9b, 0x03, 0xfe, 0x0f, 0xc7,
	0x96, 0x3c, 0x73, 0xdb, 0xee, 0x31, 0xed, 0x22, 0xe6, 0x7f, 0x81, 0x00, 0xfe, 0x17, 0x06, 0x85,
	0x82, 0xbc, 0x4d, 0x83, 0xbb, 0xfc, 0x11, 0x26, 0xc9, 0xe8, 0x4b, 0x68, 0x41, 0x96, 0x69, 0x42,
	0x41, 0x96, 0x21, 0x08, 0xae, 0xc1, 0xc2, 0xdd, 0xe8, 0x3a, 0x7e, 0x24, 0x44, 0xbb, 0x8c, 0x05,
	0x57, 0x22, 0x41, 0x70, 0x25, 0x00, 0xfa, 0x90, 0x55, 0x3e, 0xfd, 0x0e, 0xed, 0xb9, 0x5d, 0xcf,
	0x0e, 0xd2, 0x13, 0xf1, 0x0a, 0xd6, 0x87, 0xe0, 0x5c, 0xe8, 0x43, 0x70, 0x1c, 0x76, 0xfd, 0xa6,
	0xed, 0x38, 0xcc, 0x8a, 0x93, 0x22, 0xf5, 0xd1, 0x33, 0xd8, 0xae, 0x47, 0xa9, 0xb0, 0xeb, 0x51,
	0x18, 0x02, 0xc1, 0x5d, 0xf8, 0xd0, 0x0e, 0xe0, 0x84, 0x9f, 0xc3, 0x02, 0x91, 0xa3, 0x41, 0x20,
	0x72, 0x10, 0x74, 0x3e, 0x1c, 0xca, 0x3e, 0xcc, 0x5c, 0xc5, 0x3a, 0x9f, 0x3c, 0x0f, 0x3a, 0x9f,
	0x3c, 0x26, 0x1b, 0xef, 0x76, 0x6c, 0x33, 0x11, 0x7f, 0xad, 0xd8, 0x78, 0x81, 0x26, 0x1b, 0x2f,
	0x40, 0x92, 0xf0, 0x4c, 0xd7, 0xfe, 0x6c, 0xa1, 0x70, 0xa9, 0x6d, 0x2f, 0x92, 0x20, 0x09, 0xdf,
	0x78, 0xe2, 0xb0, 0xd4, 0x31, 0xcf, 0x15, 0x0a, 0x17, 0x69, 0x92, 0x70, 0x11, 0x92, 0xdc, 0x5e,
	0xb5, 0xfd, 0xc0, 0xf5, 0xf6, 0x6a, 0xdb, 0x34, 0x6c, 0x77, 0x9e, 0x2f, 0x74, 0x7b, 0x86, 0x27,
	0xb9, 0x3d, 0x83, 0xa9, 0x7b, 0xe4, 0x82, 0x80, 0xad, 0x50, 0xa7, 0xc6, 0x9c, 0x5c, 0x8a, 0xce,
	0x73, 0x45, 0x57, 0x11, 0x45, 0xf8, 0x84, 0x6a, 0xc9, 0x18, 0x2c, 0x55, 0xed, 0x91, 0xd9, 0x2c,
	0xe9, 0xb1, 0xcd, 0x9e, 0xdc, 0x67, 0xed, 0x3a, 0xf3, 0x52, 0xcd, 0x0b, 0x5c, 0xf3, 0x1c, 0xae,
	0x39, 0xcf, 0xaf, 0x96, 0x8c, 0x81, 0x32, 0xd5, 0x8f, 0x88, 0x9e, 0xe5, 0xac, 0x3b, 0x3d, 0x3b,
	0x2c, 0xd6, 0x19, 0xcd, 0xd7, 0xb9, 0xe6, 0x6b, 0xb8, 0x66, 0x6c, 0x46, 0xb5, 0x64, 0x1c, 0x40,
	0xae, 0x14, 0xd0, 0x08, 0x4c, 0x74, 0xde, 0x28, 0x0c, 0x68, 0x86, 0x27, 0x05, 0x34, 0x83, 0xa9,
	0x6d, 0x72, 0x2e, 0x87, 0xf9, 0xcb, 0xcc, 0xa4, 0x6d, 0xb6, 0xe4, 0xef, 0x39, 0xa6, 0xb6, 0xc8,
	0x95, 0x5c, 0x2e, 0x54, 0x22, 0x92, 0xab, 0x25, 0xa3, 0xbf, 0x34, 0x78, 0x66, 0x14, 0x09, 0x91,
	0x4c, 0x4b, 0x7b, 0x01, 0x7b, 0x66, 0x44, 0x88, 0xf0, 0xcc, 0x88, 0x80, 0x70, 0x04, 0x08, 0xe0,
	0xaa, 0xdd, 0x68, 0x68, 0x37, 0xb1, 0x23, 0x40, 0x22, 0xc1, 0x11, 0x20, 0x01, 0xd0, 0x99, 0x8b,
	0x3a, 0x57, 0xdc, 0x2e, 0xf4, 0x63, 0x2f, 0x62, 0x9d, 0x79, 0x11, 0x1b, 0x3a, 0xf3, 0x22, 0x06,
	0x1a, 0x9a, 0x25, 0xab, 0x6d, 0x3b, 0x89, 0xc2, 0x97, 0x06, 0x84, 0x46, 0x24, 0xa3, 0xa1, 0x11,
	0x09, 0x70, 0x9f, 0x20, 0x10, 0x36, 0x99, 0xd7, 0xb6, 0x7d, 0x3f, 0x3c, 0x09, 0x13, 0xa5, 0x2f,
	0x63, 0xf7, 0x09, 0x7d, 0xa7, 0xc0, 0x7d, 0x42, 0x5f, 0x9a, 0x94, 0x1b, 0xd1, 0x6e, 0xd8, 0xa8,
	0xfb, 0x2e, 0x6f, 0x5a, 0x5e, 0x29, 0xcc, 0x8d, 0x2c, 0x51, 0xca, 0x8d, 0x2c, 0x28, 0x05, 0x31,
	0x7c, 0x2a, 0x88, 0x08, 0x56, 0xaa, 0xe7, 0xd5, 0xc2, 0x20, 0x22, 0x6c, 0x29, 0x88, 0x08, 0x03,
	0x3a, 0x87, 0x94, 0x71, 0x8f, 0xd1, 0x1e, 0xac, 0xeb, 0x16, 0xd6, 0x39, 0xe0, 0x5c, 0xe8, 0x1c,
	0x70, 0x1c, 0x3a, 0x87, 0x14, 0x7f, 0xdb, 0x36, 0x77, 0x52, 0x55, 0xaf, 0x61, 0x9d, 0x03, 0x4a,
	0x85, 0xce, 0x01, 0x85, 0xa5, 0x52, 0x9c, 0xd9, 0x7f, 0xa9, 0xb6, 0xd7, 0x0b, 0x4b, 0x31, 0xca,
	0x97, 0x4a, 0x31, 0xca, 0x51, 0x7d, 0x72, 0xbe, 0xa0, 0xdf, 0x48, 0xd5, 0xbe, 0xc1, 0xd5, 0x3e,
	0x33, 0xa0, 0x73, 0x11, 0xb4, 0x0e, 0x92, 0x28, 0x2b, 0x15, 0xfa, 0x84, 0x54, 0xe9, 0x9b, 0xc5,
	0x4a, 0x11, 0xba, 0xac, 0x14, 0xa1, 0x48, 0x4a, 0xc5, 0xfe, 0x21, 0x55, 0x7a, 0xbb, 0x50, 0x29,
	0x46, 0x97, 0x94, 0x62, 0x14, 0x29, 0xac, 0x99, 0x7e, 0x2b, 0xd5, 0xfa, 0x56, 0x61, 0x58, 0x51,
	0xbe, 0x14, 0x56, 0x94, 0x23, 0xe5, 0x6d, 0x6d, 0xdb, 0xf5, 0x02, 0x47, 0xb8, 0x44, 0x5e, 0x2a,
	0xcc, 0x5b, 0x99, 0x2a, 0xe5, 0xad, 0x0c, 0x83, 0x57, 0x6b, 0xd1, 0xbb, 0x92, 0x15, 0xb7, 0xd5,
	0x62, 0x51, 0xa3, 0x9f, 0x28, 0x5b, 0xc6, 0xbc, 0x5a, 0x48, 0x07, 0xaf, 0x16, 0x52, 0xe0, 0x04,
	0x8f, 0x29, 0x9b, 0xd4, 0xdc, 0x49, 0xee, 0x58, 0x56, 0xb0, 0x13, 0x3c, 0xcf, 0x83, 0x13, 0x3c,
	0x8f, 0xc1, 0x0d, 0xb3, 0x80, 0x45, 0xd7, 0x50, 0xab, 0xd8, 0x0d, 0xb3, 0xcc, 0x82, 0x1b, 0x66,
	0x19, 0x01, 0xcb, 0x37, 0x69, 0xd7, 0x67, 0x0f, 0xdc, 0xc0, 0x6e, 0xc4, 0x6f, 0xa0, 0x7c, 0x6d,
	0x0d, 0xb3, 0x3c, 0xcf, 0x03, 0xcb, 0xf3, 0x18, 0xbc, 0x3b, 0x30, 0x58, 0xd8, 0x63, 0x4a, 0x1a,
	0xee, 0x60, 0xef, 0x0e, 0x30, 0x26, 0xbc, 0x3b, 0xc0, 0x50, 0xf5, 0x16, 0x89, 0xdf, 0xdf, 0x3c,
	0xe4, 0x2f, 0xc4, 0xb4, 0xbb, 0x5c, 0xee, 0x54, 0x56, 0x6e, 0x84, 0x55, 0x4b, 0x46, 0x86, 0x0b,
	0x8f, 0xcf, 0xd1, 0xef, 0x5a, 0xe0, 0x76, 0xb4, 0x2a, 0xf6, 0xf8, 0x0c, 0x38, 0x3c, 0x3e, 0xc3,
	0x18, 0xc8, 0x09, 0x4b, 0xe9, 0x06, 0x7f, 0x1b, 0xa7, 0xad, 0x63, 0x72, 0x00, 0x07, 0x39, 0x30,
	0x96, 0xbd, 0x55, 0xdb, 0x68, 0x34, 0xb8, 0xa0, 0xff, 0x2b, 0xba, 0x55, 0x8b, 0x09, 0xd9, 0x5b,
	0xb5, 0x78, 0x50, 0xbd, 0x47, 0x54, 0xe1, 0x85, 0x0b, 0xf5, 0x83, 0x1a, 0x63, 0x8e, 0xf6, 0x36,
	0x97, 0x55, 0x46, 0x5e, 0xd8, 0xc4, 0x8c, 0x6a, 0xc9, 0x40, 0xe6, 0x81, 0x61, 0xd1, 0x23, 0x49,
	0xb4, 0xc2, 0x7b, 0x98, 0x61, 0x02, 0x01, 0x0c, 0x13, 0x06, 0xa1, 0xed, 0xe1, 0x77, 0x68, 0xcb,
	0x5d, 0x7f, 0x95, 0xf5, 0x6c, 0x93, 0xad, 0xb8, 0x8e, 0xc3, 0xcc, 0xb0, 0x4d, 0xbc, 0x8f, 0xb5,
	0x3d, 0x05, 0x64, 0x68, 0x7b, 0x0a, 0x08, 0x50, 0xf4, 0xb2, 0x84, 0x55, 0xdb, 0x37, 0x53, 0x8d,
	0x0f, 0xb0, 0xa2, 0x57, 0xcc, 0x87, 0xa2, 0x57, 0xcc, 0x81, 0x36, 0x35, 0xe1, 0x24, 0x77, 0x84,
	0x1b, 0x58, 0x9b, 0x2a, 0x91, 0xa0, 0x4d, 0x95, 0x00, 0xa8, 0x06, 0xa9, 0x6a, 0xdb, 0xef, 0xb8,
	0x3e, 0xb3, 0xb4, 0x4d, 0xac, 0x1a, 0xc8, 0x2c, 0xa8, 0x06, 0x32, 0x02, 0x9d, 0xcc, 0xba, 0x63,
	0xba, 0x6d, 0xdb, 0x69, 0xae, 0xd0, 0x56, 0x6b, 0x95, 0x75, 0x3c, 0x66, 0xf2, 0xee, 0xfd, 0xff,
	0xb1, 0x4e, 0x06, 0xe7, 0x42, 0x27, 0x83, 0xe3, 0x90, 0x9c, 0x22, 0xae, 0x19, 0x58, 0x72, 0x8a,
	0x0c, 0x48, 0x4e, 0x71, 0x54, 0xb8, 0xbc, 0x0a, 0x39, 0xd4, 0xb1, 0x5a, 0xcc, 0xd2, 0x6a, 0xe8,
	0xe5, 0x15, 0x10, 0x84, 0xcb, 0x2b, 0x18, 0x04, 0xc3, 0xb8, 0xc1, 0x89, 0x6b, 0x1f, 0x62, 0x86,
	0x89, 0x0c, 0x30, 0x4c, 0x1c, 0x85, 0x60, 0x6d, 0x52, 0x8f, 0xb6, 0x59, 0x00, 0x8f, 0x76, 0x8f,
	0xb0, 0x60, 0xc9, 0x2c, 0x08, 0x96, 0x8c, 0xc0, 0xe5, 0xa1, 0x41, 0x9f, 0xc4, 0x37, 0x60, 0x8f,
	0xb1, 0xcb, 0xc3, 0x14, 0x86, 0xcb, 0xc3, 0x74, 0x08, 0xfc, 0xb6, 0xd6, 0xee, 0x04, 0x7b, 0xb1,
	0x98, 0x77, 0x30, 0xbf, 0x09, 0x04, 0xf0, 0x9b, 0x30, 0x28, 0xbe, 0x65, 0x88, 0xbe, 0x24, 0x48,
	0x16, 0xfa, 0x2e, 0xfe, 0x96, 0x21, 0x43, 0x12, 0xdf, 0x32, 0x64, 0x00, 0xa8, 0xed, 0x2b, 0xfc,
	0x9b, 0x05, 0xed, 0x6b, 0x58, 0x6d, 0x8f, 0x30, 0xa8, 0xed, 0xd1, 0x6f, 0xb8, 0xb0, 0xad, 0x75,
	0xa8, 0xc9, 0xee, 0xbb, 0x96, 0xdd, 0xb0, 0x99, 0xa5, 0xbd, 0x87, 0x5d, 0xd8, 0x66, 0x28, 0x70,
	0x61, 0x9b, 0x19, 0x86, 0xe7, 0x97, 0x68, 0x98, 0x77, 0xb0, 0xa9, 0xd8, 0xf7, 0xb1, 0xe7, 0x17,
	0x84, 0x08, 0xcf, 0x2f, 0x08, 0x98, 0x7b, 0x23, 0x60, 0xb0, 0x0f, 0x78, 0x35, 0x59, 0xde, 0xab,
	0xba, 0xee, 0x8e, 0xf6, 0xf5, 0x3e, 0x6f, 0x04, 0xb2, 0xd4, 0xdc, 0x1b, 0x81, 0x2c, 0x0c, 0x9d,
	0x52, 0x0c, 0xaf, 0x59, 0x76, 0x20, 0x29, 0xfb, 0x06, 0xd6, 0x29, 0x15, 0xd2, 0xa1, 0x53, 0x2a,
	0xa4, 0x2c, 0x8f, 0x91, 0xd1, 0x88, 0xa2, 0x7f, 0x36, 0x44, 0xd4, 0xf8, 0xf3, 0x09, 0x1a, 0xfc,
	0x2f, 0x7c, 0xf4, 0x71, 0x39, 0x31, 0x8d, 0x7f, 0xe4, 0x91, 0x93, 0x1c, 0x83, 0xea, 0x0d, 0x32,
	0xc2, 0xbf, 0x6e, 0xd1, 0x46, 0x66, 0x87, 0xe7, 0x8e, 0x2c, 0x1e, 0x4d, 0x9d, 0xe3, 0x33, 0x2f,
	0x67, 0x0d, 0x67, 0xaa, 0x37, 0xc9, 0x68, 0xf4, 0x1d, 0x8f, 0x36, 0xca, 0xe7, 0x4c, 0x24, 0x73,
	0xf8, 0x99, 0x98, 0x53, 0x14, 0x71, 0xf5, 0x4f, 0x15, 0x72, 0x22, 0x72, 0xca, 0x3b, 0x8c, 0xee,
	0xc4, 0xee, 0xb9, 0x40, 0x0e, 0x71, 0x13, 0x43, 0xff, 0x0c, 0xcb, 0xeb, 0xe1, 0x50, 0x7e, 0xed,
	0x43, 0x5f, 0x65, 0xed, 0xc3, 0x7d, 0xd6, 0xae, 0xff, 0x45, 0x21, 0x93, 0x60, 0xd2, 0x1d, 0x1a,
	0xfc, 0x57, 0xac, 0x4a, 0xc8, 0xb9, 0x88, 0x1c, 0x2a, 0x8e, 0x48, 0x32, 0x27, 0x17, 0x91, 0x91,
	0x3e, 0x11, 0x49, 0x15, 0xc5, 0x11, 0xd1, 0xc8, 0xb4, 0xf4, 0x8d, 0xd2, 0x43, 0xd7, 0xbd, 0xe7,
	0x3a, 0x4d, 0xbd, 0x95, 0x7c, 0xbd, 0xc4, 0xdf, 0x91, 0xda, 0x0e, 0xf3, 0xf2, 0x0b, 0x56, 0xbe,
	0xca, 0x82, 0x87, 0xfa, 0x85, 0xe1, 0xaf, 0x43, 0x64, 0x2a, 0x51, 0xd7, 0xae, 0xdb, 0x0e, 0xb3,
	0xe2, 0x38, 0x5c, 0x23, 0xe3, 0x3e, 0xdb, 0xdd, 0xf2, 0x03, 0xea, 0x05, 0xb8, 0xbe, 0x31, 0x9f,
	0xed, 0xd6, 0x42, 0x58, 0xbd, 0x42, 0x0e, 0x87, 0x5c, 0xe6, 0x58, 0x78, 0x28, 0x46, 0x7d, 0xb6,
	0xbb, 0xe6, 0x58, 0xb0, 0xdf, 0xd0, 0x18, 0xc4, 0xfb, 0xed, 0x20, 0x21, 0x28, 0xdc, 0x14, 0x23,
	0x07, 0xdf, 0x14, 0xea, 0x5b, 0xe4, 0x70, 0xfc, 0x09, 0x5f, 0xbc, 0x97, 0x4e, 0x23, 0x2f, 0xaf,
	0x43, 0xff, 0xcb, 0x86, 0x26, 0xd3, 0xd4, 0x25, 0x32, 0xd6, 0x8e, 0xaf, 0x9d, 0xb5, 0xc3, 0x5c,
	0xc4, 0x74, 0x22, 0x22, 0xbe, 0x07, 0x8f, 0xab, 0x57, 0xce, 0x75, 0xc9, 0x34, 0xfd, 0x63, 0x85,
	0x1c, 0x37, 0xd8, 0x6e, 0x97, 0xf9, 0xc1, 0x5d, 0x16, 0x44, 0x1f, 0x76, 0x6d, 0x90, 0x09, 0xb7,
	0x13, 0xd8, 0x6d, 0xfb, 0xc3, 0xf8, 0xd9, 0x46, 0x99, 0x1d, 0x9e, 0x3b, 0x26, 0x37, 0x0c, 0x1b,
	0x02, 0x45, 0x96, 0x9f, 0x9d, 0x7f, 0x6b, 0x66, 0xff, 0xf6, 0x19, 0x72, 0xda, 0x6e, 0xcf, 0x5b,
	0xad, 0xe6, 0x7c, 0xd3, 0xeb, 0x98, 0xf3, 0x77, 0xbd, 0x8e, 0x19, 0xab, 0xd5, 0x7f, 0x3c, 0x44,
	0xa6, 0xc0, 0x84, 0x55, 0xbb, 0xd1, 0x60, 0x1e, 0x73, 0xcc, 0x7f, 0x55, 0xfd, 0xcc, 0xad, 0x66,
	0xf8, 0x9f, 0x5b, 0x8d, 0xfa, 0x36, 0x39, 0x12, 0x7f, 0x73, 0xb8, 0x4d, 0xfd, 0xed, 0xf8, 0x33,
	0xba, 0xb3, 0xf3, 0xd1, 0xa7, 0x93, 0xf3, 0xc9, 0x77, 0x95, 0xf3, 0xeb, 0x4e, 0xf0, 0xd2, 0xcd,
	0xc7, 0xb4, 0xd5, 0xcd, 0x79, 0x9f, 0x44, 0xd3, 0xab, 0xd4, 0xdf, 0x1e, 0xe0, 0x9a, 0xbf, 0x0d,
	0x93, 0x53, 0x06, 0xf3, 0x3b, 0xae, 0xe3, 0xb3, 0xac, 0x6f, 0x4e, 0x08, 0xbe, 0x89, 0x9c, 0x31,
	0x95, 0x71, 0x46, 0xb2, 0x7a, 0x3d, 0xc9, 0xe6, 0xe1, 0x7c, 0x36, 0x27, 0xe9, 0x7b, 0x03, 0x12,
	0xf1, 0x10, 0x96, 0x88, 0x69, 0x89, 0x80, 0xcc, 0x3b, 0x4b, 0xc6, 0x1d, 0xc6, 0xac, 0xad, 0xb6,
	0xeb, 0x31, 0xfe, 0xb5, 0xdf, 0x98, 0x31, 0x16, 0x0e, 0xdc, 0x77, 0x3d, 0x16, 0x6e, 0xfd, 0x3e,
	0x67, 0x44, 0x9a, 0xff, 0x8b, 0x07, 0xcd, 0x5e, 0x48, 0x57, 0x75, 0x91, 0x10, 0x6e, 0xf3, 0x96,
	0xc7, 0x1a, 0xbe, 0x36, 0xc6, 0x67, 0x4d, 0x8a, 0x6b, 0xda, 0xe8, 0x06, 0x9b, 0x8c, 0x79, 0xc6,
	0x38, 0xa7, 0x19, 0xac, 0xe1, 0xab, 0x2f, 0x92, 0x23, 0x91, 0xc6, 0x68, 0xd2, 0x38, 0x9f, 0x34,
	0x95, 0xb1, 0x29, 0x99, 0x45, 0x22, 0x22, 0x9f, 0x76, 0x85, 0x8c, 0x46, 0x71, 0x8a, 0x3f, 0x7d,
	0x3b, 0x96, 0xcc, 0x88, 0x1a, 0x32, 0x23, 0x46, 0xd5, 0xd7, 0xb3, 0xe9, 0x70, 0x64, 0x60, 0x3a,
	0x64, 0xe2, 0x7f, 0x6e, 0xff, 0x76, 0x99, 0x68, 0xf9, 0xf8, 0x47, 0x31, 0xd7, 0xbf, 0x45, 0xce,
	0x8a, 0x5b, 0x23, 0xd4, 0xef, 0x0b, 0x59, 0x70, 0x91, 0x8c, 0x98, 0x2d, 0xd7, 0xdc, 0xc1, 0x4f,
	0xab, 0x08, 0x1b, 0x90, 0x62, 0xbf, 0x56, 0xc8, 0x4c, 0x26, 0xc5, 0x64, 0x1d, 0x73, 0xe4, 0x70,
	0xb4, 0xf0, 0xa8, 0x0e, 0x08, 0x8e, 0x88, 0xb8, 0x46, 0x02, 0xa7, 0x8e, 0xde, 0xe2, 0x1f, 0xd4,
	0x6a, 0x43, 0x03, 0x1d, 0x1d, 0xfe, 0x37, 0x8d, 0x69, 0x3c, 0x6b, 0x78, 0x40, 0x4c, 0xf9, 0x9c,
	0x41, 0x6e, 0xfb, 0xae, 0x42, 0x54, 0xf1, 0x62, 0xb6, 0xd6, 0xad, 0xfb, 0x2c, 0x50, 0x97, 0x09,
	0x01, 0x03, 0xb9, 0xcf, 0x0a, 0xec, 0x93, 0x3d, 0x39, 0x9e, 0x9a, 0xab, 0x3e, 0x47, 0x48, 0x9b,
	0x0b, 0xdd, 0xb2, 0xad, 0x68, 0x8d, 0xb9, 0xda, 0x34, 0x1e, 0x11, 0xd6, 0x2d, 0x5f, 0xff, 0xc5,
	0x10, 0x39, 0x07, 0x01, 0x34, 0x58, 0xec, 0x54, 0x6b, 0xcd, 0x09, 0xec, 0xc0, 0x0e, 0x77, 0xd2,
	0x2b, 0xc9, 0x06, 0x55, 0x0a, 0x17, 0x5e, 0x78, 0xea, 0x1c, 0x6a, 0x87, 0x36, 0x44, 0x1e, 0x3b,
	0x99, 0x4e, 0x7c, 0xb4, 0xbe, 0x8a, 0x96, 0x1d, 0xce, 0x56, 0x1f, 0x90, 0x89, 0xc8, 0x07, 0x91,
	0x91, 0xc9, 0x96, 0x2f, 0x67, 0xdc, 0x90, 0x71, 0x5b, 0xee, 0x9c, 0x6f, 0x0a, 0x14, 0xf5, 0x35,
	0xe9, 0xec, 0x3b, 0x90, 0x3f, 0xe3, 0x29, 0x03, 0x52, 0xf3, 0x97, 0x0a, 0xa9, 0x08, 0xa9, 0x89,
	0x79, 0x4f, 0xcf, 0x7a, 0x0f, 0x2d, 0x6f, 0x50, 0x8e, 0x86, 0x0e, 0x5a, 0x8e, 0x86, 0x0f, 0x56,
	0x8e, 0x06, 0xa5, 0xe1, 0x93, 0xa4, 0x95, 0x82, 0x87, 0xd4, 0xdb, 0xe4, 0x50, 0xb0, 0xd7, 0x61,
	0x71, 0xf2, 0xcd, 0xe4, 0xca, 0x44, 0x2d, 0xf0, 0x6c, 0xa7, 0x89, 0xc7, 0x2f, 0x9c, 0x18, 0x6e,
	0xf9, 0xfa, 0x5e, 0x58, 0xaa, 0x87, 0xd0, 0x1e, 0x86, 0x63, 0xfa, 0x24, 0x39, 0x99, 0x7b, 0xd2,
	0xd5, 0x3d, 0xa2, 0xc5, 0x9e, 0x0d, 0xe3, 0x6a, 0x7a, 0x76, 0x9d, 0x3d, 0x74, 0xe3, 0x5b, 0xac,
	0x7f, 0x38, 0x0b, 0x07, 0x84, 0x30, 0x20, 0x65, 0x59, 0xe7, 0x1d, 0xcf, 0x6d, 0xff, 0x9b, 0xb5,
	0x7e, 0x98, 0x6e, 0x3a, 0x61, 0xa5, 0xe2, 0xa5, 0x1d, 0x24, 0xad, 0x32, 0x38, 0x69, 0xa5, 0xbe,
	0x6d, 0x80, 0xee, 0x8f, 0xc8, 0x79, 0x6c, 0xc5, 0xff, 0x21, 0xed, 0x3f, 0x57, 0xc8, 0xd1, 0xf4,
	0xb8, 0x5e, 0x76, 0x9f, 0x1e, 0xb8, 0x4f, 0x78, 0x21, 0xf3, 0x7c, 0x82, 0x1d, 0x60, 0xcb, 0x61,
	0x66, 0x45, 0x07, 0x58, 0xf2, 0xb4, 0xf2, 0x26, 0x39, 0xd6, 0x75, 0xea, 0xee, 0x53, 0x96, 0xfc,
	0x31, 0x4a, 0xdc, 0x0c, 0x15, 0xf6, 0x0f, 0x13, 0x31, 0x3d, 0xfa, 0xb9, 0xf8, 0x3d, 0x42, 0xd4,
	0x5a, 0xfc, 0x27, 0x2d, 0x4b, 0x4e, 0x3c, 0xea, 0xab, 0x36, 0x19, 0x4b, 0x7b, 0xd1, 0x54, 0x94,
	0xd4, 0xa4, 0x96, 0x27, 0x01, 0x88, 0x76, 0x5b, 0x8d, 0xed, 0xea, 0x0b, 0x9f, 0xfc, 0xe6, 0x0f,
	0x3f, 0x1c, 0xba, 0xaa, 0x5f, 0x5a, 0xe8, 0xdd, 0x58, 0x08, 0x9d, 0xb3, 0x90, 0x17, 0xbf, 0x90,
	0x88, 0xb8, 0xa5, 0x5c, 0x53, 0x3f, 0x51, 0xc8, 0x44, 0xb6, 0xb1, 0x9a, 0xc9, 0x2b, 0x04, 0xb4,
	0x7c, 0x4e, 0xd6, 0x9a, 0x81, 0xf5, 0x9b, 0x5c, 0xff, 0xbc, 0x7e, 0x75, 0x80, 0x7e, 0x98, 0x12,
	0x1a, 0xf1, 0x99, 0x42, 0xa6, 0xf0, 0xe3, 0x1d, 0xb3, 0x45, 0x22, 0x95, 0x2f, 0xa1, 0x26, 0x49,
	0x2c, 0xfd, 0x35, 0x6e, 0xd9, 0x8b, 0xfa, 0xf5, 0x81, 0x96, 0x49, 0x33, 0x43, 0x03, 0x7f, 0xaa,
	0x90, 0xe9, 0x82, 0x02, 0x7c, 0x39, 0x6f, 0x22, 0x42, 0x2b, 0x5f, 0x41, 0x8c, 0x44, 0x78, 0xfa,
	0x1b, 0xdc, 0xcc, 0x97, 0xf5, 0xc5, 0x01, 0x66, 0x22, 0x73, 0x43, 0x43, 0xbf, 0xa3, 0x90, 0x93,
	0xf9, 0xe2, 0x36, 0x2b, 0xd9, 0x98, 0x63, 0x94, 0xa7, 0x64, 0xf3, 0x1e, 0xbb, 0xb6, 0xa5, 0xbf,
	0xc2, 0x8d, 0x59, 0xd4, 0x9f, 0xef, 0x67, 0x4c, 0x4e, 0x58, 0x68, 0xc7, 0x0f, 0x14, 0x32, 0x89,
	0x15, 0x3c, 0xbd, 0xc8, 0x12, 0xe0, 0x14, 0xd8, 0x72, 0x8b, 0xdb, 0x72, 0x53, 0x5f, 0x38, 0x90,
	0x2d, 0x20, 0x2e, 0xb4, 0xe6, 0x47, 0x0a, 0x99, 0x2e, 0x28, 0x84, 0x97, 0x8b, 0x5d, 0x23, 0xd0,
	0x0a, 0x6c, 0x3a, 0x50, 0xb0, 0x70, 0x89, 0xa1, 0x59, 0x3f, 0x51, 0x88, 0x56, 0x58, 0x23, 0x9f,
	0xe9, 0xe7, 0xa9, 0xc1, 0xa6, 0xdd, 0xe6, 0xa6, 0xbd, 0xaa, 0xdf, 0x3c, 0xb0, 0xbb, 0x24, 0xe3,
	0x5c, 0x42, 0xd2, 0xb2, 0xe5, 0xab, 0xd3, 0xb9, 0x6a, 0xc8, 0x0f, 0x56, 0x50, 0x2e, 0xd6, 0x5c,
	0xfd, 0x06, 0x57, 0xfe, 0xac, 0x7e, 0xa5, 0xaf, 0xf2, 0x54, 0xfa, 0x2d, 0xe5, 0xda, 0x75, 0x65,
	0x79, 0x6d, 0xff, 0xf6, 0x34, 0x99, 0x12, 0xeb, 0xba, 0xcf, 0xbc, 0x9e, 0x6d, 0x32, 0xff, 0xf3,
	0x2f, 0x2a, 0xa5, 0xdf, 0x7e, 0x51, 0x29, 0x7d, 0xf9, 0x45, 0x45, 0xf9, 0x78, 0xbf, 0xa2, 0xfc,
	0x6c, 0xbf, 0xa2, 0xfc, 0x6a, 0xbf, 0xa2, 0x7c, 0xbe, 0x5f, 0x51, 0x7e, 0xb7, 0x5f, 0x51, 0xfe,
	0xb8, 0x5f, 0x29, 0x7d, 0xb9, 0x5f, 0x51, 0x3e, 0xfd, 0x7d, 0xa5, 0x54, 0x1f, 0xe5, 0x16, 0xbe,
	0xf0, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x46, 0x1e, 0x41, 0x2b, 0x38, 0x00, 0x00,
}
