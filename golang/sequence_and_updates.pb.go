// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sequence_and_updates.proto

package dialog

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Sequence update
type UpdateSeqUpdate struct {
	Seq          int32  `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State        []byte `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	UpdateHeader int32  `protobuf:"varint,3,opt,name=update_header,json=updateHeader,proto3" json:"update_header,omitempty"`
	// Types that are valid to be assigned to Update:
	//	*UpdateSeqUpdate_UpdateForceReloadState
	//	*UpdateSeqUpdate_UpdateUserAvatarChanged
	//	*UpdateSeqUpdate_UpdateUserNameChanged
	//	*UpdateSeqUpdate_UpdateUserLocalNameChanged
	//	*UpdateSeqUpdate_UpdateUserContactsChanged
	//	*UpdateSeqUpdate_UpdateUserNickChanged
	//	*UpdateSeqUpdate_UpdateUserAboutChanged
	//	*UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged
	//	*UpdateSeqUpdate_UpdateUserTimeZoneChanged
	//	*UpdateSeqUpdate_UpdateUserBotCommandsChanged
	//	*UpdateSeqUpdate_UpdateUserExtChanged
	//	*UpdateSeqUpdate_UpdateUserFullExtChanged
	//	*UpdateSeqUpdate_UpdateUserSexChanged
	//	*UpdateSeqUpdate_UpdateUserCustomProfileChanged
	//	*UpdateSeqUpdate_UpdateUserStatusChanged
	//	*UpdateSeqUpdate_UpdateContactRegistered
	//	*UpdateSeqUpdate_UpdateContactsAdded
	//	*UpdateSeqUpdate_UpdateContactsAddTaskSuspended
	//	*UpdateSeqUpdate_UpdateContactsRemoved
	//	*UpdateSeqUpdate_UpdateUserBlocked
	//	*UpdateSeqUpdate_UpdateUserUnblocked
	//	*UpdateSeqUpdate_UpdateInteractiveMediaEvent
	//	*UpdateSeqUpdate_UpdateMessage
	//	*UpdateSeqUpdate_UpdateMessageContentChanged
	//	*UpdateSeqUpdate_UpdateMessageSent
	//	*UpdateSeqUpdate_UpdateMessageReceived
	//	*UpdateSeqUpdate_UpdateMessageRead
	//	*UpdateSeqUpdate_UpdateMessageReadByMe
	//	*UpdateSeqUpdate_UpdateMessageDelete
	//	*UpdateSeqUpdate_UpdateChatClear
	//	*UpdateSeqUpdate_UpdateChatDelete
	//	*UpdateSeqUpdate_UpdateChatArchive
	//	*UpdateSeqUpdate_UpdateChatGroupsChanged
	//	*UpdateSeqUpdate_UpdateReactionsUpdate
	//	*UpdateSeqUpdate_UpdateDialogFavouriteChanged
	//	*UpdateSeqUpdate_UpdatePinnedMessagesChanged
	//	*UpdateSeqUpdate_UpdateGroupTitleChanged
	//	*UpdateSeqUpdate_UpdateGroupAvatarChanged
	//	*UpdateSeqUpdate_UpdateGroupTopicChanged
	//	*UpdateSeqUpdate_UpdateGroupAboutChanged
	//	*UpdateSeqUpdate_UpdateGroupOwnerChanged
	//	*UpdateSeqUpdate_UpdateGroupHistoryShared
	//	*UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged
	//	*UpdateSeqUpdate_UpdateGroupCanViewMembersChanged
	//	*UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged
	//	*UpdateSeqUpdate_UpdateGroupMemberChanged
	//	*UpdateSeqUpdate_UpdateGroupMembersBecameAsync
	//	*UpdateSeqUpdate_UpdateGroupMembersUpdated
	//	*UpdateSeqUpdate_UpdateGroupMemberDiff
	//	*UpdateSeqUpdate_UpdateGroupMembersCountChanged
	//	*UpdateSeqUpdate_UpdateGroupMemberAdminChanged
	//	*UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged
	//	*UpdateSeqUpdate_UpdateGroupInviteObsolete
	//	*UpdateSeqUpdate_UpdateGroupUserInvitedObsolete
	//	*UpdateSeqUpdate_UpdateGroupUserLeaveObsolete
	//	*UpdateSeqUpdate_UpdateGroupUserKickObsolete
	//	*UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete
	//	*UpdateSeqUpdate_UpdateGroupTitleChangedObsolete
	//	*UpdateSeqUpdate_UpdateGroupTopicChangedObsolete
	//	*UpdateSeqUpdate_UpdateGroupAboutChangedObsolete
	//	*UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete
	//	*UpdateSeqUpdate_UpdateGroupShortnameChanged
	//	*UpdateSeqUpdate_UpdateStickerCollectionsChanged
	//	*UpdateSeqUpdate_UpdateStickerPackRemoved
	//	*UpdateSeqUpdate_UpdateStickerPackAdded
	//	*UpdateSeqUpdate_UpdatePauseNotifications
	//	*UpdateSeqUpdate_UpdateRestoreNotifications
	//	*UpdateSeqUpdate_UpdateTyping
	//	*UpdateSeqUpdate_UpdateTypingStop
	//	*UpdateSeqUpdate_UpdateUserOnline
	//	*UpdateSeqUpdate_UpdateUserOffline
	//	*UpdateSeqUpdate_UpdateUserLastSeen
	//	*UpdateSeqUpdate_UpdateGroupOnline
	//	*UpdateSeqUpdate_UpdateEventBusDeviceConnected
	//	*UpdateSeqUpdate_UpdateEventBusDeviceDisconnected
	//	*UpdateSeqUpdate_UpdateEventBusMessage
	//	*UpdateSeqUpdate_UpdateEventBusDisposed
	//	*UpdateSeqUpdate_UpdateIncomingCallDeprecated
	//	*UpdateSeqUpdate_UpdateIncomingCall
	//	*UpdateSeqUpdate_UpdateCallHandled
	//	*UpdateSeqUpdate_UpdateCallDisposed
	//	*UpdateSeqUpdate_UpdateParameterChanged
	//	*UpdateSeqUpdate_UpdateRawUpdate
	//	*UpdateSeqUpdate_UpdateEmptyUpdate
	//	*UpdateSeqUpdate_UpdateCountersChanged
	//	*UpdateSeqUpdate_UpdateConfig
	//	*UpdateSeqUpdate_UpdateSpaceModified
	//	*UpdateSeqUpdate_UpdateSpaceMemberModified
	//	*UpdateSeqUpdate_UpdateMessageRejectedByHook
	//	*UpdateSeqUpdate_UpdateMessageEditRejectedByHook
	//	*UpdateSeqUpdate_UpdateUser
	Update               isUpdateSeqUpdate_Update `protobuf_oneof:"update"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *UpdateSeqUpdate) Reset()         { *m = UpdateSeqUpdate{} }
func (m *UpdateSeqUpdate) String() string { return proto.CompactTextString(m) }
func (*UpdateSeqUpdate) ProtoMessage()    {}
func (*UpdateSeqUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{0}
}

func (m *UpdateSeqUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSeqUpdate.Unmarshal(m, b)
}
func (m *UpdateSeqUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSeqUpdate.Marshal(b, m, deterministic)
}
func (m *UpdateSeqUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSeqUpdate.Merge(m, src)
}
func (m *UpdateSeqUpdate) XXX_Size() int {
	return xxx_messageInfo_UpdateSeqUpdate.Size(m)
}
func (m *UpdateSeqUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSeqUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSeqUpdate proto.InternalMessageInfo

func (m *UpdateSeqUpdate) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateSeqUpdate) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateHeader() int32 {
	if m != nil {
		return m.UpdateHeader
	}
	return 0
}

type isUpdateSeqUpdate_Update interface {
	isUpdateSeqUpdate_Update()
}

type UpdateSeqUpdate_UpdateForceReloadState struct {
	UpdateForceReloadState *UpdateForceReloadState `protobuf:"bytes,4,opt,name=updateForceReloadState,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserAvatarChanged struct {
	UpdateUserAvatarChanged *UpdateUserAvatarChanged `protobuf:"bytes,5,opt,name=updateUserAvatarChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserNameChanged struct {
	UpdateUserNameChanged *UpdateUserNameChanged `protobuf:"bytes,6,opt,name=updateUserNameChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserLocalNameChanged struct {
	UpdateUserLocalNameChanged *UpdateUserLocalNameChanged `protobuf:"bytes,7,opt,name=updateUserLocalNameChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserContactsChanged struct {
	UpdateUserContactsChanged *UpdateUserContactsChanged `protobuf:"bytes,8,opt,name=updateUserContactsChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserNickChanged struct {
	UpdateUserNickChanged *UpdateUserNickChanged `protobuf:"bytes,9,opt,name=updateUserNickChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserAboutChanged struct {
	UpdateUserAboutChanged *UpdateUserAboutChanged `protobuf:"bytes,10,opt,name=updateUserAboutChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged struct {
	UpdateUserPreferredLanguagesChanged *UpdateUserPreferredLanguagesChanged `protobuf:"bytes,11,opt,name=updateUserPreferredLanguagesChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserTimeZoneChanged struct {
	UpdateUserTimeZoneChanged *UpdateUserTimeZoneChanged `protobuf:"bytes,12,opt,name=updateUserTimeZoneChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserBotCommandsChanged struct {
	UpdateUserBotCommandsChanged *UpdateUserBotCommandsChanged `protobuf:"bytes,13,opt,name=updateUserBotCommandsChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserExtChanged struct {
	UpdateUserExtChanged *UpdateUserExtChanged `protobuf:"bytes,14,opt,name=updateUserExtChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserFullExtChanged struct {
	UpdateUserFullExtChanged *UpdateUserFullExtChanged `protobuf:"bytes,15,opt,name=updateUserFullExtChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserSexChanged struct {
	UpdateUserSexChanged *UpdateUserSexChanged `protobuf:"bytes,16,opt,name=updateUserSexChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserCustomProfileChanged struct {
	UpdateUserCustomProfileChanged *UpdateUserCustomProfileChanged `protobuf:"bytes,17,opt,name=updateUserCustomProfileChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserStatusChanged struct {
	UpdateUserStatusChanged *UpdateUserStatusChanged `protobuf:"bytes,18,opt,name=updateUserStatusChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateContactRegistered struct {
	UpdateContactRegistered *UpdateContactRegistered `protobuf:"bytes,19,opt,name=updateContactRegistered,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateContactsAdded struct {
	UpdateContactsAdded *UpdateContactsAdded `protobuf:"bytes,20,opt,name=updateContactsAdded,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateContactsAddTaskSuspended struct {
	UpdateContactsAddTaskSuspended *UpdateContactsAddTaskSuspended `protobuf:"bytes,21,opt,name=updateContactsAddTaskSuspended,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateContactsRemoved struct {
	UpdateContactsRemoved *UpdateContactsRemoved `protobuf:"bytes,22,opt,name=updateContactsRemoved,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserBlocked struct {
	UpdateUserBlocked *UpdateUserBlocked `protobuf:"bytes,23,opt,name=updateUserBlocked,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserUnblocked struct {
	UpdateUserUnblocked *UpdateUserUnblocked `protobuf:"bytes,24,opt,name=updateUserUnblocked,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateInteractiveMediaEvent struct {
	UpdateInteractiveMediaEvent *UpdateInteractiveMediaEvent `protobuf:"bytes,25,opt,name=updateInteractiveMediaEvent,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateMessage struct {
	UpdateMessage *UpdateMessage `protobuf:"bytes,26,opt,name=updateMessage,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateMessageContentChanged struct {
	UpdateMessageContentChanged *UpdateMessageContentChanged `protobuf:"bytes,27,opt,name=updateMessageContentChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateMessageSent struct {
	UpdateMessageSent *UpdateMessageSent `protobuf:"bytes,28,opt,name=updateMessageSent,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateMessageReceived struct {
	UpdateMessageReceived *UpdateMessageReceived `protobuf:"bytes,29,opt,name=updateMessageReceived,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateMessageRead struct {
	UpdateMessageRead *UpdateMessageRead `protobuf:"bytes,30,opt,name=updateMessageRead,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateMessageReadByMe struct {
	UpdateMessageReadByMe *UpdateMessageReadByMe `protobuf:"bytes,31,opt,name=updateMessageReadByMe,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateMessageDelete struct {
	UpdateMessageDelete *UpdateMessageDelete `protobuf:"bytes,32,opt,name=updateMessageDelete,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateChatClear struct {
	UpdateChatClear *UpdateChatClear `protobuf:"bytes,33,opt,name=updateChatClear,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateChatDelete struct {
	UpdateChatDelete *UpdateChatDelete `protobuf:"bytes,34,opt,name=updateChatDelete,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateChatArchive struct {
	UpdateChatArchive *UpdateChatArchive `protobuf:"bytes,35,opt,name=updateChatArchive,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateChatGroupsChanged struct {
	UpdateChatGroupsChanged *UpdateChatGroupsChanged `protobuf:"bytes,36,opt,name=updateChatGroupsChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateReactionsUpdate struct {
	UpdateReactionsUpdate *UpdateReactionsUpdate `protobuf:"bytes,37,opt,name=updateReactionsUpdate,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateDialogFavouriteChanged struct {
	UpdateDialogFavouriteChanged *UpdateDialogFavouriteChanged `protobuf:"bytes,38,opt,name=updateDialogFavouriteChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdatePinnedMessagesChanged struct {
	UpdatePinnedMessagesChanged *UpdatePinnedMessagesChanged `protobuf:"bytes,39,opt,name=updatePinnedMessagesChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupTitleChanged struct {
	UpdateGroupTitleChanged *UpdateGroupTitleChanged `protobuf:"bytes,40,opt,name=updateGroupTitleChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupAvatarChanged struct {
	UpdateGroupAvatarChanged *UpdateGroupAvatarChanged `protobuf:"bytes,41,opt,name=updateGroupAvatarChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupTopicChanged struct {
	UpdateGroupTopicChanged *UpdateGroupTopicChanged `protobuf:"bytes,42,opt,name=updateGroupTopicChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupAboutChanged struct {
	UpdateGroupAboutChanged *UpdateGroupAboutChanged `protobuf:"bytes,43,opt,name=updateGroupAboutChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupOwnerChanged struct {
	UpdateGroupOwnerChanged *UpdateGroupOwnerChanged `protobuf:"bytes,44,opt,name=updateGroupOwnerChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupHistoryShared struct {
	UpdateGroupHistoryShared *UpdateGroupHistoryShared `protobuf:"bytes,45,opt,name=updateGroupHistoryShared,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged struct {
	UpdateGroupCanSendMessagesChanged *UpdateGroupCanSendMessagesChanged `protobuf:"bytes,46,opt,name=updateGroupCanSendMessagesChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupCanViewMembersChanged struct {
	UpdateGroupCanViewMembersChanged *UpdateGroupCanViewMembersChanged `protobuf:"bytes,47,opt,name=updateGroupCanViewMembersChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged struct {
	UpdateGroupCanInviteMembersChanged *UpdateGroupCanInviteMembersChanged `protobuf:"bytes,48,opt,name=updateGroupCanInviteMembersChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupMemberChanged struct {
	UpdateGroupMemberChanged *UpdateGroupMemberChanged `protobuf:"bytes,49,opt,name=updateGroupMemberChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupMembersBecameAsync struct {
	UpdateGroupMembersBecameAsync *UpdateGroupMembersBecameAsync `protobuf:"bytes,50,opt,name=updateGroupMembersBecameAsync,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupMembersUpdated struct {
	UpdateGroupMembersUpdated *UpdateGroupMembersUpdated `protobuf:"bytes,51,opt,name=updateGroupMembersUpdated,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupMemberDiff struct {
	UpdateGroupMemberDiff *UpdateGroupMemberDiff `protobuf:"bytes,52,opt,name=updateGroupMemberDiff,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupMembersCountChanged struct {
	UpdateGroupMembersCountChanged *UpdateGroupMembersCountChanged `protobuf:"bytes,53,opt,name=updateGroupMembersCountChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupMemberAdminChanged struct {
	UpdateGroupMemberAdminChanged *UpdateGroupMemberAdminChanged `protobuf:"bytes,54,opt,name=updateGroupMemberAdminChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged struct {
	UpdateGroupMemberPermissionsChanged *UpdateGroupMemberPermissionsChanged `protobuf:"bytes,55,opt,name=updateGroupMemberPermissionsChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupInviteObsolete struct {
	UpdateGroupInviteObsolete *UpdateGroupInviteObsolete `protobuf:"bytes,56,opt,name=updateGroupInviteObsolete,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupUserInvitedObsolete struct {
	UpdateGroupUserInvitedObsolete *UpdateGroupUserInvitedObsolete `protobuf:"bytes,57,opt,name=updateGroupUserInvitedObsolete,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupUserLeaveObsolete struct {
	UpdateGroupUserLeaveObsolete *UpdateGroupUserLeaveObsolete `protobuf:"bytes,58,opt,name=updateGroupUserLeaveObsolete,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupUserKickObsolete struct {
	UpdateGroupUserKickObsolete *UpdateGroupUserKickObsolete `protobuf:"bytes,59,opt,name=updateGroupUserKickObsolete,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete struct {
	UpdateGroupMembersUpdateObsolete *UpdateGroupMembersUpdateObsolete `protobuf:"bytes,60,opt,name=updateGroupMembersUpdateObsolete,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupTitleChangedObsolete struct {
	UpdateGroupTitleChangedObsolete *UpdateGroupTitleChangedObsolete `protobuf:"bytes,61,opt,name=updateGroupTitleChangedObsolete,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupTopicChangedObsolete struct {
	UpdateGroupTopicChangedObsolete *UpdateGroupTopicChangedObsolete `protobuf:"bytes,62,opt,name=updateGroupTopicChangedObsolete,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupAboutChangedObsolete struct {
	UpdateGroupAboutChangedObsolete *UpdateGroupAboutChangedObsolete `protobuf:"bytes,63,opt,name=updateGroupAboutChangedObsolete,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete struct {
	UpdateGroupAvatarChangedObsolete *UpdateGroupAvatarChangedObsolete `protobuf:"bytes,64,opt,name=updateGroupAvatarChangedObsolete,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupShortnameChanged struct {
	UpdateGroupShortnameChanged *UpdateGroupShortnameChanged `protobuf:"bytes,65,opt,name=updateGroupShortnameChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateStickerCollectionsChanged struct {
	UpdateStickerCollectionsChanged *UpdateStickerCollectionsChanged `protobuf:"bytes,66,opt,name=updateStickerCollectionsChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateStickerPackRemoved struct {
	UpdateStickerPackRemoved *UpdateStickerPackRemoved `protobuf:"bytes,67,opt,name=updateStickerPackRemoved,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateStickerPackAdded struct {
	UpdateStickerPackAdded *UpdateStickerPackAdded `protobuf:"bytes,68,opt,name=updateStickerPackAdded,proto3,oneof"`
}

type UpdateSeqUpdate_UpdatePauseNotifications struct {
	UpdatePauseNotifications *UpdatePauseNotifications `protobuf:"bytes,69,opt,name=updatePauseNotifications,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateRestoreNotifications struct {
	UpdateRestoreNotifications *UpdateRestoreNotifications `protobuf:"bytes,70,opt,name=updateRestoreNotifications,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateTyping struct {
	UpdateTyping *UpdateTyping `protobuf:"bytes,71,opt,name=updateTyping,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateTypingStop struct {
	UpdateTypingStop *UpdateTypingStop `protobuf:"bytes,72,opt,name=updateTypingStop,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserOnline struct {
	UpdateUserOnline *UpdateUserOnline `protobuf:"bytes,73,opt,name=updateUserOnline,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserOffline struct {
	UpdateUserOffline *UpdateUserOffline `protobuf:"bytes,74,opt,name=updateUserOffline,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUserLastSeen struct {
	UpdateUserLastSeen *UpdateUserLastSeen `protobuf:"bytes,75,opt,name=updateUserLastSeen,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateGroupOnline struct {
	UpdateGroupOnline *UpdateGroupOnline `protobuf:"bytes,76,opt,name=updateGroupOnline,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateEventBusDeviceConnected struct {
	UpdateEventBusDeviceConnected *UpdateEventBusDeviceConnected `protobuf:"bytes,77,opt,name=updateEventBusDeviceConnected,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateEventBusDeviceDisconnected struct {
	UpdateEventBusDeviceDisconnected *UpdateEventBusDeviceDisconnected `protobuf:"bytes,78,opt,name=updateEventBusDeviceDisconnected,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateEventBusMessage struct {
	UpdateEventBusMessage *UpdateEventBusMessage `protobuf:"bytes,79,opt,name=updateEventBusMessage,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateEventBusDisposed struct {
	UpdateEventBusDisposed *UpdateEventBusDisposed `protobuf:"bytes,80,opt,name=updateEventBusDisposed,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateIncomingCallDeprecated struct {
	UpdateIncomingCallDeprecated *UpdateIncomingCallDeprecated `protobuf:"bytes,81,opt,name=updateIncomingCallDeprecated,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateIncomingCall struct {
	UpdateIncomingCall *UpdateIncomingCall `protobuf:"bytes,82,opt,name=updateIncomingCall,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateCallHandled struct {
	UpdateCallHandled *UpdateCallHandled `protobuf:"bytes,83,opt,name=updateCallHandled,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateCallDisposed struct {
	UpdateCallDisposed *UpdateCallDisposed `protobuf:"bytes,84,opt,name=updateCallDisposed,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateParameterChanged struct {
	UpdateParameterChanged *UpdateParameterChanged `protobuf:"bytes,85,opt,name=updateParameterChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateRawUpdate struct {
	UpdateRawUpdate *UpdateRawUpdate `protobuf:"bytes,86,opt,name=updateRawUpdate,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateEmptyUpdate struct {
	UpdateEmptyUpdate *UpdateEmptyUpdate `protobuf:"bytes,87,opt,name=updateEmptyUpdate,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateCountersChanged struct {
	UpdateCountersChanged *UpdateCountersChanged `protobuf:"bytes,88,opt,name=updateCountersChanged,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateConfig struct {
	UpdateConfig *UpdateConfig `protobuf:"bytes,89,opt,name=updateConfig,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateSpaceModified struct {
	UpdateSpaceModified *UpdateSpaceModified `protobuf:"bytes,90,opt,name=updateSpaceModified,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateSpaceMemberModified struct {
	UpdateSpaceMemberModified *UpdateSpaceMemberModified `protobuf:"bytes,91,opt,name=updateSpaceMemberModified,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateMessageRejectedByHook struct {
	UpdateMessageRejectedByHook *UpdateMessageRejectedByHook `protobuf:"bytes,92,opt,name=updateMessageRejectedByHook,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateMessageEditRejectedByHook struct {
	UpdateMessageEditRejectedByHook *UpdateMessageEditRejectedByHook `protobuf:"bytes,93,opt,name=updateMessageEditRejectedByHook,proto3,oneof"`
}

type UpdateSeqUpdate_UpdateUser struct {
	UpdateUser *UpdateUser `protobuf:"bytes,94,opt,name=updateUser,proto3,oneof"`
}

func (*UpdateSeqUpdate_UpdateForceReloadState) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserAvatarChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserNameChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserLocalNameChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserContactsChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserNickChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserAboutChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserTimeZoneChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserBotCommandsChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserExtChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserFullExtChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserSexChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserCustomProfileChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserStatusChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateContactRegistered) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateContactsAdded) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateContactsAddTaskSuspended) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateContactsRemoved) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserBlocked) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserUnblocked) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateInteractiveMediaEvent) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateMessage) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateMessageContentChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateMessageSent) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateMessageReceived) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateMessageRead) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateMessageReadByMe) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateMessageDelete) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateChatClear) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateChatDelete) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateChatArchive) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateChatGroupsChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateReactionsUpdate) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateDialogFavouriteChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdatePinnedMessagesChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupTitleChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupAvatarChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupTopicChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupAboutChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupOwnerChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupHistoryShared) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupCanViewMembersChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupMemberChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupMembersBecameAsync) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupMembersUpdated) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupMemberDiff) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupMembersCountChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupMemberAdminChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupInviteObsolete) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupUserInvitedObsolete) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupUserLeaveObsolete) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupUserKickObsolete) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupTitleChangedObsolete) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupTopicChangedObsolete) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupAboutChangedObsolete) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupShortnameChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateStickerCollectionsChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateStickerPackRemoved) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateStickerPackAdded) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdatePauseNotifications) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateRestoreNotifications) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateTyping) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateTypingStop) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserOnline) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserOffline) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUserLastSeen) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateGroupOnline) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateEventBusDeviceConnected) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateEventBusDeviceDisconnected) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateEventBusMessage) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateEventBusDisposed) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateIncomingCallDeprecated) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateIncomingCall) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateCallHandled) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateCallDisposed) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateParameterChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateRawUpdate) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateEmptyUpdate) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateCountersChanged) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateConfig) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateSpaceModified) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateSpaceMemberModified) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateMessageRejectedByHook) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateMessageEditRejectedByHook) isUpdateSeqUpdate_Update() {}

func (*UpdateSeqUpdate_UpdateUser) isUpdateSeqUpdate_Update() {}

func (m *UpdateSeqUpdate) GetUpdate() isUpdateSeqUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateForceReloadState() *UpdateForceReloadState {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateForceReloadState); ok {
		return x.UpdateForceReloadState
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserAvatarChanged() *UpdateUserAvatarChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserAvatarChanged); ok {
		return x.UpdateUserAvatarChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserNameChanged() *UpdateUserNameChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserNameChanged); ok {
		return x.UpdateUserNameChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserLocalNameChanged() *UpdateUserLocalNameChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserLocalNameChanged); ok {
		return x.UpdateUserLocalNameChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserContactsChanged() *UpdateUserContactsChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserContactsChanged); ok {
		return x.UpdateUserContactsChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserNickChanged() *UpdateUserNickChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserNickChanged); ok {
		return x.UpdateUserNickChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserAboutChanged() *UpdateUserAboutChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserAboutChanged); ok {
		return x.UpdateUserAboutChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserPreferredLanguagesChanged() *UpdateUserPreferredLanguagesChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged); ok {
		return x.UpdateUserPreferredLanguagesChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserTimeZoneChanged() *UpdateUserTimeZoneChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserTimeZoneChanged); ok {
		return x.UpdateUserTimeZoneChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserBotCommandsChanged() *UpdateUserBotCommandsChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserBotCommandsChanged); ok {
		return x.UpdateUserBotCommandsChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserExtChanged() *UpdateUserExtChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserExtChanged); ok {
		return x.UpdateUserExtChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserFullExtChanged() *UpdateUserFullExtChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserFullExtChanged); ok {
		return x.UpdateUserFullExtChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserSexChanged() *UpdateUserSexChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserSexChanged); ok {
		return x.UpdateUserSexChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserCustomProfileChanged() *UpdateUserCustomProfileChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserCustomProfileChanged); ok {
		return x.UpdateUserCustomProfileChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserStatusChanged() *UpdateUserStatusChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserStatusChanged); ok {
		return x.UpdateUserStatusChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateContactRegistered() *UpdateContactRegistered {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateContactRegistered); ok {
		return x.UpdateContactRegistered
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateContactsAdded() *UpdateContactsAdded {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateContactsAdded); ok {
		return x.UpdateContactsAdded
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateContactsAddTaskSuspended() *UpdateContactsAddTaskSuspended {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateContactsAddTaskSuspended); ok {
		return x.UpdateContactsAddTaskSuspended
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateContactsRemoved() *UpdateContactsRemoved {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateContactsRemoved); ok {
		return x.UpdateContactsRemoved
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserBlocked() *UpdateUserBlocked {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserBlocked); ok {
		return x.UpdateUserBlocked
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserUnblocked() *UpdateUserUnblocked {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserUnblocked); ok {
		return x.UpdateUserUnblocked
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateInteractiveMediaEvent() *UpdateInteractiveMediaEvent {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateInteractiveMediaEvent); ok {
		return x.UpdateInteractiveMediaEvent
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessage() *UpdateMessage {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessage); ok {
		return x.UpdateMessage
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageContentChanged() *UpdateMessageContentChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageContentChanged); ok {
		return x.UpdateMessageContentChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageSent() *UpdateMessageSent {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageSent); ok {
		return x.UpdateMessageSent
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageReceived() *UpdateMessageReceived {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageReceived); ok {
		return x.UpdateMessageReceived
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageRead() *UpdateMessageRead {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageRead); ok {
		return x.UpdateMessageRead
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageReadByMe() *UpdateMessageReadByMe {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageReadByMe); ok {
		return x.UpdateMessageReadByMe
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageDelete() *UpdateMessageDelete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageDelete); ok {
		return x.UpdateMessageDelete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateChatClear() *UpdateChatClear {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateChatClear); ok {
		return x.UpdateChatClear
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateChatDelete() *UpdateChatDelete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateChatDelete); ok {
		return x.UpdateChatDelete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateChatArchive() *UpdateChatArchive {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateChatArchive); ok {
		return x.UpdateChatArchive
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateChatGroupsChanged() *UpdateChatGroupsChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateChatGroupsChanged); ok {
		return x.UpdateChatGroupsChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateReactionsUpdate() *UpdateReactionsUpdate {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateReactionsUpdate); ok {
		return x.UpdateReactionsUpdate
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateDialogFavouriteChanged() *UpdateDialogFavouriteChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateDialogFavouriteChanged); ok {
		return x.UpdateDialogFavouriteChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdatePinnedMessagesChanged() *UpdatePinnedMessagesChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdatePinnedMessagesChanged); ok {
		return x.UpdatePinnedMessagesChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupTitleChanged() *UpdateGroupTitleChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupTitleChanged); ok {
		return x.UpdateGroupTitleChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupAvatarChanged() *UpdateGroupAvatarChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupAvatarChanged); ok {
		return x.UpdateGroupAvatarChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupTopicChanged() *UpdateGroupTopicChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupTopicChanged); ok {
		return x.UpdateGroupTopicChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupAboutChanged() *UpdateGroupAboutChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupAboutChanged); ok {
		return x.UpdateGroupAboutChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupOwnerChanged() *UpdateGroupOwnerChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupOwnerChanged); ok {
		return x.UpdateGroupOwnerChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupHistoryShared() *UpdateGroupHistoryShared {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupHistoryShared); ok {
		return x.UpdateGroupHistoryShared
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupCanSendMessagesChanged() *UpdateGroupCanSendMessagesChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged); ok {
		return x.UpdateGroupCanSendMessagesChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupCanViewMembersChanged() *UpdateGroupCanViewMembersChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupCanViewMembersChanged); ok {
		return x.UpdateGroupCanViewMembersChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupCanInviteMembersChanged() *UpdateGroupCanInviteMembersChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged); ok {
		return x.UpdateGroupCanInviteMembersChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMemberChanged() *UpdateGroupMemberChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMemberChanged); ok {
		return x.UpdateGroupMemberChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMembersBecameAsync() *UpdateGroupMembersBecameAsync {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMembersBecameAsync); ok {
		return x.UpdateGroupMembersBecameAsync
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMembersUpdated() *UpdateGroupMembersUpdated {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMembersUpdated); ok {
		return x.UpdateGroupMembersUpdated
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMemberDiff() *UpdateGroupMemberDiff {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMemberDiff); ok {
		return x.UpdateGroupMemberDiff
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMembersCountChanged() *UpdateGroupMembersCountChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMembersCountChanged); ok {
		return x.UpdateGroupMembersCountChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMemberAdminChanged() *UpdateGroupMemberAdminChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMemberAdminChanged); ok {
		return x.UpdateGroupMemberAdminChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMemberPermissionsChanged() *UpdateGroupMemberPermissionsChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged); ok {
		return x.UpdateGroupMemberPermissionsChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupInviteObsolete() *UpdateGroupInviteObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupInviteObsolete); ok {
		return x.UpdateGroupInviteObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupUserInvitedObsolete() *UpdateGroupUserInvitedObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupUserInvitedObsolete); ok {
		return x.UpdateGroupUserInvitedObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupUserLeaveObsolete() *UpdateGroupUserLeaveObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupUserLeaveObsolete); ok {
		return x.UpdateGroupUserLeaveObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupUserKickObsolete() *UpdateGroupUserKickObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupUserKickObsolete); ok {
		return x.UpdateGroupUserKickObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMembersUpdateObsolete() *UpdateGroupMembersUpdateObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete); ok {
		return x.UpdateGroupMembersUpdateObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupTitleChangedObsolete() *UpdateGroupTitleChangedObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupTitleChangedObsolete); ok {
		return x.UpdateGroupTitleChangedObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupTopicChangedObsolete() *UpdateGroupTopicChangedObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupTopicChangedObsolete); ok {
		return x.UpdateGroupTopicChangedObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupAboutChangedObsolete() *UpdateGroupAboutChangedObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupAboutChangedObsolete); ok {
		return x.UpdateGroupAboutChangedObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupAvatarChangedObsolete() *UpdateGroupAvatarChangedObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete); ok {
		return x.UpdateGroupAvatarChangedObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupShortnameChanged() *UpdateGroupShortnameChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupShortnameChanged); ok {
		return x.UpdateGroupShortnameChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateStickerCollectionsChanged() *UpdateStickerCollectionsChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateStickerCollectionsChanged); ok {
		return x.UpdateStickerCollectionsChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateStickerPackRemoved() *UpdateStickerPackRemoved {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateStickerPackRemoved); ok {
		return x.UpdateStickerPackRemoved
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateStickerPackAdded() *UpdateStickerPackAdded {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateStickerPackAdded); ok {
		return x.UpdateStickerPackAdded
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdatePauseNotifications() *UpdatePauseNotifications {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdatePauseNotifications); ok {
		return x.UpdatePauseNotifications
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateRestoreNotifications() *UpdateRestoreNotifications {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateRestoreNotifications); ok {
		return x.UpdateRestoreNotifications
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateTyping() *UpdateTyping {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateTyping); ok {
		return x.UpdateTyping
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateTypingStop() *UpdateTypingStop {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateTypingStop); ok {
		return x.UpdateTypingStop
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserOnline() *UpdateUserOnline {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserOnline); ok {
		return x.UpdateUserOnline
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserOffline() *UpdateUserOffline {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserOffline); ok {
		return x.UpdateUserOffline
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserLastSeen() *UpdateUserLastSeen {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserLastSeen); ok {
		return x.UpdateUserLastSeen
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupOnline() *UpdateGroupOnline {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupOnline); ok {
		return x.UpdateGroupOnline
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateEventBusDeviceConnected() *UpdateEventBusDeviceConnected {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateEventBusDeviceConnected); ok {
		return x.UpdateEventBusDeviceConnected
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateEventBusDeviceDisconnected() *UpdateEventBusDeviceDisconnected {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateEventBusDeviceDisconnected); ok {
		return x.UpdateEventBusDeviceDisconnected
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateEventBusMessage() *UpdateEventBusMessage {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateEventBusMessage); ok {
		return x.UpdateEventBusMessage
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateEventBusDisposed() *UpdateEventBusDisposed {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateEventBusDisposed); ok {
		return x.UpdateEventBusDisposed
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateIncomingCallDeprecated() *UpdateIncomingCallDeprecated {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateIncomingCallDeprecated); ok {
		return x.UpdateIncomingCallDeprecated
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateIncomingCall() *UpdateIncomingCall {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateIncomingCall); ok {
		return x.UpdateIncomingCall
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateCallHandled() *UpdateCallHandled {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateCallHandled); ok {
		return x.UpdateCallHandled
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateCallDisposed() *UpdateCallDisposed {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateCallDisposed); ok {
		return x.UpdateCallDisposed
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateParameterChanged() *UpdateParameterChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateParameterChanged); ok {
		return x.UpdateParameterChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateRawUpdate() *UpdateRawUpdate {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateRawUpdate); ok {
		return x.UpdateRawUpdate
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateEmptyUpdate() *UpdateEmptyUpdate {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateEmptyUpdate); ok {
		return x.UpdateEmptyUpdate
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateCountersChanged() *UpdateCountersChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateCountersChanged); ok {
		return x.UpdateCountersChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateConfig() *UpdateConfig {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateConfig); ok {
		return x.UpdateConfig
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateSpaceModified() *UpdateSpaceModified {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateSpaceModified); ok {
		return x.UpdateSpaceModified
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateSpaceMemberModified() *UpdateSpaceMemberModified {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateSpaceMemberModified); ok {
		return x.UpdateSpaceMemberModified
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageRejectedByHook() *UpdateMessageRejectedByHook {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageRejectedByHook); ok {
		return x.UpdateMessageRejectedByHook
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageEditRejectedByHook() *UpdateMessageEditRejectedByHook {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageEditRejectedByHook); ok {
		return x.UpdateMessageEditRejectedByHook
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUser() *UpdateUser {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUser); ok {
		return x.UpdateUser
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UpdateSeqUpdate) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UpdateSeqUpdate_OneofMarshaler, _UpdateSeqUpdate_OneofUnmarshaler, _UpdateSeqUpdate_OneofSizer, []interface{}{
		(*UpdateSeqUpdate_UpdateForceReloadState)(nil),
		(*UpdateSeqUpdate_UpdateUserAvatarChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserNameChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserLocalNameChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserContactsChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserNickChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserAboutChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserTimeZoneChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserBotCommandsChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserExtChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserFullExtChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserSexChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserCustomProfileChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserStatusChanged)(nil),
		(*UpdateSeqUpdate_UpdateContactRegistered)(nil),
		(*UpdateSeqUpdate_UpdateContactsAdded)(nil),
		(*UpdateSeqUpdate_UpdateContactsAddTaskSuspended)(nil),
		(*UpdateSeqUpdate_UpdateContactsRemoved)(nil),
		(*UpdateSeqUpdate_UpdateUserBlocked)(nil),
		(*UpdateSeqUpdate_UpdateUserUnblocked)(nil),
		(*UpdateSeqUpdate_UpdateInteractiveMediaEvent)(nil),
		(*UpdateSeqUpdate_UpdateMessage)(nil),
		(*UpdateSeqUpdate_UpdateMessageContentChanged)(nil),
		(*UpdateSeqUpdate_UpdateMessageSent)(nil),
		(*UpdateSeqUpdate_UpdateMessageReceived)(nil),
		(*UpdateSeqUpdate_UpdateMessageRead)(nil),
		(*UpdateSeqUpdate_UpdateMessageReadByMe)(nil),
		(*UpdateSeqUpdate_UpdateMessageDelete)(nil),
		(*UpdateSeqUpdate_UpdateChatClear)(nil),
		(*UpdateSeqUpdate_UpdateChatDelete)(nil),
		(*UpdateSeqUpdate_UpdateChatArchive)(nil),
		(*UpdateSeqUpdate_UpdateChatGroupsChanged)(nil),
		(*UpdateSeqUpdate_UpdateReactionsUpdate)(nil),
		(*UpdateSeqUpdate_UpdateDialogFavouriteChanged)(nil),
		(*UpdateSeqUpdate_UpdatePinnedMessagesChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupTitleChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupAvatarChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupTopicChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupAboutChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupOwnerChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupHistoryShared)(nil),
		(*UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupCanViewMembersChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupMemberChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupMembersBecameAsync)(nil),
		(*UpdateSeqUpdate_UpdateGroupMembersUpdated)(nil),
		(*UpdateSeqUpdate_UpdateGroupMemberDiff)(nil),
		(*UpdateSeqUpdate_UpdateGroupMembersCountChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupMemberAdminChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupInviteObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupUserInvitedObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupUserLeaveObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupUserKickObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupTitleChangedObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupTopicChangedObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupAboutChangedObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupShortnameChanged)(nil),
		(*UpdateSeqUpdate_UpdateStickerCollectionsChanged)(nil),
		(*UpdateSeqUpdate_UpdateStickerPackRemoved)(nil),
		(*UpdateSeqUpdate_UpdateStickerPackAdded)(nil),
		(*UpdateSeqUpdate_UpdatePauseNotifications)(nil),
		(*UpdateSeqUpdate_UpdateRestoreNotifications)(nil),
		(*UpdateSeqUpdate_UpdateTyping)(nil),
		(*UpdateSeqUpdate_UpdateTypingStop)(nil),
		(*UpdateSeqUpdate_UpdateUserOnline)(nil),
		(*UpdateSeqUpdate_UpdateUserOffline)(nil),
		(*UpdateSeqUpdate_UpdateUserLastSeen)(nil),
		(*UpdateSeqUpdate_UpdateGroupOnline)(nil),
		(*UpdateSeqUpdate_UpdateEventBusDeviceConnected)(nil),
		(*UpdateSeqUpdate_UpdateEventBusDeviceDisconnected)(nil),
		(*UpdateSeqUpdate_UpdateEventBusMessage)(nil),
		(*UpdateSeqUpdate_UpdateEventBusDisposed)(nil),
		(*UpdateSeqUpdate_UpdateIncomingCallDeprecated)(nil),
		(*UpdateSeqUpdate_UpdateIncomingCall)(nil),
		(*UpdateSeqUpdate_UpdateCallHandled)(nil),
		(*UpdateSeqUpdate_UpdateCallDisposed)(nil),
		(*UpdateSeqUpdate_UpdateParameterChanged)(nil),
		(*UpdateSeqUpdate_UpdateRawUpdate)(nil),
		(*UpdateSeqUpdate_UpdateEmptyUpdate)(nil),
		(*UpdateSeqUpdate_UpdateCountersChanged)(nil),
		(*UpdateSeqUpdate_UpdateConfig)(nil),
		(*UpdateSeqUpdate_UpdateSpaceModified)(nil),
		(*UpdateSeqUpdate_UpdateSpaceMemberModified)(nil),
		(*UpdateSeqUpdate_UpdateMessageRejectedByHook)(nil),
		(*UpdateSeqUpdate_UpdateMessageEditRejectedByHook)(nil),
		(*UpdateSeqUpdate_UpdateUser)(nil),
	}
}

func _UpdateSeqUpdate_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UpdateSeqUpdate)
	// update
	switch x := m.Update.(type) {
	case *UpdateSeqUpdate_UpdateForceReloadState:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateForceReloadState); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserAvatarChanged:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserAvatarChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserNameChanged:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserNameChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserLocalNameChanged:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserLocalNameChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserContactsChanged:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserContactsChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserNickChanged:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserNickChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserAboutChanged:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserAboutChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserPreferredLanguagesChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserTimeZoneChanged:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserTimeZoneChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserBotCommandsChanged:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserBotCommandsChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserExtChanged:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserExtChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserFullExtChanged:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserFullExtChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserSexChanged:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserSexChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserCustomProfileChanged:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserCustomProfileChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserStatusChanged:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserStatusChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateContactRegistered:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateContactRegistered); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateContactsAdded:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateContactsAdded); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateContactsAddTaskSuspended:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateContactsAddTaskSuspended); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateContactsRemoved:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateContactsRemoved); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserBlocked:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserBlocked); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserUnblocked:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserUnblocked); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateInteractiveMediaEvent:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateInteractiveMediaEvent); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateMessage:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateMessage); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateMessageContentChanged:
		b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateMessageContentChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateMessageSent:
		b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateMessageSent); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateMessageReceived:
		b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateMessageReceived); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateMessageRead:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateMessageRead); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateMessageReadByMe:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateMessageReadByMe); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateMessageDelete:
		b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateMessageDelete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateChatClear:
		b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateChatClear); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateChatDelete:
		b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateChatDelete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateChatArchive:
		b.EncodeVarint(35<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateChatArchive); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateChatGroupsChanged:
		b.EncodeVarint(36<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateChatGroupsChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateReactionsUpdate:
		b.EncodeVarint(37<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateReactionsUpdate); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateDialogFavouriteChanged:
		b.EncodeVarint(38<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateDialogFavouriteChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdatePinnedMessagesChanged:
		b.EncodeVarint(39<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdatePinnedMessagesChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupTitleChanged:
		b.EncodeVarint(40<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupTitleChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupAvatarChanged:
		b.EncodeVarint(41<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupAvatarChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupTopicChanged:
		b.EncodeVarint(42<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupTopicChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupAboutChanged:
		b.EncodeVarint(43<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupAboutChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupOwnerChanged:
		b.EncodeVarint(44<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupOwnerChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupHistoryShared:
		b.EncodeVarint(45<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupHistoryShared); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged:
		b.EncodeVarint(46<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupCanSendMessagesChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupCanViewMembersChanged:
		b.EncodeVarint(47<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupCanViewMembersChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged:
		b.EncodeVarint(48<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupCanInviteMembersChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupMemberChanged:
		b.EncodeVarint(49<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupMemberChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupMembersBecameAsync:
		b.EncodeVarint(50<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupMembersBecameAsync); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupMembersUpdated:
		b.EncodeVarint(51<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupMembersUpdated); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupMemberDiff:
		b.EncodeVarint(52<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupMemberDiff); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupMembersCountChanged:
		b.EncodeVarint(53<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupMembersCountChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupMemberAdminChanged:
		b.EncodeVarint(54<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupMemberAdminChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged:
		b.EncodeVarint(55<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupMemberPermissionsChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupInviteObsolete:
		b.EncodeVarint(56<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupInviteObsolete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupUserInvitedObsolete:
		b.EncodeVarint(57<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupUserInvitedObsolete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupUserLeaveObsolete:
		b.EncodeVarint(58<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupUserLeaveObsolete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupUserKickObsolete:
		b.EncodeVarint(59<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupUserKickObsolete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete:
		b.EncodeVarint(60<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupMembersUpdateObsolete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupTitleChangedObsolete:
		b.EncodeVarint(61<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupTitleChangedObsolete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupTopicChangedObsolete:
		b.EncodeVarint(62<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupTopicChangedObsolete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupAboutChangedObsolete:
		b.EncodeVarint(63<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupAboutChangedObsolete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete:
		b.EncodeVarint(64<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupAvatarChangedObsolete); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupShortnameChanged:
		b.EncodeVarint(65<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupShortnameChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateStickerCollectionsChanged:
		b.EncodeVarint(66<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateStickerCollectionsChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateStickerPackRemoved:
		b.EncodeVarint(67<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateStickerPackRemoved); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateStickerPackAdded:
		b.EncodeVarint(68<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateStickerPackAdded); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdatePauseNotifications:
		b.EncodeVarint(69<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdatePauseNotifications); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateRestoreNotifications:
		b.EncodeVarint(70<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateRestoreNotifications); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateTyping:
		b.EncodeVarint(71<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateTyping); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateTypingStop:
		b.EncodeVarint(72<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateTypingStop); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserOnline:
		b.EncodeVarint(73<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserOnline); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserOffline:
		b.EncodeVarint(74<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserOffline); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUserLastSeen:
		b.EncodeVarint(75<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUserLastSeen); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateGroupOnline:
		b.EncodeVarint(76<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateGroupOnline); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateEventBusDeviceConnected:
		b.EncodeVarint(77<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateEventBusDeviceConnected); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateEventBusDeviceDisconnected:
		b.EncodeVarint(78<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateEventBusDeviceDisconnected); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateEventBusMessage:
		b.EncodeVarint(79<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateEventBusMessage); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateEventBusDisposed:
		b.EncodeVarint(80<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateEventBusDisposed); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateIncomingCallDeprecated:
		b.EncodeVarint(81<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateIncomingCallDeprecated); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateIncomingCall:
		b.EncodeVarint(82<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateIncomingCall); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateCallHandled:
		b.EncodeVarint(83<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateCallHandled); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateCallDisposed:
		b.EncodeVarint(84<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateCallDisposed); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateParameterChanged:
		b.EncodeVarint(85<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateParameterChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateRawUpdate:
		b.EncodeVarint(86<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateRawUpdate); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateEmptyUpdate:
		b.EncodeVarint(87<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateEmptyUpdate); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateCountersChanged:
		b.EncodeVarint(88<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateCountersChanged); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateConfig:
		b.EncodeVarint(89<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateConfig); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateSpaceModified:
		b.EncodeVarint(90<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateSpaceModified); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateSpaceMemberModified:
		b.EncodeVarint(91<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateSpaceMemberModified); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateMessageRejectedByHook:
		b.EncodeVarint(92<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateMessageRejectedByHook); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateMessageEditRejectedByHook:
		b.EncodeVarint(93<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateMessageEditRejectedByHook); err != nil {
			return err
		}
	case *UpdateSeqUpdate_UpdateUser:
		b.EncodeVarint(94<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateUser); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UpdateSeqUpdate.Update has unexpected type %T", x)
	}
	return nil
}

func _UpdateSeqUpdate_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UpdateSeqUpdate)
	switch tag {
	case 4: // update.updateForceReloadState
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateForceReloadState)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateForceReloadState{msg}
		return true, err
	case 5: // update.updateUserAvatarChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserAvatarChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserAvatarChanged{msg}
		return true, err
	case 6: // update.updateUserNameChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserNameChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserNameChanged{msg}
		return true, err
	case 7: // update.updateUserLocalNameChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserLocalNameChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserLocalNameChanged{msg}
		return true, err
	case 8: // update.updateUserContactsChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserContactsChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserContactsChanged{msg}
		return true, err
	case 9: // update.updateUserNickChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserNickChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserNickChanged{msg}
		return true, err
	case 10: // update.updateUserAboutChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserAboutChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserAboutChanged{msg}
		return true, err
	case 11: // update.updateUserPreferredLanguagesChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserPreferredLanguagesChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged{msg}
		return true, err
	case 12: // update.updateUserTimeZoneChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserTimeZoneChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserTimeZoneChanged{msg}
		return true, err
	case 13: // update.updateUserBotCommandsChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserBotCommandsChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserBotCommandsChanged{msg}
		return true, err
	case 14: // update.updateUserExtChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserExtChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserExtChanged{msg}
		return true, err
	case 15: // update.updateUserFullExtChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserFullExtChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserFullExtChanged{msg}
		return true, err
	case 16: // update.updateUserSexChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserSexChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserSexChanged{msg}
		return true, err
	case 17: // update.updateUserCustomProfileChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserCustomProfileChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserCustomProfileChanged{msg}
		return true, err
	case 18: // update.updateUserStatusChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserStatusChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserStatusChanged{msg}
		return true, err
	case 19: // update.updateContactRegistered
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateContactRegistered)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateContactRegistered{msg}
		return true, err
	case 20: // update.updateContactsAdded
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateContactsAdded)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateContactsAdded{msg}
		return true, err
	case 21: // update.updateContactsAddTaskSuspended
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateContactsAddTaskSuspended)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateContactsAddTaskSuspended{msg}
		return true, err
	case 22: // update.updateContactsRemoved
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateContactsRemoved)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateContactsRemoved{msg}
		return true, err
	case 23: // update.updateUserBlocked
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserBlocked)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserBlocked{msg}
		return true, err
	case 24: // update.updateUserUnblocked
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserUnblocked)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserUnblocked{msg}
		return true, err
	case 25: // update.updateInteractiveMediaEvent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateInteractiveMediaEvent)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateInteractiveMediaEvent{msg}
		return true, err
	case 26: // update.updateMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateMessage)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateMessage{msg}
		return true, err
	case 27: // update.updateMessageContentChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateMessageContentChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateMessageContentChanged{msg}
		return true, err
	case 28: // update.updateMessageSent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateMessageSent)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateMessageSent{msg}
		return true, err
	case 29: // update.updateMessageReceived
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateMessageReceived)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateMessageReceived{msg}
		return true, err
	case 30: // update.updateMessageRead
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateMessageRead)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateMessageRead{msg}
		return true, err
	case 31: // update.updateMessageReadByMe
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateMessageReadByMe)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateMessageReadByMe{msg}
		return true, err
	case 32: // update.updateMessageDelete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateMessageDelete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateMessageDelete{msg}
		return true, err
	case 33: // update.updateChatClear
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateChatClear)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateChatClear{msg}
		return true, err
	case 34: // update.updateChatDelete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateChatDelete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateChatDelete{msg}
		return true, err
	case 35: // update.updateChatArchive
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateChatArchive)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateChatArchive{msg}
		return true, err
	case 36: // update.updateChatGroupsChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateChatGroupsChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateChatGroupsChanged{msg}
		return true, err
	case 37: // update.updateReactionsUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateReactionsUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateReactionsUpdate{msg}
		return true, err
	case 38: // update.updateDialogFavouriteChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateDialogFavouriteChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateDialogFavouriteChanged{msg}
		return true, err
	case 39: // update.updatePinnedMessagesChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdatePinnedMessagesChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdatePinnedMessagesChanged{msg}
		return true, err
	case 40: // update.updateGroupTitleChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupTitleChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupTitleChanged{msg}
		return true, err
	case 41: // update.updateGroupAvatarChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupAvatarChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupAvatarChanged{msg}
		return true, err
	case 42: // update.updateGroupTopicChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupTopicChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupTopicChanged{msg}
		return true, err
	case 43: // update.updateGroupAboutChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupAboutChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupAboutChanged{msg}
		return true, err
	case 44: // update.updateGroupOwnerChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupOwnerChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupOwnerChanged{msg}
		return true, err
	case 45: // update.updateGroupHistoryShared
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupHistoryShared)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupHistoryShared{msg}
		return true, err
	case 46: // update.updateGroupCanSendMessagesChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupCanSendMessagesChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged{msg}
		return true, err
	case 47: // update.updateGroupCanViewMembersChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupCanViewMembersChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupCanViewMembersChanged{msg}
		return true, err
	case 48: // update.updateGroupCanInviteMembersChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupCanInviteMembersChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged{msg}
		return true, err
	case 49: // update.updateGroupMemberChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupMemberChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupMemberChanged{msg}
		return true, err
	case 50: // update.updateGroupMembersBecameAsync
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupMembersBecameAsync)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupMembersBecameAsync{msg}
		return true, err
	case 51: // update.updateGroupMembersUpdated
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupMembersUpdated)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupMembersUpdated{msg}
		return true, err
	case 52: // update.updateGroupMemberDiff
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupMemberDiff)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupMemberDiff{msg}
		return true, err
	case 53: // update.updateGroupMembersCountChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupMembersCountChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupMembersCountChanged{msg}
		return true, err
	case 54: // update.updateGroupMemberAdminChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupMemberAdminChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupMemberAdminChanged{msg}
		return true, err
	case 55: // update.updateGroupMemberPermissionsChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupMemberPermissionsChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged{msg}
		return true, err
	case 56: // update.updateGroupInviteObsolete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupInviteObsolete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupInviteObsolete{msg}
		return true, err
	case 57: // update.updateGroupUserInvitedObsolete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupUserInvitedObsolete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupUserInvitedObsolete{msg}
		return true, err
	case 58: // update.updateGroupUserLeaveObsolete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupUserLeaveObsolete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupUserLeaveObsolete{msg}
		return true, err
	case 59: // update.updateGroupUserKickObsolete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupUserKickObsolete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupUserKickObsolete{msg}
		return true, err
	case 60: // update.updateGroupMembersUpdateObsolete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupMembersUpdateObsolete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete{msg}
		return true, err
	case 61: // update.updateGroupTitleChangedObsolete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupTitleChangedObsolete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupTitleChangedObsolete{msg}
		return true, err
	case 62: // update.updateGroupTopicChangedObsolete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupTopicChangedObsolete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupTopicChangedObsolete{msg}
		return true, err
	case 63: // update.updateGroupAboutChangedObsolete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupAboutChangedObsolete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupAboutChangedObsolete{msg}
		return true, err
	case 64: // update.updateGroupAvatarChangedObsolete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupAvatarChangedObsolete)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete{msg}
		return true, err
	case 65: // update.updateGroupShortnameChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupShortnameChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupShortnameChanged{msg}
		return true, err
	case 66: // update.updateStickerCollectionsChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateStickerCollectionsChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateStickerCollectionsChanged{msg}
		return true, err
	case 67: // update.updateStickerPackRemoved
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateStickerPackRemoved)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateStickerPackRemoved{msg}
		return true, err
	case 68: // update.updateStickerPackAdded
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateStickerPackAdded)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateStickerPackAdded{msg}
		return true, err
	case 69: // update.updatePauseNotifications
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdatePauseNotifications)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdatePauseNotifications{msg}
		return true, err
	case 70: // update.updateRestoreNotifications
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateRestoreNotifications)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateRestoreNotifications{msg}
		return true, err
	case 71: // update.updateTyping
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateTyping)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateTyping{msg}
		return true, err
	case 72: // update.updateTypingStop
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateTypingStop)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateTypingStop{msg}
		return true, err
	case 73: // update.updateUserOnline
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserOnline)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserOnline{msg}
		return true, err
	case 74: // update.updateUserOffline
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserOffline)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserOffline{msg}
		return true, err
	case 75: // update.updateUserLastSeen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUserLastSeen)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUserLastSeen{msg}
		return true, err
	case 76: // update.updateGroupOnline
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateGroupOnline)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateGroupOnline{msg}
		return true, err
	case 77: // update.updateEventBusDeviceConnected
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateEventBusDeviceConnected)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateEventBusDeviceConnected{msg}
		return true, err
	case 78: // update.updateEventBusDeviceDisconnected
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateEventBusDeviceDisconnected)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateEventBusDeviceDisconnected{msg}
		return true, err
	case 79: // update.updateEventBusMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateEventBusMessage)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateEventBusMessage{msg}
		return true, err
	case 80: // update.updateEventBusDisposed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateEventBusDisposed)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateEventBusDisposed{msg}
		return true, err
	case 81: // update.updateIncomingCallDeprecated
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateIncomingCallDeprecated)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateIncomingCallDeprecated{msg}
		return true, err
	case 82: // update.updateIncomingCall
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateIncomingCall)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateIncomingCall{msg}
		return true, err
	case 83: // update.updateCallHandled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateCallHandled)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateCallHandled{msg}
		return true, err
	case 84: // update.updateCallDisposed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateCallDisposed)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateCallDisposed{msg}
		return true, err
	case 85: // update.updateParameterChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateParameterChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateParameterChanged{msg}
		return true, err
	case 86: // update.updateRawUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateRawUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateRawUpdate{msg}
		return true, err
	case 87: // update.updateEmptyUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateEmptyUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateEmptyUpdate{msg}
		return true, err
	case 88: // update.updateCountersChanged
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateCountersChanged)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateCountersChanged{msg}
		return true, err
	case 89: // update.updateConfig
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateConfig)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateConfig{msg}
		return true, err
	case 90: // update.updateSpaceModified
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateSpaceModified)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateSpaceModified{msg}
		return true, err
	case 91: // update.updateSpaceMemberModified
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateSpaceMemberModified)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateSpaceMemberModified{msg}
		return true, err
	case 92: // update.updateMessageRejectedByHook
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateMessageRejectedByHook)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateMessageRejectedByHook{msg}
		return true, err
	case 93: // update.updateMessageEditRejectedByHook
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateMessageEditRejectedByHook)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateMessageEditRejectedByHook{msg}
		return true, err
	case 94: // update.updateUser
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateUser)
		err := b.DecodeMessage(msg)
		m.Update = &UpdateSeqUpdate_UpdateUser{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UpdateSeqUpdate_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UpdateSeqUpdate)
	// update
	switch x := m.Update.(type) {
	case *UpdateSeqUpdate_UpdateForceReloadState:
		s := proto.Size(x.UpdateForceReloadState)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserAvatarChanged:
		s := proto.Size(x.UpdateUserAvatarChanged)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserNameChanged:
		s := proto.Size(x.UpdateUserNameChanged)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserLocalNameChanged:
		s := proto.Size(x.UpdateUserLocalNameChanged)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserContactsChanged:
		s := proto.Size(x.UpdateUserContactsChanged)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserNickChanged:
		s := proto.Size(x.UpdateUserNickChanged)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserAboutChanged:
		s := proto.Size(x.UpdateUserAboutChanged)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged:
		s := proto.Size(x.UpdateUserPreferredLanguagesChanged)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserTimeZoneChanged:
		s := proto.Size(x.UpdateUserTimeZoneChanged)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserBotCommandsChanged:
		s := proto.Size(x.UpdateUserBotCommandsChanged)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserExtChanged:
		s := proto.Size(x.UpdateUserExtChanged)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserFullExtChanged:
		s := proto.Size(x.UpdateUserFullExtChanged)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserSexChanged:
		s := proto.Size(x.UpdateUserSexChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserCustomProfileChanged:
		s := proto.Size(x.UpdateUserCustomProfileChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserStatusChanged:
		s := proto.Size(x.UpdateUserStatusChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateContactRegistered:
		s := proto.Size(x.UpdateContactRegistered)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateContactsAdded:
		s := proto.Size(x.UpdateContactsAdded)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateContactsAddTaskSuspended:
		s := proto.Size(x.UpdateContactsAddTaskSuspended)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateContactsRemoved:
		s := proto.Size(x.UpdateContactsRemoved)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserBlocked:
		s := proto.Size(x.UpdateUserBlocked)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserUnblocked:
		s := proto.Size(x.UpdateUserUnblocked)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateInteractiveMediaEvent:
		s := proto.Size(x.UpdateInteractiveMediaEvent)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateMessage:
		s := proto.Size(x.UpdateMessage)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateMessageContentChanged:
		s := proto.Size(x.UpdateMessageContentChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateMessageSent:
		s := proto.Size(x.UpdateMessageSent)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateMessageReceived:
		s := proto.Size(x.UpdateMessageReceived)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateMessageRead:
		s := proto.Size(x.UpdateMessageRead)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateMessageReadByMe:
		s := proto.Size(x.UpdateMessageReadByMe)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateMessageDelete:
		s := proto.Size(x.UpdateMessageDelete)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateChatClear:
		s := proto.Size(x.UpdateChatClear)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateChatDelete:
		s := proto.Size(x.UpdateChatDelete)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateChatArchive:
		s := proto.Size(x.UpdateChatArchive)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateChatGroupsChanged:
		s := proto.Size(x.UpdateChatGroupsChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateReactionsUpdate:
		s := proto.Size(x.UpdateReactionsUpdate)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateDialogFavouriteChanged:
		s := proto.Size(x.UpdateDialogFavouriteChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdatePinnedMessagesChanged:
		s := proto.Size(x.UpdatePinnedMessagesChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupTitleChanged:
		s := proto.Size(x.UpdateGroupTitleChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupAvatarChanged:
		s := proto.Size(x.UpdateGroupAvatarChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupTopicChanged:
		s := proto.Size(x.UpdateGroupTopicChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupAboutChanged:
		s := proto.Size(x.UpdateGroupAboutChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupOwnerChanged:
		s := proto.Size(x.UpdateGroupOwnerChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupHistoryShared:
		s := proto.Size(x.UpdateGroupHistoryShared)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupCanSendMessagesChanged:
		s := proto.Size(x.UpdateGroupCanSendMessagesChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupCanViewMembersChanged:
		s := proto.Size(x.UpdateGroupCanViewMembersChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupCanInviteMembersChanged:
		s := proto.Size(x.UpdateGroupCanInviteMembersChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupMemberChanged:
		s := proto.Size(x.UpdateGroupMemberChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupMembersBecameAsync:
		s := proto.Size(x.UpdateGroupMembersBecameAsync)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupMembersUpdated:
		s := proto.Size(x.UpdateGroupMembersUpdated)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupMemberDiff:
		s := proto.Size(x.UpdateGroupMemberDiff)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupMembersCountChanged:
		s := proto.Size(x.UpdateGroupMembersCountChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupMemberAdminChanged:
		s := proto.Size(x.UpdateGroupMemberAdminChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged:
		s := proto.Size(x.UpdateGroupMemberPermissionsChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupInviteObsolete:
		s := proto.Size(x.UpdateGroupInviteObsolete)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupUserInvitedObsolete:
		s := proto.Size(x.UpdateGroupUserInvitedObsolete)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupUserLeaveObsolete:
		s := proto.Size(x.UpdateGroupUserLeaveObsolete)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupUserKickObsolete:
		s := proto.Size(x.UpdateGroupUserKickObsolete)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete:
		s := proto.Size(x.UpdateGroupMembersUpdateObsolete)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupTitleChangedObsolete:
		s := proto.Size(x.UpdateGroupTitleChangedObsolete)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupTopicChangedObsolete:
		s := proto.Size(x.UpdateGroupTopicChangedObsolete)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupAboutChangedObsolete:
		s := proto.Size(x.UpdateGroupAboutChangedObsolete)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete:
		s := proto.Size(x.UpdateGroupAvatarChangedObsolete)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupShortnameChanged:
		s := proto.Size(x.UpdateGroupShortnameChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateStickerCollectionsChanged:
		s := proto.Size(x.UpdateStickerCollectionsChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateStickerPackRemoved:
		s := proto.Size(x.UpdateStickerPackRemoved)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateStickerPackAdded:
		s := proto.Size(x.UpdateStickerPackAdded)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdatePauseNotifications:
		s := proto.Size(x.UpdatePauseNotifications)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateRestoreNotifications:
		s := proto.Size(x.UpdateRestoreNotifications)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateTyping:
		s := proto.Size(x.UpdateTyping)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateTypingStop:
		s := proto.Size(x.UpdateTypingStop)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserOnline:
		s := proto.Size(x.UpdateUserOnline)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserOffline:
		s := proto.Size(x.UpdateUserOffline)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUserLastSeen:
		s := proto.Size(x.UpdateUserLastSeen)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateGroupOnline:
		s := proto.Size(x.UpdateGroupOnline)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateEventBusDeviceConnected:
		s := proto.Size(x.UpdateEventBusDeviceConnected)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateEventBusDeviceDisconnected:
		s := proto.Size(x.UpdateEventBusDeviceDisconnected)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateEventBusMessage:
		s := proto.Size(x.UpdateEventBusMessage)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateEventBusDisposed:
		s := proto.Size(x.UpdateEventBusDisposed)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateIncomingCallDeprecated:
		s := proto.Size(x.UpdateIncomingCallDeprecated)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateIncomingCall:
		s := proto.Size(x.UpdateIncomingCall)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateCallHandled:
		s := proto.Size(x.UpdateCallHandled)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateCallDisposed:
		s := proto.Size(x.UpdateCallDisposed)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateParameterChanged:
		s := proto.Size(x.UpdateParameterChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateRawUpdate:
		s := proto.Size(x.UpdateRawUpdate)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateEmptyUpdate:
		s := proto.Size(x.UpdateEmptyUpdate)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateCountersChanged:
		s := proto.Size(x.UpdateCountersChanged)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateConfig:
		s := proto.Size(x.UpdateConfig)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateSpaceModified:
		s := proto.Size(x.UpdateSpaceModified)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateSpaceMemberModified:
		s := proto.Size(x.UpdateSpaceMemberModified)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateMessageRejectedByHook:
		s := proto.Size(x.UpdateMessageRejectedByHook)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateMessageEditRejectedByHook:
		s := proto.Size(x.UpdateMessageEditRejectedByHook)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateSeqUpdate_UpdateUser:
		s := proto.Size(x.UpdateUser)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Fat sequence update with additional data
type UpdateFatSeqUpdate struct {
	Seq          int32  `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State        []byte `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	UpdateHeader int32  `protobuf:"varint,3,opt,name=update_header,json=updateHeader,proto3" json:"update_header,omitempty"`
	Update       []byte `protobuf:"bytes,4,opt,name=update,proto3" json:"update,omitempty"`
	/// related users
	Users []*User `protobuf:"bytes,5,rep,name=users,proto3" json:"users,omitempty"`
	/// related groups
	Groups               []*Group `protobuf:"bytes,6,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateFatSeqUpdate) Reset()         { *m = UpdateFatSeqUpdate{} }
func (m *UpdateFatSeqUpdate) String() string { return proto.CompactTextString(m) }
func (*UpdateFatSeqUpdate) ProtoMessage()    {}
func (*UpdateFatSeqUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{1}
}

func (m *UpdateFatSeqUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateFatSeqUpdate.Unmarshal(m, b)
}
func (m *UpdateFatSeqUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateFatSeqUpdate.Marshal(b, m, deterministic)
}
func (m *UpdateFatSeqUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFatSeqUpdate.Merge(m, src)
}
func (m *UpdateFatSeqUpdate) XXX_Size() int {
	return xxx_messageInfo_UpdateFatSeqUpdate.Size(m)
}
func (m *UpdateFatSeqUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFatSeqUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFatSeqUpdate proto.InternalMessageInfo

func (m *UpdateFatSeqUpdate) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateFatSeqUpdate) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *UpdateFatSeqUpdate) GetUpdateHeader() int32 {
	if m != nil {
		return m.UpdateHeader
	}
	return 0
}

func (m *UpdateFatSeqUpdate) GetUpdate() []byte {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateFatSeqUpdate) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UpdateFatSeqUpdate) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Out of sequence update (for typing and online statuses)
type UpdateWeakUpdate struct {
	Date                 int64    `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	UpdateHeader         int32    `protobuf:"varint,2,opt,name=update_header,json=updateHeader,proto3" json:"update_header,omitempty"`
	Update               []byte   `protobuf:"bytes,3,opt,name=update,proto3" json:"update,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateWeakUpdate) Reset()         { *m = UpdateWeakUpdate{} }
func (m *UpdateWeakUpdate) String() string { return proto.CompactTextString(m) }
func (*UpdateWeakUpdate) ProtoMessage()    {}
func (*UpdateWeakUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{2}
}

func (m *UpdateWeakUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateWeakUpdate.Unmarshal(m, b)
}
func (m *UpdateWeakUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateWeakUpdate.Marshal(b, m, deterministic)
}
func (m *UpdateWeakUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWeakUpdate.Merge(m, src)
}
func (m *UpdateWeakUpdate) XXX_Size() int {
	return xxx_messageInfo_UpdateWeakUpdate.Size(m)
}
func (m *UpdateWeakUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWeakUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWeakUpdate proto.InternalMessageInfo

func (m *UpdateWeakUpdate) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateWeakUpdate) GetUpdateHeader() int32 {
	if m != nil {
		return m.UpdateHeader
	}
	return 0
}

func (m *UpdateWeakUpdate) GetUpdate() []byte {
	if m != nil {
		return m.Update
	}
	return nil
}

// Fat Weak Update
type UpdateWeakFatUpdate struct {
	Date                 int64    `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	UpdateHeader         int32    `protobuf:"varint,2,opt,name=update_header,json=updateHeader,proto3" json:"update_header,omitempty"`
	Update               []byte   `protobuf:"bytes,3,opt,name=update,proto3" json:"update,omitempty"`
	Users                []*User  `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
	Groups               []*Group `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateWeakFatUpdate) Reset()         { *m = UpdateWeakFatUpdate{} }
func (m *UpdateWeakFatUpdate) String() string { return proto.CompactTextString(m) }
func (*UpdateWeakFatUpdate) ProtoMessage()    {}
func (*UpdateWeakFatUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{3}
}

func (m *UpdateWeakFatUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateWeakFatUpdate.Unmarshal(m, b)
}
func (m *UpdateWeakFatUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateWeakFatUpdate.Marshal(b, m, deterministic)
}
func (m *UpdateWeakFatUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWeakFatUpdate.Merge(m, src)
}
func (m *UpdateWeakFatUpdate) XXX_Size() int {
	return xxx_messageInfo_UpdateWeakFatUpdate.Size(m)
}
func (m *UpdateWeakFatUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWeakFatUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWeakFatUpdate proto.InternalMessageInfo

func (m *UpdateWeakFatUpdate) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateWeakFatUpdate) GetUpdateHeader() int32 {
	if m != nil {
		return m.UpdateHeader
	}
	return 0
}

func (m *UpdateWeakFatUpdate) GetUpdate() []byte {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateWeakFatUpdate) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UpdateWeakFatUpdate) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Notification about requiring performing manual GetDifference
type UpdateSeqUpdateTooLong struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSeqUpdateTooLong) Reset()         { *m = UpdateSeqUpdateTooLong{} }
func (m *UpdateSeqUpdateTooLong) String() string { return proto.CompactTextString(m) }
func (*UpdateSeqUpdateTooLong) ProtoMessage()    {}
func (*UpdateSeqUpdateTooLong) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{4}
}

func (m *UpdateSeqUpdateTooLong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSeqUpdateTooLong.Unmarshal(m, b)
}
func (m *UpdateSeqUpdateTooLong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSeqUpdateTooLong.Marshal(b, m, deterministic)
}
func (m *UpdateSeqUpdateTooLong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSeqUpdateTooLong.Merge(m, src)
}
func (m *UpdateSeqUpdateTooLong) XXX_Size() int {
	return xxx_messageInfo_UpdateSeqUpdateTooLong.Size(m)
}
func (m *UpdateSeqUpdateTooLong) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSeqUpdateTooLong.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSeqUpdateTooLong proto.InternalMessageInfo

// Update container
type UpdateContainer struct {
	UpdateHeader         int32    `protobuf:"varint,1,opt,name=update_header,json=updateHeader,proto3" json:"update_header,omitempty"`
	Update               []byte   `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateContainer) Reset()         { *m = UpdateContainer{} }
func (m *UpdateContainer) String() string { return proto.CompactTextString(m) }
func (*UpdateContainer) ProtoMessage()    {}
func (*UpdateContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{5}
}

func (m *UpdateContainer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateContainer.Unmarshal(m, b)
}
func (m *UpdateContainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateContainer.Marshal(b, m, deterministic)
}
func (m *UpdateContainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateContainer.Merge(m, src)
}
func (m *UpdateContainer) XXX_Size() int {
	return xxx_messageInfo_UpdateContainer.Size(m)
}
func (m *UpdateContainer) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateContainer.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateContainer proto.InternalMessageInfo

func (m *UpdateContainer) GetUpdateHeader() int32 {
	if m != nil {
		return m.UpdateHeader
	}
	return 0
}

func (m *UpdateContainer) GetUpdate() []byte {
	if m != nil {
		return m.Update
	}
	return nil
}

// Combined update
type UpdateCombinedUpdate struct {
	/// start of related sequence intervals
	SeqStart int32 `protobuf:"varint,1,opt,name=seq_start,json=seqStart,proto3" json:"seq_start,omitempty"`
	/// end of related sequence intervals
	SeqEnd int32  `protobuf:"varint,2,opt,name=seq_end,json=seqEnd,proto3" json:"seq_end,omitempty"`
	State  []byte `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	/// related users
	Users []*User `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
	/// related groups
	Groups  []*Group           `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`
	Updates []*UpdateContainer `protobuf:"bytes,6,rep,name=updates,proto3" json:"updates,omitempty"`
	/// related messages
	Messages             []*HistoryMessage `protobuf:"bytes,7,rep,name=messages,proto3" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateCombinedUpdate) Reset()         { *m = UpdateCombinedUpdate{} }
func (m *UpdateCombinedUpdate) String() string { return proto.CompactTextString(m) }
func (*UpdateCombinedUpdate) ProtoMessage()    {}
func (*UpdateCombinedUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{6}
}

func (m *UpdateCombinedUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCombinedUpdate.Unmarshal(m, b)
}
func (m *UpdateCombinedUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCombinedUpdate.Marshal(b, m, deterministic)
}
func (m *UpdateCombinedUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCombinedUpdate.Merge(m, src)
}
func (m *UpdateCombinedUpdate) XXX_Size() int {
	return xxx_messageInfo_UpdateCombinedUpdate.Size(m)
}
func (m *UpdateCombinedUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCombinedUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCombinedUpdate proto.InternalMessageInfo

func (m *UpdateCombinedUpdate) GetSeqStart() int32 {
	if m != nil {
		return m.SeqStart
	}
	return 0
}

func (m *UpdateCombinedUpdate) GetSeqEnd() int32 {
	if m != nil {
		return m.SeqEnd
	}
	return 0
}

func (m *UpdateCombinedUpdate) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *UpdateCombinedUpdate) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UpdateCombinedUpdate) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *UpdateCombinedUpdate) GetUpdates() []*UpdateContainer {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *UpdateCombinedUpdate) GetMessages() []*HistoryMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Get main sequence state
type RequestGetState struct {
	Optimizations        []UpdateOptimization `protobuf:"varint,1,rep,packed,name=optimizations,proto3,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RequestGetState) Reset()         { *m = RequestGetState{} }
func (m *RequestGetState) String() string { return proto.CompactTextString(m) }
func (*RequestGetState) ProtoMessage()    {}
func (*RequestGetState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{7}
}

func (m *RequestGetState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestGetState.Unmarshal(m, b)
}
func (m *RequestGetState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestGetState.Marshal(b, m, deterministic)
}
func (m *RequestGetState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetState.Merge(m, src)
}
func (m *RequestGetState) XXX_Size() int {
	return xxx_messageInfo_RequestGetState.Size(m)
}
func (m *RequestGetState) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetState.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetState proto.InternalMessageInfo

func (m *RequestGetState) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Getting difference of sequence
type RequestGetDifference struct {
	Seq                  int32                `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State                []byte               `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Optimizations        []UpdateOptimization `protobuf:"varint,3,rep,packed,name=optimizations,proto3,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
	ConfigHash           *wrappers.Int64Value `protobuf:"bytes,4,opt,name=config_hash,json=configHash,proto3" json:"config_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RequestGetDifference) Reset()         { *m = RequestGetDifference{} }
func (m *RequestGetDifference) String() string { return proto.CompactTextString(m) }
func (*RequestGetDifference) ProtoMessage()    {}
func (*RequestGetDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{8}
}

func (m *RequestGetDifference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestGetDifference.Unmarshal(m, b)
}
func (m *RequestGetDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestGetDifference.Marshal(b, m, deterministic)
}
func (m *RequestGetDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetDifference.Merge(m, src)
}
func (m *RequestGetDifference) XXX_Size() int {
	return xxx_messageInfo_RequestGetDifference.Size(m)
}
func (m *RequestGetDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetDifference.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetDifference proto.InternalMessageInfo

func (m *RequestGetDifference) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *RequestGetDifference) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *RequestGetDifference) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

func (m *RequestGetDifference) GetConfigHash() *wrappers.Int64Value {
	if m != nil {
		return m.ConfigHash
	}
	return nil
}

/// Updates happens after requested seq number + related peers and entities
type ResponseGetDifference struct {
	Seq                  int32                `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State                []byte               `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Users                []*User              `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
	Groups               []*Group             `protobuf:"bytes,6,rep,name=groups,proto3" json:"groups,omitempty"`
	Updates              []*UpdateSeqUpdate   `protobuf:"bytes,4,rep,name=updates,proto3" json:"updates,omitempty"`
	Messages             []*HistoryMessage    `protobuf:"bytes,7,rep,name=messages,proto3" json:"messages,omitempty"`
	NeedMore             bool                 `protobuf:"varint,5,opt,name=need_more,json=needMore,proto3" json:"need_more,omitempty"`
	UsersRefs            []*UserOutPeer       `protobuf:"bytes,8,rep,name=users_refs,json=usersRefs,proto3" json:"users_refs,omitempty"`
	GroupsRefs           []*GroupOutPeer      `protobuf:"bytes,9,rep,name=groups_refs,json=groupsRefs,proto3" json:"groups_refs,omitempty"`
	Config               *Config              `protobuf:"bytes,10,opt,name=config,proto3" json:"config,omitempty"`
	ConfigHash           *wrappers.Int64Value `protobuf:"bytes,11,opt,name=config_hash,json=configHash,proto3" json:"config_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ResponseGetDifference) Reset()         { *m = ResponseGetDifference{} }
func (m *ResponseGetDifference) String() string { return proto.CompactTextString(m) }
func (*ResponseGetDifference) ProtoMessage()    {}
func (*ResponseGetDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{9}
}

func (m *ResponseGetDifference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseGetDifference.Unmarshal(m, b)
}
func (m *ResponseGetDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseGetDifference.Marshal(b, m, deterministic)
}
func (m *ResponseGetDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetDifference.Merge(m, src)
}
func (m *ResponseGetDifference) XXX_Size() int {
	return xxx_messageInfo_ResponseGetDifference.Size(m)
}
func (m *ResponseGetDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetDifference.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetDifference proto.InternalMessageInfo

func (m *ResponseGetDifference) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseGetDifference) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseGetDifference) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseGetDifference) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ResponseGetDifference) GetUpdates() []*UpdateSeqUpdate {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *ResponseGetDifference) GetMessages() []*HistoryMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ResponseGetDifference) GetNeedMore() bool {
	if m != nil {
		return m.NeedMore
	}
	return false
}

func (m *ResponseGetDifference) GetUsersRefs() []*UserOutPeer {
	if m != nil {
		return m.UsersRefs
	}
	return nil
}

func (m *ResponseGetDifference) GetGroupsRefs() []*GroupOutPeer {
	if m != nil {
		return m.GroupsRefs
	}
	return nil
}

func (m *ResponseGetDifference) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ResponseGetDifference) GetConfigHash() *wrappers.Int64Value {
	if m != nil {
		return m.ConfigHash
	}
	return nil
}

// Getting difference of dialogs
type RequestGetDialogsDifference struct {
	/// max of the last action dates among all user's dialogs
	Clock                int64    `protobuf:"varint,1,opt,name=clock,proto3" json:"clock,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestGetDialogsDifference) Reset()         { *m = RequestGetDialogsDifference{} }
func (m *RequestGetDialogsDifference) String() string { return proto.CompactTextString(m) }
func (*RequestGetDialogsDifference) ProtoMessage()    {}
func (*RequestGetDialogsDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{10}
}

func (m *RequestGetDialogsDifference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestGetDialogsDifference.Unmarshal(m, b)
}
func (m *RequestGetDialogsDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestGetDialogsDifference.Marshal(b, m, deterministic)
}
func (m *RequestGetDialogsDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetDialogsDifference.Merge(m, src)
}
func (m *RequestGetDialogsDifference) XXX_Size() int {
	return xxx_messageInfo_RequestGetDialogsDifference.Size(m)
}
func (m *RequestGetDialogsDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetDialogsDifference.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetDialogsDifference proto.InternalMessageInfo

func (m *RequestGetDialogsDifference) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

/// Dialogs + peers and entities
type ResponseGetDialogsDifference struct {
	Dialogs              []*Dialog       `protobuf:"bytes,1,rep,name=dialogs,proto3" json:"dialogs,omitempty"`
	GroupPeers           []*GroupOutPeer `protobuf:"bytes,2,rep,name=group_peers,json=groupPeers,proto3" json:"group_peers,omitempty"`
	UserPeers            []*UserOutPeer  `protobuf:"bytes,3,rep,name=user_peers,json=userPeers,proto3" json:"user_peers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResponseGetDialogsDifference) Reset()         { *m = ResponseGetDialogsDifference{} }
func (m *ResponseGetDialogsDifference) String() string { return proto.CompactTextString(m) }
func (*ResponseGetDialogsDifference) ProtoMessage()    {}
func (*ResponseGetDialogsDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{11}
}

func (m *ResponseGetDialogsDifference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseGetDialogsDifference.Unmarshal(m, b)
}
func (m *ResponseGetDialogsDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseGetDialogsDifference.Marshal(b, m, deterministic)
}
func (m *ResponseGetDialogsDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetDialogsDifference.Merge(m, src)
}
func (m *ResponseGetDialogsDifference) XXX_Size() int {
	return xxx_messageInfo_ResponseGetDialogsDifference.Size(m)
}
func (m *ResponseGetDialogsDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetDialogsDifference.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetDialogsDifference proto.InternalMessageInfo

func (m *ResponseGetDialogsDifference) GetDialogs() []*Dialog {
	if m != nil {
		return m.Dialogs
	}
	return nil
}

func (m *ResponseGetDialogsDifference) GetGroupPeers() []*GroupOutPeer {
	if m != nil {
		return m.GroupPeers
	}
	return nil
}

func (m *ResponseGetDialogsDifference) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

// Represents subset of group members
type GroupMembersSubset struct {
	GroupPeer            *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer,proto3" json:"group_peer,omitempty"`
	MemberIds            []int32       `protobuf:"varint,2,rep,packed,name=member_ids,json=memberIds,proto3" json:"member_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GroupMembersSubset) Reset()         { *m = GroupMembersSubset{} }
func (m *GroupMembersSubset) String() string { return proto.CompactTextString(m) }
func (*GroupMembersSubset) ProtoMessage()    {}
func (*GroupMembersSubset) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{12}
}

func (m *GroupMembersSubset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupMembersSubset.Unmarshal(m, b)
}
func (m *GroupMembersSubset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupMembersSubset.Marshal(b, m, deterministic)
}
func (m *GroupMembersSubset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMembersSubset.Merge(m, src)
}
func (m *GroupMembersSubset) XXX_Size() int {
	return xxx_messageInfo_GroupMembersSubset.Size(m)
}
func (m *GroupMembersSubset) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMembersSubset.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMembersSubset proto.InternalMessageInfo

func (m *GroupMembersSubset) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *GroupMembersSubset) GetMemberIds() []int32 {
	if m != nil {
		return m.MemberIds
	}
	return nil
}

// Loading referenced entities
type RequestGetReferencedEntitites struct {
	/// users needed
	Users []*UserOutPeer `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	/// messages needed
	Mids []*UUIDValue `protobuf:"bytes,3,rep,name=mids,proto3" json:"mids,omitempty"`
	//*
	// Group + subset of members to return.
	// For loading members of big groups by chunks.
	GroupMembers []*GroupMembersSubset `protobuf:"bytes,4,rep,name=group_members,json=groupMembers,proto3" json:"group_members,omitempty"`
	/// groups needed
	Groups               []*GroupOutPeer `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RequestGetReferencedEntitites) Reset()         { *m = RequestGetReferencedEntitites{} }
func (m *RequestGetReferencedEntitites) String() string { return proto.CompactTextString(m) }
func (*RequestGetReferencedEntitites) ProtoMessage()    {}
func (*RequestGetReferencedEntitites) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{13}
}

func (m *RequestGetReferencedEntitites) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestGetReferencedEntitites.Unmarshal(m, b)
}
func (m *RequestGetReferencedEntitites) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestGetReferencedEntitites.Marshal(b, m, deterministic)
}
func (m *RequestGetReferencedEntitites) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetReferencedEntitites.Merge(m, src)
}
func (m *RequestGetReferencedEntitites) XXX_Size() int {
	return xxx_messageInfo_RequestGetReferencedEntitites.Size(m)
}
func (m *RequestGetReferencedEntitites) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetReferencedEntitites.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetReferencedEntitites proto.InternalMessageInfo

func (m *RequestGetReferencedEntitites) GetUsers() []*UserOutPeer {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *RequestGetReferencedEntitites) GetMids() []*UUIDValue {
	if m != nil {
		return m.Mids
	}
	return nil
}

func (m *RequestGetReferencedEntitites) GetGroupMembers() []*GroupMembersSubset {
	if m != nil {
		return m.GroupMembers
	}
	return nil
}

func (m *RequestGetReferencedEntitites) GetGroups() []*GroupOutPeer {
	if m != nil {
		return m.Groups
	}
	return nil
}

type ResponseGetReferencedEntitites struct {
	Users                []*User           `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Groups               []*Group          `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
	Messages             []*HistoryMessage `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ResponseGetReferencedEntitites) Reset()         { *m = ResponseGetReferencedEntitites{} }
func (m *ResponseGetReferencedEntitites) String() string { return proto.CompactTextString(m) }
func (*ResponseGetReferencedEntitites) ProtoMessage()    {}
func (*ResponseGetReferencedEntitites) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{14}
}

func (m *ResponseGetReferencedEntitites) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseGetReferencedEntitites.Unmarshal(m, b)
}
func (m *ResponseGetReferencedEntitites) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseGetReferencedEntitites.Marshal(b, m, deterministic)
}
func (m *ResponseGetReferencedEntitites) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetReferencedEntitites.Merge(m, src)
}
func (m *ResponseGetReferencedEntitites) XXX_Size() int {
	return xxx_messageInfo_ResponseGetReferencedEntitites.Size(m)
}
func (m *ResponseGetReferencedEntitites) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetReferencedEntitites.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetReferencedEntitites proto.InternalMessageInfo

func (m *ResponseGetReferencedEntitites) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseGetReferencedEntitites) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ResponseGetReferencedEntitites) GetMessages() []*HistoryMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Custom Raw Update
type UpdateRawUpdate struct {
	Type                 *wrappers.StringValue `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Bytes                []byte                `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateRawUpdate) Reset()         { *m = UpdateRawUpdate{} }
func (m *UpdateRawUpdate) String() string { return proto.CompactTextString(m) }
func (*UpdateRawUpdate) ProtoMessage()    {}
func (*UpdateRawUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{15}
}

func (m *UpdateRawUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRawUpdate.Unmarshal(m, b)
}
func (m *UpdateRawUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRawUpdate.Marshal(b, m, deterministic)
}
func (m *UpdateRawUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRawUpdate.Merge(m, src)
}
func (m *UpdateRawUpdate) XXX_Size() int {
	return xxx_messageInfo_UpdateRawUpdate.Size(m)
}
func (m *UpdateRawUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRawUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRawUpdate proto.InternalMessageInfo

func (m *UpdateRawUpdate) GetType() *wrappers.StringValue {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *UpdateRawUpdate) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

// Empty update
type UpdateEmptyUpdate struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateEmptyUpdate) Reset()         { *m = UpdateEmptyUpdate{} }
func (m *UpdateEmptyUpdate) String() string { return proto.CompactTextString(m) }
func (*UpdateEmptyUpdate) ProtoMessage()    {}
func (*UpdateEmptyUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{16}
}

func (m *UpdateEmptyUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateEmptyUpdate.Unmarshal(m, b)
}
func (m *UpdateEmptyUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateEmptyUpdate.Marshal(b, m, deterministic)
}
func (m *UpdateEmptyUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEmptyUpdate.Merge(m, src)
}
func (m *UpdateEmptyUpdate) XXX_Size() int {
	return xxx_messageInfo_UpdateEmptyUpdate.Size(m)
}
func (m *UpdateEmptyUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEmptyUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEmptyUpdate proto.InternalMessageInfo

// Subscribing for users online
type RequestSubscribeToOnline struct {
	Users                []*UserOutPeer `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RequestSubscribeToOnline) Reset()         { *m = RequestSubscribeToOnline{} }
func (m *RequestSubscribeToOnline) String() string { return proto.CompactTextString(m) }
func (*RequestSubscribeToOnline) ProtoMessage()    {}
func (*RequestSubscribeToOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{17}
}

func (m *RequestSubscribeToOnline) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestSubscribeToOnline.Unmarshal(m, b)
}
func (m *RequestSubscribeToOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestSubscribeToOnline.Marshal(b, m, deterministic)
}
func (m *RequestSubscribeToOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSubscribeToOnline.Merge(m, src)
}
func (m *RequestSubscribeToOnline) XXX_Size() int {
	return xxx_messageInfo_RequestSubscribeToOnline.Size(m)
}
func (m *RequestSubscribeToOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSubscribeToOnline.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSubscribeToOnline proto.InternalMessageInfo

func (m *RequestSubscribeToOnline) GetUsers() []*UserOutPeer {
	if m != nil {
		return m.Users
	}
	return nil
}

// Removing subscription for users online
type RequestSubscribeFromOnline struct {
	Users                []*UserOutPeer `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RequestSubscribeFromOnline) Reset()         { *m = RequestSubscribeFromOnline{} }
func (m *RequestSubscribeFromOnline) String() string { return proto.CompactTextString(m) }
func (*RequestSubscribeFromOnline) ProtoMessage()    {}
func (*RequestSubscribeFromOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{18}
}

func (m *RequestSubscribeFromOnline) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestSubscribeFromOnline.Unmarshal(m, b)
}
func (m *RequestSubscribeFromOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestSubscribeFromOnline.Marshal(b, m, deterministic)
}
func (m *RequestSubscribeFromOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSubscribeFromOnline.Merge(m, src)
}
func (m *RequestSubscribeFromOnline) XXX_Size() int {
	return xxx_messageInfo_RequestSubscribeFromOnline.Size(m)
}
func (m *RequestSubscribeFromOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSubscribeFromOnline.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSubscribeFromOnline proto.InternalMessageInfo

func (m *RequestSubscribeFromOnline) GetUsers() []*UserOutPeer {
	if m != nil {
		return m.Users
	}
	return nil
}

// Subscribing for groups online
type RequestSubscribeToGroupOnline struct {
	Groups               []*GroupOutPeer `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RequestSubscribeToGroupOnline) Reset()         { *m = RequestSubscribeToGroupOnline{} }
func (m *RequestSubscribeToGroupOnline) String() string { return proto.CompactTextString(m) }
func (*RequestSubscribeToGroupOnline) ProtoMessage()    {}
func (*RequestSubscribeToGroupOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{19}
}

func (m *RequestSubscribeToGroupOnline) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestSubscribeToGroupOnline.Unmarshal(m, b)
}
func (m *RequestSubscribeToGroupOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestSubscribeToGroupOnline.Marshal(b, m, deterministic)
}
func (m *RequestSubscribeToGroupOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSubscribeToGroupOnline.Merge(m, src)
}
func (m *RequestSubscribeToGroupOnline) XXX_Size() int {
	return xxx_messageInfo_RequestSubscribeToGroupOnline.Size(m)
}
func (m *RequestSubscribeToGroupOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSubscribeToGroupOnline.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSubscribeToGroupOnline proto.InternalMessageInfo

func (m *RequestSubscribeToGroupOnline) GetGroups() []*GroupOutPeer {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Removing subscription for groups online
type RequestSubscribeFromGroupOnline struct {
	Groups               []*GroupOutPeer `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RequestSubscribeFromGroupOnline) Reset()         { *m = RequestSubscribeFromGroupOnline{} }
func (m *RequestSubscribeFromGroupOnline) String() string { return proto.CompactTextString(m) }
func (*RequestSubscribeFromGroupOnline) ProtoMessage()    {}
func (*RequestSubscribeFromGroupOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{20}
}

func (m *RequestSubscribeFromGroupOnline) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestSubscribeFromGroupOnline.Unmarshal(m, b)
}
func (m *RequestSubscribeFromGroupOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestSubscribeFromGroupOnline.Marshal(b, m, deterministic)
}
func (m *RequestSubscribeFromGroupOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSubscribeFromGroupOnline.Merge(m, src)
}
func (m *RequestSubscribeFromGroupOnline) XXX_Size() int {
	return xxx_messageInfo_RequestSubscribeFromGroupOnline.Size(m)
}
func (m *RequestSubscribeFromGroupOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSubscribeFromGroupOnline.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSubscribeFromGroupOnline proto.InternalMessageInfo

func (m *RequestSubscribeFromGroupOnline) GetGroups() []*GroupOutPeer {
	if m != nil {
		return m.Groups
	}
	return nil
}

/// Container which contains UpdateSeqUpdate
type SeqUpdateBox struct {
	Seq                  int32                `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State                []byte               `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Update               *wrappers.BytesValue `protobuf:"bytes,3,opt,name=update,proto3" json:"update,omitempty"`
	UnboxedUpdate        *UpdateSeqUpdate     `protobuf:"bytes,4,opt,name=unboxed_update,json=unboxedUpdate,proto3" json:"unboxed_update,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SeqUpdateBox) Reset()         { *m = SeqUpdateBox{} }
func (m *SeqUpdateBox) String() string { return proto.CompactTextString(m) }
func (*SeqUpdateBox) ProtoMessage()    {}
func (*SeqUpdateBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{21}
}

func (m *SeqUpdateBox) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeqUpdateBox.Unmarshal(m, b)
}
func (m *SeqUpdateBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeqUpdateBox.Marshal(b, m, deterministic)
}
func (m *SeqUpdateBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeqUpdateBox.Merge(m, src)
}
func (m *SeqUpdateBox) XXX_Size() int {
	return xxx_messageInfo_SeqUpdateBox.Size(m)
}
func (m *SeqUpdateBox) XXX_DiscardUnknown() {
	xxx_messageInfo_SeqUpdateBox.DiscardUnknown(m)
}

var xxx_messageInfo_SeqUpdateBox proto.InternalMessageInfo

func (m *SeqUpdateBox) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *SeqUpdateBox) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *SeqUpdateBox) GetUpdate() *wrappers.BytesValue {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *SeqUpdateBox) GetUnboxedUpdate() *UpdateSeqUpdate {
	if m != nil {
		return m.UnboxedUpdate
	}
	return nil
}

func init() {
	proto.RegisterType((*UpdateSeqUpdate)(nil), "dialog.UpdateSeqUpdate")
	proto.RegisterType((*UpdateFatSeqUpdate)(nil), "dialog.UpdateFatSeqUpdate")
	proto.RegisterType((*UpdateWeakUpdate)(nil), "dialog.UpdateWeakUpdate")
	proto.RegisterType((*UpdateWeakFatUpdate)(nil), "dialog.UpdateWeakFatUpdate")
	proto.RegisterType((*UpdateSeqUpdateTooLong)(nil), "dialog.UpdateSeqUpdateTooLong")
	proto.RegisterType((*UpdateContainer)(nil), "dialog.UpdateContainer")
	proto.RegisterType((*UpdateCombinedUpdate)(nil), "dialog.UpdateCombinedUpdate")
	proto.RegisterType((*RequestGetState)(nil), "dialog.RequestGetState")
	proto.RegisterType((*RequestGetDifference)(nil), "dialog.RequestGetDifference")
	proto.RegisterType((*ResponseGetDifference)(nil), "dialog.ResponseGetDifference")
	proto.RegisterType((*RequestGetDialogsDifference)(nil), "dialog.RequestGetDialogsDifference")
	proto.RegisterType((*ResponseGetDialogsDifference)(nil), "dialog.ResponseGetDialogsDifference")
	proto.RegisterType((*GroupMembersSubset)(nil), "dialog.GroupMembersSubset")
	proto.RegisterType((*RequestGetReferencedEntitites)(nil), "dialog.RequestGetReferencedEntitites")
	proto.RegisterType((*ResponseGetReferencedEntitites)(nil), "dialog.ResponseGetReferencedEntitites")
	proto.RegisterType((*UpdateRawUpdate)(nil), "dialog.UpdateRawUpdate")
	proto.RegisterType((*UpdateEmptyUpdate)(nil), "dialog.UpdateEmptyUpdate")
	proto.RegisterType((*RequestSubscribeToOnline)(nil), "dialog.RequestSubscribeToOnline")
	proto.RegisterType((*RequestSubscribeFromOnline)(nil), "dialog.RequestSubscribeFromOnline")
	proto.RegisterType((*RequestSubscribeToGroupOnline)(nil), "dialog.RequestSubscribeToGroupOnline")
	proto.RegisterType((*RequestSubscribeFromGroupOnline)(nil), "dialog.RequestSubscribeFromGroupOnline")
	proto.RegisterType((*SeqUpdateBox)(nil), "dialog.SeqUpdateBox")
}

func init() { proto.RegisterFile("sequence_and_updates.proto", fileDescriptor_0cf1109f6bcc730b) }

var fileDescriptor_0cf1109f6bcc730b = []byte{
	// 3449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5b, 0xdb, 0x72, 0xdc, 0xc6,
	0xd1, 0xde, 0x25, 0x45, 0x8a, 0x1c, 0x89, 0x3a, 0x80, 0x14, 0x05, 0xad, 0x28, 0x89, 0x82, 0x0e,
	0xa6, 0x64, 0x9b, 0x94, 0x68, 0xf9, 0x24, 0x1f, 0x64, 0x1e, 0xb5, 0xfc, 0x2d, 0x8a, 0xfc, 0xb1,
	0xa4, 0xec, 0xdf, 0xfe, 0x63, 0x66, 0x16, 0x98, 0x5d, 0x8e, 0xb9, 0x0b, 0x2c, 0x01, 0xec, 0x4a,
	0x74, 0xb9, 0x2a, 0x29, 0x57, 0x25, 0x55, 0x49, 0x6e, 0x52, 0x95, 0x5c, 0xa4, 0x72, 0xe1, 0xbb,
	0xe4, 0x26, 0x6f, 0x90, 0x8b, 0x3c, 0x44, 0xf2, 0x06, 0xae, 0x5c, 0xe5, 0x19, 0x92, 0x54, 0x0a,
	0x83, 0x43, 0x0f, 0x06, 0x8d, 0x5d, 0x3a, 0xe7, 0x2b, 0x69, 0xe7, 0xfb, 0xa6, 0xbb, 0xa7, 0xbb,
	0xa7, 0xa7, 0x31, 0x00, 0x49, 0xc5, 0x67, 0x87, 0x5d, 0xe6, 0x58, 0x6c, 0x8f, 0x3a, 0xf6, 0x5e,
	0xb7, 0x63, 0xd3, 0x80, 0xf9, 0xf3, 0x1d, 0xcf, 0x0d, 0x5c, 0x6d, 0xd4, 0xe6, 0xb4, 0xe5, 0x36,
	0x2b, 0x57, 0x9b, 0xae, 0xdb, 0x6c, 0xb1, 0x05, 0x31, 0x5a, 0xef, 0x36, 0x16, 0x9e, 0x7b, 0xb4,
	0xd3, 0x61, 0x5e, 0xcc, 0xab, 0x5c, 0x56, 0x71, 0xd6, 0xee, 0x04, 0x47, 0x31, 0x38, 0x13, 0x83,
	0xb4, 0xc3, 0x17, 0xa8, 0xe3, 0xb8, 0x01, 0x0d, 0xb8, 0xeb, 0x24, 0x53, 0xcf, 0xdb, 0xac, 0xc1,
	0x1d, 0x2e, 0x0f, 0x4d, 0xb6, 0xb9, 0x6f, 0xb1, 0x56, 0x8b, 0x3a, 0xcc, 0xed, 0x26, 0x83, 0x53,
	0xb4, 0x1b, 0xec, 0x33, 0x27, 0xe0, 0x96, 0x98, 0x1e, 0x8f, 0x9e, 0x6e, 0x7a, 0x6e, 0xb7, 0x93,
	0x70, 0xce, 0xf8, 0x01, 0xb7, 0x0e, 0xc0, 0xac, 0x8b, 0xc1, 0x51, 0x87, 0x3b, 0x4d, 0xb1, 0x30,
	0xd7, 0x69, 0x71, 0x87, 0xc5, 0xc0, 0x59, 0xd6, 0x63, 0x4e, 0xb0, 0x57, 0x4f, 0xa5, 0x4f, 0x3c,
	0x67, 0xf5, 0x3d, 0x2f, 0xb0, 0x12, 0xa3, 0x2c, 0xd7, 0x69, 0xf0, 0xe6, 0x9e, 0x7f, 0xe4, 0x24,
	0x43, 0x67, 0x2c, 0xb7, 0xeb, 0x04, 0x20, 0xfb, 0x8c, 0xe5, 0x3a, 0x01, 0xb5, 0x82, 0x54, 0x42,
	0xc7, 0xe3, 0x3d, 0x6a, 0x25, 0x8b, 0x3e, 0xd5, 0x61, 0xc0, 0x3d, 0xdb, 0x66, 0xbe, 0x4f, 0x9b,
	0xdc, 0x69, 0x26, 0x68, 0xd7, 0x07, 0xf4, 0xb4, 0xdf, 0xa1, 0x56, 0xe2, 0xf2, 0xca, 0x05, 0xdf,
	0xa2, 0x2d, 0xda, 0xa9, 0x2f, 0xc4, 0xff, 0x46, 0xc3, 0xc6, 0xaf, 0x56, 0xc9, 0xd9, 0x5d, 0x11,
	0x9b, 0x1a, 0x3b, 0x8c, 0xfe, 0xa3, 0x5d, 0x23, 0xc3, 0x3e, 0x3b, 0xd4, 0xcb, 0xb3, 0xe5, 0xb9,
	0x91, 0xe5, 0x89, 0x1f, 0xff, 0xe9, 0xde, 0x38, 0x39, 0xd9, 0xe3, 0x3e, 0xaf, 0xb7, 0x98, 0x19,
	0x22, 0xda, 0x0d, 0x32, 0xe2, 0x07, 0x34, 0x60, 0xfa, 0xd0, 0x6c, 0x79, 0xee, 0x74, 0x42, 0xb1,
	0xdc, 0x76, 0x87, 0x5a, 0x81, 0x19, 0x61, 0xda, 0x22, 0x99, 0x88, 0x82, 0xbe, 0xb7, 0xcf, 0xa8,
	0xcd, 0x3c, 0x7d, 0x18, 0x93, 0x77, 0x3a, 0xe2, 0x54, 0x05, 0x45, 0xfb, 0x98, 0x4c, 0x47, 0xbf,
	0xd7, 0x5d, 0xcf, 0x62, 0x26, 0x6b, 0xb9, 0xd4, 0xae, 0x09, 0x4d, 0x27, 0x66, 0xcb, 0x73, 0xa7,
	0x16, 0xaf, 0xce, 0x47, 0x89, 0x33, 0xbf, 0x8b, 0xb2, 0xaa, 0x25, 0xb3, 0x60, 0xbe, 0xf6, 0x29,
	0xb9, 0x18, 0x21, 0xbb, 0x3e, 0xf3, 0x96, 0x7a, 0x34, 0xa0, 0xde, 0xca, 0x3e, 0x75, 0x9a, 0xcc,
	0xd6, 0x47, 0x84, 0xe8, 0x6b, 0x59, 0xd1, 0x39, 0x5a, 0xb5, 0x64, 0x16, 0x49, 0xd0, 0x76, 0xc9,
	0x05, 0x80, 0x9e, 0xd2, 0x36, 0x4b, 0x44, 0x8f, 0x0a, 0xd1, 0x57, 0xf2, 0xa2, 0x25, 0x52, 0xb5,
	0x64, 0xe2, 0xb3, 0x35, 0x9b, 0x54, 0x00, 0x78, 0xe2, 0x5a, 0xb4, 0x25, 0xcb, 0x3e, 0x29, 0x64,
	0x1b, 0x79, 0xd9, 0x2a, 0xb3, 0x5a, 0x32, 0xfb, 0xc8, 0xd1, 0x28, 0xb9, 0x04, 0xe8, 0x4a, 0x9c,
	0x7c, 0x89, 0x92, 0x31, 0xa1, 0xe4, 0x7a, 0x5e, 0x89, 0x42, 0xac, 0x96, 0xcc, 0x62, 0x29, 0x8a,
	0x7f, 0xb8, 0x75, 0x90, 0x88, 0x1f, 0x2f, 0xf4, 0x0f, 0x90, 0x14, 0xff, 0x00, 0x00, 0xd9, 0x22,
	0x22, 0x52, 0x77, 0xbb, 0x41, 0x22, 0x97, 0x60, 0xd9, 0xa2, 0xb2, 0x20, 0x5b, 0x54, 0x44, 0xfb,
	0x1e, 0xb9, 0x01, 0xc8, 0xb6, 0xc7, 0x1a, 0xcc, 0xf3, 0x98, 0xfd, 0x84, 0x3a, 0xcd, 0x2e, 0x6d,
	0xb2, 0xd4, 0x3b, 0xa7, 0x84, 0x9a, 0x97, 0xf3, 0x6a, 0x0a, 0xa7, 0x54, 0x4b, 0xe6, 0x71, 0x24,
	0x67, 0x83, 0xb2, 0xc3, 0xdb, 0xec, 0x13, 0xd7, 0x49, 0x23, 0x7f, 0xba, 0x28, 0x28, 0x0a, 0x31,
	0x1b, 0x14, 0x05, 0xd4, 0x3e, 0x27, 0x33, 0x00, 0x2e, 0xbb, 0xc1, 0x8a, 0xdb, 0x6e, 0x53, 0xc7,
	0x4e, 0x17, 0x37, 0x21, 0xb4, 0xdc, 0xcc, 0x6b, 0xc9, 0x73, 0xab, 0x25, 0xb3, 0xaf, 0x2c, 0xcd,
	0x24, 0x53, 0x80, 0xaf, 0xbd, 0x48, 0xe3, 0x74, 0x46, 0xe8, 0x98, 0xc9, 0xeb, 0x00, 0x4e, 0xb5,
	0x64, 0xa2, 0x73, 0xb5, 0xcf, 0x88, 0x0e, 0xe3, 0xeb, 0xdd, 0x56, 0x4b, 0x92, 0x7b, 0x56, 0xc8,
	0x9d, 0xcd, 0xcb, 0xcd, 0xf2, 0xaa, 0x25, 0xb3, 0x50, 0x46, 0xd6, 0xe6, 0x1a, 0x7b, 0x91, 0xc8,
	0x3e, 0x57, 0x64, 0x33, 0x70, 0xb2, 0x36, 0xc3, 0xb8, 0xd6, 0x21, 0x57, 0xa5, 0x5d, 0xd2, 0xf5,
	0x03, 0xb7, 0xbd, 0xed, 0xb9, 0x0d, 0xde, 0x4a, 0x63, 0x7b, 0x5e, 0x48, 0xbf, 0x8d, 0x6c, 0x38,
	0x84, 0x5d, 0x2d, 0x99, 0x03, 0xe4, 0x65, 0xeb, 0x5e, 0x58, 0x0a, 0xbb, 0x69, 0x80, 0xb5, 0xa2,
	0xba, 0x97, 0xa1, 0x65, 0xeb, 0x5e, 0x06, 0x02, 0xe1, 0xf1, 0x86, 0x37, 0x59, 0x93, 0xfb, 0x01,
	0xf3, 0x98, 0xad, 0x4f, 0x62, 0xc2, 0x73, 0x34, 0x10, 0x9e, 0x83, 0xb4, 0x2d, 0x32, 0x99, 0x81,
	0xfc, 0x25, 0xdb, 0x66, 0xb6, 0x3e, 0x25, 0x04, 0x5f, 0x46, 0x05, 0x47, 0x94, 0x6a, 0xc9, 0xc4,
	0x66, 0x82, 0xf3, 0xa5, 0xe1, 0x1d, 0xea, 0x1f, 0xd4, 0xba, 0x7e, 0x87, 0x39, 0xa1, 0xec, 0x0b,
	0x98, 0xf3, 0x8b, 0xd8, 0xe0, 0xfc, 0x22, 0x06, 0xd4, 0xbd, 0x84, 0x61, 0xb2, 0xb6, 0xdb, 0x63,
	0xb6, 0x3e, 0x8d, 0xd5, 0x3d, 0x85, 0x04, 0x75, 0x4f, 0x01, 0xb4, 0x0d, 0x72, 0x5e, 0xda, 0x6d,
	0x2d, 0xd7, 0x3a, 0x60, 0xb6, 0x7e, 0x51, 0x88, 0xbc, 0x84, 0x6c, 0xd7, 0x88, 0x50, 0x2d, 0x99,
	0xf9, 0x59, 0xe0, 0xe4, 0x70, 0x70, 0xd7, 0xa9, 0xc7, 0xc2, 0x74, 0xcc, 0xc9, 0x19, 0x0a, 0x38,
	0x39, 0x33, 0xac, 0x35, 0xc9, 0xe5, 0x68, 0x78, 0x23, 0x6c, 0x6a, 0xa8, 0x15, 0xf0, 0x1e, 0xdb,
	0x64, 0x36, 0xa7, 0x6b, 0x61, 0x67, 0xa4, 0x5f, 0x12, 0x82, 0x6f, 0x64, 0x05, 0xa3, 0xd4, 0x6a,
	0xc9, 0xec, 0x27, 0x49, 0x7b, 0x2f, 0x69, 0x2f, 0x36, 0x45, 0x0f, 0xc4, 0xf4, 0x8a, 0x10, 0x7d,
	0x21, 0x2b, 0x3a, 0x06, 0xab, 0x25, 0x33, 0xcb, 0x06, 0x3b, 0xe3, 0x81, 0xd0, 0xc7, 0xcc, 0x49,
	0x0b, 0xc8, 0x65, 0xcc, 0x4e, 0x94, 0x0a, 0x76, 0xa2, 0x30, 0x04, 0x2b, 0x86, 0x6b, 0xa1, 0x1b,
	0x66, 0xb0, 0x60, 0x49, 0x04, 0x08, 0x96, 0x34, 0x08, 0xe9, 0x14, 0x0f, 0x9a, 0xcc, 0x62, 0x3c,
	0x4c, 0xa7, 0x2b, 0x58, 0x3a, 0x29, 0x24, 0x48, 0x27, 0x05, 0xc8, 0x59, 0x68, 0x32, 0x6a, 0xeb,
	0x57, 0xfb, 0x58, 0x18, 0x12, 0x72, 0x16, 0x86, 0x83, 0x88, 0x85, 0xd4, 0x5e, 0x3e, 0xda, 0x64,
	0xfa, 0xb5, 0xbe, 0x16, 0x46, 0x24, 0xc4, 0xc2, 0x08, 0x80, 0x2c, 0x8d, 0x81, 0x55, 0xd6, 0x62,
	0x01, 0xd3, 0x67, 0xb1, 0x2c, 0xcd, 0x50, 0x20, 0x4b, 0x33, 0xc3, 0xda, 0x0a, 0x39, 0x1b, 0x6f,
	0xad, 0x7d, 0x1a, 0xac, 0xb4, 0x18, 0xf5, 0xf4, 0xeb, 0x42, 0xd8, 0x45, 0x65, 0x4b, 0x26, 0x70,
	0xb5, 0x64, 0xaa, 0x33, 0xb4, 0x75, 0x72, 0x0e, 0x86, 0x62, 0x93, 0x0c, 0x21, 0x45, 0xcf, 0x4b,
	0x49, 0xed, 0xc9, 0xcd, 0x01, 0xff, 0x87, 0x63, 0x4b, 0x9e, 0xb5, 0xcf, 0x7b, 0x4c, 0xbf, 0x81,
	0xf9, 0x5f, 0x22, 0x80, 0xff, 0xa5, 0x41, 0xa9, 0x20, 0xef, 0xd3, 0xe0, 0xb1, 0x78, 0x84, 0x49,
	0x32, 0xfa, 0x26, 0x5a, 0x90, 0x55, 0x9a, 0x54, 0x90, 0x55, 0x08, 0x82, 0x6b, 0xb2, 0x70, 0x37,
	0xba, 0x8e, 0x1f, 0x09, 0xd1, 0x6f, 0x61, 0xc1, 0x55, 0x48, 0x10, 0x5c, 0x05, 0x80, 0x3e, 0x64,
	0x55, 0x4c, 0x5f, 0xa7, 0x3d, 0xb7, 0xeb, 0xf1, 0x20, 0x3d, 0x11, 0x6f, 0x63, 0x7d, 0x08, 0xce,
	0x85, 0x3e, 0x04, 0xc7, 0x61, 0xd7, 0x6f, 0x73, 0xc7, 0x61, 0x76, 0x9c, 0x14, 0xa9, 0x8f, 0x5e,
	0xc2, 0x76, 0x3d, 0x4a, 0x85, 0x5d, 0x8f, 0xc2, 0x10, 0x08, 0xe1, 0xc2, 0x1d, 0x1e, 0xc0, 0x09,
	0x3f, 0x87, 0x05, 0x22, 0x47, 0x83, 0x40, 0xe4, 0x20, 0xe8, 0x7c, 0x04, 0x94, 0x7d, 0x98, 0xb9,
	0x83, 0x75, 0x3e, 0x79, 0x1e, 0x74, 0x3e, 0x79, 0x4c, 0x35, 0xde, 0xed, 0x70, 0x2b, 0x11, 0x7f,
	0xb7, 0xd8, 0x78, 0x89, 0xa6, 0x1a, 0x2f, 0x41, 0x8a, 0xf0, 0x4c, 0xd7, 0xfe, 0x72, 0xa1, 0x70,
	0xa5, 0x6d, 0x2f, 0x92, 0xa0, 0x08, 0xdf, 0x7a, 0xee, 0xb0, 0xd4, 0x31, 0xaf, 0x14, 0x0a, 0x97,
	0x69, 0x8a, 0x70, 0x19, 0x52, 0xdc, 0x5e, 0xe5, 0x7e, 0xe0, 0x7a, 0x47, 0xb5, 0x7d, 0x1a, 0xb6,
	0x3b, 0xaf, 0x16, 0xba, 0x3d, 0xc3, 0x53, 0xdc, 0x9e, 0xc1, 0xb4, 0x23, 0x72, 0x5d, 0xc2, 0x56,
	0xa8, 0x53, 0x63, 0x4e, 0x2e, 0x45, 0xe7, 0x85, 0xa2, 0x3b, 0x88, 0x22, 0x7c, 0x42, 0xb5, 0x64,
	0x0e, 0x96, 0xaa, 0xf5, 0xc8, 0x6c, 0x96, 0xf4, 0x8c, 0xb3, 0xe7, 0x9b, 0xac, 0x5d, 0x67, 0x5e,
	0xaa, 0x79, 0x41, 0x68, 0x9e, 0xc3, 0x35, 0xe7, 0xf9, 0xd5, 0x92, 0x39, 0x50, 0xa6, 0xf6, 0x25,
	0x31, 0xb2, 0x9c, 0x0d, 0xa7, 0xc7, 0xc3, 0x62, 0x9d, 0xd1, 0x7c, 0x4f, 0x68, 0xbe, 0x8b, 0x6b,
	0xc6, 0x66, 0x54, 0x4b, 0xe6, 0x31, 0xe4, 0x2a, 0x01, 0x8d, 0xc0, 0x44, 0xe7, 0xfd, 0xc2, 0x80,
	0x66, 0x78, 0x4a, 0x40, 0x33, 0x98, 0xd6, 0x26, 0x57, 0x72, 0x98, 0xbf, 0xcc, 0x2c, 0xda, 0x66,
	0x4b, 0xfe, 0x91, 0x63, 0xe9, 0x8b, 0x42, 0xc9, 0xad, 0x42, 0x25, 0x32, 0xb9, 0x5a, 0x32, 0xfb,
	0x4b, 0x83, 0x67, 0x46, 0x99, 0x10, 0xc9, 0xb4, 0xf5, 0xd7, 0xb0, 0x67, 0x46, 0x84, 0x08, 0xcf,
	0x8c, 0x08, 0x08, 0x47, 0x80, 0x04, 0xae, 0xf2, 0x46, 0x43, 0x7f, 0x80, 0x1d, 0x01, 0x0a, 0x09,
	0x8e, 0x00, 0x05, 0x80, 0xce, 0x5c, 0xd6, 0xb9, 0xe2, 0x76, 0xa1, 0x1f, 0x7b, 0x1d, 0xeb, 0xcc,
	0x8b, 0xd8, 0xd0, 0x99, 0x17, 0x31, 0xd0, 0xd0, 0x2c, 0xd9, 0x6d, 0xee, 0x24, 0x0a, 0xdf, 0x18,
	0x10, 0x1a, 0x99, 0x8c, 0x86, 0x46, 0x26, 0xc0, 0x7d, 0x82, 0x44, 0xd8, 0x66, 0x5e, 0x9b, 0xfb,
	0x7e, 0x78, 0x12, 0x26, 0x4a, 0xdf, 0xc4, 0xee, 0x13, 0xfa, 0x4e, 0x81, 0xfb, 0x84, 0xbe, 0x34,
	0x25, 0x37, 0xa2, 0xdd, 0xb0, 0x55, 0xf7, 0x5d, 0xd1, 0xb4, 0xbc, 0x55, 0x98, 0x1b, 0x59, 0xa2,
	0x92, 0x1b, 0x59, 0x50, 0x09, 0x62, 0xf8, 0x54, 0x10, 0x11, 0xec, 0x54, 0xcf, 0xdb, 0x85, 0x41,
	0x44, 0xd8, 0x4a, 0x10, 0x11, 0x06, 0x74, 0x0e, 0x29, 0xe3, 0x09, 0xa3, 0x3d, 0x58, 0xd7, 0x43,
	0xac, 0x73, 0xc0, 0xb9, 0xd0, 0x39, 0xe0, 0x38, 0x74, 0x0e, 0x29, 0xfe, 0x21, 0xb7, 0x0e, 0x52,
	0x55, 0xef, 0x60, 0x9d, 0x03, 0x4a, 0x85, 0xce, 0x01, 0x85, 0x95, 0x52, 0x9c, 0xd9, 0x7f, 0xa9,
	0xb6, 0x77, 0x0b, 0x4b, 0x31, 0xca, 0x57, 0x4a, 0x31, 0xca, 0xd1, 0x7c, 0x72, 0xad, 0xa0, 0xdf,
	0x48, 0xd5, 0xbe, 0x27, 0xd4, 0xbe, 0x34, 0xa0, 0x73, 0x91, 0xb4, 0x0e, 0x92, 0xa8, 0x2a, 0x95,
	0xfa, 0x84, 0x54, 0xe9, 0xfb, 0xc5, 0x4a, 0x11, 0xba, 0xaa, 0x14, 0xa1, 0x28, 0x4a, 0xe5, 0xfe,
	0x21, 0x55, 0xfa, 0xa8, 0x50, 0x29, 0x46, 0x57, 0x94, 0x62, 0x14, 0x25, 0xac, 0x99, 0x7e, 0x2b,
	0xd5, 0xfa, 0x41, 0x61, 0x58, 0x51, 0xbe, 0x12, 0x56, 0x94, 0xa3, 0xe4, 0x6d, 0x6d, 0xdf, 0xf5,
	0x02, 0x47, 0xba, 0x44, 0x5e, 0x2a, 0xcc, 0x5b, 0x95, 0xaa, 0xe4, 0xad, 0x0a, 0x83, 0x57, 0x6b,
	0xd1, 0xbb, 0x92, 0x15, 0xb7, 0xd5, 0x62, 0x51, 0xa3, 0x9f, 0x28, 0x5b, 0xc6, 0xbc, 0x5a, 0x48,
	0x07, 0xaf, 0x16, 0x52, 0xe0, 0x04, 0x8f, 0x29, 0xdb, 0xd4, 0x3a, 0x48, 0xee, 0x58, 0x56, 0xb0,
	0x13, 0x3c, 0xcf, 0x83, 0x13, 0x3c, 0x8f, 0xc1, 0x0d, 0xb3, 0x84, 0x45, 0xd7, 0x50, 0xab, 0xd8,
	0x0d, 0xb3, 0xca, 0x82, 0x1b, 0x66, 0x15, 0x01, 0xcb, 0xb7, 0x69, 0xd7, 0x67, 0x4f, 0xdd, 0x80,
	0x37, 0xe2, 0x37, 0x50, 0xbe, 0xbe, 0x86, 0x59, 0x9e, 0xe7, 0x81, 0xe5, 0x79, 0x0c, 0xde, 0x1d,
	0x98, 0x2c, 0xec, 0x31, 0x15, 0x0d, 0xeb, 0xd8, 0xbb, 0x03, 0x8c, 0x09, 0xef, 0x0e, 0x30, 0x54,
	0x7b, 0x48, 0xe2, 0xf7, 0x37, 0x3b, 0xe2, 0x85, 0x98, 0xfe, 0x58, 0xc8, 0x9d, 0xca, 0xca, 0x8d,
	0xb0, 0x6a, 0xc9, 0xcc, 0x70, 0xe1, 0xf1, 0x39, 0xfa, 0x5d, 0x0b, 0xdc, 0x8e, 0x5e, 0xc5, 0x1e,
	0x9f, 0x01, 0x87, 0xc7, 0x67, 0x18, 0x03, 0x39, 0x61, 0x29, 0xdd, 0x12, 0x6f, 0xe3, 0xf4, 0x0d,
	0x4c, 0x0e, 0xe0, 0x20, 0x07, 0xc6, 0xb2, 0xb7, 0x6a, 0x5b, 0x8d, 0x86, 0x10, 0xf4, 0x3f, 0x45,
	0xb7, 0x6a, 0x31, 0x21, 0x7b, 0xab, 0x16, 0x0f, 0x6a, 0x4f, 0x88, 0x26, 0xbd, 0x70, 0xa1, 0x7e,
	0x50, 0x63, 0xcc, 0xd1, 0x3f, 0x14, 0xb2, 0x2a, 0xc8, 0x0b, 0x9b, 0x98, 0x51, 0x2d, 0x99, 0xc8,
	0x3c, 0x30, 0x2c, 0x7a, 0x24, 0x89, 0x56, 0xf8, 0x04, 0x33, 0x4c, 0x22, 0x80, 0x61, 0xd2, 0x20,
	0xb4, 0x3d, 0xe2, 0x0e, 0x6d, 0xb9, 0xeb, 0xaf, 0xb2, 0x1e, 0xb7, 0xd8, 0x8a, 0xeb, 0x38, 0xcc,
	0x0a, 0xdb, 0xc4, 0x4d, 0xac, 0xed, 0x29, 0x20, 0x43, 0xdb, 0x53, 0x40, 0x80, 0xa2, 0x97, 0x25,
	0xac, 0x72, 0xdf, 0x4a, 0x35, 0x3e, 0xc5, 0x8a, 0x5e, 0x31, 0x1f, 0x8a, 0x5e, 0x31, 0x07, 0xda,
	0xd4, 0x84, 0x93, 0xdc, 0x11, 0x6e, 0x61, 0x6d, 0xaa, 0x42, 0x82, 0x36, 0x55, 0x01, 0xa0, 0x1a,
	0xa4, 0xaa, 0xb9, 0xdf, 0x71, 0x7d, 0x66, 0xeb, 0xdb, 0x58, 0x35, 0x50, 0x59, 0x50, 0x0d, 0x54,
	0x04, 0x3a, 0x99, 0x0d, 0xc7, 0x72, 0xdb, 0xdc, 0x69, 0xae, 0xd0, 0x56, 0x6b, 0x95, 0x75, 0x3c,
	0x66, 0x89, 0xee, 0xfd, 0x7f, 0xb1, 0x4e, 0x06, 0xe7, 0x42, 0x27, 0x83, 0xe3, 0x90, 0x9c, 0x32,
	0xae, 0x9b, 0x58, 0x72, 0xca, 0x0c, 0x48, 0x4e, 0x79, 0x54, 0xba, 0xbc, 0x0a, 0x39, 0xd4, 0xb1,
	0x5b, 0xcc, 0xd6, 0x6b, 0xe8, 0xe5, 0x15, 0x10, 0xa4, 0xcb, 0x2b, 0x18, 0x04, 0xc3, 0x84, 0xc1,
	0x89, 0x6b, 0x77, 0x30, 0xc3, 0x64, 0x06, 0x18, 0x26, 0x8f, 0x42, 0xb0, 0xb6, 0xa9, 0x47, 0xdb,
	0x2c, 0x80, 0x47, 0xbb, 0x5d, 0x2c, 0x58, 0x2a, 0x0b, 0x82, 0xa5, 0x22, 0x70, 0x79, 0x68, 0xd2,
	0xe7, 0xf1, 0x0d, 0xd8, 0x33, 0xec, 0xf2, 0x30, 0x85, 0xe1, 0xf2, 0x30, 0x1d, 0x02, 0xbf, 0xad,
	0xb5, 0x3b, 0xc1, 0x51, 0x2c, 0xe6, 0x23, 0xcc, 0x6f, 0x12, 0x01, 0xfc, 0x26, 0x0d, 0xca, 0x6f,
	0x19, 0xa2, 0x2f, 0x09, 0x92, 0x85, 0x7e, 0x8c, 0xbf, 0x65, 0xc8, 0x90, 0xe4, 0xb7, 0x0c, 0x19,
	0x00, 0x6a, 0xfb, 0x8a, 0xf8, 0x66, 0x41, 0xff, 0x3f, 0xac, 0xb6, 0x47, 0x18, 0xd4, 0xf6, 0xe8,
	0x37, 0x5c, 0xd8, 0xd6, 0x3a, 0xd4, 0x62, 0x9b, 0xae, 0xcd, 0x1b, 0x9c, 0xd9, 0xfa, 0x27, 0xd8,
	0x85, 0x6d, 0x86, 0x02, 0x17, 0xb6, 0x99, 0x61, 0x78, 0x7e, 0x89, 0x86, 0x45, 0x07, 0x9b, 0x8a,
	0xfd, 0x14, 0x7b, 0x7e, 0x41, 0x88, 0xf0, 0xfc, 0x82, 0x80, 0xb9, 0x37, 0x02, 0x26, 0xfb, 0x5c,
	0x54, 0x93, 0xe5, 0xa3, 0xaa, 0xeb, 0x1e, 0xe8, 0xff, 0xdf, 0xe7, 0x8d, 0x40, 0x96, 0x9a, 0x7b,
	0x23, 0x90, 0x85, 0xa1, 0x53, 0x8a, 0xe1, 0x35, 0x9b, 0x07, 0x8a, 0xb2, 0xef, 0x60, 0x9d, 0x52,
	0x21, 0x1d, 0x3a, 0xa5, 0x42, 0x8a, 0xf6, 0x80, 0x10, 0x38, 0x5a, 0xf4, 0xcf, 0x84, 0x7c, 0x2d,
	0x7f, 0x14, 0x55, 0x4b, 0xa6, 0xc4, 0x5b, 0x1e, 0x23, 0xa3, 0xd1, 0x2f, 0xe3, 0xeb, 0x21, 0xa2,
	0xc5, 0x1f, 0x5d, 0xd0, 0xe0, 0xbf, 0xe1, 0x53, 0x91, 0x5b, 0x89, 0x69, 0xe2, 0xd3, 0x90, 0x9c,
	0xe4, 0x18, 0xd4, 0xee, 0x93, 0x11, 0xf1, 0x4d, 0x8c, 0x3e, 0x32, 0x3b, 0x3c, 0x77, 0x6a, 0xf1,
	0x74, 0xba, 0xe4, 0x70, 0x79, 0xaa, 0x35, 0x82, 0xa9, 0x3d, 0x20, 0xa3, 0xd1, 0xd7, 0x3f, 0xfa,
	0xa8, 0x98, 0x33, 0x91, 0xcc, 0x11, 0x27, 0x69, 0x4e, 0x51, 0xc4, 0x35, 0x7e, 0x5a, 0x26, 0xe7,
	0x22, 0xa7, 0x7c, 0xc4, 0xe8, 0x41, 0xec, 0x9e, 0xeb, 0xe4, 0x84, 0x30, 0x31, 0xf4, 0xcf, 0xb0,
	0xba, 0x1e, 0x01, 0xe5, 0xd7, 0x3e, 0xf4, 0x6d, 0xd6, 0x3e, 0xdc, 0x67, 0xed, 0xc6, 0x9f, 0xcb,
	0x64, 0x12, 0x4c, 0x5a, 0xa7, 0xc1, 0x7f, 0xc4, 0xaa, 0x84, 0x9c, 0x8b, 0xc8, 0x89, 0xe2, 0x88,
	0x24, 0x73, 0x72, 0x11, 0x19, 0xe9, 0x13, 0x91, 0x54, 0x51, 0x1c, 0x11, 0x9d, 0x4c, 0x2b, 0x5f,
	0x36, 0xed, 0xb8, 0xee, 0x13, 0xd7, 0x69, 0x1a, 0xad, 0xe4, 0x9b, 0x27, 0xf1, 0x66, 0x95, 0x3b,
	0xcc, 0xcb, 0x2f, 0xb8, 0xfc, 0x6d, 0x16, 0x3c, 0xd4, 0x2f, 0x0c, 0x7f, 0x19, 0x22, 0x53, 0x89,
	0xba, 0x76, 0x9d, 0x3b, 0xcc, 0x8e, 0xe3, 0x70, 0x97, 0x8c, 0xfb, 0xec, 0x70, 0xcf, 0x0f, 0xa8,
	0x17, 0xe0, 0xfa, 0xc6, 0x7c, 0x76, 0x58, 0x0b, 0x61, 0xed, 0x36, 0x39, 0x19, 0x72, 0x99, 0x63,
	0xe3, 0xa1, 0x18, 0xf5, 0xd9, 0xe1, 0x9a, 0x63, 0xc3, 0x7e, 0x43, 0x63, 0x10, 0xef, 0xb7, 0xe3,
	0x84, 0xa0, 0x70, 0x53, 0x8c, 0x1c, 0x7f, 0x53, 0x68, 0x1f, 0x90, 0x93, 0xf1, 0x87, 0x7f, 0xf1,
	0x5e, 0xba, 0x88, 0xbc, 0xf2, 0x0e, 0xfd, 0xaf, 0x1a, 0x9a, 0x4c, 0xd3, 0x96, 0xc8, 0x58, 0x3b,
	0xbe, 0xac, 0xd6, 0x4f, 0x0a, 0x11, 0xd3, 0x89, 0x88, 0xf8, 0xf6, 0x3c, 0xae, 0x79, 0x39, 0xd7,
	0x25, 0xd3, 0x8c, 0xef, 0x97, 0xc9, 0x59, 0x93, 0x1d, 0x76, 0x99, 0x1f, 0x3c, 0x66, 0x41, 0xf4,
	0x39, 0xd8, 0x16, 0x99, 0x70, 0x3b, 0x01, 0x6f, 0xf3, 0x2f, 0xe2, 0x27, 0xa2, 0xf2, 0xec, 0xf0,
	0xdc, 0x19, 0xb5, 0xcd, 0xd8, 0x92, 0x28, 0xaa, 0xfc, 0xec, 0xfc, 0x87, 0x33, 0xdf, 0x3c, 0xba,
	0x44, 0x2e, 0xf2, 0xf6, 0xbc, 0xdd, 0x6a, 0xce, 0x37, 0xbd, 0x8e, 0x35, 0xff, 0xd8, 0xeb, 0x58,
	0xb1, 0x5a, 0xe3, 0x17, 0x43, 0x64, 0x0a, 0x4c, 0x58, 0xe5, 0x8d, 0x06, 0xf3, 0x98, 0x63, 0xfd,
	0xb3, 0xea, 0x67, 0x6e, 0x35, 0xc3, 0xff, 0xd8, 0x6a, 0xb4, 0x0f, 0xc9, 0xa9, 0xf8, 0x4b, 0xc5,
	0x7d, 0xea, 0xef, 0xc7, 0x1f, 0xdf, 0x5d, 0x9e, 0x8f, 0x3e, 0xb8, 0x9c, 0x4f, 0xbe, 0xc6, 0x9c,
	0xdf, 0x70, 0x82, 0x37, 0x1e, 0x3c, 0xa3, 0xad, 0x6e, 0xce, 0xfb, 0x24, 0x9a, 0x5e, 0xa5, 0xfe,
	0xfe, 0x00, 0xd7, 0xfc, 0x75, 0x98, 0x5c, 0x30, 0x99, 0xdf, 0x71, 0x1d, 0x9f, 0x65, 0x7d, 0x73,
	0x4e, 0xf2, 0x4d, 0xe4, 0x8c, 0xa9, 0x8c, 0x33, 0x92, 0xd5, 0x1b, 0x49, 0x36, 0x0f, 0xe7, 0xb3,
	0x39, 0x49, 0xdf, 0x5b, 0x7d, 0x6b, 0x7a, 0x9a, 0xaf, 0xf7, 0x21, 0x5f, 0x4f, 0x60, 0xf9, 0x9a,
	0x56, 0x12, 0x48, 0xd0, 0xc5, 0xe3, 0x26, 0x28, 0x64, 0xa4, 0x76, 0x99, 0x8c, 0x3b, 0x8c, 0xd9,
	0x7b, 0x6d, 0xd7, 0x63, 0xe2, 0xf3, 0xc3, 0x31, 0x73, 0x2c, 0x1c, 0xd8, 0x74, 0xbd, 0xb0, 0xf4,
	0x12, 0x61, 0xf3, 0x9e, 0xc7, 0x1a, 0xbe, 0x3e, 0x26, 0x44, 0x4e, 0xca, 0x6b, 0xda, 0xea, 0x06,
	0xdb, 0x8c, 0x79, 0xe6, 0xb8, 0xa0, 0x99, 0xac, 0xe1, 0x6b, 0xaf, 0x93, 0x53, 0xd1, 0x0a, 0xa2,
	0x49, 0xe3, 0x62, 0xd2, 0x54, 0x66, 0x8d, 0xc9, 0x2c, 0x12, 0x11, 0xc5, 0xb4, 0xdb, 0x64, 0x34,
	0x8a, 0x53, 0xfc, 0xc1, 0xdc, 0x99, 0x64, 0x46, 0xd4, 0xc6, 0x99, 0x31, 0xaa, 0xbd, 0x9b, 0x4d,
	0x87, 0x53, 0x03, 0xd3, 0x21, 0x13, 0xff, 0x2b, 0xdf, 0x3c, 0xaa, 0x10, 0x3d, 0x1f, 0xff, 0x28,
	0xe6, 0xc6, 0x77, 0xc9, 0x65, 0x79, 0x6b, 0x84, 0xfa, 0x7d, 0x29, 0x0b, 0x6e, 0x90, 0x11, 0xab,
	0xe5, 0x5a, 0x07, 0xf8, 0x69, 0x15, 0x61, 0x03, 0x52, 0xec, 0xf7, 0x65, 0x32, 0x93, 0x49, 0x31,
	0x55, 0xc7, 0x1c, 0x39, 0x19, 0x2d, 0x3c, 0xaa, 0x03, 0x92, 0x23, 0x22, 0xae, 0x99, 0xc0, 0xa9,
	0xa3, 0xf7, 0xc4, 0x67, 0xb8, 0xfa, 0xd0, 0x40, 0x47, 0x87, 0xff, 0xf5, 0x93, 0x98, 0xc6, 0xb3,
	0x86, 0x07, 0xc4, 0x54, 0xcc, 0x19, 0xe4, 0xb6, 0x1f, 0x96, 0x89, 0x26, 0x5f, 0xe7, 0xd6, 0xba,
	0x75, 0x9f, 0x05, 0xda, 0x32, 0x21, 0x60, 0xa0, 0xf0, 0x59, 0x81, 0x7d, 0xaa, 0x27, 0xc7, 0x53,
	0x73, 0xb5, 0x57, 0x08, 0x69, 0x0b, 0xa1, 0x7b, 0xdc, 0x8e, 0xd6, 0x98, 0xab, 0x4d, 0xe3, 0x11,
	0x61, 0xc3, 0xf6, 0x8d, 0xdf, 0x0e, 0x91, 0x2b, 0x10, 0x40, 0x93, 0xc5, 0x4e, 0xb5, 0xd7, 0x9c,
	0x80, 0x07, 0x3c, 0xdc, 0x22, 0x6f, 0x25, 0x1b, 0xb4, 0x5c, 0xb8, 0xf0, 0xc2, 0x53, 0xe7, 0x44,
	0x3b, 0xb4, 0x21, 0xf2, 0xd8, 0xf9, 0x74, 0xe2, 0xee, 0xc6, 0x2a, 0x5a, 0x76, 0x04, 0x5b, 0x7b,
	0x4a, 0x26, 0x22, 0x1f, 0x44, 0x46, 0x26, 0x7b, 0xb9, 0x92, 0x71, 0x43, 0xc6, 0x6d, 0xb9, 0x73,
	0xbe, 0x29, 0x51, 0xb4, 0x77, 0x94, 0xb3, 0xef, 0x58, 0xfe, 0x8c, 0xa7, 0x0c, 0x48, 0xcd, 0xdf,
	0x95, 0xc9, 0x55, 0x29, 0x35, 0x31, 0xef, 0x19, 0x59, 0xef, 0x0d, 0x28, 0x6f, 0x43, 0xfd, 0xca,
	0x9b, 0x5c, 0xab, 0x86, 0x8f, 0x57, 0xab, 0x06, 0xa5, 0xe1, 0xf3, 0xa4, 0x95, 0x82, 0x47, 0xdb,
	0x47, 0xe4, 0x44, 0x70, 0xd4, 0x61, 0x71, 0xf2, 0xcd, 0xe4, 0xca, 0x44, 0x2d, 0xf0, 0xb8, 0xd3,
	0xc4, 0xe3, 0x17, 0x4e, 0x0c, 0xb7, 0x7c, 0xfd, 0x28, 0xac, 0xc1, 0x43, 0x68, 0x0f, 0x23, 0x30,
	0x63, 0x92, 0x9c, 0xcf, 0x3d, 0x1f, 0x1b, 0x1e, 0xd1, 0x63, 0xcf, 0x86, 0x71, 0xb5, 0x3c, 0x5e,
	0x67, 0x3b, 0x6e, 0x7c, 0xf7, 0xf5, 0x77, 0x67, 0xe1, 0x80, 0x10, 0x06, 0xa4, 0xa2, 0xea, 0x5c,
	0xf7, 0xdc, 0xf6, 0xbf, 0x58, 0xeb, 0x17, 0xe9, 0xa6, 0x93, 0x56, 0x2a, 0x5f, 0xf5, 0x41, 0xd2,
	0x96, 0x07, 0x27, 0xad, 0xd2, 0xb7, 0x0d, 0xd0, 0xfd, 0x25, 0xb9, 0x86, 0xad, 0xf8, 0xdf, 0xa4,
	0xfd, 0x37, 0x65, 0x72, 0x3a, 0x3d, 0x87, 0x97, 0xdd, 0x17, 0xc7, 0xee, 0x13, 0x5e, 0xcb, 0x3c,
	0x9f, 0x60, 0x07, 0xd8, 0x72, 0x98, 0x59, 0xd1, 0x01, 0x96, 0x3c, 0xad, 0xbc, 0x4f, 0xce, 0x74,
	0x9d, 0xba, 0xfb, 0x82, 0x25, 0x7f, 0xc2, 0x12, 0x37, 0x43, 0x85, 0x8d, 0xc1, 0x44, 0x4c, 0x8f,
	0x7e, 0x2e, 0xfe, 0x88, 0x10, 0xad, 0x16, 0xff, 0x21, 0xcc, 0x92, 0x13, 0x8f, 0xfa, 0x1a, 0x27,
	0x63, 0x69, 0x2f, 0x9a, 0x8a, 0x52, 0x9a, 0xd4, 0xca, 0x24, 0x00, 0xd1, 0x6e, 0xab, 0xb1, 0x43,
	0x63, 0xe1, 0xab, 0x3f, 0xfc, 0xf1, 0x67, 0x43, 0x77, 0x8c, 0x9b, 0x0b, 0xbd, 0xfb, 0x0b, 0xa1,
	0x73, 0x16, 0xf2, 0xe2, 0x17, 0x12, 0x11, 0x0f, 0xcb, 0x77, 0xb5, 0xaf, 0xca, 0x64, 0x22, 0xdb,
	0x58, 0xcd, 0xe4, 0x15, 0x02, 0x5a, 0xb9, 0xa2, 0x6a, 0xcd, 0xc0, 0xc6, 0x03, 0xa1, 0x7f, 0xde,
	0xb8, 0x33, 0x40, 0x3f, 0x4c, 0x09, 0x8d, 0xf8, 0xba, 0x4c, 0xa6, 0xf0, 0xe3, 0x1d, 0xb3, 0x45,
	0x21, 0x55, 0x6e, 0xa2, 0x26, 0x29, 0x2c, 0xe3, 0x1d, 0x61, 0xd9, 0xeb, 0xc6, 0xbd, 0x81, 0x96,
	0x29, 0x33, 0x43, 0x03, 0x7f, 0x5d, 0x26, 0xd3, 0x05, 0x05, 0xf8, 0x56, 0xde, 0x44, 0x84, 0x56,
	0xb9, 0x8d, 0x18, 0x89, 0xf0, 0x8c, 0xf7, 0x84, 0x99, 0x6f, 0x1a, 0x8b, 0x03, 0xcc, 0x44, 0xe6,
	0x86, 0x86, 0xfe, 0xa0, 0x4c, 0xce, 0xe7, 0x8b, 0xdb, 0xac, 0x62, 0x63, 0x8e, 0x51, 0x99, 0x52,
	0xcd, 0x7b, 0xe6, 0x72, 0xdb, 0x78, 0x4b, 0x18, 0xb3, 0x68, 0xbc, 0xda, 0xcf, 0x98, 0x9c, 0xb0,
	0xd0, 0x8e, 0x9f, 0x94, 0xc9, 0x24, 0x56, 0xf0, 0x8c, 0x22, 0x4b, 0x80, 0x53, 0x60, 0xcb, 0x43,
	0x61, 0xcb, 0x03, 0x63, 0xe1, 0x58, 0xb6, 0x80, 0xb8, 0xd0, 0x9a, 0x9f, 0x97, 0xc9, 0x74, 0x41,
	0x21, 0xbc, 0x55, 0xec, 0x1a, 0x89, 0x56, 0x60, 0xd3, 0xb1, 0x82, 0x85, 0x4b, 0x0c, 0xcd, 0xfa,
	0x65, 0x99, 0xe8, 0x85, 0x35, 0xf2, 0xa5, 0x7e, 0x9e, 0x1a, 0x6c, 0xda, 0x23, 0x61, 0xda, 0xdb,
	0xc6, 0x83, 0x63, 0xbb, 0x4b, 0x31, 0xce, 0x25, 0x24, 0x2d, 0x5b, 0xbe, 0x36, 0x9d, 0xab, 0x86,
	0xe2, 0x60, 0x05, 0xe5, 0x72, 0xcd, 0x35, 0xee, 0x0b, 0xe5, 0x2f, 0x1b, 0xb7, 0xfb, 0x2a, 0x4f,
	0xa5, 0x3f, 0x2c, 0xdf, 0xbd, 0x57, 0x5e, 0xbe, 0xf4, 0xcd, 0xa3, 0x69, 0x32, 0x25, 0xd7, 0x75,
	0x9f, 0x79, 0x3d, 0x6e, 0x31, 0xbf, 0x3e, 0x2a, 0xb4, 0xbe, 0xf6, 0xb7, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xe9, 0xd9, 0xaf, 0x83, 0x35, 0x38, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SequenceAndUpdatesClient is the client API for SequenceAndUpdates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SequenceAndUpdatesClient interface {
	/// Get last seq number
	GetState(ctx context.Context, in *RequestGetState, opts ...grpc.CallOption) (*ResponseSeq, error)
	/// Get all update that happens after given seq number
	GetDifference(ctx context.Context, in *RequestGetDifference, opts ...grpc.CallOption) (*ResponseGetDifference, error)
	/// Load all dialogs that changed after given date
	GetDialogsDifference(ctx context.Context, in *RequestGetDialogsDifference, opts ...grpc.CallOption) (*ResponseGetDialogsDifference, error)
	/// Load some required entities
	GetReferencedEntitites(ctx context.Context, in *RequestGetReferencedEntitites, opts ...grpc.CallOption) (*ResponseGetReferencedEntitites, error)
	SubscribeToOnline(ctx context.Context, in *RequestSubscribeToOnline, opts ...grpc.CallOption) (*ResponseVoid, error)
	SubscribeFromOnline(ctx context.Context, in *RequestSubscribeFromOnline, opts ...grpc.CallOption) (*ResponseVoid, error)
	SubscribeToGroupOnline(ctx context.Context, in *RequestSubscribeToGroupOnline, opts ...grpc.CallOption) (*ResponseVoid, error)
	SubscribeFromGroupOnline(ctx context.Context, in *RequestSubscribeFromGroupOnline, opts ...grpc.CallOption) (*ResponseVoid, error)
	/// Get stream of the user's updates
	SeqUpdates(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (SequenceAndUpdates_SeqUpdatesClient, error)
}

type sequenceAndUpdatesClient struct {
	cc *grpc.ClientConn
}

func NewSequenceAndUpdatesClient(cc *grpc.ClientConn) SequenceAndUpdatesClient {
	return &sequenceAndUpdatesClient{cc}
}

func (c *sequenceAndUpdatesClient) GetState(ctx context.Context, in *RequestGetState, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.SequenceAndUpdates/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) GetDifference(ctx context.Context, in *RequestGetDifference, opts ...grpc.CallOption) (*ResponseGetDifference, error) {
	out := new(ResponseGetDifference)
	err := c.cc.Invoke(ctx, "/dialog.SequenceAndUpdates/GetDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) GetDialogsDifference(ctx context.Context, in *RequestGetDialogsDifference, opts ...grpc.CallOption) (*ResponseGetDialogsDifference, error) {
	out := new(ResponseGetDialogsDifference)
	err := c.cc.Invoke(ctx, "/dialog.SequenceAndUpdates/GetDialogsDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) GetReferencedEntitites(ctx context.Context, in *RequestGetReferencedEntitites, opts ...grpc.CallOption) (*ResponseGetReferencedEntitites, error) {
	out := new(ResponseGetReferencedEntitites)
	err := c.cc.Invoke(ctx, "/dialog.SequenceAndUpdates/GetReferencedEntitites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) SubscribeToOnline(ctx context.Context, in *RequestSubscribeToOnline, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.SequenceAndUpdates/SubscribeToOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) SubscribeFromOnline(ctx context.Context, in *RequestSubscribeFromOnline, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.SequenceAndUpdates/SubscribeFromOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) SubscribeToGroupOnline(ctx context.Context, in *RequestSubscribeToGroupOnline, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.SequenceAndUpdates/SubscribeToGroupOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) SubscribeFromGroupOnline(ctx context.Context, in *RequestSubscribeFromGroupOnline, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.SequenceAndUpdates/SubscribeFromGroupOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) SeqUpdates(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (SequenceAndUpdates_SeqUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SequenceAndUpdates_serviceDesc.Streams[0], "/dialog.SequenceAndUpdates/SeqUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &sequenceAndUpdatesSeqUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SequenceAndUpdates_SeqUpdatesClient interface {
	Recv() (*SeqUpdateBox, error)
	grpc.ClientStream
}

type sequenceAndUpdatesSeqUpdatesClient struct {
	grpc.ClientStream
}

func (x *sequenceAndUpdatesSeqUpdatesClient) Recv() (*SeqUpdateBox, error) {
	m := new(SeqUpdateBox)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SequenceAndUpdatesServer is the server API for SequenceAndUpdates service.
type SequenceAndUpdatesServer interface {
	/// Get last seq number
	GetState(context.Context, *RequestGetState) (*ResponseSeq, error)
	/// Get all update that happens after given seq number
	GetDifference(context.Context, *RequestGetDifference) (*ResponseGetDifference, error)
	/// Load all dialogs that changed after given date
	GetDialogsDifference(context.Context, *RequestGetDialogsDifference) (*ResponseGetDialogsDifference, error)
	/// Load some required entities
	GetReferencedEntitites(context.Context, *RequestGetReferencedEntitites) (*ResponseGetReferencedEntitites, error)
	SubscribeToOnline(context.Context, *RequestSubscribeToOnline) (*ResponseVoid, error)
	SubscribeFromOnline(context.Context, *RequestSubscribeFromOnline) (*ResponseVoid, error)
	SubscribeToGroupOnline(context.Context, *RequestSubscribeToGroupOnline) (*ResponseVoid, error)
	SubscribeFromGroupOnline(context.Context, *RequestSubscribeFromGroupOnline) (*ResponseVoid, error)
	/// Get stream of the user's updates
	SeqUpdates(*empty.Empty, SequenceAndUpdates_SeqUpdatesServer) error
}

func RegisterSequenceAndUpdatesServer(s *grpc.Server, srv SequenceAndUpdatesServer) {
	s.RegisterService(&_SequenceAndUpdates_serviceDesc, srv)
}

func _SequenceAndUpdates_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).GetState(ctx, req.(*RequestGetState))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_GetDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).GetDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/GetDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).GetDifference(ctx, req.(*RequestGetDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_GetDialogsDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetDialogsDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).GetDialogsDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/GetDialogsDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).GetDialogsDifference(ctx, req.(*RequestGetDialogsDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_GetReferencedEntitites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetReferencedEntitites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).GetReferencedEntitites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/GetReferencedEntitites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).GetReferencedEntitites(ctx, req.(*RequestGetReferencedEntitites))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_SubscribeToOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSubscribeToOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).SubscribeToOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/SubscribeToOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).SubscribeToOnline(ctx, req.(*RequestSubscribeToOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_SubscribeFromOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSubscribeFromOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).SubscribeFromOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/SubscribeFromOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).SubscribeFromOnline(ctx, req.(*RequestSubscribeFromOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_SubscribeToGroupOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSubscribeToGroupOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).SubscribeToGroupOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/SubscribeToGroupOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).SubscribeToGroupOnline(ctx, req.(*RequestSubscribeToGroupOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_SubscribeFromGroupOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSubscribeFromGroupOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).SubscribeFromGroupOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/SubscribeFromGroupOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).SubscribeFromGroupOnline(ctx, req.(*RequestSubscribeFromGroupOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_SeqUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SequenceAndUpdatesServer).SeqUpdates(m, &sequenceAndUpdatesSeqUpdatesServer{stream})
}

type SequenceAndUpdates_SeqUpdatesServer interface {
	Send(*SeqUpdateBox) error
	grpc.ServerStream
}

type sequenceAndUpdatesSeqUpdatesServer struct {
	grpc.ServerStream
}

func (x *sequenceAndUpdatesSeqUpdatesServer) Send(m *SeqUpdateBox) error {
	return x.ServerStream.SendMsg(m)
}

var _SequenceAndUpdates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.SequenceAndUpdates",
	HandlerType: (*SequenceAndUpdatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _SequenceAndUpdates_GetState_Handler,
		},
		{
			MethodName: "GetDifference",
			Handler:    _SequenceAndUpdates_GetDifference_Handler,
		},
		{
			MethodName: "GetDialogsDifference",
			Handler:    _SequenceAndUpdates_GetDialogsDifference_Handler,
		},
		{
			MethodName: "GetReferencedEntitites",
			Handler:    _SequenceAndUpdates_GetReferencedEntitites_Handler,
		},
		{
			MethodName: "SubscribeToOnline",
			Handler:    _SequenceAndUpdates_SubscribeToOnline_Handler,
		},
		{
			MethodName: "SubscribeFromOnline",
			Handler:    _SequenceAndUpdates_SubscribeFromOnline_Handler,
		},
		{
			MethodName: "SubscribeToGroupOnline",
			Handler:    _SequenceAndUpdates_SubscribeToGroupOnline_Handler,
		},
		{
			MethodName: "SubscribeFromGroupOnline",
			Handler:    _SequenceAndUpdates_SubscribeFromGroupOnline_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SeqUpdates",
			Handler:       _SequenceAndUpdates_SeqUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sequence_and_updates.proto",
}
