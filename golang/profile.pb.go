// Code generated by protoc-gen-gogo.
// source: profile.proto
// DO NOT EDIT!

package dialog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Changing account's name
type RequestEditName struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RequestEditName) Reset()                    { *m = RequestEditName{} }
func (*RequestEditName) ProtoMessage()               {}
func (*RequestEditName) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{0} }

func (m *RequestEditName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Changing account's nickname
type RequestEditNickName struct {
	Nickname *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=nickname" json:"nickname,omitempty"`
}

func (m *RequestEditNickName) Reset()                    { *m = RequestEditNickName{} }
func (*RequestEditNickName) ProtoMessage()               {}
func (*RequestEditNickName) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{1} }

func (m *RequestEditNickName) GetNickname() *google_protobuf.StringValue {
	if m != nil {
		return m.Nickname
	}
	return nil
}

// Checking availability of nickname
type RequestCheckNickName struct {
	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (m *RequestCheckNickName) Reset()                    { *m = RequestCheckNickName{} }
func (*RequestCheckNickName) ProtoMessage()               {}
func (*RequestCheckNickName) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{2} }

func (m *RequestCheckNickName) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

// Changing about information
type RequestEditAbout struct {
	About *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=about" json:"about,omitempty"`
}

func (m *RequestEditAbout) Reset()                    { *m = RequestEditAbout{} }
func (*RequestEditAbout) ProtoMessage()               {}
func (*RequestEditAbout) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{3} }

func (m *RequestEditAbout) GetAbout() *google_protobuf.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

// Changing account's avatar
type RequestEditAvatar struct {
	FileLocation *FileLocation `protobuf:"bytes,1,opt,name=file_location,json=fileLocation" json:"file_location,omitempty"`
}

func (m *RequestEditAvatar) Reset()                    { *m = RequestEditAvatar{} }
func (*RequestEditAvatar) ProtoMessage()               {}
func (*RequestEditAvatar) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{4} }

func (m *RequestEditAvatar) GetFileLocation() *FileLocation {
	if m != nil {
		return m.FileLocation
	}
	return nil
}

type ResponseEditAvatar struct {
	Avatar *Avatar `protobuf:"bytes,1,opt,name=avatar" json:"avatar,omitempty"`
	Seq    int32   `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	State  []byte  `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *ResponseEditAvatar) Reset()                    { *m = ResponseEditAvatar{} }
func (*ResponseEditAvatar) ProtoMessage()               {}
func (*ResponseEditAvatar) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{5} }

func (m *ResponseEditAvatar) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *ResponseEditAvatar) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseEditAvatar) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

// Removing account's avatar
type RequestRemoveAvatar struct {
}

func (m *RequestRemoveAvatar) Reset()                    { *m = RequestRemoveAvatar{} }
func (*RequestRemoveAvatar) ProtoMessage()               {}
func (*RequestRemoveAvatar) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{6} }

// Updating user's time zone
type RequestEditMyTimeZone struct {
	Tz string `protobuf:"bytes,1,opt,name=tz,proto3" json:"tz,omitempty"`
}

func (m *RequestEditMyTimeZone) Reset()                    { *m = RequestEditMyTimeZone{} }
func (*RequestEditMyTimeZone) ProtoMessage()               {}
func (*RequestEditMyTimeZone) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{7} }

func (m *RequestEditMyTimeZone) GetTz() string {
	if m != nil {
		return m.Tz
	}
	return ""
}

// Changing preffered languages
type RequestEditMyPreferredLanguages struct {
	PreferredLanguages []string `protobuf:"bytes,1,rep,name=preferred_languages,json=preferredLanguages" json:"preferred_languages,omitempty"`
}

func (m *RequestEditMyPreferredLanguages) Reset()      { *m = RequestEditMyPreferredLanguages{} }
func (*RequestEditMyPreferredLanguages) ProtoMessage() {}
func (*RequestEditMyPreferredLanguages) Descriptor() ([]byte, []int) {
	return fileDescriptorProfile, []int{8}
}

func (m *RequestEditMyPreferredLanguages) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

// Changing user's sex
type RequestEditSex struct {
	Sex Sex `protobuf:"varint,1,opt,name=sex,proto3,enum=dialog.Sex" json:"sex,omitempty"`
}

func (m *RequestEditSex) Reset()                    { *m = RequestEditSex{} }
func (*RequestEditSex) ProtoMessage()               {}
func (*RequestEditSex) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{9} }

func (m *RequestEditSex) GetSex() Sex {
	if m != nil {
		return m.Sex
	}
	return SEX_UNKNOWN
}

// Chaning user custom profile based on scheme
type RequestEditCustomProfile struct {
	CustomProfile string `protobuf:"bytes,1,opt,name=custom_profile,json=customProfile,proto3" json:"custom_profile,omitempty"`
}

func (m *RequestEditCustomProfile) Reset()                    { *m = RequestEditCustomProfile{} }
func (*RequestEditCustomProfile) ProtoMessage()               {}
func (*RequestEditCustomProfile) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{10} }

func (m *RequestEditCustomProfile) GetCustomProfile() string {
	if m != nil {
		return m.CustomProfile
	}
	return ""
}

// Changing user's status
type RequestChangeUserStatus struct {
	Status *UserStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *RequestChangeUserStatus) Reset()                    { *m = RequestChangeUserStatus{} }
func (*RequestChangeUserStatus) ProtoMessage()               {}
func (*RequestChangeUserStatus) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{11} }

func (m *RequestChangeUserStatus) GetStatus() *UserStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestEditName)(nil), "dialog.RequestEditName")
	proto.RegisterType((*RequestEditNickName)(nil), "dialog.RequestEditNickName")
	proto.RegisterType((*RequestCheckNickName)(nil), "dialog.RequestCheckNickName")
	proto.RegisterType((*RequestEditAbout)(nil), "dialog.RequestEditAbout")
	proto.RegisterType((*RequestEditAvatar)(nil), "dialog.RequestEditAvatar")
	proto.RegisterType((*ResponseEditAvatar)(nil), "dialog.ResponseEditAvatar")
	proto.RegisterType((*RequestRemoveAvatar)(nil), "dialog.RequestRemoveAvatar")
	proto.RegisterType((*RequestEditMyTimeZone)(nil), "dialog.RequestEditMyTimeZone")
	proto.RegisterType((*RequestEditMyPreferredLanguages)(nil), "dialog.RequestEditMyPreferredLanguages")
	proto.RegisterType((*RequestEditSex)(nil), "dialog.RequestEditSex")
	proto.RegisterType((*RequestEditCustomProfile)(nil), "dialog.RequestEditCustomProfile")
	proto.RegisterType((*RequestChangeUserStatus)(nil), "dialog.RequestChangeUserStatus")
}
func (this *RequestEditName) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestEditName)
	if !ok {
		that2, ok := that.(RequestEditName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *RequestEditNickName) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestEditNickName)
	if !ok {
		that2, ok := that.(RequestEditNickName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Nickname.Equal(that1.Nickname) {
		return false
	}
	return true
}
func (this *RequestCheckNickName) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestCheckNickName)
	if !ok {
		that2, ok := that.(RequestCheckNickName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	return true
}
func (this *RequestEditAbout) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestEditAbout)
	if !ok {
		that2, ok := that.(RequestEditAbout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	return true
}
func (this *RequestEditAvatar) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestEditAvatar)
	if !ok {
		that2, ok := that.(RequestEditAvatar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.FileLocation.Equal(that1.FileLocation) {
		return false
	}
	return true
}
func (this *ResponseEditAvatar) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResponseEditAvatar)
	if !ok {
		that2, ok := that.(ResponseEditAvatar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Avatar.Equal(that1.Avatar) {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	return true
}
func (this *RequestRemoveAvatar) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestRemoveAvatar)
	if !ok {
		that2, ok := that.(RequestRemoveAvatar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *RequestEditMyTimeZone) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestEditMyTimeZone)
	if !ok {
		that2, ok := that.(RequestEditMyTimeZone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Tz != that1.Tz {
		return false
	}
	return true
}
func (this *RequestEditMyPreferredLanguages) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestEditMyPreferredLanguages)
	if !ok {
		that2, ok := that.(RequestEditMyPreferredLanguages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	return true
}
func (this *RequestEditSex) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestEditSex)
	if !ok {
		that2, ok := that.(RequestEditSex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	return true
}
func (this *RequestEditCustomProfile) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestEditCustomProfile)
	if !ok {
		that2, ok := that.(RequestEditCustomProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CustomProfile != that1.CustomProfile {
		return false
	}
	return true
}
func (this *RequestChangeUserStatus) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestChangeUserStatus)
	if !ok {
		that2, ok := that.(RequestChangeUserStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *RequestEditName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestEditName{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditNickName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestEditNickName{")
	if this.Nickname != nil {
		s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCheckNickName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestCheckNickName{")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditAbout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestEditAbout{")
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditAvatar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestEditAvatar{")
	if this.FileLocation != nil {
		s = append(s, "FileLocation: "+fmt.Sprintf("%#v", this.FileLocation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseEditAvatar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseEditAvatar{")
	if this.Avatar != nil {
		s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	}
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRemoveAvatar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestRemoveAvatar{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditMyTimeZone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestEditMyTimeZone{")
	s = append(s, "Tz: "+fmt.Sprintf("%#v", this.Tz)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditMyPreferredLanguages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestEditMyPreferredLanguages{")
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditSex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestEditSex{")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditCustomProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestEditCustomProfile{")
	s = append(s, "CustomProfile: "+fmt.Sprintf("%#v", this.CustomProfile)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestChangeUserStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestChangeUserStatus{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProfile(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Profile service

type ProfileClient interface {
	EditName(ctx context.Context, in *RequestEditName, opts ...grpc.CallOption) (*ResponseSeq, error)
	EditNickName(ctx context.Context, in *RequestEditNickName, opts ...grpc.CallOption) (*ResponseSeq, error)
	CheckNickName(ctx context.Context, in *RequestCheckNickName, opts ...grpc.CallOption) (*ResponseBool, error)
	EditAbout(ctx context.Context, in *RequestEditAbout, opts ...grpc.CallOption) (*ResponseSeq, error)
	EditAvatar(ctx context.Context, in *RequestEditAvatar, opts ...grpc.CallOption) (*ResponseEditAvatar, error)
	RemoveAvatar(ctx context.Context, in *RequestRemoveAvatar, opts ...grpc.CallOption) (*ResponseSeq, error)
	EditMyTimeZone(ctx context.Context, in *RequestEditMyTimeZone, opts ...grpc.CallOption) (*ResponseSeq, error)
	EditMyPreferredLanguages(ctx context.Context, in *RequestEditMyPreferredLanguages, opts ...grpc.CallOption) (*ResponseSeq, error)
	EditSex(ctx context.Context, in *RequestEditSex, opts ...grpc.CallOption) (*ResponseSeq, error)
	EditCustomProfile(ctx context.Context, in *RequestEditCustomProfile, opts ...grpc.CallOption) (*ResponseSeq, error)
	ChangeUserStatus(ctx context.Context, in *RequestChangeUserStatus, opts ...grpc.CallOption) (*ResponseSeq, error)
}

type profileClient struct {
	cc *grpc.ClientConn
}

func NewProfileClient(cc *grpc.ClientConn) ProfileClient {
	return &profileClient{cc}
}

func (c *profileClient) EditName(ctx context.Context, in *RequestEditName, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Profile/EditName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) EditNickName(ctx context.Context, in *RequestEditNickName, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Profile/EditNickName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) CheckNickName(ctx context.Context, in *RequestCheckNickName, opts ...grpc.CallOption) (*ResponseBool, error) {
	out := new(ResponseBool)
	err := grpc.Invoke(ctx, "/dialog.Profile/CheckNickName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) EditAbout(ctx context.Context, in *RequestEditAbout, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Profile/EditAbout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) EditAvatar(ctx context.Context, in *RequestEditAvatar, opts ...grpc.CallOption) (*ResponseEditAvatar, error) {
	out := new(ResponseEditAvatar)
	err := grpc.Invoke(ctx, "/dialog.Profile/EditAvatar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) RemoveAvatar(ctx context.Context, in *RequestRemoveAvatar, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Profile/RemoveAvatar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) EditMyTimeZone(ctx context.Context, in *RequestEditMyTimeZone, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Profile/EditMyTimeZone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) EditMyPreferredLanguages(ctx context.Context, in *RequestEditMyPreferredLanguages, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Profile/EditMyPreferredLanguages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) EditSex(ctx context.Context, in *RequestEditSex, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Profile/EditSex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) EditCustomProfile(ctx context.Context, in *RequestEditCustomProfile, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Profile/EditCustomProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) ChangeUserStatus(ctx context.Context, in *RequestChangeUserStatus, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Profile/ChangeUserStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Profile service

type ProfileServer interface {
	EditName(context.Context, *RequestEditName) (*ResponseSeq, error)
	EditNickName(context.Context, *RequestEditNickName) (*ResponseSeq, error)
	CheckNickName(context.Context, *RequestCheckNickName) (*ResponseBool, error)
	EditAbout(context.Context, *RequestEditAbout) (*ResponseSeq, error)
	EditAvatar(context.Context, *RequestEditAvatar) (*ResponseEditAvatar, error)
	RemoveAvatar(context.Context, *RequestRemoveAvatar) (*ResponseSeq, error)
	EditMyTimeZone(context.Context, *RequestEditMyTimeZone) (*ResponseSeq, error)
	EditMyPreferredLanguages(context.Context, *RequestEditMyPreferredLanguages) (*ResponseSeq, error)
	EditSex(context.Context, *RequestEditSex) (*ResponseSeq, error)
	EditCustomProfile(context.Context, *RequestEditCustomProfile) (*ResponseSeq, error)
	ChangeUserStatus(context.Context, *RequestChangeUserStatus) (*ResponseSeq, error)
}

func RegisterProfileServer(s *grpc.Server, srv ProfileServer) {
	s.RegisterService(&_Profile_serviceDesc, srv)
}

func _Profile_EditName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).EditName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/EditName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).EditName(ctx, req.(*RequestEditName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_EditNickName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditNickName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).EditNickName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/EditNickName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).EditNickName(ctx, req.(*RequestEditNickName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_CheckNickName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCheckNickName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).CheckNickName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/CheckNickName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).CheckNickName(ctx, req.(*RequestCheckNickName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_EditAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).EditAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/EditAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).EditAbout(ctx, req.(*RequestEditAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_EditAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).EditAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/EditAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).EditAvatar(ctx, req.(*RequestEditAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_RemoveAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRemoveAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).RemoveAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/RemoveAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).RemoveAvatar(ctx, req.(*RequestRemoveAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_EditMyTimeZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditMyTimeZone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).EditMyTimeZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/EditMyTimeZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).EditMyTimeZone(ctx, req.(*RequestEditMyTimeZone))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_EditMyPreferredLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditMyPreferredLanguages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).EditMyPreferredLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/EditMyPreferredLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).EditMyPreferredLanguages(ctx, req.(*RequestEditMyPreferredLanguages))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_EditSex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditSex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).EditSex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/EditSex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).EditSex(ctx, req.(*RequestEditSex))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_EditCustomProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditCustomProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).EditCustomProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/EditCustomProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).EditCustomProfile(ctx, req.(*RequestEditCustomProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_ChangeUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChangeUserStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).ChangeUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/ChangeUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).ChangeUserStatus(ctx, req.(*RequestChangeUserStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _Profile_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Profile",
	HandlerType: (*ProfileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EditName",
			Handler:    _Profile_EditName_Handler,
		},
		{
			MethodName: "EditNickName",
			Handler:    _Profile_EditNickName_Handler,
		},
		{
			MethodName: "CheckNickName",
			Handler:    _Profile_CheckNickName_Handler,
		},
		{
			MethodName: "EditAbout",
			Handler:    _Profile_EditAbout_Handler,
		},
		{
			MethodName: "EditAvatar",
			Handler:    _Profile_EditAvatar_Handler,
		},
		{
			MethodName: "RemoveAvatar",
			Handler:    _Profile_RemoveAvatar_Handler,
		},
		{
			MethodName: "EditMyTimeZone",
			Handler:    _Profile_EditMyTimeZone_Handler,
		},
		{
			MethodName: "EditMyPreferredLanguages",
			Handler:    _Profile_EditMyPreferredLanguages_Handler,
		},
		{
			MethodName: "EditSex",
			Handler:    _Profile_EditSex_Handler,
		},
		{
			MethodName: "EditCustomProfile",
			Handler:    _Profile_EditCustomProfile_Handler,
		},
		{
			MethodName: "ChangeUserStatus",
			Handler:    _Profile_ChangeUserStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profile.proto",
}

func (m *RequestEditName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *RequestEditNickName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditNickName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Nickname != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProfile(dAtA, i, uint64(m.Nickname.Size()))
		n1, err := m.Nickname.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *RequestCheckNickName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCheckNickName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nickname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	return i, nil
}

func (m *RequestEditAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditAbout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.About != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProfile(dAtA, i, uint64(m.About.Size()))
		n2, err := m.About.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RequestEditAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditAvatar) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FileLocation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProfile(dAtA, i, uint64(m.FileLocation.Size()))
		n3, err := m.FileLocation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ResponseEditAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseEditAvatar) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Avatar != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProfile(dAtA, i, uint64(m.Avatar.Size()))
		n4, err := m.Avatar.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Seq != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProfile(dAtA, i, uint64(m.Seq))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProfile(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	return i, nil
}

func (m *RequestRemoveAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRemoveAvatar) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RequestEditMyTimeZone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditMyTimeZone) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tz) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Tz)))
		i += copy(dAtA[i:], m.Tz)
	}
	return i, nil
}

func (m *RequestEditMyPreferredLanguages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditMyPreferredLanguages) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *RequestEditSex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditSex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProfile(dAtA, i, uint64(m.Sex))
	}
	return i, nil
}

func (m *RequestEditCustomProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditCustomProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CustomProfile) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProfile(dAtA, i, uint64(len(m.CustomProfile)))
		i += copy(dAtA[i:], m.CustomProfile)
	}
	return i, nil
}

func (m *RequestChangeUserStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestChangeUserStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProfile(dAtA, i, uint64(m.Status.Size()))
		n5, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeFixed64Profile(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Profile(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintProfile(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RequestEditName) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func (m *RequestEditNickName) Size() (n int) {
	var l int
	_ = l
	if m.Nickname != nil {
		l = m.Nickname.Size()
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func (m *RequestCheckNickName) Size() (n int) {
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func (m *RequestEditAbout) Size() (n int) {
	var l int
	_ = l
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func (m *RequestEditAvatar) Size() (n int) {
	var l int
	_ = l
	if m.FileLocation != nil {
		l = m.FileLocation.Size()
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func (m *ResponseEditAvatar) Size() (n int) {
	var l int
	_ = l
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovProfile(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovProfile(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func (m *RequestRemoveAvatar) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RequestEditMyTimeZone) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tz)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func (m *RequestEditMyPreferredLanguages) Size() (n int) {
	var l int
	_ = l
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovProfile(uint64(l))
		}
	}
	return n
}

func (m *RequestEditSex) Size() (n int) {
	var l int
	_ = l
	if m.Sex != 0 {
		n += 1 + sovProfile(uint64(m.Sex))
	}
	return n
}

func (m *RequestEditCustomProfile) Size() (n int) {
	var l int
	_ = l
	l = len(m.CustomProfile)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func (m *RequestChangeUserStatus) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func sovProfile(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProfile(x uint64) (n int) {
	return sovProfile(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestEditName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditName{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditNickName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditNickName{`,
		`Nickname:` + strings.Replace(fmt.Sprintf("%v", this.Nickname), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCheckNickName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCheckNickName{`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditAbout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditAbout{`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "google_protobuf.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditAvatar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditAvatar{`,
		`FileLocation:` + strings.Replace(fmt.Sprintf("%v", this.FileLocation), "FileLocation", "FileLocation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseEditAvatar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseEditAvatar{`,
		`Avatar:` + strings.Replace(fmt.Sprintf("%v", this.Avatar), "Avatar", "Avatar", 1) + `,`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRemoveAvatar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRemoveAvatar{`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditMyTimeZone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditMyTimeZone{`,
		`Tz:` + fmt.Sprintf("%v", this.Tz) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditMyPreferredLanguages) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditMyPreferredLanguages{`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditSex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditSex{`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditCustomProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditCustomProfile{`,
		`CustomProfile:` + fmt.Sprintf("%v", this.CustomProfile) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestChangeUserStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestChangeUserStatus{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "UserStatus", "UserStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProfile(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestEditName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditNickName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditNickName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditNickName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nickname == nil {
				m.Nickname = &google_protobuf.StringValue{}
			}
			if err := m.Nickname.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCheckNickName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCheckNickName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCheckNickName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &google_protobuf.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditAvatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditAvatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileLocation == nil {
				m.FileLocation = &FileLocation{}
			}
			if err := m.FileLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseEditAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseEditAvatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseEditAvatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRemoveAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRemoveAvatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRemoveAvatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditMyTimeZone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditMyTimeZone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditMyTimeZone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tz", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tz = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditMyPreferredLanguages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditMyPreferredLanguages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditMyPreferredLanguages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditSex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditSex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditSex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (Sex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditCustomProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditCustomProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditCustomProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomProfile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomProfile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestChangeUserStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestChangeUserStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestChangeUserStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &UserStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProfile(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProfile
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProfile
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProfile(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProfile = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProfile   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("profile.proto", fileDescriptorProfile) }

var fileDescriptorProfile = []byte{
	// 976 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x96, 0xcf, 0x73, 0xdb, 0x44,
	0x14, 0xc7, 0xa3, 0x84, 0xfc, 0xf0, 0x4b, 0x6c, 0x12, 0xc5, 0x69, 0x1c, 0x37, 0x51, 0xcc, 0xb6,
	0xa4, 0x49, 0x00, 0xb9, 0xa4, 0xbd, 0x90, 0x03, 0x81, 0x74, 0x4a, 0x39, 0x14, 0xa6, 0xd8, 0x85,
	0x03, 0x9d, 0xc1, 0xb3, 0x96, 0x9f, 0xdd, 0x25, 0xb2, 0x56, 0xd1, 0x0f, 0xe3, 0x16, 0x66, 0x60,
	0xe0, 0xd6, 0x03, 0xc3, 0x0c, 0xff, 0x04, 0x7f, 0x0a, 0xc7, 0xce, 0xc0, 0x81, 0x23, 0x11, 0x1c,
	0x98, 0x9e, 0xfa, 0x27, 0x30, 0x5a, 0x49, 0xb6, 0x64, 0x6d, 0x31, 0x70, 0xca, 0xe6, 0x7d, 0xf7,
	0xbd, 0xcf, 0x7b, 0xbb, 0xab, 0xef, 0x18, 0x8a, 0xb6, 0xc3, 0xbb, 0xcc, 0x44, 0xdd, 0x76, 0xb8,
	0xc7, 0xd5, 0x85, 0x0e, 0xa3, 0x26, 0xef, 0x55, 0xb5, 0x1e, 0xe7, 0x3d, 0x13, 0xeb, 0x22, 0xda,
	0xf6, 0xbb, 0xf5, 0x2f, 0x1c, 0x6a, 0xdb, 0xe8, 0xb8, 0xd1, 0xbe, 0xea, 0x76, 0xac, 0x53, 0x9b,
	0xd5, 0xa9, 0x65, 0x71, 0x8f, 0x7a, 0x8c, 0x5b, 0x89, 0xba, 0xd6, 0xc1, 0x2e, 0xb3, 0x58, 0x3a,
	0xb4, 0xde, 0x67, 0xae, 0x81, 0xa6, 0x49, 0x2d, 0xe4, 0x7e, 0x12, 0xdc, 0xe8, 0x63, 0x87, 0xd1,
	0x16, 0xb5, 0x3a, 0xad, 0xb0, 0x87, 0x24, 0xbc, 0xec, 0xbb, 0x63, 0xd2, 0x86, 0x6b, 0x50, 0x93,
	0xda, 0xed, 0x7a, 0xfc, 0x37, 0x0a, 0x93, 0x8f, 0xe0, 0xe5, 0x06, 0x9e, 0xfb, 0xe8, 0x7a, 0xb7,
	0x3b, 0xcc, 0xfb, 0x90, 0xf6, 0x51, 0xad, 0xc1, 0x4b, 0x16, 0xed, 0x63, 0x45, 0xa9, 0x29, 0xfb,
	0x85, 0xd3, 0x95, 0x27, 0xcf, 0xae, 0x2f, 0xc1, 0xc2, 0x43, 0xd6, 0xe9, 0xa0, 0xd5, 0x10, 0xca,
	0xf1, 0x76, 0x70, 0xb2, 0x05, 0x9b, 0xac, 0xaf, 0x77, 0xcc, 0x9e, 0xde, 0x73, 0x6c, 0x43, 0xbf,
	0xe3, 0xd8, 0x46, 0x5c, 0x87, 0x7c, 0x05, 0xeb, 0xe9, 0x92, 0xcc, 0x38, 0x13, 0x65, 0xef, 0xc0,
	0x92, 0xc5, 0x8c, 0xb3, 0x51, 0xe9, 0xe5, 0xa3, 0x6d, 0x3d, 0x9a, 0x5e, 0x4f, 0x4e, 0x47, 0x6f,
	0x7a, 0x0e, 0xb3, 0x7a, 0x9f, 0x50, 0xd3, 0xc7, 0xd3, 0xe2, 0x93, 0x67, 0xd7, 0x0b, 0xb0, 0x38,
	0x60, 0x2e, 0x6b, 0x9b, 0xd8, 0x18, 0x25, 0x4f, 0xa1, 0xb7, 0xa0, 0x1c, 0x2f, 0x6f, 0x3d, 0x44,
	0xe3, 0x6c, 0x84, 0x3f, 0x98, 0xc0, 0x17, 0xfe, 0x2f, 0xc0, 0x81, 0xd5, 0xd4, 0x78, 0xef, 0xb6,
	0xb9, 0xef, 0xa9, 0xef, 0xc0, 0x3c, 0x0d, 0x17, 0xff, 0x6a, 0xb0, 0xec, 0x89, 0x46, 0x89, 0x53,
	0x98, 0x5f, 0xc2, 0x5a, 0x9a, 0x39, 0xa0, 0x1e, 0x75, 0xd4, 0xf7, 0xa1, 0x18, 0xde, 0x76, 0xcb,
	0xe4, 0x86, 0x78, 0x35, 0x31, 0xbc, 0xac, 0x47, 0x6f, 0x4f, 0x7f, 0x8f, 0x99, 0x78, 0x37, 0xd6,
	0x92, 0x61, 0x0d, 0xde, 0xb7, 0xa9, 0xe1, 0x35, 0x56, 0xba, 0x29, 0x71, 0x0a, 0xfc, 0x3b, 0x05,
	0xd4, 0x06, 0xba, 0x36, 0xb7, 0x5c, 0x4c, 0xe1, 0xf7, 0x60, 0x81, 0x8a, 0x55, 0xcc, 0x2d, 0x25,
	0xdc, 0x48, 0x6f, 0xc4, 0xaa, 0xba, 0x0a, 0x73, 0x2e, 0x9e, 0x57, 0x66, 0x6b, 0xca, 0xfe, 0x7c,
	0x23, 0x5c, 0xaa, 0x65, 0x98, 0x77, 0x3d, 0xea, 0x61, 0x65, 0xae, 0xa6, 0xec, 0xaf, 0x34, 0xa2,
	0x7f, 0x8e, 0x77, 0x82, 0x93, 0x2a, 0x54, 0xf2, 0x4d, 0x44, 0x60, 0x72, 0x63, 0xf4, 0xaa, 0x1a,
	0xd8, 0xe7, 0x03, 0x8c, 0x28, 0x53, 0x5a, 0xbf, 0x0f, 0x1b, 0xa9, 0x73, 0xfb, 0xe0, 0xd1, 0x7d,
	0xd6, 0xc7, 0x4f, 0xb9, 0x85, 0xea, 0x0e, 0xcc, 0x7a, 0x8f, 0xe5, 0xef, 0x60, 0xd6, 0x7b, 0x3c,
	0xa5, 0xea, 0xd7, 0xb0, 0x9b, 0xa9, 0x7a, 0xcf, 0xc1, 0x2e, 0x3a, 0x0e, 0x76, 0xee, 0x52, 0xab,
	0xe7, 0xd3, 0x1e, 0xba, 0xea, 0xdb, 0xb0, 0x6e, 0x27, 0xd1, 0x96, 0x99, 0x84, 0x2b, 0x4a, 0x6d,
	0x2e, 0x0f, 0x54, 0xed, 0x5c, 0xfe, 0x94, 0x06, 0x1e, 0x40, 0x29, 0xd5, 0x40, 0x13, 0x87, 0xea,
	0x6b, 0xe1, 0x21, 0x0f, 0xc5, 0x40, 0xa5, 0xa3, 0xe5, 0xe4, 0x26, 0x9a, 0x38, 0x9c, 0x78, 0x6d,
	0xe1, 0xae, 0x29, 0xc5, 0x2d, 0xa8, 0xa4, 0x8a, 0xdf, 0xf2, 0x5d, 0x8f, 0xf7, 0xef, 0x45, 0xe6,
	0xa6, 0xde, 0x84, 0x92, 0x21, 0x02, 0xad, 0xd8, 0xee, 0xe4, 0x47, 0x58, 0x34, 0xd2, 0x59, 0x53,
	0xbf, 0xa7, 0xcd, 0xd1, 0x07, 0x4b, 0xad, 0x1e, 0x7e, 0xec, 0xa2, 0xd3, 0xf4, 0xa8, 0xe7, 0xbb,
	0xea, 0x5b, 0xb0, 0xe0, 0x8a, 0x55, 0xfc, 0xc4, 0xd4, 0x64, 0xb0, 0xf1, 0x9e, 0x49, 0x74, 0x9c,
	0xf0, 0xcf, 0xcc, 0xa3, 0x5f, 0x0b, 0xb0, 0x98, 0xcc, 0xf4, 0x19, 0x2c, 0x8d, 0xac, 0x6f, 0x33,
	0x01, 0x4c, 0x78, 0x62, 0x75, 0x7d, 0x2c, 0x44, 0xef, 0xb1, 0x89, 0xe7, 0xe4, 0xea, 0xb7, 0xbf,
	0xfc, 0xf9, 0xe3, 0xac, 0x46, 0xb6, 0xea, 0x83, 0x37, 0xeb, 0x21, 0xa3, 0x1e, 0xd7, 0xac, 0x27,
	0x79, 0xc7, 0xca, 0xa1, 0xfa, 0x39, 0xac, 0x64, 0x7c, 0xf0, 0xb2, 0x8c, 0x11, 0x8b, 0x72, 0xce,
	0xbe, 0xe0, 0x10, 0xb2, 0x23, 0xe7, 0xc4, 0xb9, 0x21, 0xcb, 0x82, 0x62, 0xd6, 0xf5, 0xb6, 0x27,
	0x60, 0x19, 0xb5, 0x5a, 0x9e, 0xa4, 0x9d, 0x72, 0x6e, 0x92, 0x03, 0x81, 0xbb, 0x42, 0xb4, 0x1c,
	0x2e, 0x93, 0x1d, 0xf2, 0x28, 0x14, 0xc6, 0x26, 0x58, 0x91, 0x0c, 0x26, 0x14, 0xf9, 0x54, 0xaf,
	0x0a, 0xcc, 0x2e, 0xa9, 0x4a, 0xa7, 0x12, 0x89, 0x21, 0xe2, 0x0c, 0x20, 0x65, 0x3a, 0x5b, 0x32,
	0x86, 0x90, 0xaa, 0xd5, 0x49, 0xc8, 0x58, 0x23, 0x7b, 0x82, 0x55, 0x23, 0x97, 0xe5, 0xac, 0xc8,
	0x4a, 0xa2, 0xbb, 0x4a, 0xbb, 0x4b, 0xee, 0xae, 0xd2, 0xe2, 0x7f, 0xbd, 0xab, 0x8c, 0x6d, 0x29,
	0x87, 0xaa, 0x0d, 0xa5, 0x49, 0x53, 0x92, 0x0c, 0x37, 0x96, 0xe5, 0xbc, 0x43, 0xc1, 0xbb, 0x4a,
	0x76, 0xa5, 0x93, 0x8d, 0xb3, 0x43, 0xe2, 0xf7, 0x0a, 0x54, 0x5e, 0xe8, 0x58, 0xd7, 0xa4, 0xf0,
	0xfc, 0x46, 0x79, 0x1b, 0x37, 0x45, 0x1b, 0x3a, 0x39, 0x78, 0x41, 0x1b, 0xf9, 0x3a, 0x61, 0x43,
	0x0f, 0x60, 0x31, 0x31, 0xb0, 0x4b, 0x12, 0x7c, 0x13, 0x87, 0x72, 0xda, 0x15, 0x41, 0xdb, 0x21,
	0x15, 0x29, 0xad, 0x89, 0xc3, 0xb0, 0xf8, 0x23, 0x58, 0xcb, 0x1b, 0x58, 0x4d, 0x82, 0xc9, 0xec,
	0x90, 0x03, 0xdf, 0x10, 0xc0, 0x6b, 0x84, 0x48, 0x81, 0x99, 0x02, 0x21, 0x7a, 0x00, 0xab, 0x39,
	0x2f, 0xdb, 0xcd, 0x7d, 0x89, 0xd9, 0x0d, 0x72, 0xf0, 0xeb, 0x02, 0xbc, 0x47, 0x5e, 0x91, 0x7c,
	0x8b, 0xd9, 0xfc, 0x63, 0xe5, 0xf0, 0xf4, 0x76, 0x70, 0x72, 0x09, 0xca, 0x69, 0xd3, 0x73, 0xd1,
	0x19, 0x30, 0x03, 0xdd, 0xa7, 0x17, 0xda, 0xcc, 0x6f, 0x17, 0xda, 0xcc, 0xf3, 0x0b, 0x4d, 0xf9,
	0x26, 0xd0, 0x94, 0x9f, 0x02, 0x4d, 0xf9, 0x39, 0xd0, 0x94, 0xa7, 0x81, 0xa6, 0xfc, 0x1e, 0x68,
	0xca, 0x5f, 0x81, 0x36, 0xf3, 0x3c, 0xd0, 0x94, 0x1f, 0xfe, 0xd0, 0x66, 0xda, 0x0b, 0xe2, 0x67,
	0xcb, 0x8d, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x54, 0xf7, 0x3b, 0xd4, 0x0a, 0x00, 0x00,
}
