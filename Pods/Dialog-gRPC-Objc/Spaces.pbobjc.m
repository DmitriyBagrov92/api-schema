// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spaces.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Spaces.pbobjc.h"
#import "Wrappers.pbobjc.h"
#import "Timestamp.pbobjc.h"
#import "Definitions.pbobjc.h"
#import "Peers.pbobjc.h"
#import "MediaAndFiles.pbobjc.h"
#import "Scalapb.pbobjc.h"
#import "Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Avatar);
GPBObjCClassDeclaration(DataClock);
GPBObjCClassDeclaration(FileLocation);
GPBObjCClassDeclaration(GPBStringValue);
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(Space);
GPBObjCClassDeclaration(SpaceMember);
GPBObjCClassDeclaration(Space_General);
GPBObjCClassDeclaration(Space_Private);
GPBObjCClassDeclaration(Space_Public);
GPBObjCClassDeclaration(UserOutPeer);

#pragma mark - SpacesRoot

@implementation SpacesRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[DefinitionsRoot extensionRegistry]];
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
    [registry addExtensions:[ScalapbRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - SpacesRoot_FileDescriptor

static GPBFileDescriptor *SpacesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"dialog"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Space

@implementation Space

@dynamic spaceTypeOneOfCase;
@dynamic id_p;
@dynamic hasCreatedAt, createdAt;
@dynamic general;
@dynamic public_p;
@dynamic private_p;
@dynamic title;
@dynamic hasAbout, about;
@dynamic hasAvatar, avatar;
@dynamic hasDeletedAt, deletedAt;
@dynamic hasClock, clock;

typedef struct Space__storage_ {
  uint32_t _has_storage_[2];
  NSString *id_p;
  GPBTimestamp *createdAt;
  Space_General *general;
  Space_Public *public_p;
  Space_Private *private_p;
  NSString *title;
  GPBStringValue *about;
  Avatar *avatar;
  GPBTimestamp *deletedAt;
  DataClock *clock;
} Space__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Space_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Space__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Space_FieldNumber_CreatedAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Space__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "general",
        .dataTypeSpecific.clazz = GPBObjCClass(Space_General),
        .number = Space_FieldNumber_General,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Space__storage_, general),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "public_p",
        .dataTypeSpecific.clazz = GPBObjCClass(Space_Public),
        .number = Space_FieldNumber_Public_p,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Space__storage_, public_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "private_p",
        .dataTypeSpecific.clazz = GPBObjCClass(Space_Private),
        .number = Space_FieldNumber_Private_p,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Space__storage_, private_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = Space_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Space__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "about",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = Space_FieldNumber_About,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Space__storage_, about),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.clazz = GPBObjCClass(Avatar),
        .number = Space_FieldNumber_Avatar,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Space__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deletedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Space_FieldNumber_DeletedAt,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Space__storage_, deletedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = GPBObjCClass(DataClock),
        .number = Space_FieldNumber_Clock,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Space__storage_, clock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Space class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Space__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "spaceType",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Space_ClearSpaceTypeOneOfCase(Space *message) {
  GPBDescriptor *descriptor = [Space descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Space_General

@implementation Space_General


typedef struct Space_General__storage_ {
  uint32_t _has_storage_[1];
} Space_General__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Space_General class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(Space_General__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Space)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Space_Public

@implementation Space_Public

@dynamic ownerUserId;
@dynamic shortname;

typedef struct Space_Public__storage_ {
  uint32_t _has_storage_[1];
  NSString *ownerUserId;
  NSString *shortname;
} Space_Public__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerUserId",
        .dataTypeSpecific.clazz = Nil,
        .number = Space_Public_FieldNumber_OwnerUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Space_Public__storage_, ownerUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shortname",
        .dataTypeSpecific.clazz = Nil,
        .number = Space_Public_FieldNumber_Shortname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Space_Public__storage_, shortname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Space_Public class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Space_Public__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Space)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Space_Private

@implementation Space_Private

@dynamic ownerUserId;

typedef struct Space_Private__storage_ {
  uint32_t _has_storage_[1];
  NSString *ownerUserId;
} Space_Private__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerUserId",
        .dataTypeSpecific.clazz = Nil,
        .number = Space_Private_FieldNumber_OwnerUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Space_Private__storage_, ownerUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Space_Private class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Space_Private__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Space)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SpaceMember

@implementation SpaceMember

@dynamic spaceId;
@dynamic userId;
@dynamic hasInvitedAt, invitedAt;
@dynamic hasJoinedAt, joinedAt;
@dynamic hasDeletedAt, deletedAt;
@dynamic hasClock, clock;

typedef struct SpaceMember__storage_ {
  uint32_t _has_storage_[1];
  NSString *spaceId;
  NSString *userId;
  GPBTimestamp *invitedAt;
  GPBTimestamp *joinedAt;
  GPBTimestamp *deletedAt;
  DataClock *clock;
} SpaceMember__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spaceId",
        .dataTypeSpecific.clazz = Nil,
        .number = SpaceMember_FieldNumber_SpaceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SpaceMember__storage_, spaceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SpaceMember_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SpaceMember__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "invitedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SpaceMember_FieldNumber_InvitedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SpaceMember__storage_, invitedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "joinedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SpaceMember_FieldNumber_JoinedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SpaceMember__storage_, joinedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deletedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SpaceMember_FieldNumber_DeletedAt,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SpaceMember__storage_, deletedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = GPBObjCClass(DataClock),
        .number = SpaceMember_FieldNumber_Clock,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SpaceMember__storage_, clock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SpaceMember class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SpaceMember__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateSpaceModified

@implementation UpdateSpaceModified

@dynamic hasSpace, space;

typedef struct UpdateSpaceModified__storage_ {
  uint32_t _has_storage_[1];
  Space *space;
} UpdateSpaceModified__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "space",
        .dataTypeSpecific.clazz = GPBObjCClass(Space),
        .number = UpdateSpaceModified_FieldNumber_Space,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateSpaceModified__storage_, space),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateSpaceModified class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateSpaceModified__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateSpaceMemberModified

@implementation UpdateSpaceMemberModified

@dynamic hasMember, member;

typedef struct UpdateSpaceMemberModified__storage_ {
  uint32_t _has_storage_[1];
  SpaceMember *member;
} UpdateSpaceMemberModified__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "member",
        .dataTypeSpecific.clazz = GPBObjCClass(SpaceMember),
        .number = UpdateSpaceMemberModified_FieldNumber_Member,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateSpaceMemberModified__storage_, member),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateSpaceMemberModified class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateSpaceMemberModified__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestCreateSpace

@implementation RequestCreateSpace

@dynamic requestId;
@dynamic title;
@dynamic hasShortname, shortname;
@dynamic hasAbout, about;
@dynamic hasAvatar, avatar;

typedef struct RequestCreateSpace__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  GPBStringValue *shortname;
  GPBStringValue *about;
  Avatar *avatar;
  int64_t requestId;
} RequestCreateSpace__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestCreateSpace_FieldNumber_RequestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestCreateSpace__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestCreateSpace_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestCreateSpace__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shortname",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = RequestCreateSpace_FieldNumber_Shortname,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestCreateSpace__storage_, shortname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "about",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = RequestCreateSpace_FieldNumber_About,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RequestCreateSpace__storage_, about),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.clazz = GPBObjCClass(Avatar),
        .number = RequestCreateSpace_FieldNumber_Avatar,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RequestCreateSpace__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestCreateSpace class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestCreateSpace__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseSpace

@implementation ResponseSpace

@dynamic hasSpace, space;

typedef struct ResponseSpace__storage_ {
  uint32_t _has_storage_[1];
  Space *space;
} ResponseSpace__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "space",
        .dataTypeSpecific.clazz = GPBObjCClass(Space),
        .number = ResponseSpace_FieldNumber_Space,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseSpace__storage_, space),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseSpace class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseSpace__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseSpaceMember

@implementation ResponseSpaceMember

@dynamic spaceId;
@dynamic hasMember, member;

typedef struct ResponseSpaceMember__storage_ {
  uint32_t _has_storage_[1];
  NSString *spaceId;
  SpaceMember *member;
} ResponseSpaceMember__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spaceId",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseSpaceMember_FieldNumber_SpaceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseSpaceMember__storage_, spaceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "member",
        .dataTypeSpecific.clazz = GPBObjCClass(SpaceMember),
        .number = ResponseSpaceMember_FieldNumber_Member,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ResponseSpaceMember__storage_, member),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseSpaceMember class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseSpaceMember__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestDeleteSpace

@implementation RequestDeleteSpace

@dynamic spaceId;
@dynamic hasClock, clock;

typedef struct RequestDeleteSpace__storage_ {
  uint32_t _has_storage_[1];
  NSString *spaceId;
  DataClock *clock;
} RequestDeleteSpace__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spaceId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestDeleteSpace_FieldNumber_SpaceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestDeleteSpace__storage_, spaceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = GPBObjCClass(DataClock),
        .number = RequestDeleteSpace_FieldNumber_Clock,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestDeleteSpace__storage_, clock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestDeleteSpace class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestDeleteSpace__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestLoadSpaces

@implementation RequestLoadSpaces


typedef struct RequestLoadSpaces__storage_ {
  uint32_t _has_storage_[1];
} RequestLoadSpaces__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestLoadSpaces class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(RequestLoadSpaces__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseLoadSpaces

@implementation ResponseLoadSpaces

@dynamic spaceArray, spaceArray_Count;
@dynamic ownerPeersArray, ownerPeersArray_Count;

typedef struct ResponseLoadSpaces__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *spaceArray;
  NSMutableArray *ownerPeersArray;
} ResponseLoadSpaces__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spaceArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Space),
        .number = ResponseLoadSpaces_FieldNumber_SpaceArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseLoadSpaces__storage_, spaceArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ownerPeersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(UserOutPeer),
        .number = ResponseLoadSpaces_FieldNumber_OwnerPeersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseLoadSpaces__storage_, ownerPeersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseLoadSpaces class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseLoadSpaces__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestStreamSpaceMembers

@implementation RequestStreamSpaceMembers

@dynamic spaceId;
@dynamic hasClock, clock;

typedef struct RequestStreamSpaceMembers__storage_ {
  uint32_t _has_storage_[1];
  NSString *spaceId;
  DataClock *clock;
} RequestStreamSpaceMembers__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spaceId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestStreamSpaceMembers_FieldNumber_SpaceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestStreamSpaceMembers__storage_, spaceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = GPBObjCClass(DataClock),
        .number = RequestStreamSpaceMembers_FieldNumber_Clock,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestStreamSpaceMembers__storage_, clock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestStreamSpaceMembers class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestStreamSpaceMembers__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SpaceMemberWithPeer

@implementation SpaceMemberWithPeer

@dynamic hasMember, member;
@dynamic hasPeer, peer;

typedef struct SpaceMemberWithPeer__storage_ {
  uint32_t _has_storage_[1];
  SpaceMember *member;
  UserOutPeer *peer;
} SpaceMemberWithPeer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "member",
        .dataTypeSpecific.clazz = GPBObjCClass(SpaceMember),
        .number = SpaceMemberWithPeer_FieldNumber_Member,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SpaceMemberWithPeer__storage_, member),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(UserOutPeer),
        .number = SpaceMemberWithPeer_FieldNumber_Peer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SpaceMemberWithPeer__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SpaceMemberWithPeer class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SpaceMemberWithPeer__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestSetTitle

@implementation RequestSetTitle

@dynamic spaceId;
@dynamic title;
@dynamic hasClock, clock;

typedef struct RequestSetTitle__storage_ {
  uint32_t _has_storage_[1];
  NSString *spaceId;
  NSString *title;
  DataClock *clock;
} RequestSetTitle__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spaceId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestSetTitle_FieldNumber_SpaceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestSetTitle__storage_, spaceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestSetTitle_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestSetTitle__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = GPBObjCClass(DataClock),
        .number = RequestSetTitle_FieldNumber_Clock,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestSetTitle__storage_, clock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestSetTitle class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestSetTitle__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestSetShortname

@implementation RequestSetShortname

@dynamic spaceId;
@dynamic hasShortname, shortname;
@dynamic hasClock, clock;

typedef struct RequestSetShortname__storage_ {
  uint32_t _has_storage_[1];
  NSString *spaceId;
  GPBStringValue *shortname;
  DataClock *clock;
} RequestSetShortname__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spaceId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestSetShortname_FieldNumber_SpaceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestSetShortname__storage_, spaceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shortname",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = RequestSetShortname_FieldNumber_Shortname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestSetShortname__storage_, shortname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = GPBObjCClass(DataClock),
        .number = RequestSetShortname_FieldNumber_Clock,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestSetShortname__storage_, clock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestSetShortname class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestSetShortname__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestSetAbout

@implementation RequestSetAbout

@dynamic spaceId;
@dynamic hasAbout, about;
@dynamic hasClock, clock;

typedef struct RequestSetAbout__storage_ {
  uint32_t _has_storage_[1];
  NSString *spaceId;
  GPBStringValue *about;
  DataClock *clock;
} RequestSetAbout__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spaceId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestSetAbout_FieldNumber_SpaceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestSetAbout__storage_, spaceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "about",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = RequestSetAbout_FieldNumber_About,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestSetAbout__storage_, about),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = GPBObjCClass(DataClock),
        .number = RequestSetAbout_FieldNumber_Clock,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestSetAbout__storage_, clock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestSetAbout class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestSetAbout__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestSetAvatar

@implementation RequestSetAvatar

@dynamic spaceId;
@dynamic hasFileLocation, fileLocation;
@dynamic hasClock, clock;

typedef struct RequestSetAvatar__storage_ {
  uint32_t _has_storage_[1];
  NSString *spaceId;
  FileLocation *fileLocation;
  DataClock *clock;
} RequestSetAvatar__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spaceId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestSetAvatar_FieldNumber_SpaceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestSetAvatar__storage_, spaceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileLocation",
        .dataTypeSpecific.clazz = GPBObjCClass(FileLocation),
        .number = RequestSetAvatar_FieldNumber_FileLocation,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestSetAvatar__storage_, fileLocation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = GPBObjCClass(DataClock),
        .number = RequestSetAvatar_FieldNumber_Clock,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestSetAvatar__storage_, clock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestSetAvatar class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestSetAvatar__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestSpaceInvite

@implementation RequestSpaceInvite

@dynamic spaceId;
@dynamic userId;
@dynamic hasClock, clock;

typedef struct RequestSpaceInvite__storage_ {
  uint32_t _has_storage_[1];
  NSString *spaceId;
  NSString *userId;
  DataClock *clock;
} RequestSpaceInvite__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spaceId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestSpaceInvite_FieldNumber_SpaceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestSpaceInvite__storage_, spaceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestSpaceInvite_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestSpaceInvite__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = GPBObjCClass(DataClock),
        .number = RequestSpaceInvite_FieldNumber_Clock,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestSpaceInvite__storage_, clock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestSpaceInvite class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestSpaceInvite__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestSpaceKick

@implementation RequestSpaceKick

@dynamic spaceId;
@dynamic userId;
@dynamic hasClock, clock;

typedef struct RequestSpaceKick__storage_ {
  uint32_t _has_storage_[1];
  NSString *spaceId;
  NSString *userId;
  DataClock *clock;
} RequestSpaceKick__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spaceId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestSpaceKick_FieldNumber_SpaceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestSpaceKick__storage_, spaceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestSpaceKick_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestSpaceKick__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = GPBObjCClass(DataClock),
        .number = RequestSpaceKick_FieldNumber_Clock,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestSpaceKick__storage_, clock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestSpaceKick class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestSpaceKick__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestSpaceLeave

@implementation RequestSpaceLeave

@dynamic spaceId;
@dynamic userId;
@dynamic hasClock, clock;

typedef struct RequestSpaceLeave__storage_ {
  uint32_t _has_storage_[1];
  NSString *spaceId;
  NSString *userId;
  DataClock *clock;
} RequestSpaceLeave__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spaceId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestSpaceLeave_FieldNumber_SpaceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestSpaceLeave__storage_, spaceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestSpaceLeave_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestSpaceLeave__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = GPBObjCClass(DataClock),
        .number = RequestSpaceLeave_FieldNumber_Clock,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestSpaceLeave__storage_, clock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestSpaceLeave class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestSpaceLeave__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestGetSpaceInviteUrl

@implementation RequestGetSpaceInviteUrl

@dynamic spaceId;

typedef struct RequestGetSpaceInviteUrl__storage_ {
  uint32_t _has_storage_[1];
  NSString *spaceId;
} RequestGetSpaceInviteUrl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spaceId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestGetSpaceInviteUrl_FieldNumber_SpaceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestGetSpaceInviteUrl__storage_, spaceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetSpaceInviteUrl class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestGetSpaceInviteUrl__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseSpaceInviteUrl

@implementation ResponseSpaceInviteUrl

@dynamic inviteURL;

typedef struct ResponseSpaceInviteUrl__storage_ {
  uint32_t _has_storage_[1];
  NSString *inviteURL;
} ResponseSpaceInviteUrl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inviteURL",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseSpaceInviteUrl_FieldNumber_InviteURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseSpaceInviteUrl__storage_, inviteURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseSpaceInviteUrl class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseSpaceInviteUrl__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestRevokeSpaceInviteUrl

@implementation RequestRevokeSpaceInviteUrl

@dynamic spaceId;

typedef struct RequestRevokeSpaceInviteUrl__storage_ {
  uint32_t _has_storage_[1];
  NSString *spaceId;
} RequestRevokeSpaceInviteUrl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spaceId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestRevokeSpaceInviteUrl_FieldNumber_SpaceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestRevokeSpaceInviteUrl__storage_, spaceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestRevokeSpaceInviteUrl class]
                                     rootClass:[SpacesRoot class]
                                          file:SpacesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestRevokeSpaceInviteUrl__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
