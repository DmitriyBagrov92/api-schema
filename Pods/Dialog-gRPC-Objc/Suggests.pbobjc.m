// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: suggests.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Suggests.pbobjc.h"
#import "Empty.pbobjc.h"
#import "Definitions.pbobjc.h"
#import "Peers.pbobjc.h"
#import "Scalapb.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(MessageSuggests);
GPBObjCClassDeclaration(Peer);
GPBObjCClassDeclaration(UUIDValue);

#pragma mark - SuggestsRoot

@implementation SuggestsRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[DefinitionsRoot extensionRegistry]];
    [registry addExtensions:[ScalapbRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - SuggestsRoot_FileDescriptor

static GPBFileDescriptor *SuggestsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"dialog"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MessageSuggests

@implementation MessageSuggests

@dynamic hasMessageId, messageId;
@dynamic suggestsPayload;

typedef struct MessageSuggests__storage_ {
  uint32_t _has_storage_[1];
  UUIDValue *messageId;
  NSString *suggestsPayload;
} MessageSuggests__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = MessageSuggests_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageSuggests__storage_, messageId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "suggestsPayload",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageSuggests_FieldNumber_SuggestsPayload,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessageSuggests__storage_, suggestsPayload),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageSuggests class]
                                     rootClass:[SuggestsRoot class]
                                          file:SuggestsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageSuggests__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateSuggests

@implementation UpdateSuggests

@dynamic clock;
@dynamic prevClock;
@dynamic hasPeer, peer;
@dynamic hasMessageSuggests, messageSuggests;

typedef struct UpdateSuggests__storage_ {
  uint32_t _has_storage_[1];
  Peer *peer;
  MessageSuggests *messageSuggests;
  int64_t clock;
  int64_t prevClock;
} UpdateSuggests__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clock",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateSuggests_FieldNumber_Clock,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateSuggests__storage_, clock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "prevClock",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateSuggests_FieldNumber_PrevClock,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateSuggests__storage_, prevClock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = UpdateSuggests_FieldNumber_Peer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateSuggests__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messageSuggests",
        .dataTypeSpecific.clazz = GPBObjCClass(MessageSuggests),
        .number = UpdateSuggests_FieldNumber_MessageSuggests,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UpdateSuggests__storage_, messageSuggests),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateSuggests class]
                                     rootClass:[SuggestsRoot class]
                                          file:SuggestsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateSuggests__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestLoadSuggests

@implementation RequestLoadSuggests

@dynamic fromClock;
@dynamic hasPeer, peer;

typedef struct RequestLoadSuggests__storage_ {
  uint32_t _has_storage_[1];
  Peer *peer;
  int64_t fromClock;
} RequestLoadSuggests__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromClock",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestLoadSuggests_FieldNumber_FromClock,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestLoadSuggests__storage_, fromClock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = RequestLoadSuggests_FieldNumber_Peer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestLoadSuggests__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestLoadSuggests class]
                                     rootClass:[SuggestsRoot class]
                                          file:SuggestsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestLoadSuggests__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseLoadSuggests

@implementation ResponseLoadSuggests

@dynamic clock;
@dynamic suggestsArray, suggestsArray_Count;
@dynamic moreAvailable;

typedef struct ResponseLoadSuggests__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *suggestsArray;
  int64_t clock;
} ResponseLoadSuggests__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clock",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseLoadSuggests_FieldNumber_Clock,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseLoadSuggests__storage_, clock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "suggestsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MessageSuggests),
        .number = ResponseLoadSuggests_FieldNumber_SuggestsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseLoadSuggests__storage_, suggestsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "moreAvailable",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseLoadSuggests_FieldNumber_MoreAvailable,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseLoadSuggests class]
                                     rootClass:[SuggestsRoot class]
                                          file:SuggestsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseLoadSuggests__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestLoadMessageSuggests

@implementation RequestLoadMessageSuggests

@dynamic hasPeer, peer;
@dynamic messageIdsArray, messageIdsArray_Count;

typedef struct RequestLoadMessageSuggests__storage_ {
  uint32_t _has_storage_[1];
  Peer *peer;
  NSMutableArray *messageIdsArray;
} RequestLoadMessageSuggests__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = RequestLoadMessageSuggests_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestLoadMessageSuggests__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messageIdsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = RequestLoadMessageSuggests_FieldNumber_MessageIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestLoadMessageSuggests__storage_, messageIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestLoadMessageSuggests class]
                                     rootClass:[SuggestsRoot class]
                                          file:SuggestsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestLoadMessageSuggests__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseLoadMessageSuggests

@implementation ResponseLoadMessageSuggests

@dynamic messageSuggestsArray, messageSuggestsArray_Count;

typedef struct ResponseLoadMessageSuggests__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *messageSuggestsArray;
} ResponseLoadMessageSuggests__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageSuggestsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MessageSuggests),
        .number = ResponseLoadMessageSuggests_FieldNumber_MessageSuggestsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseLoadMessageSuggests__storage_, messageSuggestsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseLoadMessageSuggests class]
                                     rootClass:[SuggestsRoot class]
                                          file:SuggestsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseLoadMessageSuggests__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestSendSuggestAction

@implementation RequestSendSuggestAction

@dynamic requestId;
@dynamic suggestId;
@dynamic hasMessageId, messageId;
@dynamic hasPeer, peer;
@dynamic payload;

typedef struct RequestSendSuggestAction__storage_ {
  uint32_t _has_storage_[1];
  NSString *suggestId;
  UUIDValue *messageId;
  Peer *peer;
  NSString *payload;
  int64_t requestId;
} RequestSendSuggestAction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestSendSuggestAction_FieldNumber_RequestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestSendSuggestAction__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "suggestId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestSendSuggestAction_FieldNumber_SuggestId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestSendSuggestAction__storage_, suggestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = RequestSendSuggestAction_FieldNumber_MessageId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestSendSuggestAction__storage_, messageId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = RequestSendSuggestAction_FieldNumber_Peer,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RequestSendSuggestAction__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "payload",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestSendSuggestAction_FieldNumber_Payload,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RequestSendSuggestAction__storage_, payload),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestSendSuggestAction class]
                                     rootClass:[SuggestsRoot class]
                                          file:SuggestsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestSendSuggestAction__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
