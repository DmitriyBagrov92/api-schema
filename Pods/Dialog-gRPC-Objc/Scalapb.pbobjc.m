// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scalapb.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Scalapb.pbobjc.h"
#import "Descriptor.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(EnumOptions);
GPBObjCClassDeclaration(EnumValueOptions);
GPBObjCClassDeclaration(FieldOptions);
GPBObjCClassDeclaration(GPBEnumOptions);
GPBObjCClassDeclaration(GPBEnumValueOptions);
GPBObjCClassDeclaration(GPBFieldOptions);
GPBObjCClassDeclaration(GPBFileOptions);
GPBObjCClassDeclaration(GPBMessageOptions);
GPBObjCClassDeclaration(GPBOneofOptions);
GPBObjCClassDeclaration(MessageOptions);
GPBObjCClassDeclaration(OneofOptions);
GPBObjCClassDeclaration(ScalaPbOptions);
GPBObjCClassDeclaration(ScalaPbOptions_AuxEnumOptions);
GPBObjCClassDeclaration(ScalaPbOptions_AuxFieldOptions);
GPBObjCClassDeclaration(ScalaPbOptions_AuxMessageOptions);

#pragma mark - ScalapbRoot

@implementation ScalapbRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    static GPBExtensionDescription descriptions[] = {
      {
        .defaultValue.valueMessage = nil,
        .singletonName = GPBStringifySymbol(ScalapbRoot_options),
        .extendedClass.clazz = GPBObjCClass(GPBFileOptions),
        .messageOrGroupClass.clazz = GPBObjCClass(ScalaPbOptions),
        .enumDescriptorFunc = NULL,
        .fieldNumber = 1020,
        .dataType = GPBDataTypeMessage,
        .options = GPBExtensionNone,
      },
      {
        .defaultValue.valueMessage = nil,
        .singletonName = GPBStringifySymbol(ScalapbRoot_message),
        .extendedClass.clazz = GPBObjCClass(GPBMessageOptions),
        .messageOrGroupClass.clazz = GPBObjCClass(MessageOptions),
        .enumDescriptorFunc = NULL,
        .fieldNumber = 1020,
        .dataType = GPBDataTypeMessage,
        .options = GPBExtensionNone,
      },
      {
        .defaultValue.valueMessage = nil,
        .singletonName = GPBStringifySymbol(ScalapbRoot_field),
        .extendedClass.clazz = GPBObjCClass(GPBFieldOptions),
        .messageOrGroupClass.clazz = GPBObjCClass(FieldOptions),
        .enumDescriptorFunc = NULL,
        .fieldNumber = 1020,
        .dataType = GPBDataTypeMessage,
        .options = GPBExtensionNone,
      },
      {
        .defaultValue.valueMessage = nil,
        .singletonName = GPBStringifySymbol(ScalapbRoot_enumOptions),
        .extendedClass.clazz = GPBObjCClass(GPBEnumOptions),
        .messageOrGroupClass.clazz = GPBObjCClass(EnumOptions),
        .enumDescriptorFunc = NULL,
        .fieldNumber = 1020,
        .dataType = GPBDataTypeMessage,
        .options = GPBExtensionNone,
      },
      {
        .defaultValue.valueMessage = nil,
        .singletonName = GPBStringifySymbol(ScalapbRoot_enumValue),
        .extendedClass.clazz = GPBObjCClass(GPBEnumValueOptions),
        .messageOrGroupClass.clazz = GPBObjCClass(EnumValueOptions),
        .enumDescriptorFunc = NULL,
        .fieldNumber = 1020,
        .dataType = GPBDataTypeMessage,
        .options = GPBExtensionNone,
      },
      {
        .defaultValue.valueMessage = nil,
        .singletonName = GPBStringifySymbol(ScalapbRoot_oneof),
        .extendedClass.clazz = GPBObjCClass(GPBOneofOptions),
        .messageOrGroupClass.clazz = GPBObjCClass(OneofOptions),
        .enumDescriptorFunc = NULL,
        .fieldNumber = 1020,
        .dataType = GPBDataTypeMessage,
        .options = GPBExtensionNone,
      },
    };
    for (size_t i = 0; i < sizeof(descriptions) / sizeof(descriptions[0]); ++i) {
      GPBExtensionDescriptor *extension =
          [[GPBExtensionDescriptor alloc] initWithExtensionDescription:&descriptions[i]
                                                         usesClassRefs:YES];
      [registry addExtension:extension];
      [self globallyRegisterExtension:extension];
      [extension release];
    }
    // None of the imports (direct or indirect) defined extensions, so no need to add
    // them to this registry.
  }
  return registry;
}

@end

#pragma mark - ScalapbRoot_FileDescriptor

static GPBFileDescriptor *ScalapbRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"scalapb"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ScalaPbOptions

@implementation ScalaPbOptions

@dynamic hasPackageName, packageName;
@dynamic hasFlatPackage, flatPackage;
@dynamic importArray, importArray_Count;
@dynamic preambleArray, preambleArray_Count;
@dynamic hasSingleFile, singleFile;
@dynamic hasNoPrimitiveWrappers, noPrimitiveWrappers;
@dynamic hasPrimitiveWrappers, primitiveWrappers;
@dynamic hasCollectionType, collectionType;
@dynamic hasPreserveUnknownFields, preserveUnknownFields;
@dynamic hasObjectName, objectName;
@dynamic hasScope, scope;
@dynamic hasLenses, lenses;
@dynamic hasRetainSourceCodeInfo, retainSourceCodeInfo;
@dynamic hasMapType, mapType;
@dynamic hasNoDefaultValuesInConstructor, noDefaultValuesInConstructor;
@dynamic hasEnumValueNaming, enumValueNaming;
@dynamic hasEnumStripPrefix, enumStripPrefix;
@dynamic auxMessageOptionsArray, auxMessageOptionsArray_Count;
@dynamic auxFieldOptionsArray, auxFieldOptionsArray_Count;
@dynamic auxEnumOptionsArray, auxEnumOptionsArray_Count;
@dynamic hasBytesType, bytesType;
@dynamic hasTestOnlyNoJavaConversions, testOnlyNoJavaConversions;

typedef struct ScalaPbOptions__storage_ {
  uint32_t _has_storage_[1];
  ScalaPbOptions_OptionsScope scope;
  ScalaPbOptions_EnumValueNaming enumValueNaming;
  NSString *packageName;
  NSMutableArray *importArray;
  NSMutableArray *preambleArray;
  NSString *collectionType;
  NSString *objectName;
  NSString *mapType;
  NSMutableArray *auxMessageOptionsArray;
  NSMutableArray *auxFieldOptionsArray;
  NSMutableArray *auxEnumOptionsArray;
  NSString *bytesType;
} ScalaPbOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueString = nil,
        .core.name = "packageName",
        .core.dataTypeSpecific.clazz = Nil,
        .core.number = ScalaPbOptions_FieldNumber_PackageName,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(ScalaPbOptions__storage_, packageName),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "flatPackage",
        .core.dataTypeSpecific.clazz = Nil,
        .core.number = ScalaPbOptions_FieldNumber_FlatPackage,
        .core.hasIndex = 1,
        .core.offset = 2,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "importArray",
        .core.dataTypeSpecific.clazz = Nil,
        .core.number = ScalaPbOptions_FieldNumber_ImportArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(ScalaPbOptions__storage_, importArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "preambleArray",
        .core.dataTypeSpecific.clazz = Nil,
        .core.number = ScalaPbOptions_FieldNumber_PreambleArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(ScalaPbOptions__storage_, preambleArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "singleFile",
        .core.dataTypeSpecific.clazz = Nil,
        .core.number = ScalaPbOptions_FieldNumber_SingleFile,
        .core.hasIndex = 3,
        .core.offset = 4,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "primitiveWrappers",
        .core.dataTypeSpecific.clazz = Nil,
        .core.number = ScalaPbOptions_FieldNumber_PrimitiveWrappers,
        .core.hasIndex = 7,
        .core.offset = 8,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "noPrimitiveWrappers",
        .core.dataTypeSpecific.clazz = Nil,
        .core.number = ScalaPbOptions_FieldNumber_NoPrimitiveWrappers,
        .core.hasIndex = 5,
        .core.offset = 6,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "collectionType",
        .core.dataTypeSpecific.clazz = Nil,
        .core.number = ScalaPbOptions_FieldNumber_CollectionType,
        .core.hasIndex = 9,
        .core.offset = (uint32_t)offsetof(ScalaPbOptions__storage_, collectionType),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueBool = YES,
        .core.name = "preserveUnknownFields",
        .core.dataTypeSpecific.clazz = Nil,
        .core.number = ScalaPbOptions_FieldNumber_PreserveUnknownFields,
        .core.hasIndex = 10,
        .core.offset = 11,  // Stored in _has_storage_ to save space.
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "objectName",
        .core.dataTypeSpecific.clazz = Nil,
        .core.number = ScalaPbOptions_FieldNumber_ObjectName,
        .core.hasIndex = 12,
        .core.offset = (uint32_t)offsetof(ScalaPbOptions__storage_, objectName),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueEnum = ScalaPbOptions_OptionsScope_File,
        .core.name = "scope",
        .core.dataTypeSpecific.enumDescFunc = ScalaPbOptions_OptionsScope_EnumDescriptor,
        .core.number = ScalaPbOptions_FieldNumber_Scope,
        .core.hasIndex = 13,
        .core.offset = (uint32_t)offsetof(ScalaPbOptions__storage_, scope),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueBool = YES,
        .core.name = "lenses",
        .core.dataTypeSpecific.clazz = Nil,
        .core.number = ScalaPbOptions_FieldNumber_Lenses,
        .core.hasIndex = 14,
        .core.offset = 15,  // Stored in _has_storage_ to save space.
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "retainSourceCodeInfo",
        .core.dataTypeSpecific.clazz = Nil,
        .core.number = ScalaPbOptions_FieldNumber_RetainSourceCodeInfo,
        .core.hasIndex = 16,
        .core.offset = 17,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "mapType",
        .core.dataTypeSpecific.clazz = Nil,
        .core.number = ScalaPbOptions_FieldNumber_MapType,
        .core.hasIndex = 18,
        .core.offset = (uint32_t)offsetof(ScalaPbOptions__storage_, mapType),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "noDefaultValuesInConstructor",
        .core.dataTypeSpecific.clazz = Nil,
        .core.number = ScalaPbOptions_FieldNumber_NoDefaultValuesInConstructor,
        .core.hasIndex = 19,
        .core.offset = 20,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueEnum = ScalaPbOptions_EnumValueNaming_AsInProto,
        .core.name = "enumValueNaming",
        .core.dataTypeSpecific.enumDescFunc = ScalaPbOptions_EnumValueNaming_EnumDescriptor,
        .core.number = ScalaPbOptions_FieldNumber_EnumValueNaming,
        .core.hasIndex = 21,
        .core.offset = (uint32_t)offsetof(ScalaPbOptions__storage_, enumValueNaming),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "enumStripPrefix",
        .core.dataTypeSpecific.clazz = Nil,
        .core.number = ScalaPbOptions_FieldNumber_EnumStripPrefix,
        .core.hasIndex = 22,
        .core.offset = 23,  // Stored in _has_storage_ to save space.
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "auxMessageOptionsArray",
        .core.dataTypeSpecific.clazz = GPBObjCClass(ScalaPbOptions_AuxMessageOptions),
        .core.number = ScalaPbOptions_FieldNumber_AuxMessageOptionsArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(ScalaPbOptions__storage_, auxMessageOptionsArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "auxFieldOptionsArray",
        .core.dataTypeSpecific.clazz = GPBObjCClass(ScalaPbOptions_AuxFieldOptions),
        .core.number = ScalaPbOptions_FieldNumber_AuxFieldOptionsArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(ScalaPbOptions__storage_, auxFieldOptionsArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "auxEnumOptionsArray",
        .core.dataTypeSpecific.clazz = GPBObjCClass(ScalaPbOptions_AuxEnumOptions),
        .core.number = ScalaPbOptions_FieldNumber_AuxEnumOptionsArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(ScalaPbOptions__storage_, auxEnumOptionsArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "bytesType",
        .core.dataTypeSpecific.clazz = Nil,
        .core.number = ScalaPbOptions_FieldNumber_BytesType,
        .core.hasIndex = 24,
        .core.offset = (uint32_t)offsetof(ScalaPbOptions__storage_, bytesType),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "testOnlyNoJavaConversions",
        .core.dataTypeSpecific.clazz = Nil,
        .core.number = ScalaPbOptions_FieldNumber_TestOnlyNoJavaConversions,
        .core.hasIndex = 25,
        .core.offset = 26,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ScalaPbOptions class]
                                     rootClass:[ScalapbRoot class]
                                          file:ScalapbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(ScalaPbOptions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_FieldsWithDefault)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ScalaPbOptions_OptionsScope

GPBEnumDescriptor *ScalaPbOptions_OptionsScope_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "File\000Package\000";
    static const int32_t values[] = {
        ScalaPbOptions_OptionsScope_File,
        ScalaPbOptions_OptionsScope_Package,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ScalaPbOptions_OptionsScope)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ScalaPbOptions_OptionsScope_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ScalaPbOptions_OptionsScope_IsValidValue(int32_t value__) {
  switch (value__) {
    case ScalaPbOptions_OptionsScope_File:
    case ScalaPbOptions_OptionsScope_Package:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ScalaPbOptions_EnumValueNaming

GPBEnumDescriptor *ScalaPbOptions_EnumValueNaming_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AsInProto\000CamelCase\000";
    static const int32_t values[] = {
        ScalaPbOptions_EnumValueNaming_AsInProto,
        ScalaPbOptions_EnumValueNaming_CamelCase,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ScalaPbOptions_EnumValueNaming)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ScalaPbOptions_EnumValueNaming_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ScalaPbOptions_EnumValueNaming_IsValidValue(int32_t value__) {
  switch (value__) {
    case ScalaPbOptions_EnumValueNaming_AsInProto:
    case ScalaPbOptions_EnumValueNaming_CamelCase:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ScalaPbOptions_AuxMessageOptions

@implementation ScalaPbOptions_AuxMessageOptions

@dynamic hasTarget, target;
@dynamic hasOptions, options;

typedef struct ScalaPbOptions_AuxMessageOptions__storage_ {
  uint32_t _has_storage_[1];
  NSString *target;
  MessageOptions *options;
} ScalaPbOptions_AuxMessageOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "target",
        .dataTypeSpecific.clazz = Nil,
        .number = ScalaPbOptions_AuxMessageOptions_FieldNumber_Target,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ScalaPbOptions_AuxMessageOptions__storage_, target),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "options",
        .dataTypeSpecific.clazz = GPBObjCClass(MessageOptions),
        .number = ScalaPbOptions_AuxMessageOptions_FieldNumber_Options,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ScalaPbOptions_AuxMessageOptions__storage_, options),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ScalaPbOptions_AuxMessageOptions class]
                                     rootClass:[ScalapbRoot class]
                                          file:ScalapbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ScalaPbOptions_AuxMessageOptions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(ScalaPbOptions)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ScalaPbOptions_AuxFieldOptions

@implementation ScalaPbOptions_AuxFieldOptions

@dynamic hasTarget, target;
@dynamic hasOptions, options;

typedef struct ScalaPbOptions_AuxFieldOptions__storage_ {
  uint32_t _has_storage_[1];
  NSString *target;
  FieldOptions *options;
} ScalaPbOptions_AuxFieldOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "target",
        .dataTypeSpecific.clazz = Nil,
        .number = ScalaPbOptions_AuxFieldOptions_FieldNumber_Target,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ScalaPbOptions_AuxFieldOptions__storage_, target),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "options",
        .dataTypeSpecific.clazz = GPBObjCClass(FieldOptions),
        .number = ScalaPbOptions_AuxFieldOptions_FieldNumber_Options,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ScalaPbOptions_AuxFieldOptions__storage_, options),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ScalaPbOptions_AuxFieldOptions class]
                                     rootClass:[ScalapbRoot class]
                                          file:ScalapbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ScalaPbOptions_AuxFieldOptions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(ScalaPbOptions)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ScalaPbOptions_AuxEnumOptions

@implementation ScalaPbOptions_AuxEnumOptions

@dynamic hasTarget, target;
@dynamic hasOptions, options;

typedef struct ScalaPbOptions_AuxEnumOptions__storage_ {
  uint32_t _has_storage_[1];
  NSString *target;
  EnumOptions *options;
} ScalaPbOptions_AuxEnumOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "target",
        .dataTypeSpecific.clazz = Nil,
        .number = ScalaPbOptions_AuxEnumOptions_FieldNumber_Target,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ScalaPbOptions_AuxEnumOptions__storage_, target),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "options",
        .dataTypeSpecific.clazz = GPBObjCClass(EnumOptions),
        .number = ScalaPbOptions_AuxEnumOptions_FieldNumber_Options,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ScalaPbOptions_AuxEnumOptions__storage_, options),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ScalaPbOptions_AuxEnumOptions class]
                                     rootClass:[ScalapbRoot class]
                                          file:ScalapbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ScalaPbOptions_AuxEnumOptions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(ScalaPbOptions)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessageOptions

@implementation MessageOptions

@dynamic extendsArray, extendsArray_Count;
@dynamic companionExtendsArray, companionExtendsArray_Count;
@dynamic annotationsArray, annotationsArray_Count;
@dynamic hasType, type;
@dynamic companionAnnotationsArray, companionAnnotationsArray_Count;
@dynamic sealedOneofExtendsArray, sealedOneofExtendsArray_Count;
@dynamic hasNoBox, noBox;

typedef struct MessageOptions__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *extendsArray;
  NSMutableArray *companionExtendsArray;
  NSMutableArray *annotationsArray;
  NSString *type;
  NSMutableArray *companionAnnotationsArray;
  NSMutableArray *sealedOneofExtendsArray;
} MessageOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "extendsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageOptions_FieldNumber_ExtendsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MessageOptions__storage_, extendsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "companionExtendsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageOptions_FieldNumber_CompanionExtendsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MessageOptions__storage_, companionExtendsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "annotationsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageOptions_FieldNumber_AnnotationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MessageOptions__storage_, annotationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageOptions_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageOptions__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "companionAnnotationsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageOptions_FieldNumber_CompanionAnnotationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MessageOptions__storage_, companionAnnotationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sealedOneofExtendsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageOptions_FieldNumber_SealedOneofExtendsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MessageOptions__storage_, sealedOneofExtendsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "noBox",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageOptions_FieldNumber_NoBox,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageOptions class]
                                     rootClass:[ScalapbRoot class]
                                          file:ScalapbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageOptions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FieldOptions

@implementation FieldOptions

@dynamic hasType, type;
@dynamic hasScalaName, scalaName;
@dynamic hasCollectionType, collectionType;
@dynamic hasKeyType, keyType;
@dynamic hasValueType, valueType;
@dynamic annotationsArray, annotationsArray_Count;
@dynamic hasMapType, mapType;
@dynamic hasNoBox, noBox;

typedef struct FieldOptions__storage_ {
  uint32_t _has_storage_[1];
  NSString *type;
  NSString *scalaName;
  NSString *collectionType;
  NSString *keyType;
  NSString *valueType;
  NSMutableArray *annotationsArray;
  NSString *mapType;
} FieldOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = FieldOptions_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FieldOptions__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scalaName",
        .dataTypeSpecific.clazz = Nil,
        .number = FieldOptions_FieldNumber_ScalaName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FieldOptions__storage_, scalaName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "collectionType",
        .dataTypeSpecific.clazz = Nil,
        .number = FieldOptions_FieldNumber_CollectionType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FieldOptions__storage_, collectionType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "keyType",
        .dataTypeSpecific.clazz = Nil,
        .number = FieldOptions_FieldNumber_KeyType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FieldOptions__storage_, keyType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "valueType",
        .dataTypeSpecific.clazz = Nil,
        .number = FieldOptions_FieldNumber_ValueType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(FieldOptions__storage_, valueType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "annotationsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = FieldOptions_FieldNumber_AnnotationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FieldOptions__storage_, annotationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mapType",
        .dataTypeSpecific.clazz = Nil,
        .number = FieldOptions_FieldNumber_MapType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(FieldOptions__storage_, mapType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "noBox",
        .dataTypeSpecific.clazz = Nil,
        .number = FieldOptions_FieldNumber_NoBox,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FieldOptions class]
                                     rootClass:[ScalapbRoot class]
                                          file:ScalapbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FieldOptions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EnumOptions

@implementation EnumOptions

@dynamic extendsArray, extendsArray_Count;
@dynamic companionExtendsArray, companionExtendsArray_Count;
@dynamic hasType, type;

typedef struct EnumOptions__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *extendsArray;
  NSMutableArray *companionExtendsArray;
  NSString *type;
} EnumOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "extendsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = EnumOptions_FieldNumber_ExtendsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(EnumOptions__storage_, extendsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "companionExtendsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = EnumOptions_FieldNumber_CompanionExtendsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(EnumOptions__storage_, companionExtendsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = EnumOptions_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EnumOptions__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EnumOptions class]
                                     rootClass:[ScalapbRoot class]
                                          file:ScalapbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EnumOptions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EnumValueOptions

@implementation EnumValueOptions

@dynamic extendsArray, extendsArray_Count;
@dynamic hasScalaName, scalaName;

typedef struct EnumValueOptions__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *extendsArray;
  NSString *scalaName;
} EnumValueOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "extendsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = EnumValueOptions_FieldNumber_ExtendsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(EnumValueOptions__storage_, extendsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scalaName",
        .dataTypeSpecific.clazz = Nil,
        .number = EnumValueOptions_FieldNumber_ScalaName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EnumValueOptions__storage_, scalaName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EnumValueOptions class]
                                     rootClass:[ScalapbRoot class]
                                          file:ScalapbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EnumValueOptions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OneofOptions

@implementation OneofOptions

@dynamic extendsArray, extendsArray_Count;

typedef struct OneofOptions__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *extendsArray;
} OneofOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "extendsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = OneofOptions_FieldNumber_ExtendsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OneofOptions__storage_, extendsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OneofOptions class]
                                     rootClass:[ScalapbRoot class]
                                          file:ScalapbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OneofOptions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
