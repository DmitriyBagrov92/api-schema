// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reactions.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Reactions.pbobjc.h"
#import "Empty.pbobjc.h"
#import "Annotations.pbobjc.h"
#import "Peers.pbobjc.h"
#import "Definitions.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(MessageReactions);
GPBObjCClassDeclaration(MessageReactionsParticipants);
GPBObjCClassDeclaration(Peer);
GPBObjCClassDeclaration(Reaction);
GPBObjCClassDeclaration(ReactionParticipants);
GPBObjCClassDeclaration(UUIDValue);
GPBObjCClassDeclaration(UpdateErrorCause);

#pragma mark - ReactionsRoot

@implementation ReactionsRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
    [registry addExtensions:[DefinitionsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ReactionsRoot_FileDescriptor

static GPBFileDescriptor *ReactionsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"dialog"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Reaction

@implementation Reaction

@dynamic code;
@dynamic usersAmount;
@dynamic isSet;

typedef struct Reaction__storage_ {
  uint32_t _has_storage_[1];
  int32_t usersAmount;
  NSString *code;
} Reaction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = Reaction_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Reaction__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usersAmount",
        .dataTypeSpecific.clazz = Nil,
        .number = Reaction_FieldNumber_UsersAmount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Reaction__storage_, usersAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isSet",
        .dataTypeSpecific.clazz = Nil,
        .number = Reaction_FieldNumber_IsSet,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Reaction class]
                                     rootClass:[ReactionsRoot class]
                                          file:ReactionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Reaction__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessageReactions

@implementation MessageReactions

@dynamic hasMid, mid;
@dynamic reactionsArray, reactionsArray_Count;

typedef struct MessageReactions__storage_ {
  uint32_t _has_storage_[1];
  UUIDValue *mid;
  NSMutableArray *reactionsArray;
} MessageReactions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = MessageReactions_FieldNumber_Mid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageReactions__storage_, mid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reactionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Reaction),
        .number = MessageReactions_FieldNumber_ReactionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MessageReactions__storage_, reactionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageReactions class]
                                     rootClass:[ReactionsRoot class]
                                          file:ReactionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageReactions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReactionParticipants

@implementation ReactionParticipants

@dynamic code;
@dynamic usersArray, usersArray_Count;
@dynamic usersAmount;
@dynamic isSet;

typedef struct ReactionParticipants__storage_ {
  uint32_t _has_storage_[1];
  int32_t usersAmount;
  NSString *code;
  NSMutableArray *usersArray;
} ReactionParticipants__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = ReactionParticipants_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReactionParticipants__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usersArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ReactionParticipants_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ReactionParticipants__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usersAmount",
        .dataTypeSpecific.clazz = Nil,
        .number = ReactionParticipants_FieldNumber_UsersAmount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReactionParticipants__storage_, usersAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isSet",
        .dataTypeSpecific.clazz = Nil,
        .number = ReactionParticipants_FieldNumber_IsSet,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReactionParticipants class]
                                     rootClass:[ReactionsRoot class]
                                          file:ReactionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReactionParticipants__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessageReactionsParticipants

@implementation MessageReactionsParticipants

@dynamic hasMid, mid;
@dynamic reactionsArray, reactionsArray_Count;

typedef struct MessageReactionsParticipants__storage_ {
  uint32_t _has_storage_[1];
  UUIDValue *mid;
  NSMutableArray *reactionsArray;
} MessageReactionsParticipants__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = MessageReactionsParticipants_FieldNumber_Mid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageReactionsParticipants__storage_, mid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reactionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ReactionParticipants),
        .number = MessageReactionsParticipants_FieldNumber_ReactionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MessageReactionsParticipants__storage_, reactionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageReactionsParticipants class]
                                     rootClass:[ReactionsRoot class]
                                          file:ReactionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageReactionsParticipants__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateMessageReactions

@implementation UpdateMessageReactions

@dynamic hasPeer, peer;
@dynamic hasMessageReaction, messageReaction;
@dynamic peerClock;
@dynamic prevPeerClock;

typedef struct UpdateMessageReactions__storage_ {
  uint32_t _has_storage_[1];
  Peer *peer;
  MessageReactions *messageReaction;
  int64_t peerClock;
  int64_t prevPeerClock;
} UpdateMessageReactions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = UpdateMessageReactions_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateMessageReactions__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messageReaction",
        .dataTypeSpecific.clazz = GPBObjCClass(MessageReactions),
        .number = UpdateMessageReactions_FieldNumber_MessageReaction,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateMessageReactions__storage_, messageReaction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "peerClock",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateMessageReactions_FieldNumber_PeerClock,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateMessageReactions__storage_, peerClock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "prevPeerClock",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateMessageReactions_FieldNumber_PrevPeerClock,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UpdateMessageReactions__storage_, prevPeerClock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateMessageReactions class]
                                     rootClass:[ReactionsRoot class]
                                          file:ReactionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateMessageReactions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateMessageRemoveReactionError

@implementation UpdateMessageRemoveReactionError

@dynamic hasPeer, peer;
@dynamic hasMid, mid;
@dynamic date;
@dynamic hookId;
@dynamic hasCause, cause;

typedef struct UpdateMessageRemoveReactionError__storage_ {
  uint32_t _has_storage_[1];
  Peer *peer;
  UUIDValue *mid;
  NSString *hookId;
  UpdateErrorCause *cause;
  int64_t date;
} UpdateMessageRemoveReactionError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = UpdateMessageRemoveReactionError_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateMessageRemoveReactionError__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = UpdateMessageRemoveReactionError_FieldNumber_Mid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateMessageRemoveReactionError__storage_, mid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "date",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateMessageRemoveReactionError_FieldNumber_Date,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateMessageRemoveReactionError__storage_, date),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hookId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateMessageRemoveReactionError_FieldNumber_HookId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UpdateMessageRemoveReactionError__storage_, hookId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cause",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateErrorCause),
        .number = UpdateMessageRemoveReactionError_FieldNumber_Cause,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UpdateMessageRemoveReactionError__storage_, cause),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateMessageRemoveReactionError class]
                                     rootClass:[ReactionsRoot class]
                                          file:ReactionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateMessageRemoveReactionError__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateMessageSetReactionError

@implementation UpdateMessageSetReactionError

@dynamic hasPeer, peer;
@dynamic hasMid, mid;
@dynamic date;
@dynamic hookId;
@dynamic hasCause, cause;

typedef struct UpdateMessageSetReactionError__storage_ {
  uint32_t _has_storage_[1];
  Peer *peer;
  UUIDValue *mid;
  NSString *hookId;
  UpdateErrorCause *cause;
  int64_t date;
} UpdateMessageSetReactionError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = UpdateMessageSetReactionError_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateMessageSetReactionError__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = UpdateMessageSetReactionError_FieldNumber_Mid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateMessageSetReactionError__storage_, mid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "date",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateMessageSetReactionError_FieldNumber_Date,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateMessageSetReactionError__storage_, date),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hookId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateMessageSetReactionError_FieldNumber_HookId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UpdateMessageSetReactionError__storage_, hookId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cause",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateErrorCause),
        .number = UpdateMessageSetReactionError_FieldNumber_Cause,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UpdateMessageSetReactionError__storage_, cause),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateMessageSetReactionError class]
                                     rootClass:[ReactionsRoot class]
                                          file:ReactionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateMessageSetReactionError__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestGetReactions

@implementation RequestGetReactions

@dynamic fromClock;
@dynamic hasPeer, peer;

typedef struct RequestGetReactions__storage_ {
  uint32_t _has_storage_[1];
  Peer *peer;
  int64_t fromClock;
} RequestGetReactions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromClock",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestGetReactions_FieldNumber_FromClock,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestGetReactions__storage_, fromClock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = RequestGetReactions_FieldNumber_Peer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestGetReactions__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetReactions class]
                                     rootClass:[ReactionsRoot class]
                                          file:ReactionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestGetReactions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseGetReactions

@implementation ResponseGetReactions

@dynamic messageReactionsArray, messageReactionsArray_Count;
@dynamic peerClock;
@dynamic nextAvailable;

typedef struct ResponseGetReactions__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *messageReactionsArray;
  int64_t peerClock;
} ResponseGetReactions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageReactionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MessageReactions),
        .number = ResponseGetReactions_FieldNumber_MessageReactionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseGetReactions__storage_, messageReactionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "peerClock",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseGetReactions_FieldNumber_PeerClock,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseGetReactions__storage_, peerClock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nextAvailable",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseGetReactions_FieldNumber_NextAvailable,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseGetReactions class]
                                     rootClass:[ReactionsRoot class]
                                          file:ReactionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseGetReactions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestGetMessageReactions

@implementation RequestGetMessageReactions

@dynamic hasPeer, peer;
@dynamic messageIdsArray, messageIdsArray_Count;

typedef struct RequestGetMessageReactions__storage_ {
  uint32_t _has_storage_[1];
  Peer *peer;
  NSMutableArray *messageIdsArray;
} RequestGetMessageReactions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = RequestGetMessageReactions_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestGetMessageReactions__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messageIdsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = RequestGetMessageReactions_FieldNumber_MessageIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestGetMessageReactions__storage_, messageIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetMessageReactions class]
                                     rootClass:[ReactionsRoot class]
                                          file:ReactionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestGetMessageReactions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseGetMessageReactions

@implementation ResponseGetMessageReactions

@dynamic messageReactionsParticipantsArray, messageReactionsParticipantsArray_Count;

typedef struct ResponseGetMessageReactions__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *messageReactionsParticipantsArray;
} ResponseGetMessageReactions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageReactionsParticipantsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MessageReactionsParticipants),
        .number = ResponseGetMessageReactions_FieldNumber_MessageReactionsParticipantsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseGetMessageReactions__storage_, messageReactionsParticipantsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseGetMessageReactions class]
                                     rootClass:[ReactionsRoot class]
                                          file:ReactionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseGetMessageReactions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestMessageSetReaction

@implementation RequestMessageSetReaction

@dynamic hasPeer, peer;
@dynamic hasMid, mid;
@dynamic code;

typedef struct RequestMessageSetReaction__storage_ {
  uint32_t _has_storage_[1];
  Peer *peer;
  UUIDValue *mid;
  NSString *code;
} RequestMessageSetReaction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = RequestMessageSetReaction_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestMessageSetReaction__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = RequestMessageSetReaction_FieldNumber_Mid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestMessageSetReaction__storage_, mid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestMessageSetReaction_FieldNumber_Code,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestMessageSetReaction__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestMessageSetReaction class]
                                     rootClass:[ReactionsRoot class]
                                          file:ReactionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestMessageSetReaction__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestMessageRemoveReaction

@implementation RequestMessageRemoveReaction

@dynamic hasPeer, peer;
@dynamic hasMid, mid;
@dynamic code;

typedef struct RequestMessageRemoveReaction__storage_ {
  uint32_t _has_storage_[1];
  Peer *peer;
  UUIDValue *mid;
  NSString *code;
} RequestMessageRemoveReaction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = RequestMessageRemoveReaction_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestMessageRemoveReaction__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = RequestMessageRemoveReaction_FieldNumber_Mid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestMessageRemoveReaction__storage_, mid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestMessageRemoveReaction_FieldNumber_Code,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestMessageRemoveReaction__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestMessageRemoveReaction class]
                                     rootClass:[ReactionsRoot class]
                                          file:ReactionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestMessageRemoveReaction__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
