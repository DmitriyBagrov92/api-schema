// Code generated by gRPC proto compiler.  DO NOT EDIT!
// source: miniappsregistry.proto

#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
#import "Miniappsregistry.pbrpc.h"
#import "Miniappsregistry.pbobjc.h"
#import <ProtoRPC/ProtoRPCLegacy.h>
#import <RxLibrary/GRXWriter+Immediate.h>

#import "Empty.pbobjc.h"
#import "Definitions.pbobjc.h"

@implementation ClientsMiniAppsRegistry

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"dialog"
                 serviceName:@"ClientsMiniAppsRegistry"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"dialog"
                 serviceName:@"ClientsMiniAppsRegistry"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark FindApp(RequestFindApp) returns (ResponseFindApp)

- (void)findAppWithRequest:(RequestFindApp *)request handler:(void(^)(ResponseFindApp *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToFindAppWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToFindAppWithRequest:(RequestFindApp *)request handler:(void(^)(ResponseFindApp *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"FindApp"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseFindApp class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)findAppWithMessage:(RequestFindApp *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"FindApp"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseFindApp class]];
}

#pragma mark GetApps(RequestGetApps) returns (ResponseGetApps)

- (void)getAppsWithRequest:(RequestGetApps *)request handler:(void(^)(ResponseGetApps *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetAppsWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToGetAppsWithRequest:(RequestGetApps *)request handler:(void(^)(ResponseGetApps *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetApps"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseGetApps class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)getAppsWithMessage:(RequestGetApps *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetApps"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseGetApps class]];
}

#pragma mark GetExtensions(RequestGetExtensions) returns (ResponseGetExtensions)

- (void)getExtensionsWithRequest:(RequestGetExtensions *)request handler:(void(^)(ResponseGetExtensions *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetExtensionsWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToGetExtensionsWithRequest:(RequestGetExtensions *)request handler:(void(^)(ResponseGetExtensions *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetExtensions"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseGetExtensions class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)getExtensionsWithMessage:(RequestGetExtensions *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetExtensions"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseGetExtensions class]];
}

#pragma mark IssueAccessToken(RequestIssueAccessToken) returns (ResponseIssueAccessToken)

- (void)issueAccessTokenWithRequest:(RequestIssueAccessToken *)request handler:(void(^)(ResponseIssueAccessToken *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToIssueAccessTokenWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToIssueAccessTokenWithRequest:(RequestIssueAccessToken *)request handler:(void(^)(ResponseIssueAccessToken *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"IssueAccessToken"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseIssueAccessToken class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)issueAccessTokenWithMessage:(RequestIssueAccessToken *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"IssueAccessToken"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseIssueAccessToken class]];
}

@end
#endif
