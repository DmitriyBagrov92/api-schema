// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clickroad.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Clickroad.pbobjc.h"
#import "Wrappers.pbobjc.h"
#import "Timestamp.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GPBDoubleValue);
GPBObjCClassDeclaration(GPBStringValue);
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(TrackContext);
GPBObjCClassDeclaration(TrackError);
GPBObjCClassDeclaration(TrackEvent);
GPBObjCClassDeclaration(TrackMetric);
GPBObjCClassDeclaration(TrackScreenView);
GPBObjCClassDeclaration(TrackSocial);
GPBObjCClassDeclaration(TrackTiming);

#pragma mark - ClickroadRoot

@implementation ClickroadRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClickroadRoot_FileDescriptor

static GPBFileDescriptor *ClickroadRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"clickroad"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - TrackContext

@implementation TrackContext

@dynamic context, context_Count;

typedef struct TrackContext__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *context;
} TrackContext__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "context",
        .dataTypeSpecific.clazz = Nil,
        .number = TrackContext_FieldNumber_Context,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TrackContext__storage_, context),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TrackContext class]
                                     rootClass:[ClickroadRoot class]
                                          file:ClickroadRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TrackContext__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TrackScreenView

@implementation TrackScreenView

@dynamic name;
@dynamic hasSource, source;
@dynamic hasURL, URL;

typedef struct TrackScreenView__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  GPBStringValue *source;
  GPBStringValue *URL;
} TrackScreenView__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = TrackScreenView_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TrackScreenView__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "source",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = TrackScreenView_FieldNumber_Source,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TrackScreenView__storage_, source),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "URL",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = TrackScreenView_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TrackScreenView__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TrackScreenView class]
                                     rootClass:[ClickroadRoot class]
                                          file:ClickroadRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TrackScreenView__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TrackEvent

@implementation TrackEvent

@dynamic category;
@dynamic action;
@dynamic hasLabel, label;
@dynamic hasValue, value;

typedef struct TrackEvent__storage_ {
  uint32_t _has_storage_[1];
  NSString *category;
  NSString *action;
  GPBStringValue *label;
  GPBDoubleValue *value;
} TrackEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "category",
        .dataTypeSpecific.clazz = Nil,
        .number = TrackEvent_FieldNumber_Category,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TrackEvent__storage_, category),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "action",
        .dataTypeSpecific.clazz = Nil,
        .number = TrackEvent_FieldNumber_Action,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TrackEvent__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "label",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = TrackEvent_FieldNumber_Label,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TrackEvent__storage_, label),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDoubleValue),
        .number = TrackEvent_FieldNumber_Value,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TrackEvent__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TrackEvent class]
                                     rootClass:[ClickroadRoot class]
                                          file:ClickroadRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TrackEvent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TrackTiming

@implementation TrackTiming

@dynamic category;
@dynamic variable;
@dynamic time;
@dynamic hasLabel, label;

typedef struct TrackTiming__storage_ {
  uint32_t _has_storage_[1];
  NSString *category;
  NSString *variable;
  GPBStringValue *label;
  int64_t time;
} TrackTiming__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "category",
        .dataTypeSpecific.clazz = Nil,
        .number = TrackTiming_FieldNumber_Category,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TrackTiming__storage_, category),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "variable",
        .dataTypeSpecific.clazz = Nil,
        .number = TrackTiming_FieldNumber_Variable,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TrackTiming__storage_, variable),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.clazz = Nil,
        .number = TrackTiming_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TrackTiming__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "label",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = TrackTiming_FieldNumber_Label,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TrackTiming__storage_, label),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TrackTiming class]
                                     rootClass:[ClickroadRoot class]
                                          file:ClickroadRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TrackTiming__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TrackSocial

@implementation TrackSocial

@dynamic network;
@dynamic action;
@dynamic target;

typedef struct TrackSocial__storage_ {
  uint32_t _has_storage_[1];
  NSString *network;
  NSString *action;
  NSString *target;
} TrackSocial__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "network",
        .dataTypeSpecific.clazz = Nil,
        .number = TrackSocial_FieldNumber_Network,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TrackSocial__storage_, network),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "action",
        .dataTypeSpecific.clazz = Nil,
        .number = TrackSocial_FieldNumber_Action,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TrackSocial__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "target",
        .dataTypeSpecific.clazz = Nil,
        .number = TrackSocial_FieldNumber_Target,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TrackSocial__storage_, target),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TrackSocial class]
                                     rootClass:[ClickroadRoot class]
                                          file:ClickroadRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TrackSocial__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TrackError

@implementation TrackError

@dynamic message;
@dynamic fatal;

typedef struct TrackError__storage_ {
  uint32_t _has_storage_[1];
  NSString *message;
} TrackError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "message",
        .dataTypeSpecific.clazz = Nil,
        .number = TrackError_FieldNumber_Message,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TrackError__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fatal",
        .dataTypeSpecific.clazz = Nil,
        .number = TrackError_FieldNumber_Fatal,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TrackError class]
                                     rootClass:[ClickroadRoot class]
                                          file:ClickroadRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TrackError__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TrackMetric

@implementation TrackMetric

@dynamic metricOneOfCase;
@dynamic hasTime, time;
@dynamic context;
@dynamic screenView;
@dynamic event;
@dynamic timing;
@dynamic social;
@dynamic error;
@dynamic deduplicationId;

typedef struct TrackMetric__storage_ {
  uint32_t _has_storage_[2];
  GPBTimestamp *time;
  TrackContext *context;
  TrackScreenView *screenView;
  TrackEvent *event;
  TrackTiming *timing;
  TrackSocial *social;
  TrackError *error;
  int64_t deduplicationId;
} TrackMetric__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "time",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = TrackMetric_FieldNumber_Time,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TrackMetric__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "context",
        .dataTypeSpecific.clazz = GPBObjCClass(TrackContext),
        .number = TrackMetric_FieldNumber_Context,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TrackMetric__storage_, context),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "screenView",
        .dataTypeSpecific.clazz = GPBObjCClass(TrackScreenView),
        .number = TrackMetric_FieldNumber_ScreenView,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TrackMetric__storage_, screenView),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "event",
        .dataTypeSpecific.clazz = GPBObjCClass(TrackEvent),
        .number = TrackMetric_FieldNumber_Event,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TrackMetric__storage_, event),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timing",
        .dataTypeSpecific.clazz = GPBObjCClass(TrackTiming),
        .number = TrackMetric_FieldNumber_Timing,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TrackMetric__storage_, timing),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "social",
        .dataTypeSpecific.clazz = GPBObjCClass(TrackSocial),
        .number = TrackMetric_FieldNumber_Social,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TrackMetric__storage_, social),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(TrackError),
        .number = TrackMetric_FieldNumber_Error,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TrackMetric__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deduplicationId",
        .dataTypeSpecific.clazz = Nil,
        .number = TrackMetric_FieldNumber_DeduplicationId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TrackMetric__storage_, deduplicationId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TrackMetric class]
                                     rootClass:[ClickroadRoot class]
                                          file:ClickroadRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TrackMetric__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "metric",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void TrackMetric_ClearMetricOneOfCase(TrackMetric *message) {
  GPBDescriptor *descriptor = [TrackMetric descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - RequestTrackEvent

@implementation RequestTrackEvent

@dynamic cid;
@dynamic metricsArray, metricsArray_Count;

typedef struct RequestTrackEvent__storage_ {
  uint32_t _has_storage_[1];
  NSString *cid;
  NSMutableArray *metricsArray;
} RequestTrackEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cid",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestTrackEvent_FieldNumber_Cid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestTrackEvent__storage_, cid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "metricsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(TrackMetric),
        .number = RequestTrackEvent_FieldNumber_MetricsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestTrackEvent__storage_, metricsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestTrackEvent class]
                                     rootClass:[ClickroadRoot class]
                                          file:ClickroadRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestTrackEvent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseTrackEvent

@implementation ResponseTrackEvent

@dynamic cid;

typedef struct ResponseTrackEvent__storage_ {
  uint32_t _has_storage_[1];
  NSString *cid;
} ResponseTrackEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cid",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseTrackEvent_FieldNumber_Cid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseTrackEvent__storage_, cid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseTrackEvent class]
                                     rootClass:[ClickroadRoot class]
                                          file:ClickroadRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseTrackEvent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
