// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peers.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Peers.pbobjc.h"
#import "Wrappers.pbobjc.h"
#import "Definitions.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(UUIDValue);

#pragma mark - PeersRoot

@implementation PeersRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[DefinitionsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - PeersRoot_FileDescriptor

static GPBFileDescriptor *PeersRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"dialog"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PeerType

GPBEnumDescriptor *PeerType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PeerTypeUnknown\000PeerTypePrivate\000PeerType"
        "Group\000";
    static const int32_t values[] = {
        PeerType_PeerTypeUnknown,
        PeerType_PeerTypePrivate,
        PeerType_PeerTypeGroup,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PeerType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PeerType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PeerType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PeerType_PeerTypeUnknown:
    case PeerType_PeerTypePrivate:
    case PeerType_PeerTypeGroup:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Peer

@implementation Peer

@dynamic type;
@dynamic id_p;
@dynamic hasParentMid, parentMid;

typedef struct Peer__storage_ {
  uint32_t _has_storage_[1];
  PeerType type;
  NSString *id_p;
  UUIDValue *parentMid;
} Peer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PeerType_EnumDescriptor,
        .number = Peer_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Peer__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Peer_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Peer__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "parentMid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = Peer_FieldNumber_ParentMid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Peer__storage_, parentMid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Peer class]
                                     rootClass:[PeersRoot class]
                                          file:PeersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Peer__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Peer_Type_RawValue(Peer *message) {
  GPBDescriptor *descriptor = [Peer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Peer_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetPeer_Type_RawValue(Peer *message, int32_t value) {
  GPBDescriptor *descriptor = [Peer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Peer_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OutPeer

@implementation OutPeer

@dynamic type;
@dynamic id_p;
@dynamic accessHash;
@dynamic hasParentMid, parentMid;

typedef struct OutPeer__storage_ {
  uint32_t _has_storage_[1];
  PeerType type;
  NSString *id_p;
  UUIDValue *parentMid;
  int64_t accessHash;
} OutPeer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PeerType_EnumDescriptor,
        .number = OutPeer_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OutPeer__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = OutPeer_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OutPeer__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accessHash",
        .dataTypeSpecific.clazz = Nil,
        .number = OutPeer_FieldNumber_AccessHash,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OutPeer__storage_, accessHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "parentMid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = OutPeer_FieldNumber_ParentMid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OutPeer__storage_, parentMid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OutPeer class]
                                     rootClass:[PeersRoot class]
                                          file:PeersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OutPeer__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OutPeer_Type_RawValue(OutPeer *message) {
  GPBDescriptor *descriptor = [OutPeer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OutPeer_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOutPeer_Type_RawValue(OutPeer *message, int32_t value) {
  GPBDescriptor *descriptor = [OutPeer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OutPeer_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - UserOutPeer

@implementation UserOutPeer

@dynamic userId;
@dynamic accessHash;

typedef struct UserOutPeer__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  int64_t accessHash;
} UserOutPeer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UserOutPeer_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserOutPeer__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accessHash",
        .dataTypeSpecific.clazz = Nil,
        .number = UserOutPeer_FieldNumber_AccessHash,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserOutPeer__storage_, accessHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserOutPeer class]
                                     rootClass:[PeersRoot class]
                                          file:PeersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserOutPeer__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
