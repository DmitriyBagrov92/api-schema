// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: presence.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Presence.pbobjc.h"
#import "Timestamp.pbobjc.h"
#import "Empty.pbobjc.h"
#import "Annotations.pbobjc.h"
#import "Definitions.pbobjc.h"
#import "Peers.pbobjc.h"
#import "Scalapb.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(OutPeer);
GPBObjCClassDeclaration(Peer);
GPBObjCClassDeclaration(UpdateGroupTyping);
GPBObjCClassDeclaration(UpdateGroupTyping_UserTyping);
GPBObjCClassDeclaration(UserOutPeer);

#pragma mark - PresenceRoot

@implementation PresenceRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
    [registry addExtensions:[DefinitionsRoot extensionRegistry]];
    [registry addExtensions:[ScalapbRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - PresenceRoot_FileDescriptor

static GPBFileDescriptor *PresenceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"dialog"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum TypingType

GPBEnumDescriptor *TypingType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TypingTypeUnknown\000TypingTypeText\000TypingT"
        "ypeVoice\000";
    static const int32_t values[] = {
        TypingType_TypingTypeUnknown,
        TypingType_TypingTypeText,
        TypingType_TypingTypeVoice,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TypingType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TypingType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TypingType_IsValidValue(int32_t value__) {
  switch (value__) {
    case TypingType_TypingTypeUnknown:
    case TypingType_TypingTypeText:
    case TypingType_TypingTypeVoice:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum DeviceType

GPBEnumDescriptor *DeviceType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "DeviceTypeUnknown\000DeviceTypeGeneric\000Devi"
        "ceTypePc\000DeviceTypeMobile\000DeviceTypeTabl"
        "et\000DeviceTypeWatch\000DeviceTypeMirror\000Devi"
        "ceTypeCar\000DeviceTypeTable\000";
    static const int32_t values[] = {
        DeviceType_DeviceTypeUnknown,
        DeviceType_DeviceTypeGeneric,
        DeviceType_DeviceTypePc,
        DeviceType_DeviceTypeMobile,
        DeviceType_DeviceTypeTablet,
        DeviceType_DeviceTypeWatch,
        DeviceType_DeviceTypeMirror,
        DeviceType_DeviceTypeCar,
        DeviceType_DeviceTypeTable,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DeviceType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DeviceType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DeviceType_IsValidValue(int32_t value__) {
  switch (value__) {
    case DeviceType_DeviceTypeUnknown:
    case DeviceType_DeviceTypeGeneric:
    case DeviceType_DeviceTypePc:
    case DeviceType_DeviceTypeMobile:
    case DeviceType_DeviceTypeTablet:
    case DeviceType_DeviceTypeWatch:
    case DeviceType_DeviceTypeMirror:
    case DeviceType_DeviceTypeCar:
    case DeviceType_DeviceTypeTable:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RequestStartTyping

@implementation RequestStartTyping

@dynamic hasPeer, peer;
@dynamic typingType;

typedef struct RequestStartTyping__storage_ {
  uint32_t _has_storage_[1];
  TypingType typingType;
  OutPeer *peer;
} RequestStartTyping__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(OutPeer),
        .number = RequestStartTyping_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestStartTyping__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "typingType",
        .dataTypeSpecific.enumDescFunc = TypingType_EnumDescriptor,
        .number = RequestStartTyping_FieldNumber_TypingType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestStartTyping__storage_, typingType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestStartTyping class]
                                     rootClass:[PresenceRoot class]
                                          file:PresenceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestStartTyping__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RequestStartTyping_TypingType_RawValue(RequestStartTyping *message) {
  GPBDescriptor *descriptor = [RequestStartTyping descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RequestStartTyping_FieldNumber_TypingType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetRequestStartTyping_TypingType_RawValue(RequestStartTyping *message, int32_t value) {
  GPBDescriptor *descriptor = [RequestStartTyping descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RequestStartTyping_FieldNumber_TypingType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - RequestStopTyping

@implementation RequestStopTyping

@dynamic hasPeer, peer;
@dynamic typingType;

typedef struct RequestStopTyping__storage_ {
  uint32_t _has_storage_[1];
  TypingType typingType;
  OutPeer *peer;
} RequestStopTyping__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(OutPeer),
        .number = RequestStopTyping_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestStopTyping__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "typingType",
        .dataTypeSpecific.enumDescFunc = TypingType_EnumDescriptor,
        .number = RequestStopTyping_FieldNumber_TypingType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestStopTyping__storage_, typingType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestStopTyping class]
                                     rootClass:[PresenceRoot class]
                                          file:PresenceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestStopTyping__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RequestStopTyping_TypingType_RawValue(RequestStopTyping *message) {
  GPBDescriptor *descriptor = [RequestStopTyping descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RequestStopTyping_FieldNumber_TypingType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetRequestStopTyping_TypingType_RawValue(RequestStopTyping *message, int32_t value) {
  GPBDescriptor *descriptor = [RequestStopTyping descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RequestStopTyping_FieldNumber_TypingType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - RequestSetOnline

@implementation RequestSetOnline

@dynamic isOnline;
@dynamic timeout;
@dynamic deviceType;

typedef struct RequestSetOnline__storage_ {
  uint32_t _has_storage_[1];
  DeviceType deviceType;
  int64_t timeout;
} RequestSetOnline__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isOnline",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestSetOnline_FieldNumber_IsOnline,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "timeout",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestSetOnline_FieldNumber_Timeout,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestSetOnline__storage_, timeout),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = DeviceType_EnumDescriptor,
        .number = RequestSetOnline_FieldNumber_DeviceType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RequestSetOnline__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestSetOnline class]
                                     rootClass:[PresenceRoot class]
                                          file:PresenceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestSetOnline__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RequestSetOnline_DeviceType_RawValue(RequestSetOnline *message) {
  GPBDescriptor *descriptor = [RequestSetOnline descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RequestSetOnline_FieldNumber_DeviceType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetRequestSetOnline_DeviceType_RawValue(RequestSetOnline *message, int32_t value) {
  GPBDescriptor *descriptor = [RequestSetOnline descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RequestSetOnline_FieldNumber_DeviceType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - UpdateTyping

@implementation UpdateTyping

@dynamic hasPeer, peer;
@dynamic userId;
@dynamic typingType;

typedef struct UpdateTyping__storage_ {
  uint32_t _has_storage_[1];
  TypingType typingType;
  Peer *peer;
  NSString *userId;
} UpdateTyping__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = UpdateTyping_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateTyping__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateTyping_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateTyping__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "typingType",
        .dataTypeSpecific.enumDescFunc = TypingType_EnumDescriptor,
        .number = UpdateTyping_FieldNumber_TypingType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateTyping__storage_, typingType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateTyping class]
                                     rootClass:[PresenceRoot class]
                                          file:PresenceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateTyping__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UpdateTyping_TypingType_RawValue(UpdateTyping *message) {
  GPBDescriptor *descriptor = [UpdateTyping descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateTyping_FieldNumber_TypingType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetUpdateTyping_TypingType_RawValue(UpdateTyping *message, int32_t value) {
  GPBDescriptor *descriptor = [UpdateTyping descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateTyping_FieldNumber_TypingType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - UpdateTypingStop

@implementation UpdateTypingStop

@dynamic hasPeer, peer;
@dynamic userId;
@dynamic typingType;

typedef struct UpdateTypingStop__storage_ {
  uint32_t _has_storage_[1];
  TypingType typingType;
  Peer *peer;
  NSString *userId;
} UpdateTypingStop__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = UpdateTypingStop_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateTypingStop__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateTypingStop_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateTypingStop__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "typingType",
        .dataTypeSpecific.enumDescFunc = TypingType_EnumDescriptor,
        .number = UpdateTypingStop_FieldNumber_TypingType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateTypingStop__storage_, typingType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateTypingStop class]
                                     rootClass:[PresenceRoot class]
                                          file:PresenceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateTypingStop__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UpdateTypingStop_TypingType_RawValue(UpdateTypingStop *message) {
  GPBDescriptor *descriptor = [UpdateTypingStop descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateTypingStop_FieldNumber_TypingType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetUpdateTypingStop_TypingType_RawValue(UpdateTypingStop *message, int32_t value) {
  GPBDescriptor *descriptor = [UpdateTypingStop descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateTypingStop_FieldNumber_TypingType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - UpdateUserLastSeen

@implementation UpdateUserLastSeen

@dynamic userId;
@dynamic lastSeenAt;
@dynamic deviceType;
@dynamic currentServerTime;

typedef struct UpdateUserLastSeen__storage_ {
  uint32_t _has_storage_[1];
  DeviceType deviceType;
  NSString *userId;
  int64_t lastSeenAt;
  int64_t currentServerTime;
} UpdateUserLastSeen__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserLastSeen_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserLastSeen__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastSeenAt",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserLastSeen_FieldNumber_LastSeenAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateUserLastSeen__storage_, lastSeenAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = DeviceType_EnumDescriptor,
        .number = UpdateUserLastSeen_FieldNumber_DeviceType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateUserLastSeen__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "currentServerTime",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserLastSeen_FieldNumber_CurrentServerTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UpdateUserLastSeen__storage_, currentServerTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserLastSeen class]
                                     rootClass:[PresenceRoot class]
                                          file:PresenceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserLastSeen__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UpdateUserLastSeen_DeviceType_RawValue(UpdateUserLastSeen *message) {
  GPBDescriptor *descriptor = [UpdateUserLastSeen descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateUserLastSeen_FieldNumber_DeviceType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetUpdateUserLastSeen_DeviceType_RawValue(UpdateUserLastSeen *message, int32_t value) {
  GPBDescriptor *descriptor = [UpdateUserLastSeen descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateUserLastSeen_FieldNumber_DeviceType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - UpdateGroupOnline

@implementation UpdateGroupOnline

@dynamic groupId;
@dynamic count;
@dynamic usersIdArray, usersIdArray_Count;

typedef struct UpdateGroupOnline__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  NSString *groupId;
  NSMutableArray *usersIdArray;
} UpdateGroupOnline__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupOnline_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateGroupOnline__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupOnline_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateGroupOnline__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "usersIdArray",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupOnline_FieldNumber_UsersIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateGroupOnline__storage_, usersIdArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroupOnline class]
                                     rootClass:[PresenceRoot class]
                                          file:PresenceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateGroupOnline__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateGroupTyping

@implementation UpdateGroupTyping

@dynamic groupId;
@dynamic usersTypingArray, usersTypingArray_Count;

typedef struct UpdateGroupTyping__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSMutableArray *usersTypingArray;
} UpdateGroupTyping__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupTyping_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateGroupTyping__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usersTypingArray",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateGroupTyping_UserTyping),
        .number = UpdateGroupTyping_FieldNumber_UsersTypingArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateGroupTyping__storage_, usersTypingArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroupTyping class]
                                     rootClass:[PresenceRoot class]
                                          file:PresenceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateGroupTyping__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateGroupTyping_UserTyping

@implementation UpdateGroupTyping_UserTyping

@dynamic userId;
@dynamic typingType;

typedef struct UpdateGroupTyping_UserTyping__storage_ {
  uint32_t _has_storage_[1];
  TypingType typingType;
  NSString *userId;
} UpdateGroupTyping_UserTyping__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupTyping_UserTyping_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateGroupTyping_UserTyping__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "typingType",
        .dataTypeSpecific.enumDescFunc = TypingType_EnumDescriptor,
        .number = UpdateGroupTyping_UserTyping_FieldNumber_TypingType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateGroupTyping_UserTyping__storage_, typingType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroupTyping_UserTyping class]
                                     rootClass:[PresenceRoot class]
                                          file:PresenceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateGroupTyping_UserTyping__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(UpdateGroupTyping)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UpdateGroupTyping_UserTyping_TypingType_RawValue(UpdateGroupTyping_UserTyping *message) {
  GPBDescriptor *descriptor = [UpdateGroupTyping_UserTyping descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateGroupTyping_UserTyping_FieldNumber_TypingType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetUpdateGroupTyping_UserTyping_TypingType_RawValue(UpdateGroupTyping_UserTyping *message, int32_t value) {
  GPBDescriptor *descriptor = [UpdateGroupTyping_UserTyping descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateGroupTyping_UserTyping_FieldNumber_TypingType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - RequestGetUserLastPresence

@implementation RequestGetUserLastPresence

@dynamic hasUserOutPeer, userOutPeer;

typedef struct RequestGetUserLastPresence__storage_ {
  uint32_t _has_storage_[1];
  UserOutPeer *userOutPeer;
} RequestGetUserLastPresence__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userOutPeer",
        .dataTypeSpecific.clazz = GPBObjCClass(UserOutPeer),
        .number = RequestGetUserLastPresence_FieldNumber_UserOutPeer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestGetUserLastPresence__storage_, userOutPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetUserLastPresence class]
                                     rootClass:[PresenceRoot class]
                                          file:PresenceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestGetUserLastPresence__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseGetUserLastPresence

@implementation ResponseGetUserLastPresence

@dynamic hasLastOnlineAt, lastOnlineAt;

typedef struct ResponseGetUserLastPresence__storage_ {
  uint32_t _has_storage_[1];
  GPBTimestamp *lastOnlineAt;
} ResponseGetUserLastPresence__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastOnlineAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = ResponseGetUserLastPresence_FieldNumber_LastOnlineAt,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseGetUserLastPresence__storage_, lastOnlineAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseGetUserLastPresence class]
                                     rootClass:[PresenceRoot class]
                                          file:PresenceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseGetUserLastPresence__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
