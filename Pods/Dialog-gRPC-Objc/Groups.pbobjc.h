// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: groups.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Avatar;
@class ConversationLink;
@class FileLocation;
@class GPBBytesValue;
@class GPBInt32Value;
@class GPBInt64Value;
@class GPBStringValue;
@class GPBTimestamp;
@class Group;
@class GroupData;
@class GroupMemberPermission;
@class Member;
@class UserOutPeer;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum GroupType

/** / Набор типов групповых чатов */
typedef GPB_ENUM(GroupType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  GroupType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  GroupType_GroupTypeUnknown = 0,

  /** / Групповой чат типа "группа" */
  GroupType_GroupTypeGroup = 1,

  /** / Групповой чат типа "канал" */
  GroupType_GroupTypeChannel = 2,

  /** / Групповой чат типа "важная тема" */
  GroupType_GroupTypeImportantTopic = 4,

  /** / Групповой чат типа General */
  GroupType_GroupTypeGeneral = 5,
};

GPBEnumDescriptor *GroupType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GroupType_IsValidValue(int32_t value);

#pragma mark - Enum GroupAdminPermission

/** / Набор прав пользователей в групповых чатах */
typedef GPB_ENUM(GroupAdminPermission) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  GroupAdminPermission_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  GroupAdminPermission_GroupAdminPermissionUnknown = 0,

  /** / Право на приглашение пользователей в групповой чат */
  GroupAdminPermission_GroupAdminPermissionInvite = 2,

  /** / Право на исключение пользователей из группового чата */
  GroupAdminPermission_GroupAdminPermissionKick = 3,

  /** / Право на изменение информации о групповом чате */
  GroupAdminPermission_GroupAdminPermissionUpdateinfo = 4,

  /** / Право на изменение прав других участников группового чата */
  GroupAdminPermission_GroupAdminPermissionSetpermissions = 5,

  /** / Право на редактирование сообщений других участников группового чата */
  GroupAdminPermission_GroupAdminPermissionEditmessage = 6,

  /** / Право на удаление сообщений других участников группового чата */
  GroupAdminPermission_GroupAdminPermissionDeletemessage = 7,

  /** / Право на генерацию ссылки-приглашения в групповой чат */
  GroupAdminPermission_GroupAdminPermissionGetintegrationtoken = 8,

  /** / Право на отправку сообщений в групповой чат */
  GroupAdminPermission_GroupAdminPermissionSendmessage = 9,

  /** / Право на закрепление сообщений в групповом чате */
  GroupAdminPermission_GroupAdminPermissionPinmessage = 10,

  /** / Право на просмотр членов группового чата */
  GroupAdminPermission_GroupAdminPermissionViewmembers = 11,

  /** / Право на выход из группового чата */
  GroupAdminPermission_GroupAdminPermissionLeave = 12,

  /** / Право на использование механизма таргетирования при отправке сообщений в групповой чат */
  GroupAdminPermission_GroupAdminPermissionTargeting = 13,

  /** / Право на удаление группового чата */
  GroupAdminPermission_GroupAdminPermissionDelete = 14,

  /** / Право на управление конференцией, связанной с групповым чатом */
  GroupAdminPermission_GroupAdminPermissionManageConference = 15,

  /** / Право на изменение открытости/закрытости группового чата */
  GroupAdminPermission_GroupAdminPermissionOpenAndClose = 16,
};

GPBEnumDescriptor *GroupAdminPermission_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GroupAdminPermission_IsValidValue(int32_t value);

#pragma mark - GroupsRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface GroupsRoot : GPBRootObject
@end

#pragma mark - Member

typedef GPB_ENUM(Member_FieldNumber) {
  Member_FieldNumber_UserId = 1,
  Member_FieldNumber_InvitedAt = 2,
  Member_FieldNumber_PermissionsArray = 3,
  Member_FieldNumber_Clock = 4,
  Member_FieldNumber_DeletedAt = 5,
  Member_FieldNumber_InvitedBy = 6,
};

/**
 * / Структура описывающая члена группового чата
 **/
GPB_FINAL @interface Member : GPBMessage

/** / Идентификатор учетной записи пользователя */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/** / Время (в миллисекундах от Unix epoch), когда пользователь был добавлен в групповой чат */
@property(nonatomic, readwrite) int64_t invitedAt;

/** / Список прав */
// |permissionsArray| contains |GroupAdminPermission|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *permissionsArray;
/** The number of items in @c permissionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger permissionsArray_Count;

/** / Версия структуры */
@property(nonatomic, readwrite) int64_t clock;

/** / Время (в миллисекундах от Unix epoch), когда пользователь был исключен из группового чата */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *deletedAt;
/** Test to see if @c deletedAt has been set. */
@property(nonatomic, readwrite) BOOL hasDeletedAt;

/**
 * / Идентификатор пользователя пригласившего данного пользователя в группу.
 * / Может быть пустым, если пользователь присоединился к группе по пиру (методом JoinGroupByPeer).
 * / Также может указывать на пользователя не состоящего в группе (если пригласивший покинул группу) или целиком удаленного.
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBStringValue *invitedBy;
/** Test to see if @c invitedBy has been set. */
@property(nonatomic, readwrite) BOOL hasInvitedBy;

@end

#pragma mark - Group

typedef GPB_ENUM(Group_FieldNumber) {
  Group_FieldNumber_Id_p = 1,
  Group_FieldNumber_AccessHash = 2,
  Group_FieldNumber_Data_p = 29,
  Group_FieldNumber_SelfMember = 30,
};

/**
 * / Структура группового чата
 **/
GPB_FINAL @interface Group : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** / Ключ доступа к группового чата (всегда равен нулю) */
@property(nonatomic, readwrite) int64_t accessHash;

/** / Данные о групповом чате */
@property(nonatomic, readwrite, strong, null_resettable) GroupData *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

/** / Структура члена группового чата, представляющая запрашивающего информацию пользователя в группе */
@property(nonatomic, readwrite, strong, null_resettable) Member *selfMember;
/** Test to see if @c selfMember has been set. */
@property(nonatomic, readwrite) BOOL hasSelfMember;

@end

#pragma mark - GroupData

typedef GPB_ENUM(GroupData_FieldNumber) {
  GroupData_FieldNumber_Title = 2,
  GroupData_FieldNumber_Avatar = 3,
  GroupData_FieldNumber_MembersAmount = 4,
  GroupData_FieldNumber_GroupType = 5,
  GroupData_FieldNumber_OwnerUserId = 6,
  GroupData_FieldNumber_CreatedAt = 7,
  GroupData_FieldNumber_About = 8,
  GroupData_FieldNumber_BasePermissionsArray = 10,
  GroupData_FieldNumber_Clock = 11,
  GroupData_FieldNumber_PinnedAt = 12,
  GroupData_FieldNumber_MembersCountLimit = 14,
  GroupData_FieldNumber_DeletedAt = 15,
  GroupData_FieldNumber_IsPublic = 16,
  GroupData_FieldNumber_IsClosed = 17,
  GroupData_FieldNumber_Source = 18,
  GroupData_FieldNumber_DueDate = 19,
};

/**
 * / Структура полных данных о групповом чате
 **/
GPB_FINAL @interface GroupData : GPBMessage

/** / Название группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *title;

/** / Аватар группового чата */
@property(nonatomic, readwrite, strong, null_resettable) Avatar *avatar;
/** Test to see if @c avatar has been set. */
@property(nonatomic, readwrite) BOOL hasAvatar;

/** / Количество членов группового чата */
@property(nonatomic, readwrite) int32_t membersAmount;

/** / Тип группового чата */
@property(nonatomic, readwrite) GroupType groupType;

/** / Идентификатор учетной записи пользователя-владельца группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *ownerUserId;

/** / Дата создания группового чата */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *createdAt;
/** Test to see if @c createdAt has been set. */
@property(nonatomic, readwrite) BOOL hasCreatedAt;

/** / Описание группового чата */
@property(nonatomic, readwrite, strong, null_resettable) GPBStringValue *about;
/** Test to see if @c about has been set. */
@property(nonatomic, readwrite) BOOL hasAbout;

/** / Список базовых прав для новых членов группового чата */
// |basePermissionsArray| contains |GroupAdminPermission|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *basePermissionsArray;
/** The number of items in @c basePermissionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger basePermissionsArray_Count;

/** / Версия состояния группового чата */
@property(nonatomic, readwrite) int64_t clock;

/** / Время (в миллисекундах от Unix epoch) последнего изменения состава закрепленных сообщений в групповом чате */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt64Value *pinnedAt;
/** Test to see if @c pinnedAt has been set. */
@property(nonatomic, readwrite) BOOL hasPinnedAt;

/** / Максимальное количество участников группового чата */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Value *membersCountLimit;
/** Test to see if @c membersCountLimit has been set. */
@property(nonatomic, readwrite) BOOL hasMembersCountLimit;

/** / Время (в миллисекундах от Unix epoch) удаления группового чата */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt64Value *deletedAt;
/** Test to see if @c deletedAt has been set. */
@property(nonatomic, readwrite) BOOL hasDeletedAt;

/** / Флаг публичности группового чата */
@property(nonatomic, readwrite) BOOL isPublic;

/** / Флаг закрытости группового чата */
@property(nonatomic, readwrite) BOOL isClosed;

/** / Ссылка на источник группового чата (связанный чат или сообщение в чате) */
@property(nonatomic, readwrite, strong, null_resettable) ConversationLink *source;
/** Test to see if @c source has been set. */
@property(nonatomic, readwrite) BOOL hasSource;

/** / Ожидаемое время закрытия группового чата */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *dueDate;
/** Test to see if @c dueDate has been set. */
@property(nonatomic, readwrite) BOOL hasDueDate;

@end

/**
 * Fetches the raw value of a @c GroupData's @c groupType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t GroupData_GroupType_RawValue(GroupData *message);
/**
 * Sets the raw value of an @c GroupData's @c groupType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetGroupData_GroupType_RawValue(GroupData *message, int32_t value);

#pragma mark - GroupPartialInfo

typedef GPB_ENUM(GroupPartialInfo_FieldNumber) {
  GroupPartialInfo_FieldNumber_GroupId = 1,
  GroupPartialInfo_FieldNumber_AccessHash = 2,
  GroupPartialInfo_FieldNumber_Clock = 3,
  GroupPartialInfo_FieldNumber_Type = 4,
  GroupPartialInfo_FieldNumber_Title = 5,
  GroupPartialInfo_FieldNumber_Avatar = 7,
  GroupPartialInfo_FieldNumber_SelfMember = 8,
  GroupPartialInfo_FieldNumber_PinnedAt = 9,
  GroupPartialInfo_FieldNumber_IsPublic = 10,
};

/**
 * / Структура частичный данных о групповом чате
 * / deprecated
 **/
GPB_FINAL @interface GroupPartialInfo : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Ключ доступа к группового чата (всегда равен нулю) */
@property(nonatomic, readwrite) int64_t accessHash;

/** / Версия состояния группового чата */
@property(nonatomic, readwrite) int64_t clock;

/** / Тип группового чата */
@property(nonatomic, readwrite) GroupType type;

/** / Название группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *title;

/** / Аватар группового чата */
@property(nonatomic, readwrite, strong, null_resettable) Avatar *avatar;
/** Test to see if @c avatar has been set. */
@property(nonatomic, readwrite) BOOL hasAvatar;

/** / Структура члена группового чата, представляющая запрашивающего информацию пользователя в группе */
@property(nonatomic, readwrite, strong, null_resettable) Member *selfMember;
/** Test to see if @c selfMember has been set. */
@property(nonatomic, readwrite) BOOL hasSelfMember;

/** / Время (в миллисекундах от Unix epoch) последнего изменения состава закрепленных сообщений в групповом чате */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt64Value *pinnedAt;
/** Test to see if @c pinnedAt has been set. */
@property(nonatomic, readwrite) BOOL hasPinnedAt;

/** / Флаг публичности группового чата */
@property(nonatomic, readwrite) BOOL isPublic;

@end

/**
 * Fetches the raw value of a @c GroupPartialInfo's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t GroupPartialInfo_Type_RawValue(GroupPartialInfo *message);
/**
 * Sets the raw value of an @c GroupPartialInfo's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetGroupPartialInfo_Type_RawValue(GroupPartialInfo *message, int32_t value);

#pragma mark - UpdateGroup

typedef GPB_ENUM(UpdateGroup_FieldNumber) {
  UpdateGroup_FieldNumber_GroupId = 1,
  UpdateGroup_FieldNumber_Data_p = 2,
};

/**
 * / Структура уведомления об изменении состояния группового чата
 **/
GPB_FINAL @interface UpdateGroup : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Данные о групповом чате */
@property(nonatomic, readwrite, strong, null_resettable) GroupData *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

#pragma mark - RequestLoadMembers

typedef GPB_ENUM(RequestLoadMembers_FieldNumber) {
  RequestLoadMembers_FieldNumber_Limit = 2,
  RequestLoadMembers_FieldNumber_Next = 3,
  RequestLoadMembers_FieldNumber_GroupId = 4,
};

/**
 * / Запрос на получение членов группового чата
 **/
GPB_FINAL @interface RequestLoadMembers : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Ожидаемое количество записей в ответе */
@property(nonatomic, readwrite) int32_t limit;

/** / Курсор для продолжения загрузки, полученный в ответе на предыдуший аналогичный запрос */
@property(nonatomic, readwrite, strong, null_resettable) GPBBytesValue *next;
/** Test to see if @c next has been set. */
@property(nonatomic, readwrite) BOOL hasNext;

@end

#pragma mark - ResponseLoadMembers

typedef GPB_ENUM(ResponseLoadMembers_FieldNumber) {
  ResponseLoadMembers_FieldNumber_Cursor = 1,
  ResponseLoadMembers_FieldNumber_MembersArray = 2,
};

/**
 * / Ответ на запрос на получение членов группового чата
 **/
GPB_FINAL @interface ResponseLoadMembers : GPBMessage

/** / Курсор для продолжения загрузки */
@property(nonatomic, readwrite, strong, null_resettable) GPBBytesValue *cursor;
/** Test to see if @c cursor has been set. */
@property(nonatomic, readwrite) BOOL hasCursor;

/** / Список членов группового чата */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Member*> *membersArray;
/** The number of items in @c membersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger membersArray_Count;

@end

#pragma mark - UpdateGroupTitleChanged

typedef GPB_ENUM(UpdateGroupTitleChanged_FieldNumber) {
  UpdateGroupTitleChanged_FieldNumber_GroupId = 1,
  UpdateGroupTitleChanged_FieldNumber_Title = 2,
};

/**
 * / Структура уведомления об измениии названия группового чата
 **/
GPB_FINAL @interface UpdateGroupTitleChanged : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Новое название группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *title;

@end

#pragma mark - UpdateGroupAvatarChanged

typedef GPB_ENUM(UpdateGroupAvatarChanged_FieldNumber) {
  UpdateGroupAvatarChanged_FieldNumber_GroupId = 1,
  UpdateGroupAvatarChanged_FieldNumber_Avatar = 2,
};

/**
 * / Структура уведомления об изменении аватара группового чата
 **/
GPB_FINAL @interface UpdateGroupAvatarChanged : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Новый аватар группового чата */
@property(nonatomic, readwrite, strong, null_resettable) Avatar *avatar;
/** Test to see if @c avatar has been set. */
@property(nonatomic, readwrite) BOOL hasAvatar;

@end

#pragma mark - UpdateGroupAboutChanged

typedef GPB_ENUM(UpdateGroupAboutChanged_FieldNumber) {
  UpdateGroupAboutChanged_FieldNumber_GroupId = 1,
  UpdateGroupAboutChanged_FieldNumber_About = 2,
};

/**
 * / Структура уведомления об изменении описания группового чата
 **/
GPB_FINAL @interface UpdateGroupAboutChanged : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Новое описание группового чата */
@property(nonatomic, readwrite, strong, null_resettable) GPBStringValue *about;
/** Test to see if @c about has been set. */
@property(nonatomic, readwrite) BOOL hasAbout;

@end

#pragma mark - UpdateGroupOwnerChanged

typedef GPB_ENUM(UpdateGroupOwnerChanged_FieldNumber) {
  UpdateGroupOwnerChanged_FieldNumber_GroupId = 1,
  UpdateGroupOwnerChanged_FieldNumber_UserId = 2,
};

/**
 * / Структура уведомления об изменении владельца группового чата
 **/
GPB_FINAL @interface UpdateGroupOwnerChanged : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Идентификатор учетной записи нового владельца группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

@end

#pragma mark - UpdateGroupBasePermissionsChanged

typedef GPB_ENUM(UpdateGroupBasePermissionsChanged_FieldNumber) {
  UpdateGroupBasePermissionsChanged_FieldNumber_GroupId = 1,
  UpdateGroupBasePermissionsChanged_FieldNumber_BasePermissionsArray = 2,
};

/**
 * / Струкура уведомления об изменении базовых прав для новых членов группового чата
 **/
GPB_FINAL @interface UpdateGroupBasePermissionsChanged : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Измененный список базовых прав для новых членов группового чата */
// |basePermissionsArray| contains |GroupAdminPermission|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *basePermissionsArray;
/** The number of items in @c basePermissionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger basePermissionsArray_Count;

@end

#pragma mark - UpdateGroupMemberDiff

typedef GPB_ENUM(UpdateGroupMemberDiff_FieldNumber) {
  UpdateGroupMemberDiff_FieldNumber_GroupId = 1,
  UpdateGroupMemberDiff_FieldNumber_RemovedUsersArray = 2,
  UpdateGroupMemberDiff_FieldNumber_AddedMembersArray = 3,
  UpdateGroupMemberDiff_FieldNumber_MembersCount = 4,
};

/**
 * / Структура уведомления об изменении состава участников группового чата
 **/
GPB_FINAL @interface UpdateGroupMemberDiff : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Список идентификаторов учетных записей удаленных из группового чата пользователей */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *removedUsersArray;
/** The number of items in @c removedUsersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger removedUsersArray_Count;

/** / Список идентификаторов учетных записей добавленных в групповой чат пользователей */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Member*> *addedMembersArray;
/** The number of items in @c addedMembersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger addedMembersArray_Count;

/** / Новое количество участников группового чата */
@property(nonatomic, readwrite) int32_t membersCount;

@end

#pragma mark - UpdateGroupMembersCountChanged

typedef GPB_ENUM(UpdateGroupMembersCountChanged_FieldNumber) {
  UpdateGroupMembersCountChanged_FieldNumber_GroupId = 1,
  UpdateGroupMembersCountChanged_FieldNumber_MembersCount = 2,
};

/**
 * / Структура уведомления об изменении количества участников группового чата (используется для каналов и сверхбольших групп)
 **/
GPB_FINAL @interface UpdateGroupMembersCountChanged : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Новое количество участников группового чата */
@property(nonatomic, readwrite) int32_t membersCount;

@end

#pragma mark - RequestCreateGroup

typedef GPB_ENUM(RequestCreateGroup_FieldNumber) {
  RequestCreateGroup_FieldNumber_Rid = 1,
  RequestCreateGroup_FieldNumber_Title = 3,
  RequestCreateGroup_FieldNumber_UsersArray = 4,
  RequestCreateGroup_FieldNumber_GroupType = 5,
  RequestCreateGroup_FieldNumber_BasePermissionsArray = 7,
  RequestCreateGroup_FieldNumber_IsPublic = 8,
  RequestCreateGroup_FieldNumber_Source = 9,
  RequestCreateGroup_FieldNumber_DueDate = 10,
  RequestCreateGroup_FieldNumber_About = 11,
};

/**
 * / Запрос на создание группового чата
 **/
GPB_FINAL @interface RequestCreateGroup : GPBMessage

/** / Дедуплицирующий параметр ("временный" / "клиентский" идентификатор группового чата) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *rid;

/** / Название создаваемого группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *title;

/** / Список внешних пиров пользователей для добавления в групповой чат */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<UserOutPeer*> *usersArray;
/** The number of items in @c usersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger usersArray_Count;

/** / Тип создаваемого группового чата */
@property(nonatomic, readwrite) GroupType groupType;

/** / Список базовых прав новых членов группового чата */
// |basePermissionsArray| contains |GroupAdminPermission|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *basePermissionsArray;
/** The number of items in @c basePermissionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger basePermissionsArray_Count;

/** / Флаг публичности группового чата */
@property(nonatomic, readwrite) BOOL isPublic;

/** / Ссылка на источник группового чата (связанный чат или сообщение в чате) */
@property(nonatomic, readwrite, strong, null_resettable) ConversationLink *source;
/** Test to see if @c source has been set. */
@property(nonatomic, readwrite) BOOL hasSource;

/** / Ожидаемое время закрытия группового чата */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *dueDate;
/** Test to see if @c dueDate has been set. */
@property(nonatomic, readwrite) BOOL hasDueDate;

/** / Описание группы */
@property(nonatomic, readwrite, strong, null_resettable) GPBStringValue *about;
/** Test to see if @c about has been set. */
@property(nonatomic, readwrite) BOOL hasAbout;

@end

/**
 * Fetches the raw value of a @c RequestCreateGroup's @c groupType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RequestCreateGroup_GroupType_RawValue(RequestCreateGroup *message);
/**
 * Sets the raw value of an @c RequestCreateGroup's @c groupType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRequestCreateGroup_GroupType_RawValue(RequestCreateGroup *message, int32_t value);

#pragma mark - ResponseCreateGroup

typedef GPB_ENUM(ResponseCreateGroup_FieldNumber) {
  ResponseCreateGroup_FieldNumber_Group = 1,
  ResponseCreateGroup_FieldNumber_UserPeersArray = 2,
};

/**
 * / Ответ на запрос на создание группового чата
 **/
GPB_FINAL @interface ResponseCreateGroup : GPBMessage

/** / Данные о созданном групповом чате */
@property(nonatomic, readwrite, strong, null_resettable) Group *group;
/** Test to see if @c group has been set. */
@property(nonatomic, readwrite) BOOL hasGroup;

/**
 * / Список внешних пиров пользователей членов группового чата (не используется)
 * / deprecated
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<UserOutPeer*> *userPeersArray;
/** The number of items in @c userPeersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger userPeersArray_Count;

@end

#pragma mark - RequestEditGroupTitle

typedef GPB_ENUM(RequestEditGroupTitle_FieldNumber) {
  RequestEditGroupTitle_FieldNumber_Rid = 2,
  RequestEditGroupTitle_FieldNumber_Title = 3,
  RequestEditGroupTitle_FieldNumber_GroupId = 4,
};

/**
 * / Запрос на изменение названия группового чата
 **/
GPB_FINAL @interface RequestEditGroupTitle : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Дедуплицирющий параметр запроса */
@property(nonatomic, readwrite, copy, null_resettable) NSString *rid;

/** / Новое название группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *title;

@end

#pragma mark - RequestEditGroupAvatar

typedef GPB_ENUM(RequestEditGroupAvatar_FieldNumber) {
  RequestEditGroupAvatar_FieldNumber_Rid = 2,
  RequestEditGroupAvatar_FieldNumber_FileLocation = 3,
  RequestEditGroupAvatar_FieldNumber_GroupId = 4,
};

/**
 * / Запрос на изменение аватара группового чата
 **/
GPB_FINAL @interface RequestEditGroupAvatar : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Дедуплицирющий параметр запроса */
@property(nonatomic, readwrite, copy, null_resettable) NSString *rid;

/** / Координаты нового аватара группового чата */
@property(nonatomic, readwrite, strong, null_resettable) FileLocation *fileLocation;
/** Test to see if @c fileLocation has been set. */
@property(nonatomic, readwrite) BOOL hasFileLocation;

@end

#pragma mark - RequestRemoveGroupAvatar

typedef GPB_ENUM(RequestRemoveGroupAvatar_FieldNumber) {
  RequestRemoveGroupAvatar_FieldNumber_Rid = 2,
  RequestRemoveGroupAvatar_FieldNumber_GroupId = 3,
};

/**
 * / Запрос на удаление аватара группового чата
 **/
GPB_FINAL @interface RequestRemoveGroupAvatar : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Дедуплицирющий параметр запроса */
@property(nonatomic, readwrite, copy, null_resettable) NSString *rid;

@end

#pragma mark - RequestEditGroupAbout

typedef GPB_ENUM(RequestEditGroupAbout_FieldNumber) {
  RequestEditGroupAbout_FieldNumber_Rid = 2,
  RequestEditGroupAbout_FieldNumber_About = 3,
  RequestEditGroupAbout_FieldNumber_GroupId = 4,
};

/**
 * / Запрос на изменение описания группового чата
 **/
GPB_FINAL @interface RequestEditGroupAbout : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Дедуплицирющий параметр запроса */
@property(nonatomic, readwrite, copy, null_resettable) NSString *rid;

/** / Новое описание группового чата */
@property(nonatomic, readwrite, strong, null_resettable) GPBStringValue *about;
/** Test to see if @c about has been set. */
@property(nonatomic, readwrite) BOOL hasAbout;

@end

#pragma mark - RequestEditGroupBasePermissions

typedef GPB_ENUM(RequestEditGroupBasePermissions_FieldNumber) {
  RequestEditGroupBasePermissions_FieldNumber_RandomId = 2,
  RequestEditGroupBasePermissions_FieldNumber_GrantedPermissionsArray = 3,
  RequestEditGroupBasePermissions_FieldNumber_RevokedPermissionsArray = 4,
  RequestEditGroupBasePermissions_FieldNumber_GroupId = 5,
};

/**
 * / Запрос на изменение базовых прав новых членов группового чата
 **/
GPB_FINAL @interface RequestEditGroupBasePermissions : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Дедуплицирющий параметр запроса */
@property(nonatomic, readwrite, copy, null_resettable) NSString *randomId;

/** / Список добавляемых прав */
// |grantedPermissionsArray| contains |GroupAdminPermission|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *grantedPermissionsArray;
/** The number of items in @c grantedPermissionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger grantedPermissionsArray_Count;

/** / Список отзываемых прав */
// |revokedPermissionsArray| contains |GroupAdminPermission|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *revokedPermissionsArray;
/** The number of items in @c revokedPermissionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger revokedPermissionsArray_Count;

@end

#pragma mark - RequestEditMemberPermissions

typedef GPB_ENUM(RequestEditMemberPermissions_FieldNumber) {
  RequestEditMemberPermissions_FieldNumber_GrantedPermissionsArray = 3,
  RequestEditMemberPermissions_FieldNumber_RevokedPermissionsArray = 4,
  RequestEditMemberPermissions_FieldNumber_GroupId = 5,
  RequestEditMemberPermissions_FieldNumber_UserId = 6,
};

/**
 * / Запрос на изменение прав члена группового чата
 **/
GPB_FINAL @interface RequestEditMemberPermissions : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Идентификатор учетной записи пользователя, права которого требуется изменить */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/** / Список добавляемых прав */
// |grantedPermissionsArray| contains |GroupAdminPermission|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *grantedPermissionsArray;
/** The number of items in @c grantedPermissionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger grantedPermissionsArray_Count;

/** / Список отзываемых прав */
// |revokedPermissionsArray| contains |GroupAdminPermission|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *revokedPermissionsArray;
/** The number of items in @c revokedPermissionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger revokedPermissionsArray_Count;

@end

#pragma mark - ResponseMember

typedef GPB_ENUM(ResponseMember_FieldNumber) {
  ResponseMember_FieldNumber_Member = 1,
};

GPB_FINAL @interface ResponseMember : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Member *member;
/** Test to see if @c member has been set. */
@property(nonatomic, readwrite) BOOL hasMember;

@end

#pragma mark - RequestInviteUser

typedef GPB_ENUM(RequestInviteUser_FieldNumber) {
  RequestInviteUser_FieldNumber_Rid = 2,
  RequestInviteUser_FieldNumber_User = 3,
  RequestInviteUser_FieldNumber_GroupId = 4,
};

/**
 * / Запрос на приглашение пользователя в групповой чат
 **/
GPB_FINAL @interface RequestInviteUser : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Дедуплицирющий параметр запроса */
@property(nonatomic, readwrite, copy, null_resettable) NSString *rid;

/** / Внешний пир приглашаемого пользователя */
@property(nonatomic, readwrite, strong, null_resettable) UserOutPeer *user;
/** Test to see if @c user has been set. */
@property(nonatomic, readwrite) BOOL hasUser;

@end

#pragma mark - RequestLeaveGroup

typedef GPB_ENUM(RequestLeaveGroup_FieldNumber) {
  RequestLeaveGroup_FieldNumber_Rid = 2,
  RequestLeaveGroup_FieldNumber_GroupId = 3,
};

/**
 * / Запрос на выход из группового чата
 **/
GPB_FINAL @interface RequestLeaveGroup : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Дедуплицирющий параметр запроса */
@property(nonatomic, readwrite, copy, null_resettable) NSString *rid;

@end

#pragma mark - RequestCloseGroup

typedef GPB_ENUM(RequestCloseGroup_FieldNumber) {
  RequestCloseGroup_FieldNumber_GroupId = 1,
  RequestCloseGroup_FieldNumber_Rid = 2,
  RequestCloseGroup_FieldNumber_Reason = 3,
};

/**
 * / Запрос на закрытие группового чата
 **/
GPB_FINAL @interface RequestCloseGroup : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Дедуплицирющий параметр запроса */
@property(nonatomic, readwrite, copy, null_resettable) NSString *rid;

/** / Текст, который будет содержать сервисное сообщение о закрытии группового чата */
@property(nonatomic, readwrite, strong, null_resettable) GPBStringValue *reason;
/** Test to see if @c reason has been set. */
@property(nonatomic, readwrite) BOOL hasReason;

@end

#pragma mark - RequestOpenGroup

typedef GPB_ENUM(RequestOpenGroup_FieldNumber) {
  RequestOpenGroup_FieldNumber_GroupId = 1,
  RequestOpenGroup_FieldNumber_Rid = 2,
  RequestOpenGroup_FieldNumber_Reason = 3,
};

/**
 * / Запрос на открытие ранее закрытого группового чата
 **/
GPB_FINAL @interface RequestOpenGroup : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Дедуплицирющий параметр запроса */
@property(nonatomic, readwrite, copy, null_resettable) NSString *rid;

/** / Текст, который будет содержать сервисное сообщение об открытии группового чата */
@property(nonatomic, readwrite, strong, null_resettable) GPBStringValue *reason;
/** Test to see if @c reason has been set. */
@property(nonatomic, readwrite) BOOL hasReason;

@end

#pragma mark - RequestKickUser

typedef GPB_ENUM(RequestKickUser_FieldNumber) {
  RequestKickUser_FieldNumber_Rid = 2,
  RequestKickUser_FieldNumber_GroupId = 4,
  RequestKickUser_FieldNumber_UserId = 5,
};

/**
 * / Запрос на исключение пользователя из группового чата
 **/
GPB_FINAL @interface RequestKickUser : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Дедуплицирющий параметр запроса */
@property(nonatomic, readwrite, copy, null_resettable) NSString *rid;

/** / Идентификатор учетной записи исключаемого из группового чата пользователя */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

@end

#pragma mark - RequestMakeUserAdmin

typedef GPB_ENUM(RequestMakeUserAdmin_FieldNumber) {
  RequestMakeUserAdmin_FieldNumber_PermissionsArray = 3,
  RequestMakeUserAdmin_FieldNumber_GroupId = 4,
  RequestMakeUserAdmin_FieldNumber_UserId = 5,
};

/**
 * / Запрос на перевод члена группового чата в список администраторов группового чата
 **/
GPB_FINAL @interface RequestMakeUserAdmin : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Идентификатор учетной записи пользователя члена группового чата, которого предполагается сделать администратором */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/** / Список прав, которые необходимо предоставить администратору */
// |permissionsArray| contains |GroupAdminPermission|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *permissionsArray;
/** The number of items in @c permissionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger permissionsArray_Count;

@end

#pragma mark - GroupMemberPermission

typedef GPB_ENUM(GroupMemberPermission_FieldNumber) {
  GroupMemberPermission_FieldNumber_UserId = 1,
  GroupMemberPermission_FieldNumber_PermissionsArray = 2,
};

/**
 * / Структура, содержащее соответствие члена группового чата его правам
 **/
GPB_FINAL @interface GroupMemberPermission : GPBMessage

/** / Идентификатор учетной записи пользователя члена группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/** / Список прав */
// |permissionsArray| contains |GroupAdminPermission|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *permissionsArray;
/** The number of items in @c permissionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger permissionsArray_Count;

@end

#pragma mark - RequestGetGroupMemberPermissions

typedef GPB_ENUM(RequestGetGroupMemberPermissions_FieldNumber) {
  RequestGetGroupMemberPermissions_FieldNumber_GroupId = 1,
  RequestGetGroupMemberPermissions_FieldNumber_UserIdsArray = 2,
};

/**
 * / Запрос на получение списка членов группового чата с их правами
 **/
GPB_FINAL @interface RequestGetGroupMemberPermissions : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Список идентификаторов учетных записей членов группового чата, которых необходимо включить в ответ */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *userIdsArray;
/** The number of items in @c userIdsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger userIdsArray_Count;

@end

#pragma mark - ResponseGetGroupMemberPermissions

typedef GPB_ENUM(ResponseGetGroupMemberPermissions_FieldNumber) {
  ResponseGetGroupMemberPermissions_FieldNumber_PermissionsArray = 1,
};

/**
 * / Ответ на запрос на получение списка членов группового чата с их правами
 **/
GPB_FINAL @interface ResponseGetGroupMemberPermissions : GPBMessage

/** / Список соответствий членов группового чата их правам */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GroupMemberPermission*> *permissionsArray;
/** The number of items in @c permissionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger permissionsArray_Count;

@end

#pragma mark - UpdateGroupMemberPermissionsChanged

typedef GPB_ENUM(UpdateGroupMemberPermissionsChanged_FieldNumber) {
  UpdateGroupMemberPermissionsChanged_FieldNumber_GroupId = 1,
  UpdateGroupMemberPermissionsChanged_FieldNumber_UserId = 2,
  UpdateGroupMemberPermissionsChanged_FieldNumber_PermissionsArray = 3,
};

/**
 * / Структура уведомления об изменении прав члена группового чата
 **/
GPB_FINAL @interface UpdateGroupMemberPermissionsChanged : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Идентификатор учетной записи пользователя члена группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/** / Список прав */
// |permissionsArray| contains |GroupAdminPermission|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *permissionsArray;
/** The number of items in @c permissionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger permissionsArray_Count;

@end

#pragma mark - RequestTransferOwnership

typedef GPB_ENUM(RequestTransferOwnership_FieldNumber) {
  RequestTransferOwnership_FieldNumber_NewOwner = 2,
  RequestTransferOwnership_FieldNumber_GroupId = 3,
};

/**
 * / Запрос на перенос владения групповым чатом от пользователя к пользователю
 **/
GPB_FINAL @interface RequestTransferOwnership : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Идентификатор учетной записи пользователя члена группового чата, которому следует передать владение групповым чатом */
@property(nonatomic, readwrite, copy, null_resettable) NSString *newOwner NS_RETURNS_NOT_RETAINED;

@end

#pragma mark - RequestGetGroupInviteUrl

typedef GPB_ENUM(RequestGetGroupInviteUrl_FieldNumber) {
  RequestGetGroupInviteUrl_FieldNumber_GroupId = 2,
};

/**
 * / Запрос на получение ссылки-приглашения в групповой чат
 **/
GPB_FINAL @interface RequestGetGroupInviteUrl : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

@end

#pragma mark - ResponseInviteUrl

typedef GPB_ENUM(ResponseInviteUrl_FieldNumber) {
  ResponseInviteUrl_FieldNumber_URL = 1,
};

/**
 * / Ответ на запрос на получение ссылки-приглашения в групповой чат
 **/
GPB_FINAL @interface ResponseInviteUrl : GPBMessage

/** / Ссылка-приглашение */
@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;

@end

#pragma mark - RequestGetGroupInviteUrlBase

/**
 * / Запрос на получение базового URL для ссылкок-приглашений в групповые чаты
 **/
GPB_FINAL @interface RequestGetGroupInviteUrlBase : GPBMessage

@end

#pragma mark - ResponseGetGroupInviteUrlBase

typedef GPB_ENUM(ResponseGetGroupInviteUrlBase_FieldNumber) {
  ResponseGetGroupInviteUrlBase_FieldNumber_URL = 1,
};

/**
 * / Ответ на запрос на получение базового URL для ссылкок-приглашений в групповые чаты
 **/
GPB_FINAL @interface ResponseGetGroupInviteUrlBase : GPBMessage

/** / Базовый URL */
@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;

@end

#pragma mark - RequestRevokeInviteUrl

typedef GPB_ENUM(RequestRevokeInviteUrl_FieldNumber) {
  RequestRevokeInviteUrl_FieldNumber_GroupId = 2,
};

/**
 * / Запрос на отзыв ссылки-приглашения в групповой чат
 **/
GPB_FINAL @interface RequestRevokeInviteUrl : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

@end

#pragma mark - RequestJoinGroup

typedef GPB_ENUM(RequestJoinGroup_FieldNumber) {
  RequestJoinGroup_FieldNumber_Token = 1,
};

/**
 * / Запрос на присоединение к групповому чату по токену
 **/
GPB_FINAL @interface RequestJoinGroup : GPBMessage

/** / Токен, удостоверяющий право на доступ к групповому чату */
@property(nonatomic, readwrite, copy, null_resettable) NSString *token;

@end

#pragma mark - ResponseJoinGroup

typedef GPB_ENUM(ResponseJoinGroup_FieldNumber) {
  ResponseJoinGroup_FieldNumber_Group = 1,
  ResponseJoinGroup_FieldNumber_UserPeersArray = 2,
};

/**
 * / Ответ на запрос на присоединение к групповому чату
 **/
GPB_FINAL @interface ResponseJoinGroup : GPBMessage

/** / Данные о групповом чате */
@property(nonatomic, readwrite, strong, null_resettable) Group *group;
/** Test to see if @c group has been set. */
@property(nonatomic, readwrite) BOOL hasGroup;

/**
 * / Список внешних пиров пользователей, присоединившихся к чату (не используется)
 * / deprecated
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<UserOutPeer*> *userPeersArray;
/** The number of items in @c userPeersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger userPeersArray_Count;

@end

#pragma mark - RequestJoinGroupByPeer

typedef GPB_ENUM(RequestJoinGroupByPeer_FieldNumber) {
  RequestJoinGroupByPeer_FieldNumber_GroupId = 2,
};

/**
 * / Запрос на присоединение к групповому чату по идентификатору группового чата
 **/
GPB_FINAL @interface RequestJoinGroupByPeer : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

@end

#pragma mark - RequestDeleteGroup

typedef GPB_ENUM(RequestDeleteGroup_FieldNumber) {
  RequestDeleteGroup_FieldNumber_GroupId = 1,
};

/**
 * / Запрос на удаление группового чата
 **/
GPB_FINAL @interface RequestDeleteGroup : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

@end

#pragma mark - RequestGetGroupPartialInfo

typedef GPB_ENUM(RequestGetGroupPartialInfo_FieldNumber) {
  RequestGetGroupPartialInfo_FieldNumber_Token = 1,
};

/**
 * / Запрос на получение частичных данных о групповом чате
 * / deprecated
 **/
GPB_FINAL @interface RequestGetGroupPartialInfo : GPBMessage

/** / Токен, удостоверяющий право на доступ к групповому чату */
@property(nonatomic, readwrite, copy, null_resettable) NSString *token;

@end

#pragma mark - RequestChangeGroupPublicity

typedef GPB_ENUM(RequestChangeGroupPublicity_FieldNumber) {
  RequestChangeGroupPublicity_FieldNumber_GroupId = 1,
  RequestChangeGroupPublicity_FieldNumber_IsPublic = 2,
};

/**
 * / Запрос на изменение публичности группового чата
 **/
GPB_FINAL @interface RequestChangeGroupPublicity : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Флаг публичности группового чата */
@property(nonatomic, readwrite) BOOL isPublic;

@end

#pragma mark - UpdateGroupMemberInvited

typedef GPB_ENUM(UpdateGroupMemberInvited_FieldNumber) {
  UpdateGroupMemberInvited_FieldNumber_GroupId = 1,
  UpdateGroupMemberInvited_FieldNumber_Member = 2,
};

/**
 * / Структура уведомления о приглашении члена группового чата
 * / deprecated
 **/
GPB_FINAL @interface UpdateGroupMemberInvited : GPBMessage

/** / Идентификатор группового чата */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupId;

/** / Информация о приглашенном участнике */
@property(nonatomic, readwrite, strong, null_resettable) Member *member;
/** Test to see if @c member has been set. */
@property(nonatomic, readwrite) BOOL hasMember;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
