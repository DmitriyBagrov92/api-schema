// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: miniappsregistry.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Miniappsregistry.pbobjc.h"
#import "Empty.pbobjc.h"
#import "Definitions.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ExtensionPoint);
GPBObjCClassDeclaration(GroupConditions);
GPBObjCClassDeclaration(GroupConditions_GroupCondition);
GPBObjCClassDeclaration(MessageConditions);
GPBObjCClassDeclaration(MessageConditions_MessageCondition);
GPBObjCClassDeclaration(MessageConditions_MessageCondition_DocumentCondition);
GPBObjCClassDeclaration(MiniApp);
GPBObjCClassDeclaration(UUIDValue);

#pragma mark - MiniappsregistryRoot

@implementation MiniappsregistryRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[DefinitionsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - MiniappsregistryRoot_FileDescriptor

static GPBFileDescriptor *MiniappsregistryRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"dialog"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum AppType

GPBEnumDescriptor *AppType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AppTypeUnknown\000AppTypeWebView\000";
    static const int32_t values[] = {
        AppType_AppTypeUnknown,
        AppType_AppTypeWebView,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(AppType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:AppType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL AppType_IsValidValue(int32_t value__) {
  switch (value__) {
    case AppType_AppTypeUnknown:
    case AppType_AppTypeWebView:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - MiniApp

@implementation MiniApp

@dynamic hasId_p, id_p;
@dynamic appType;
@dynamic name;
@dynamic description_p;
@dynamic version;
@dynamic icon;
@dynamic link;
@dynamic modifiedAtTs;
@dynamic isEnabled;
@dynamic locales, locales_Count;
@dynamic permissionsArray, permissionsArray_Count;

typedef struct MiniApp__storage_ {
  uint32_t _has_storage_[1];
  AppType appType;
  UUIDValue *id_p;
  NSString *name;
  NSString *description_p;
  NSString *version;
  NSString *icon;
  NSString *link;
  NSMutableDictionary *locales;
  NSMutableArray *permissionsArray;
  int64_t modifiedAtTs;
} MiniApp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = MiniApp_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MiniApp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appType",
        .dataTypeSpecific.enumDescFunc = AppType_EnumDescriptor,
        .number = MiniApp_FieldNumber_AppType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MiniApp__storage_, appType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = MiniApp_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MiniApp__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = MiniApp_FieldNumber_Description_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MiniApp__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = MiniApp_FieldNumber_Version,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MiniApp__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.clazz = Nil,
        .number = MiniApp_FieldNumber_Icon,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MiniApp__storage_, icon),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "link",
        .dataTypeSpecific.clazz = Nil,
        .number = MiniApp_FieldNumber_Link,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MiniApp__storage_, link),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modifiedAtTs",
        .dataTypeSpecific.clazz = Nil,
        .number = MiniApp_FieldNumber_ModifiedAtTs,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(MiniApp__storage_, modifiedAtTs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = MiniApp_FieldNumber_IsEnabled,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "locales",
        .dataTypeSpecific.clazz = Nil,
        .number = MiniApp_FieldNumber_Locales,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MiniApp__storage_, locales),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "permissionsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = MiniApp_FieldNumber_PermissionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MiniApp__storage_, permissionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MiniApp class]
                                     rootClass:[MiniappsregistryRoot class]
                                          file:MiniappsregistryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MiniApp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MiniApp_AppType_RawValue(MiniApp *message) {
  GPBDescriptor *descriptor = [MiniApp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MiniApp_FieldNumber_AppType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMiniApp_AppType_RawValue(MiniApp *message, int32_t value) {
  GPBDescriptor *descriptor = [MiniApp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MiniApp_FieldNumber_AppType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - UpdateMiniApp

@implementation UpdateMiniApp

@dynamic appLifecycle;
@dynamic hasAppData, appData;
@dynamic prevClock;

typedef struct UpdateMiniApp__storage_ {
  uint32_t _has_storage_[1];
  UpdateMiniApp_AppLifecycle appLifecycle;
  MiniApp *appData;
  int64_t prevClock;
} UpdateMiniApp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appLifecycle",
        .dataTypeSpecific.enumDescFunc = UpdateMiniApp_AppLifecycle_EnumDescriptor,
        .number = UpdateMiniApp_FieldNumber_AppLifecycle,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateMiniApp__storage_, appLifecycle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "appData",
        .dataTypeSpecific.clazz = GPBObjCClass(MiniApp),
        .number = UpdateMiniApp_FieldNumber_AppData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateMiniApp__storage_, appData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "prevClock",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateMiniApp_FieldNumber_PrevClock,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateMiniApp__storage_, prevClock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateMiniApp class]
                                     rootClass:[MiniappsregistryRoot class]
                                          file:MiniappsregistryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateMiniApp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UpdateMiniApp_AppLifecycle_RawValue(UpdateMiniApp *message) {
  GPBDescriptor *descriptor = [UpdateMiniApp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateMiniApp_FieldNumber_AppLifecycle];
  return GPBGetMessageRawEnumField(message, field);
}

void SetUpdateMiniApp_AppLifecycle_RawValue(UpdateMiniApp *message, int32_t value) {
  GPBDescriptor *descriptor = [UpdateMiniApp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateMiniApp_FieldNumber_AppLifecycle];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum UpdateMiniApp_AppLifecycle

GPBEnumDescriptor *UpdateMiniApp_AppLifecycle_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AppLifecycleCreated\000AppLifecycleUpdated\000"
        "AppLifecycleEnabled\000AppLifecycleDisabled"
        "\000AppLifecycleDeleted\000";
    static const int32_t values[] = {
        UpdateMiniApp_AppLifecycle_AppLifecycleCreated,
        UpdateMiniApp_AppLifecycle_AppLifecycleUpdated,
        UpdateMiniApp_AppLifecycle_AppLifecycleEnabled,
        UpdateMiniApp_AppLifecycle_AppLifecycleDisabled,
        UpdateMiniApp_AppLifecycle_AppLifecycleDeleted,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(UpdateMiniApp_AppLifecycle)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:UpdateMiniApp_AppLifecycle_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL UpdateMiniApp_AppLifecycle_IsValidValue(int32_t value__) {
  switch (value__) {
    case UpdateMiniApp_AppLifecycle_AppLifecycleCreated:
    case UpdateMiniApp_AppLifecycle_AppLifecycleUpdated:
    case UpdateMiniApp_AppLifecycle_AppLifecycleEnabled:
    case UpdateMiniApp_AppLifecycle_AppLifecycleDisabled:
    case UpdateMiniApp_AppLifecycle_AppLifecycleDeleted:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RequestGetApps

@implementation RequestGetApps

@dynamic fromClock;

typedef struct RequestGetApps__storage_ {
  uint32_t _has_storage_[1];
  int64_t fromClock;
} RequestGetApps__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromClock",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestGetApps_FieldNumber_FromClock,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestGetApps__storage_, fromClock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetApps class]
                                     rootClass:[MiniappsregistryRoot class]
                                          file:MiniappsregistryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestGetApps__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseGetApps

@implementation ResponseGetApps

@dynamic appsArray, appsArray_Count;
@dynamic clock;

typedef struct ResponseGetApps__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *appsArray;
  int64_t clock;
} ResponseGetApps__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MiniApp),
        .number = ResponseGetApps_FieldNumber_AppsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseGetApps__storage_, appsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseGetApps_FieldNumber_Clock,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseGetApps__storage_, clock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseGetApps class]
                                     rootClass:[MiniappsregistryRoot class]
                                          file:MiniappsregistryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseGetApps__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestFindApp

@implementation RequestFindApp

@dynamic appId;

typedef struct RequestFindApp__storage_ {
  uint32_t _has_storage_[1];
  NSString *appId;
} RequestFindApp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestFindApp_FieldNumber_AppId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestFindApp__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestFindApp class]
                                     rootClass:[MiniappsregistryRoot class]
                                          file:MiniappsregistryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestFindApp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseFindApp

@implementation ResponseFindApp

@dynamic hasApp, app;

typedef struct ResponseFindApp__storage_ {
  uint32_t _has_storage_[1];
  MiniApp *app;
} ResponseFindApp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "app",
        .dataTypeSpecific.clazz = GPBObjCClass(MiniApp),
        .number = ResponseFindApp_FieldNumber_App,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseFindApp__storage_, app),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseFindApp class]
                                     rootClass:[MiniappsregistryRoot class]
                                          file:MiniappsregistryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseFindApp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestIssueAccessToken

@implementation RequestIssueAccessToken

@dynamic hasAppId, appId;

typedef struct RequestIssueAccessToken__storage_ {
  uint32_t _has_storage_[1];
  UUIDValue *appId;
} RequestIssueAccessToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appId",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = RequestIssueAccessToken_FieldNumber_AppId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestIssueAccessToken__storage_, appId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestIssueAccessToken class]
                                     rootClass:[MiniappsregistryRoot class]
                                          file:MiniappsregistryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestIssueAccessToken__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseIssueAccessToken

@implementation ResponseIssueAccessToken

@dynamic accessToken;

typedef struct ResponseIssueAccessToken__storage_ {
  uint32_t _has_storage_[1];
  NSString *accessToken;
} ResponseIssueAccessToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accessToken",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseIssueAccessToken_FieldNumber_AccessToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseIssueAccessToken__storage_, accessToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseIssueAccessToken class]
                                     rootClass:[MiniappsregistryRoot class]
                                          file:MiniappsregistryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseIssueAccessToken__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestGetExtensions

@implementation RequestGetExtensions


typedef struct RequestGetExtensions__storage_ {
  uint32_t _has_storage_[1];
} RequestGetExtensions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetExtensions class]
                                     rootClass:[MiniappsregistryRoot class]
                                          file:MiniappsregistryRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(RequestGetExtensions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseGetExtensions

@implementation ResponseGetExtensions

@dynamic messageExtensionsArray, messageExtensionsArray_Count;
@dynamic chatExtensionsArray, chatExtensionsArray_Count;

typedef struct ResponseGetExtensions__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *messageExtensionsArray;
  NSMutableArray *chatExtensionsArray;
} ResponseGetExtensions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageExtensionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ExtensionPoint),
        .number = ResponseGetExtensions_FieldNumber_MessageExtensionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseGetExtensions__storage_, messageExtensionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatExtensionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ExtensionPoint),
        .number = ResponseGetExtensions_FieldNumber_ChatExtensionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseGetExtensions__storage_, chatExtensionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseGetExtensions class]
                                     rootClass:[MiniappsregistryRoot class]
                                          file:MiniappsregistryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseGetExtensions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExtensionPoint

@implementation ExtensionPoint

@dynamic conditionsOneOfCase;
@dynamic hasAppId, appId;
@dynamic action;
@dynamic label;
@dynamic messageConditions;
@dynamic groupConditions;

typedef struct ExtensionPoint__storage_ {
  uint32_t _has_storage_[2];
  UUIDValue *appId;
  NSString *action;
  NSString *label;
  MessageConditions *messageConditions;
  GroupConditions *groupConditions;
} ExtensionPoint__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appId",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = ExtensionPoint_FieldNumber_AppId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExtensionPoint__storage_, appId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "action",
        .dataTypeSpecific.clazz = Nil,
        .number = ExtensionPoint_FieldNumber_Action,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExtensionPoint__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "label",
        .dataTypeSpecific.clazz = Nil,
        .number = ExtensionPoint_FieldNumber_Label,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ExtensionPoint__storage_, label),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageConditions",
        .dataTypeSpecific.clazz = GPBObjCClass(MessageConditions),
        .number = ExtensionPoint_FieldNumber_MessageConditions,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ExtensionPoint__storage_, messageConditions),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupConditions",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupConditions),
        .number = ExtensionPoint_FieldNumber_GroupConditions,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ExtensionPoint__storage_, groupConditions),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExtensionPoint class]
                                     rootClass:[MiniappsregistryRoot class]
                                          file:MiniappsregistryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExtensionPoint__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "conditions",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ExtensionPoint_ClearConditionsOneOfCase(ExtensionPoint *message) {
  GPBDescriptor *descriptor = [ExtensionPoint descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - MessageConditions

@implementation MessageConditions

@dynamic messageConditionArray, messageConditionArray_Count;

typedef struct MessageConditions__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *messageConditionArray;
} MessageConditions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageConditionArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MessageConditions_MessageCondition),
        .number = MessageConditions_FieldNumber_MessageConditionArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MessageConditions__storage_, messageConditionArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageConditions class]
                                     rootClass:[MiniappsregistryRoot class]
                                          file:MiniappsregistryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageConditions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessageConditions_MessageCondition

@implementation MessageConditions_MessageCondition

@dynamic textMessage;
@dynamic hasDocumentMessage, documentMessage;

typedef struct MessageConditions_MessageCondition__storage_ {
  uint32_t _has_storage_[1];
  NSString *textMessage;
  MessageConditions_MessageCondition_DocumentCondition *documentMessage;
} MessageConditions_MessageCondition__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "textMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageConditions_MessageCondition_FieldNumber_TextMessage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageConditions_MessageCondition__storage_, textMessage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "documentMessage",
        .dataTypeSpecific.clazz = GPBObjCClass(MessageConditions_MessageCondition_DocumentCondition),
        .number = MessageConditions_MessageCondition_FieldNumber_DocumentMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessageConditions_MessageCondition__storage_, documentMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageConditions_MessageCondition class]
                                     rootClass:[MiniappsregistryRoot class]
                                          file:MiniappsregistryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageConditions_MessageCondition__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(MessageConditions)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessageConditions_MessageCondition_DocumentCondition

@implementation MessageConditions_MessageCondition_DocumentCondition

@dynamic isImage;
@dynamic isVideo;
@dynamic isAudio;
@dynamic mimeTypeArray, mimeTypeArray_Count;

typedef struct MessageConditions_MessageCondition_DocumentCondition__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *mimeTypeArray;
} MessageConditions_MessageCondition_DocumentCondition__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isImage",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageConditions_MessageCondition_DocumentCondition_FieldNumber_IsImage,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isVideo",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageConditions_MessageCondition_DocumentCondition_FieldNumber_IsVideo,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isAudio",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageConditions_MessageCondition_DocumentCondition_FieldNumber_IsAudio,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "mimeTypeArray",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageConditions_MessageCondition_DocumentCondition_FieldNumber_MimeTypeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MessageConditions_MessageCondition_DocumentCondition__storage_, mimeTypeArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageConditions_MessageCondition_DocumentCondition class]
                                     rootClass:[MiniappsregistryRoot class]
                                          file:MiniappsregistryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageConditions_MessageCondition_DocumentCondition__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(MessageConditions_MessageCondition)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupConditions

@implementation GroupConditions

@dynamic groupConditionArray, groupConditionArray_Count;

typedef struct GroupConditions__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *groupConditionArray;
} GroupConditions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupConditionArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupConditions_GroupCondition),
        .number = GroupConditions_FieldNumber_GroupConditionArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GroupConditions__storage_, groupConditionArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupConditions class]
                                     rootClass:[MiniappsregistryRoot class]
                                          file:MiniappsregistryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupConditions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupConditions_GroupCondition

@implementation GroupConditions_GroupCondition

@dynamic groupType;
@dynamic visibility;
@dynamic permissionArray, permissionArray_Count;

typedef struct GroupConditions_GroupCondition__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupType;
  NSString *visibility;
  NSMutableArray *permissionArray;
} GroupConditions_GroupCondition__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupType",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupConditions_GroupCondition_FieldNumber_GroupType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupConditions_GroupCondition__storage_, groupType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visibility",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupConditions_GroupCondition_FieldNumber_Visibility,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GroupConditions_GroupCondition__storage_, visibility),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "permissionArray",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupConditions_GroupCondition_FieldNumber_PermissionArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GroupConditions_GroupCondition__storage_, permissionArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupConditions_GroupCondition class]
                                     rootClass:[MiniappsregistryRoot class]
                                          file:MiniappsregistryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupConditions_GroupCondition__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(GroupConditions)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
