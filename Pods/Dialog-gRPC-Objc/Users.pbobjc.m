// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: users.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Users.pbobjc.h"
#import "Wrappers.pbobjc.h"
#import "Empty.pbobjc.h"
#import "Annotations.pbobjc.h"
#import "Definitions.pbobjc.h"
#import "Miscellaneous.pbobjc.h"
#import "Peers.pbobjc.h"
#import "MediaAndFiles.pbobjc.h"
#import "Scalapb.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Avatar);
GPBObjCClassDeclaration(BotCommand);
GPBObjCClassDeclaration(ContactRecord);
GPBObjCClassDeclaration(GPBBoolValue);
GPBObjCClassDeclaration(GPBInt64Value);
GPBObjCClassDeclaration(GPBStringValue);
GPBObjCClassDeclaration(RecursiveMapValue);
GPBObjCClassDeclaration(RequestLoadUserData);
GPBObjCClassDeclaration(RequestLoadUserData_Claim);
GPBObjCClassDeclaration(RequestLoadUserData_Claim_MessengerConnection);
GPBObjCClassDeclaration(User);
GPBObjCClassDeclaration(UserData);
GPBObjCClassDeclaration(UserData_Ext);
GPBObjCClassDeclaration(UserStatus);

#pragma mark - UsersRoot

@implementation UsersRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
    [registry addExtensions:[DefinitionsRoot extensionRegistry]];
    [registry addExtensions:[ScalapbRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - UsersRoot_FileDescriptor

static GPBFileDescriptor *UsersRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"dialog"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum Sex

GPBEnumDescriptor *Sex_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SexUnknown\000SexMale\000SexFemale\000";
    static const int32_t values[] = {
        Sex_SexUnknown,
        Sex_SexMale,
        Sex_SexFemale,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Sex)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Sex_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Sex_IsValidValue(int32_t value__) {
  switch (value__) {
    case Sex_SexUnknown:
    case Sex_SexMale:
    case Sex_SexFemale:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ContactType

GPBEnumDescriptor *ContactType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ContactTypeUnknown\000ContactTypePhone\000Cont"
        "actTypeEmail\000ContactTypeWeb\000ContactTypeS"
        "ocial\000";
    static const int32_t values[] = {
        ContactType_ContactTypeUnknown,
        ContactType_ContactTypePhone,
        ContactType_ContactTypeEmail,
        ContactType_ContactTypeWeb,
        ContactType_ContactTypeSocial,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ContactType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ContactType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ContactType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ContactType_ContactTypeUnknown:
    case ContactType_ContactTypePhone:
    case ContactType_ContactTypeEmail:
    case ContactType_ContactTypeWeb:
    case ContactType_ContactTypeSocial:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum UserStatusType

GPBEnumDescriptor *UserStatusType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UserStatusTypeUnknown\000UserStatusTypeUnse"
        "t\000UserStatusTypeAway\000UserStatusTypeDonot"
        "disturb\000UserStatusTypeInvisible\000UserStat"
        "usTypeBusy\000";
    static const int32_t values[] = {
        UserStatusType_UserStatusTypeUnknown,
        UserStatusType_UserStatusTypeUnset,
        UserStatusType_UserStatusTypeAway,
        UserStatusType_UserStatusTypeDonotdisturb,
        UserStatusType_UserStatusTypeInvisible,
        UserStatusType_UserStatusTypeBusy,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(UserStatusType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:UserStatusType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL UserStatusType_IsValidValue(int32_t value__) {
  switch (value__) {
    case UserStatusType_UserStatusTypeUnknown:
    case UserStatusType_UserStatusTypeUnset:
    case UserStatusType_UserStatusTypeAway:
    case UserStatusType_UserStatusTypeDonotdisturb:
    case UserStatusType_UserStatusTypeInvisible:
    case UserStatusType_UserStatusTypeBusy:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ContactRecord

@implementation ContactRecord

@dynamic type;
@dynamic hasTypeSpec, typeSpec;
@dynamic hasStringValue, stringValue;
@dynamic hasLongValue, longValue;
@dynamic hasTitle, title;
@dynamic hasSubtitle, subtitle;

typedef struct ContactRecord__storage_ {
  uint32_t _has_storage_[1];
  ContactType type;
  GPBStringValue *stringValue;
  GPBInt64Value *longValue;
  GPBStringValue *title;
  GPBStringValue *subtitle;
  GPBStringValue *typeSpec;
} ContactRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = ContactType_EnumDescriptor,
        .number = ContactRecord_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ContactRecord__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "stringValue",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ContactRecord_FieldNumber_StringValue,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ContactRecord__storage_, stringValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "longValue",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBInt64Value),
        .number = ContactRecord_FieldNumber_LongValue,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ContactRecord__storage_, longValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ContactRecord_FieldNumber_Title,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ContactRecord__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "subtitle",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ContactRecord_FieldNumber_Subtitle,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ContactRecord__storage_, subtitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "typeSpec",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ContactRecord_FieldNumber_TypeSpec,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ContactRecord__storage_, typeSpec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ContactRecord class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ContactRecord__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ContactRecord_Type_RawValue(ContactRecord *message) {
  GPBDescriptor *descriptor = [ContactRecord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ContactRecord_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetContactRecord_Type_RawValue(ContactRecord *message, int32_t value) {
  GPBDescriptor *descriptor = [ContactRecord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ContactRecord_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - UserStatus

@implementation UserStatus

@dynamic type;
@dynamic hasText, text;
@dynamic clock;

typedef struct UserStatus__storage_ {
  uint32_t _has_storage_[1];
  UserStatusType type;
  GPBStringValue *text;
  int64_t clock;
} UserStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = UserStatusType_EnumDescriptor,
        .number = UserStatus_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserStatus__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "text",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = UserStatus_FieldNumber_Text,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserStatus__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = Nil,
        .number = UserStatus_FieldNumber_Clock,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserStatus__storage_, clock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserStatus class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserStatus__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UserStatus_Type_RawValue(UserStatus *message) {
  GPBDescriptor *descriptor = [UserStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserStatus_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetUserStatus_Type_RawValue(UserStatus *message, int32_t value) {
  GPBDescriptor *descriptor = [UserStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserStatus_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - UserData

@implementation UserData

@dynamic name;
@dynamic hasNick, nick;
@dynamic sex;
@dynamic hasAvatar, avatar;
@dynamic hasIsBot, isBot;
@dynamic status;
@dynamic hasUserStatus, userStatus;
@dynamic timeZone;
@dynamic extsArray, extsArray_Count;
@dynamic localesArray, localesArray_Count;
@dynamic hasAbout, about;
@dynamic contactInfoArray, contactInfoArray_Count;
@dynamic botCommandsArray, botCommandsArray_Count;
@dynamic hasCustomProfile, customProfile;
@dynamic hint;
@dynamic wasAuthorized;
@dynamic clock;

typedef struct UserData__storage_ {
  uint32_t _has_storage_[1];
  Sex sex;
  UserData_Lifecycle status;
  UserData_Hint hint;
  NSString *name;
  GPBStringValue *nick;
  Avatar *avatar;
  GPBBoolValue *isBot;
  UserStatus *userStatus;
  NSString *timeZone;
  NSMutableArray *extsArray;
  NSMutableArray *localesArray;
  GPBStringValue *about;
  NSMutableArray *contactInfoArray;
  NSMutableArray *botCommandsArray;
  GPBStringValue *customProfile;
  int64_t clock;
} UserData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = UserData_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserData__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nick",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = UserData_FieldNumber_Nick,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserData__storage_, nick),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = Sex_EnumDescriptor,
        .number = UserData_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserData__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.clazz = GPBObjCClass(Avatar),
        .number = UserData_FieldNumber_Avatar,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserData__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isBot",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBBoolValue),
        .number = UserData_FieldNumber_IsBot,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UserData__storage_, isBot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = UserData_Lifecycle_EnumDescriptor,
        .number = UserData_FieldNumber_Status,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UserData__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "userStatus",
        .dataTypeSpecific.clazz = GPBObjCClass(UserStatus),
        .number = UserData_FieldNumber_UserStatus,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UserData__storage_, userStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timeZone",
        .dataTypeSpecific.clazz = Nil,
        .number = UserData_FieldNumber_TimeZone,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(UserData__storage_, timeZone),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(UserData_Ext),
        .number = UserData_FieldNumber_ExtsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserData__storage_, extsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "localesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = UserData_FieldNumber_LocalesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserData__storage_, localesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "about",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = UserData_FieldNumber_About,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(UserData__storage_, about),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contactInfoArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ContactRecord),
        .number = UserData_FieldNumber_ContactInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserData__storage_, contactInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "botCommandsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(BotCommand),
        .number = UserData_FieldNumber_BotCommandsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserData__storage_, botCommandsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "customProfile",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = UserData_FieldNumber_CustomProfile,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(UserData__storage_, customProfile),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hint",
        .dataTypeSpecific.enumDescFunc = UserData_Hint_EnumDescriptor,
        .number = UserData_FieldNumber_Hint,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(UserData__storage_, hint),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "wasAuthorized",
        .dataTypeSpecific.clazz = Nil,
        .number = UserData_FieldNumber_WasAuthorized,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = Nil,
        .number = UserData_FieldNumber_Clock,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(UserData__storage_, clock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserData class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UserData_Sex_RawValue(UserData *message) {
  GPBDescriptor *descriptor = [UserData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserData_FieldNumber_Sex];
  return GPBGetMessageRawEnumField(message, field);
}

void SetUserData_Sex_RawValue(UserData *message, int32_t value) {
  GPBDescriptor *descriptor = [UserData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserData_FieldNumber_Sex];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t UserData_Status_RawValue(UserData *message) {
  GPBDescriptor *descriptor = [UserData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserData_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetUserData_Status_RawValue(UserData *message, int32_t value) {
  GPBDescriptor *descriptor = [UserData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserData_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t UserData_Hint_RawValue(UserData *message) {
  GPBDescriptor *descriptor = [UserData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserData_FieldNumber_Hint];
  return GPBGetMessageRawEnumField(message, field);
}

void SetUserData_Hint_RawValue(UserData *message, int32_t value) {
  GPBDescriptor *descriptor = [UserData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserData_FieldNumber_Hint];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum UserData_Lifecycle

GPBEnumDescriptor *UserData_Lifecycle_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "LifecycleMissed\000LifecycleActive\000Lifecycl"
        "eDeleted\000LifecycleBlocked\000LifecycleBlock"
        "edAndDeleted\000";
    static const int32_t values[] = {
        UserData_Lifecycle_LifecycleMissed,
        UserData_Lifecycle_LifecycleActive,
        UserData_Lifecycle_LifecycleDeleted,
        UserData_Lifecycle_LifecycleBlocked,
        UserData_Lifecycle_LifecycleBlockedAndDeleted,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(UserData_Lifecycle)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:UserData_Lifecycle_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL UserData_Lifecycle_IsValidValue(int32_t value__) {
  switch (value__) {
    case UserData_Lifecycle_LifecycleMissed:
    case UserData_Lifecycle_LifecycleActive:
    case UserData_Lifecycle_LifecycleDeleted:
    case UserData_Lifecycle_LifecycleBlocked:
    case UserData_Lifecycle_LifecycleBlockedAndDeleted:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum UserData_Hint

GPBEnumDescriptor *UserData_Hint_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "HintUserRegular\000HintUserGuest\000";
    static const int32_t values[] = {
        UserData_Hint_HintUserRegular,
        UserData_Hint_HintUserGuest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(UserData_Hint)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:UserData_Hint_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL UserData_Hint_IsValidValue(int32_t value__) {
  switch (value__) {
    case UserData_Hint_HintUserRegular:
    case UserData_Hint_HintUserGuest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - UserData_Ext

@implementation UserData_Ext

@dynamic vOneOfCase;
@dynamic key;
@dynamic s;
@dynamic b;

typedef struct UserData_Ext__storage_ {
  uint32_t _has_storage_[2];
  NSString *key;
  NSString *s;
} UserData_Ext__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.clazz = Nil,
        .number = UserData_Ext_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserData_Ext__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "s",
        .dataTypeSpecific.clazz = Nil,
        .number = UserData_Ext_FieldNumber_S,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(UserData_Ext__storage_, s),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "b",
        .dataTypeSpecific.clazz = Nil,
        .number = UserData_Ext_FieldNumber_B,
        .hasIndex = -1,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserData_Ext class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserData_Ext__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "v",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(UserData)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void UserData_Ext_ClearVOneOfCase(UserData_Ext *message) {
  GPBDescriptor *descriptor = [UserData_Ext descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - User

@implementation User

@dynamic id_p;
@dynamic accessHash;
@dynamic hasData_p, data_p;

typedef struct User__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  UserData *data_p;
  int64_t accessHash;
} User__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = User_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(User__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accessHash",
        .dataTypeSpecific.clazz = Nil,
        .number = User_FieldNumber_AccessHash,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(User__storage_, accessHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(UserData),
        .number = User_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(User__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[User class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(User__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserPartialInfo

@implementation UserPartialInfo

@dynamic id_p;
@dynamic accessHash;
@dynamic clock;
@dynamic name;
@dynamic hasNick, nick;
@dynamic hasAvatar, avatar;

typedef struct UserPartialInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  GPBStringValue *nick;
  Avatar *avatar;
  int64_t accessHash;
  int64_t clock;
} UserPartialInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = UserPartialInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserPartialInfo__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accessHash",
        .dataTypeSpecific.clazz = Nil,
        .number = UserPartialInfo_FieldNumber_AccessHash,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserPartialInfo__storage_, accessHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = Nil,
        .number = UserPartialInfo_FieldNumber_Clock,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserPartialInfo__storage_, clock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = UserPartialInfo_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserPartialInfo__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nick",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = UserPartialInfo_FieldNumber_Nick,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UserPartialInfo__storage_, nick),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.clazz = GPBObjCClass(Avatar),
        .number = UserPartialInfo_FieldNumber_Avatar,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UserPartialInfo__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserPartialInfo class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserPartialInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserProfile

@implementation UserProfile

@dynamic hasUser, user;
@dynamic contactInfoArray, contactInfoArray_Count;
@dynamic hasAbout, about;
@dynamic preferredLanguagesArray, preferredLanguagesArray_Count;
@dynamic hasTimeZone, timeZone;
@dynamic botCommandsArray, botCommandsArray_Count;
@dynamic customProfile;
@dynamic hasIntegrationToken, integrationToken;

typedef struct UserProfile__storage_ {
  uint32_t _has_storage_[1];
  User *user;
  NSMutableArray *contactInfoArray;
  GPBStringValue *about;
  NSMutableArray *preferredLanguagesArray;
  GPBStringValue *timeZone;
  NSMutableArray *botCommandsArray;
  NSString *customProfile;
  GPBStringValue *integrationToken;
} UserProfile__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.clazz = GPBObjCClass(User),
        .number = UserProfile_FieldNumber_User,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserProfile__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contactInfoArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ContactRecord),
        .number = UserProfile_FieldNumber_ContactInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserProfile__storage_, contactInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "about",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = UserProfile_FieldNumber_About,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserProfile__storage_, about),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "preferredLanguagesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = UserProfile_FieldNumber_PreferredLanguagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserProfile__storage_, preferredLanguagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeZone",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = UserProfile_FieldNumber_TimeZone,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserProfile__storage_, timeZone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "botCommandsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(BotCommand),
        .number = UserProfile_FieldNumber_BotCommandsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserProfile__storage_, botCommandsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "customProfile",
        .dataTypeSpecific.clazz = Nil,
        .number = UserProfile_FieldNumber_CustomProfile,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserProfile__storage_, customProfile),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "integrationToken",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = UserProfile_FieldNumber_IntegrationToken,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UserProfile__storage_, integrationToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserProfile class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserProfile__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BotCommand

@implementation BotCommand

@dynamic slashCommand;
@dynamic description_p;
@dynamic hasLocKey, locKey;

typedef struct BotCommand__storage_ {
  uint32_t _has_storage_[1];
  NSString *slashCommand;
  NSString *description_p;
  GPBStringValue *locKey;
} BotCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "slashCommand",
        .dataTypeSpecific.clazz = Nil,
        .number = BotCommand_FieldNumber_SlashCommand,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BotCommand__storage_, slashCommand),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = BotCommand_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BotCommand__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "locKey",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = BotCommand_FieldNumber_LocKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BotCommand__storage_, locKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BotCommand class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BotCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestEditUserLocalName

@implementation RequestEditUserLocalName

@dynamic userId;
@dynamic accessHash;
@dynamic name;

typedef struct RequestEditUserLocalName__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *name;
  int64_t accessHash;
} RequestEditUserLocalName__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestEditUserLocalName_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestEditUserLocalName__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accessHash",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestEditUserLocalName_FieldNumber_AccessHash,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestEditUserLocalName__storage_, accessHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestEditUserLocalName_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestEditUserLocalName__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestEditUserLocalName class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestEditUserLocalName__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestLoadUserData

@implementation RequestLoadUserData

@dynamic claimsArray, claimsArray_Count;

typedef struct RequestLoadUserData__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *claimsArray;
} RequestLoadUserData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "claimsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(RequestLoadUserData_Claim),
        .number = RequestLoadUserData_FieldNumber_ClaimsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestLoadUserData__storage_, claimsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestLoadUserData class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestLoadUserData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestLoadUserData_Claim

@implementation RequestLoadUserData_Claim

@dynamic kindOneOfCase;
@dynamic messengerConnection;

typedef struct RequestLoadUserData_Claim__storage_ {
  uint32_t _has_storage_[2];
  RequestLoadUserData_Claim_MessengerConnection *messengerConnection;
} RequestLoadUserData_Claim__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messengerConnection",
        .dataTypeSpecific.clazz = GPBObjCClass(RequestLoadUserData_Claim_MessengerConnection),
        .number = RequestLoadUserData_Claim_FieldNumber_MessengerConnection,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(RequestLoadUserData_Claim__storage_, messengerConnection),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestLoadUserData_Claim class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestLoadUserData_Claim__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "kind",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(RequestLoadUserData)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void RequestLoadUserData_Claim_ClearKindOneOfCase(RequestLoadUserData_Claim *message) {
  GPBDescriptor *descriptor = [RequestLoadUserData_Claim descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - RequestLoadUserData_Claim_MessengerConnection

@implementation RequestLoadUserData_Claim_MessengerConnection

@dynamic userIdsArray, userIdsArray_Count;

typedef struct RequestLoadUserData_Claim_MessengerConnection__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *userIdsArray;
} RequestLoadUserData_Claim_MessengerConnection__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestLoadUserData_Claim_MessengerConnection_FieldNumber_UserIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestLoadUserData_Claim_MessengerConnection__storage_, userIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestLoadUserData_Claim_MessengerConnection class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestLoadUserData_Claim_MessengerConnection__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(RequestLoadUserData_Claim)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseLoadUserData

@implementation ResponseLoadUserData

@dynamic usersArray, usersArray_Count;

typedef struct ResponseLoadUserData__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *usersArray;
} ResponseLoadUserData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(User),
        .number = ResponseLoadUserData_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseLoadUserData__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseLoadUserData class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseLoadUserData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateUser

@implementation UpdateUser

@dynamic id_p;
@dynamic hasData_p, data_p;

typedef struct UpdateUser__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  UserData *data_p;
} UpdateUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUser_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUser__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(UserData),
        .number = UpdateUser_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateUser__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUser class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUser__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateUserAvatarChanged

@implementation UpdateUserAvatarChanged

@dynamic userId;
@dynamic hasAvatar, avatar;

typedef struct UpdateUserAvatarChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  Avatar *avatar;
} UpdateUserAvatarChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserAvatarChanged_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserAvatarChanged__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.clazz = GPBObjCClass(Avatar),
        .number = UpdateUserAvatarChanged_FieldNumber_Avatar,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateUserAvatarChanged__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserAvatarChanged class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserAvatarChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateUserNameChanged

@implementation UpdateUserNameChanged

@dynamic userId;
@dynamic name;

typedef struct UpdateUserNameChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *name;
} UpdateUserNameChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserNameChanged_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserNameChanged__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserNameChanged_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateUserNameChanged__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserNameChanged class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserNameChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateUserLocalNameChanged

@implementation UpdateUserLocalNameChanged

@dynamic userId;
@dynamic hasLocalName, localName;

typedef struct UpdateUserLocalNameChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  GPBStringValue *localName;
} UpdateUserLocalNameChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserLocalNameChanged_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserLocalNameChanged__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "localName",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = UpdateUserLocalNameChanged_FieldNumber_LocalName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateUserLocalNameChanged__storage_, localName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserLocalNameChanged class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserLocalNameChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateUserContactsChanged

@implementation UpdateUserContactsChanged

@dynamic userId;
@dynamic contactRecordsArray, contactRecordsArray_Count;

typedef struct UpdateUserContactsChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSMutableArray *contactRecordsArray;
} UpdateUserContactsChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserContactsChanged_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserContactsChanged__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contactRecordsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ContactRecord),
        .number = UpdateUserContactsChanged_FieldNumber_ContactRecordsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateUserContactsChanged__storage_, contactRecordsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserContactsChanged class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserContactsChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateUserNickChanged

@implementation UpdateUserNickChanged

@dynamic userId;
@dynamic hasNickname, nickname;

typedef struct UpdateUserNickChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  GPBStringValue *nickname;
} UpdateUserNickChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserNickChanged_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserNickChanged__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = UpdateUserNickChanged_FieldNumber_Nickname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateUserNickChanged__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserNickChanged class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserNickChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateUserAboutChanged

@implementation UpdateUserAboutChanged

@dynamic userId;
@dynamic hasAbout, about;

typedef struct UpdateUserAboutChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  GPBStringValue *about;
} UpdateUserAboutChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserAboutChanged_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserAboutChanged__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "about",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = UpdateUserAboutChanged_FieldNumber_About,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateUserAboutChanged__storage_, about),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserAboutChanged class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserAboutChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateUserPreferredLanguagesChanged

@implementation UpdateUserPreferredLanguagesChanged

@dynamic userId;
@dynamic preferredLanguagesArray, preferredLanguagesArray_Count;

typedef struct UpdateUserPreferredLanguagesChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSMutableArray *preferredLanguagesArray;
} UpdateUserPreferredLanguagesChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserPreferredLanguagesChanged_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserPreferredLanguagesChanged__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "preferredLanguagesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserPreferredLanguagesChanged_FieldNumber_PreferredLanguagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateUserPreferredLanguagesChanged__storage_, preferredLanguagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserPreferredLanguagesChanged class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserPreferredLanguagesChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateUserTimeZoneChanged

@implementation UpdateUserTimeZoneChanged

@dynamic userId;
@dynamic hasTimeZone, timeZone;

typedef struct UpdateUserTimeZoneChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  GPBStringValue *timeZone;
} UpdateUserTimeZoneChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserTimeZoneChanged_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserTimeZoneChanged__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeZone",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = UpdateUserTimeZoneChanged_FieldNumber_TimeZone,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateUserTimeZoneChanged__storage_, timeZone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserTimeZoneChanged class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserTimeZoneChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateUserBotCommandsChanged

@implementation UpdateUserBotCommandsChanged

@dynamic userId;
@dynamic commandsArray, commandsArray_Count;

typedef struct UpdateUserBotCommandsChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSMutableArray *commandsArray;
} UpdateUserBotCommandsChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserBotCommandsChanged_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserBotCommandsChanged__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "commandsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(BotCommand),
        .number = UpdateUserBotCommandsChanged_FieldNumber_CommandsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateUserBotCommandsChanged__storage_, commandsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserBotCommandsChanged class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserBotCommandsChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateUserSexChanged

@implementation UpdateUserSexChanged

@dynamic userId;
@dynamic sex;

typedef struct UpdateUserSexChanged__storage_ {
  uint32_t _has_storage_[1];
  Sex sex;
  NSString *userId;
} UpdateUserSexChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserSexChanged_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserSexChanged__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = Sex_EnumDescriptor,
        .number = UpdateUserSexChanged_FieldNumber_Sex,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateUserSexChanged__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserSexChanged class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserSexChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UpdateUserSexChanged_Sex_RawValue(UpdateUserSexChanged *message) {
  GPBDescriptor *descriptor = [UpdateUserSexChanged descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateUserSexChanged_FieldNumber_Sex];
  return GPBGetMessageRawEnumField(message, field);
}

void SetUpdateUserSexChanged_Sex_RawValue(UpdateUserSexChanged *message, int32_t value) {
  GPBDescriptor *descriptor = [UpdateUserSexChanged descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateUserSexChanged_FieldNumber_Sex];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - UpdateUserCustomProfileChanged

@implementation UpdateUserCustomProfileChanged

@dynamic userId;
@dynamic customProfile;

typedef struct UpdateUserCustomProfileChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *customProfile;
} UpdateUserCustomProfileChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserCustomProfileChanged_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserCustomProfileChanged__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customProfile",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserCustomProfileChanged_FieldNumber_CustomProfile,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateUserCustomProfileChanged__storage_, customProfile),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserCustomProfileChanged class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserCustomProfileChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateUserStatusChanged

@implementation UpdateUserStatusChanged

@dynamic userId;
@dynamic hasStatus, status;

typedef struct UpdateUserStatusChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  UserStatus *status;
} UpdateUserStatusChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserStatusChanged_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserStatusChanged__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.clazz = GPBObjCClass(UserStatus),
        .number = UpdateUserStatusChanged_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateUserStatusChanged__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserStatusChanged class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserStatusChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateUserExtChanged

@implementation UpdateUserExtChanged

@dynamic userId;
@dynamic hasExt, ext;

typedef struct UpdateUserExtChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  RecursiveMapValue *ext;
} UpdateUserExtChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserExtChanged_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserExtChanged__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ext",
        .dataTypeSpecific.clazz = GPBObjCClass(RecursiveMapValue),
        .number = UpdateUserExtChanged_FieldNumber_Ext,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateUserExtChanged__storage_, ext),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserExtChanged class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserExtChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateUserFullExtChanged

@implementation UpdateUserFullExtChanged

@dynamic userId;
@dynamic hasExt, ext;

typedef struct UpdateUserFullExtChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  RecursiveMapValue *ext;
} UpdateUserFullExtChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserFullExtChanged_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserFullExtChanged__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ext",
        .dataTypeSpecific.clazz = GPBObjCClass(RecursiveMapValue),
        .number = UpdateUserFullExtChanged_FieldNumber_Ext,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateUserFullExtChanged__storage_, ext),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserFullExtChanged class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserFullExtChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
