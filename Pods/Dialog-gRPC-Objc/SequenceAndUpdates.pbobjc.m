// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sequence_and_updates.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "SequenceAndUpdates.pbobjc.h"
#import "Wrappers.pbobjc.h"
#import "Empty.pbobjc.h"
#import "Annotations.pbobjc.h"
#import "Definitions.pbobjc.h"
#import "Miscellaneous.pbobjc.h"
#import "Authentication.pbobjc.h"
#import "Groups.pbobjc.h"
#import "Stickers.pbobjc.h"
#import "Presence.pbobjc.h"
#import "ConfigSync.pbobjc.h"
#import "Contacts.pbobjc.h"
#import "Privacy.pbobjc.h"
#import "Peers.pbobjc.h"
#import "Messaging.pbobjc.h"
#import "Users.pbobjc.h"
#import "Threads.pbobjc.h"
#import "Reactions.pbobjc.h"
#import "Permissions.pbobjc.h"
#import "Scalapb.pbobjc.h"
#import "Miniappsregistry.pbobjc.h"
#import "Suggests.pbobjc.h"
#import "Drafts.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Config);
GPBObjCClassDeclaration(GPBEmpty);
GPBObjCClassDeclaration(GPBInt64Value);
GPBObjCClassDeclaration(GPBStringValue);
GPBObjCClassDeclaration(Group);
GPBObjCClassDeclaration(GroupMembersSubset);
GPBObjCClassDeclaration(GroupOutPeer);
GPBObjCClassDeclaration(GroupPartialInfo);
GPBObjCClassDeclaration(HistoryMessage);
GPBObjCClassDeclaration(Peer);
GPBObjCClassDeclaration(PeersList);
GPBObjCClassDeclaration(SeqUpdate);
GPBObjCClassDeclaration(SeqUpdateBody);
GPBObjCClassDeclaration(UUIDValue);
GPBObjCClassDeclaration(UpdateChatArchive);
GPBObjCClassDeclaration(UpdateChatClear);
GPBObjCClassDeclaration(UpdateChatDelete);
GPBObjCClassDeclaration(UpdateChatGroupsChanged);
GPBObjCClassDeclaration(UpdateClearChatError);
GPBObjCClassDeclaration(UpdateConfig);
GPBObjCClassDeclaration(UpdateContactRegistered);
GPBObjCClassDeclaration(UpdateContactsAddTaskSuspended);
GPBObjCClassDeclaration(UpdateContactsAdded);
GPBObjCClassDeclaration(UpdateContactsRemoved);
GPBObjCClassDeclaration(UpdateDeleteChatError);
GPBObjCClassDeclaration(UpdateDeleteMessageError);
GPBObjCClassDeclaration(UpdateDialogFavouriteChanged);
GPBObjCClassDeclaration(UpdateDialogMuteChanged);
GPBObjCClassDeclaration(UpdateDialogReadLaterChanged);
GPBObjCClassDeclaration(UpdateDraftsChanged);
GPBObjCClassDeclaration(UpdateEditMessageError);
GPBObjCClassDeclaration(UpdateFavouriteDialogError);
GPBObjCClassDeclaration(UpdateFeatureFlagChanged);
GPBObjCClassDeclaration(UpdateGroup);
GPBObjCClassDeclaration(UpdateGroupAboutChanged);
GPBObjCClassDeclaration(UpdateGroupAvatarChanged);
GPBObjCClassDeclaration(UpdateGroupMemberDiff);
GPBObjCClassDeclaration(UpdateGroupMemberInvited);
GPBObjCClassDeclaration(UpdateGroupMemberPermissionsChanged);
GPBObjCClassDeclaration(UpdateGroupMembersCountChanged);
GPBObjCClassDeclaration(UpdateGroupMembersUpdated);
GPBObjCClassDeclaration(UpdateGroupOnline);
GPBObjCClassDeclaration(UpdateGroupOwnerChanged);
GPBObjCClassDeclaration(UpdateGroupTitleChanged);
GPBObjCClassDeclaration(UpdateGroupTyping);
GPBObjCClassDeclaration(UpdateInteractiveMediaEvent);
GPBObjCClassDeclaration(UpdateMessage);
GPBObjCClassDeclaration(UpdateMessageContentChanged);
GPBObjCClassDeclaration(UpdateMessageDelete);
GPBObjCClassDeclaration(UpdateMessageReactions);
GPBObjCClassDeclaration(UpdateMessageRead);
GPBObjCClassDeclaration(UpdateMessageReadByMe);
GPBObjCClassDeclaration(UpdateMessageReadError);
GPBObjCClassDeclaration(UpdateMessageReceived);
GPBObjCClassDeclaration(UpdateMessageReceivedError);
GPBObjCClassDeclaration(UpdateMessageSent);
GPBObjCClassDeclaration(UpdateMiniApp);
GPBObjCClassDeclaration(UpdateParameterChanged);
GPBObjCClassDeclaration(UpdatePermissionsChange);
GPBObjCClassDeclaration(UpdatePinnedMessagesChanged);
GPBObjCClassDeclaration(UpdateRawUpdate);
GPBObjCClassDeclaration(UpdateReadDialogLaterError);
GPBObjCClassDeclaration(UpdateSendMessageError);
GPBObjCClassDeclaration(UpdateSettingsChanged);
GPBObjCClassDeclaration(UpdateStickerCollectionsChanged);
GPBObjCClassDeclaration(UpdateStickerPackAdded);
GPBObjCClassDeclaration(UpdateStickerPackRemoved);
GPBObjCClassDeclaration(UpdateSuggests);
GPBObjCClassDeclaration(UpdateThreadFollowing);
GPBObjCClassDeclaration(UpdateThreadInfos);
GPBObjCClassDeclaration(UpdateTyping);
GPBObjCClassDeclaration(UpdateTypingStop);
GPBObjCClassDeclaration(UpdateUnfavouriteDialogError);
GPBObjCClassDeclaration(UpdateUser);
GPBObjCClassDeclaration(UpdateUserAboutChanged);
GPBObjCClassDeclaration(UpdateUserAvatarChanged);
GPBObjCClassDeclaration(UpdateUserBlocked);
GPBObjCClassDeclaration(UpdateUserBotCommandsChanged);
GPBObjCClassDeclaration(UpdateUserContactsChanged);
GPBObjCClassDeclaration(UpdateUserCustomProfileChanged);
GPBObjCClassDeclaration(UpdateUserExtChanged);
GPBObjCClassDeclaration(UpdateUserFullExtChanged);
GPBObjCClassDeclaration(UpdateUserLastSeen);
GPBObjCClassDeclaration(UpdateUserLocalNameChanged);
GPBObjCClassDeclaration(UpdateUserNameChanged);
GPBObjCClassDeclaration(UpdateUserNickChanged);
GPBObjCClassDeclaration(UpdateUserPreferredLanguagesChanged);
GPBObjCClassDeclaration(UpdateUserSexChanged);
GPBObjCClassDeclaration(UpdateUserStatusChanged);
GPBObjCClassDeclaration(UpdateUserTimeZoneChanged);
GPBObjCClassDeclaration(UpdateUserUnblocked);
GPBObjCClassDeclaration(User);
GPBObjCClassDeclaration(UserOutPeer);
GPBObjCClassDeclaration(UserPartialInfo);
GPBObjCClassDeclaration(WeakUpdate);
GPBObjCClassDeclaration(WeakUpdateCommand);
GPBObjCClassDeclaration(WeakUpdateCommand_ChangeMyOnline);
GPBObjCClassDeclaration(WeakUpdateCommand_ChangeMyTyping);
GPBObjCClassDeclaration(WeakUpdateCommand_SubscribeToOnlines);
GPBObjCClassDeclaration(WeakUpdate_UpdateForceReloadState);
GPBObjCClassDeclaration(WeakUpdate_UpdateForceReloadState_ForceReloadField);

#pragma mark - SequenceAndUpdatesRoot

@implementation SequenceAndUpdatesRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
    [registry addExtensions:[DefinitionsRoot extensionRegistry]];
    [registry addExtensions:[ScalapbRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - SequenceAndUpdatesRoot_FileDescriptor

static GPBFileDescriptor *SequenceAndUpdatesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"dialog"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SeqUpdateBody

@implementation SeqUpdateBody

@dynamic updateOneOfCase;
@dynamic updateUserAvatarChanged;
@dynamic updateUserNameChanged;
@dynamic updateUserLocalNameChanged;
@dynamic updateUserContactsChanged;
@dynamic updateUserNickChanged;
@dynamic updateUserAboutChanged;
@dynamic updateUserPreferredLanguagesChanged;
@dynamic updateUserTimeZoneChanged;
@dynamic updateUserBotCommandsChanged;
@dynamic updateUserExtChanged;
@dynamic updateUserFullExtChanged;
@dynamic updateUserSexChanged;
@dynamic updateUserCustomProfileChanged;
@dynamic updateUserStatusChanged;
@dynamic updateContactRegistered;
@dynamic updateContactsAdded;
@dynamic updateContactsAddTaskSuspended;
@dynamic updateContactsRemoved;
@dynamic updateUserBlocked;
@dynamic updateUserUnblocked;
@dynamic updateInteractiveMediaEvent;
@dynamic updateMessage;
@dynamic updateMessageContentChanged;
@dynamic updateMessageSent;
@dynamic updateMessageReceived;
@dynamic updateMessageRead;
@dynamic updateMessageReadByMe;
@dynamic updateMessageDelete;
@dynamic updateChatClear;
@dynamic updateChatDelete;
@dynamic updateChatArchive;
@dynamic updateChatGroupsChanged;
@dynamic updateDialogFavouriteChanged;
@dynamic updatePinnedMessagesChanged;
@dynamic updateGroupTitleChanged;
@dynamic updateGroupAvatarChanged;
@dynamic updateGroupAboutChanged;
@dynamic updateGroupOwnerChanged;
@dynamic updateGroupMembersUpdated;
@dynamic updateGroupMemberDiff;
@dynamic updateGroupMembersCountChanged;
@dynamic updateGroupMemberPermissionsChanged;
@dynamic updateStickerCollectionsChanged;
@dynamic updateStickerPackRemoved;
@dynamic updateStickerPackAdded;
@dynamic updateParameterChanged;
@dynamic updateRawUpdate;
@dynamic updateConfig;
@dynamic updateSendMessageError;
@dynamic updateEditMessageError;
@dynamic updateUser;
@dynamic updateFeatureFlagChanged;
@dynamic updateGroup;
@dynamic updateGroupMemberInvited;
@dynamic updatePermissionsChange;
@dynamic updateGroupTyping;
@dynamic updateDialogReadLaterChanged;
@dynamic updateDialogMuteChanged;
@dynamic updateSettingsChanged;
@dynamic updateDeleteMessageError;
@dynamic updateMessageReadError;
@dynamic updateMessageReceivedError;
@dynamic updateClearChatError;
@dynamic updateDeleteChatError;
@dynamic updateFavouriteDialogError;
@dynamic updateUnfavouriteDialogError;
@dynamic updateReadDialogLaterError;
@dynamic updateThreadFollowing;

typedef struct SeqUpdateBody__storage_ {
  uint32_t _has_storage_[2];
  UpdateUserAvatarChanged *updateUserAvatarChanged;
  UpdateUserNameChanged *updateUserNameChanged;
  UpdateUserLocalNameChanged *updateUserLocalNameChanged;
  UpdateUserContactsChanged *updateUserContactsChanged;
  UpdateUserNickChanged *updateUserNickChanged;
  UpdateUserAboutChanged *updateUserAboutChanged;
  UpdateUserPreferredLanguagesChanged *updateUserPreferredLanguagesChanged;
  UpdateUserTimeZoneChanged *updateUserTimeZoneChanged;
  UpdateUserBotCommandsChanged *updateUserBotCommandsChanged;
  UpdateUserExtChanged *updateUserExtChanged;
  UpdateUserFullExtChanged *updateUserFullExtChanged;
  UpdateUserSexChanged *updateUserSexChanged;
  UpdateUserCustomProfileChanged *updateUserCustomProfileChanged;
  UpdateUserStatusChanged *updateUserStatusChanged;
  UpdateContactRegistered *updateContactRegistered;
  UpdateContactsAdded *updateContactsAdded;
  UpdateContactsAddTaskSuspended *updateContactsAddTaskSuspended;
  UpdateContactsRemoved *updateContactsRemoved;
  UpdateUserBlocked *updateUserBlocked;
  UpdateUserUnblocked *updateUserUnblocked;
  UpdateInteractiveMediaEvent *updateInteractiveMediaEvent;
  UpdateMessage *updateMessage;
  UpdateMessageContentChanged *updateMessageContentChanged;
  UpdateMessageSent *updateMessageSent;
  UpdateMessageReceived *updateMessageReceived;
  UpdateMessageRead *updateMessageRead;
  UpdateMessageReadByMe *updateMessageReadByMe;
  UpdateMessageDelete *updateMessageDelete;
  UpdateChatClear *updateChatClear;
  UpdateChatDelete *updateChatDelete;
  UpdateChatArchive *updateChatArchive;
  UpdateChatGroupsChanged *updateChatGroupsChanged;
  UpdateDialogFavouriteChanged *updateDialogFavouriteChanged;
  UpdatePinnedMessagesChanged *updatePinnedMessagesChanged;
  UpdateGroupTitleChanged *updateGroupTitleChanged;
  UpdateGroupAvatarChanged *updateGroupAvatarChanged;
  UpdateGroupAboutChanged *updateGroupAboutChanged;
  UpdateGroupOwnerChanged *updateGroupOwnerChanged;
  UpdateGroupMembersUpdated *updateGroupMembersUpdated;
  UpdateGroupMemberDiff *updateGroupMemberDiff;
  UpdateGroupMembersCountChanged *updateGroupMembersCountChanged;
  UpdateGroupMemberPermissionsChanged *updateGroupMemberPermissionsChanged;
  UpdateStickerCollectionsChanged *updateStickerCollectionsChanged;
  UpdateStickerPackRemoved *updateStickerPackRemoved;
  UpdateStickerPackAdded *updateStickerPackAdded;
  UpdateParameterChanged *updateParameterChanged;
  UpdateRawUpdate *updateRawUpdate;
  UpdateConfig *updateConfig;
  UpdateSendMessageError *updateSendMessageError;
  UpdateEditMessageError *updateEditMessageError;
  UpdateUser *updateUser;
  UpdateFeatureFlagChanged *updateFeatureFlagChanged;
  UpdateGroup *updateGroup;
  UpdateGroupMemberInvited *updateGroupMemberInvited;
  UpdatePermissionsChange *updatePermissionsChange;
  UpdateGroupTyping *updateGroupTyping;
  UpdateDialogReadLaterChanged *updateDialogReadLaterChanged;
  UpdateDialogMuteChanged *updateDialogMuteChanged;
  UpdateSettingsChanged *updateSettingsChanged;
  UpdateDeleteMessageError *updateDeleteMessageError;
  UpdateMessageReadError *updateMessageReadError;
  UpdateMessageReceivedError *updateMessageReceivedError;
  UpdateClearChatError *updateClearChatError;
  UpdateDeleteChatError *updateDeleteChatError;
  UpdateFavouriteDialogError *updateFavouriteDialogError;
  UpdateUnfavouriteDialogError *updateUnfavouriteDialogError;
  UpdateReadDialogLaterError *updateReadDialogLaterError;
  UpdateThreadFollowing *updateThreadFollowing;
} SeqUpdateBody__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "updateUserAvatarChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUserAvatarChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateUserAvatarChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateUserAvatarChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateUserNameChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUserNameChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateUserNameChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateUserNameChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateUserLocalNameChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUserLocalNameChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateUserLocalNameChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateUserLocalNameChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateUserContactsChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUserContactsChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateUserContactsChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateUserContactsChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateUserNickChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUserNickChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateUserNickChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateUserNickChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateUserAboutChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUserAboutChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateUserAboutChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateUserAboutChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateUserPreferredLanguagesChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUserPreferredLanguagesChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateUserPreferredLanguagesChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateUserPreferredLanguagesChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateUserTimeZoneChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUserTimeZoneChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateUserTimeZoneChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateUserTimeZoneChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateUserBotCommandsChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUserBotCommandsChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateUserBotCommandsChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateUserBotCommandsChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateUserExtChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUserExtChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateUserExtChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateUserExtChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateUserFullExtChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUserFullExtChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateUserFullExtChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateUserFullExtChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateUserSexChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUserSexChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateUserSexChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateUserSexChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateUserCustomProfileChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUserCustomProfileChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateUserCustomProfileChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateUserCustomProfileChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateUserStatusChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUserStatusChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateUserStatusChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateUserStatusChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateContactRegistered",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateContactRegistered),
        .number = SeqUpdateBody_FieldNumber_UpdateContactRegistered,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateContactRegistered),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateContactsAdded",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateContactsAdded),
        .number = SeqUpdateBody_FieldNumber_UpdateContactsAdded,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateContactsAdded),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateContactsAddTaskSuspended",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateContactsAddTaskSuspended),
        .number = SeqUpdateBody_FieldNumber_UpdateContactsAddTaskSuspended,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateContactsAddTaskSuspended),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateContactsRemoved",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateContactsRemoved),
        .number = SeqUpdateBody_FieldNumber_UpdateContactsRemoved,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateContactsRemoved),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateUserBlocked",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUserBlocked),
        .number = SeqUpdateBody_FieldNumber_UpdateUserBlocked,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateUserBlocked),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateUserUnblocked",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUserUnblocked),
        .number = SeqUpdateBody_FieldNumber_UpdateUserUnblocked,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateUserUnblocked),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateInteractiveMediaEvent",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateInteractiveMediaEvent),
        .number = SeqUpdateBody_FieldNumber_UpdateInteractiveMediaEvent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateInteractiveMediaEvent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateMessage",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateMessage),
        .number = SeqUpdateBody_FieldNumber_UpdateMessage,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateMessageContentChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateMessageContentChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateMessageContentChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateMessageContentChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateMessageSent",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateMessageSent),
        .number = SeqUpdateBody_FieldNumber_UpdateMessageSent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateMessageSent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateMessageReceived",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateMessageReceived),
        .number = SeqUpdateBody_FieldNumber_UpdateMessageReceived,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateMessageReceived),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateMessageRead",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateMessageRead),
        .number = SeqUpdateBody_FieldNumber_UpdateMessageRead,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateMessageRead),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateMessageReadByMe",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateMessageReadByMe),
        .number = SeqUpdateBody_FieldNumber_UpdateMessageReadByMe,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateMessageReadByMe),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateMessageDelete",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateMessageDelete),
        .number = SeqUpdateBody_FieldNumber_UpdateMessageDelete,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateMessageDelete),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateChatClear",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateChatClear),
        .number = SeqUpdateBody_FieldNumber_UpdateChatClear,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateChatClear),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateChatDelete",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateChatDelete),
        .number = SeqUpdateBody_FieldNumber_UpdateChatDelete,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateChatDelete),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateChatArchive",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateChatArchive),
        .number = SeqUpdateBody_FieldNumber_UpdateChatArchive,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateChatArchive),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateChatGroupsChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateChatGroupsChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateChatGroupsChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateChatGroupsChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateDialogFavouriteChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateDialogFavouriteChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateDialogFavouriteChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateDialogFavouriteChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatePinnedMessagesChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdatePinnedMessagesChanged),
        .number = SeqUpdateBody_FieldNumber_UpdatePinnedMessagesChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updatePinnedMessagesChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateGroupTitleChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateGroupTitleChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateGroupTitleChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateGroupTitleChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateGroupAvatarChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateGroupAvatarChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateGroupAvatarChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateGroupAvatarChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateGroupAboutChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateGroupAboutChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateGroupAboutChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateGroupAboutChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateGroupOwnerChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateGroupOwnerChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateGroupOwnerChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateGroupOwnerChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateGroupMembersUpdated",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateGroupMembersUpdated),
        .number = SeqUpdateBody_FieldNumber_UpdateGroupMembersUpdated,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateGroupMembersUpdated),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateGroupMemberDiff",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateGroupMemberDiff),
        .number = SeqUpdateBody_FieldNumber_UpdateGroupMemberDiff,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateGroupMemberDiff),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateGroupMembersCountChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateGroupMembersCountChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateGroupMembersCountChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateGroupMembersCountChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateGroupMemberPermissionsChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateGroupMemberPermissionsChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateGroupMemberPermissionsChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateGroupMemberPermissionsChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateStickerCollectionsChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateStickerCollectionsChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateStickerCollectionsChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateStickerCollectionsChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateStickerPackRemoved",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateStickerPackRemoved),
        .number = SeqUpdateBody_FieldNumber_UpdateStickerPackRemoved,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateStickerPackRemoved),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateStickerPackAdded",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateStickerPackAdded),
        .number = SeqUpdateBody_FieldNumber_UpdateStickerPackAdded,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateStickerPackAdded),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateParameterChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateParameterChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateParameterChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateParameterChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateRawUpdate",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateRawUpdate),
        .number = SeqUpdateBody_FieldNumber_UpdateRawUpdate,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateRawUpdate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateConfig",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateConfig),
        .number = SeqUpdateBody_FieldNumber_UpdateConfig,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateSendMessageError",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateSendMessageError),
        .number = SeqUpdateBody_FieldNumber_UpdateSendMessageError,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateSendMessageError),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateEditMessageError",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateEditMessageError),
        .number = SeqUpdateBody_FieldNumber_UpdateEditMessageError,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateEditMessageError),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateUser",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUser),
        .number = SeqUpdateBody_FieldNumber_UpdateUser,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateUser),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateFeatureFlagChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateFeatureFlagChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateFeatureFlagChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateFeatureFlagChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateGroup",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateGroup),
        .number = SeqUpdateBody_FieldNumber_UpdateGroup,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateGroup),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateGroupMemberInvited",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateGroupMemberInvited),
        .number = SeqUpdateBody_FieldNumber_UpdateGroupMemberInvited,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateGroupMemberInvited),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatePermissionsChange",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdatePermissionsChange),
        .number = SeqUpdateBody_FieldNumber_UpdatePermissionsChange,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updatePermissionsChange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateGroupTyping",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateGroupTyping),
        .number = SeqUpdateBody_FieldNumber_UpdateGroupTyping,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateGroupTyping),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateDialogReadLaterChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateDialogReadLaterChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateDialogReadLaterChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateDialogReadLaterChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateDialogMuteChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateDialogMuteChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateDialogMuteChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateDialogMuteChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateSettingsChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateSettingsChanged),
        .number = SeqUpdateBody_FieldNumber_UpdateSettingsChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateSettingsChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateDeleteMessageError",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateDeleteMessageError),
        .number = SeqUpdateBody_FieldNumber_UpdateDeleteMessageError,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateDeleteMessageError),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateMessageReadError",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateMessageReadError),
        .number = SeqUpdateBody_FieldNumber_UpdateMessageReadError,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateMessageReadError),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateMessageReceivedError",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateMessageReceivedError),
        .number = SeqUpdateBody_FieldNumber_UpdateMessageReceivedError,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateMessageReceivedError),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateClearChatError",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateClearChatError),
        .number = SeqUpdateBody_FieldNumber_UpdateClearChatError,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateClearChatError),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateDeleteChatError",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateDeleteChatError),
        .number = SeqUpdateBody_FieldNumber_UpdateDeleteChatError,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateDeleteChatError),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateFavouriteDialogError",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateFavouriteDialogError),
        .number = SeqUpdateBody_FieldNumber_UpdateFavouriteDialogError,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateFavouriteDialogError),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateUnfavouriteDialogError",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUnfavouriteDialogError),
        .number = SeqUpdateBody_FieldNumber_UpdateUnfavouriteDialogError,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateUnfavouriteDialogError),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateReadDialogLaterError",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateReadDialogLaterError),
        .number = SeqUpdateBody_FieldNumber_UpdateReadDialogLaterError,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateReadDialogLaterError),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateThreadFollowing",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateThreadFollowing),
        .number = SeqUpdateBody_FieldNumber_UpdateThreadFollowing,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SeqUpdateBody__storage_, updateThreadFollowing),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SeqUpdateBody class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SeqUpdateBody__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "update",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SeqUpdateBody_ClearUpdateOneOfCase(SeqUpdateBody *message) {
  GPBDescriptor *descriptor = [SeqUpdateBody descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SeqUpdate

@implementation SeqUpdate

@dynamic seq;
@dynamic hasBody, body;

typedef struct SeqUpdate__storage_ {
  uint32_t _has_storage_[1];
  SeqUpdateBody *body;
  uint64_t seq;
} SeqUpdate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seq",
        .dataTypeSpecific.clazz = Nil,
        .number = SeqUpdate_FieldNumber_Seq,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SeqUpdate__storage_, seq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "body",
        .dataTypeSpecific.clazz = GPBObjCClass(SeqUpdateBody),
        .number = SeqUpdate_FieldNumber_Body,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SeqUpdate__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SeqUpdate class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SeqUpdate__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestGetDifference

@implementation RequestGetDifference

@dynamic seq;
@dynamic hasConfigHash, configHash;

typedef struct RequestGetDifference__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Value *configHash;
  uint64_t seq;
} RequestGetDifference__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seq",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestGetDifference_FieldNumber_Seq,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestGetDifference__storage_, seq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "configHash",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBInt64Value),
        .number = RequestGetDifference_FieldNumber_ConfigHash,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestGetDifference__storage_, configHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetDifference class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestGetDifference__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseGetDifference

@implementation ResponseGetDifference

@dynamic seq;
@dynamic updatesArray, updatesArray_Count;
@dynamic needMore;
@dynamic messagesArray, messagesArray_Count;
@dynamic usersRefsArray, usersRefsArray_Count;
@dynamic groupsRefsArray, groupsRefsArray_Count;
@dynamic hasConfig, config;
@dynamic hasConfigHash, configHash;

typedef struct ResponseGetDifference__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *updatesArray;
  NSMutableArray *messagesArray;
  NSMutableArray *usersRefsArray;
  NSMutableArray *groupsRefsArray;
  Config *config;
  GPBInt64Value *configHash;
  uint64_t seq;
} ResponseGetDifference__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seq",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseGetDifference_FieldNumber_Seq,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseGetDifference__storage_, seq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "updatesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SeqUpdate),
        .number = ResponseGetDifference_FieldNumber_UpdatesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseGetDifference__storage_, updatesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messagesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(HistoryMessage),
        .number = ResponseGetDifference_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseGetDifference__storage_, messagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "needMore",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseGetDifference_FieldNumber_NeedMore,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "usersRefsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(UserOutPeer),
        .number = ResponseGetDifference_FieldNumber_UsersRefsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseGetDifference__storage_, usersRefsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupsRefsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = ResponseGetDifference_FieldNumber_GroupsRefsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseGetDifference__storage_, groupsRefsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(Config),
        .number = ResponseGetDifference_FieldNumber_Config,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ResponseGetDifference__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "configHash",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBInt64Value),
        .number = ResponseGetDifference_FieldNumber_ConfigHash,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ResponseGetDifference__storage_, configHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseGetDifference class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseGetDifference__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupMembersSubset

@implementation GroupMembersSubset

@dynamic hasGroupPeer, groupPeer;
@dynamic memberIdsArray, memberIdsArray_Count;

typedef struct GroupMembersSubset__storage_ {
  uint32_t _has_storage_[1];
  GroupOutPeer *groupPeer;
  NSMutableArray *memberIdsArray;
} GroupMembersSubset__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupPeer",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = GroupMembersSubset_FieldNumber_GroupPeer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupMembersSubset__storage_, groupPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "memberIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupMembersSubset_FieldNumber_MemberIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GroupMembersSubset__storage_, memberIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupMembersSubset class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupMembersSubset__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestGetReferencedEntities

@implementation RequestGetReferencedEntities

@dynamic usersArray, usersArray_Count;
@dynamic midsArray, midsArray_Count;
@dynamic groupMembersArray, groupMembersArray_Count;
@dynamic groupsArray, groupsArray_Count;

typedef struct RequestGetReferencedEntities__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *usersArray;
  NSMutableArray *midsArray;
  NSMutableArray *groupMembersArray;
  NSMutableArray *groupsArray;
} RequestGetReferencedEntities__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(UserOutPeer),
        .number = RequestGetReferencedEntities_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestGetReferencedEntities__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "midsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = RequestGetReferencedEntities_FieldNumber_MidsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestGetReferencedEntities__storage_, midsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupMembersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupMembersSubset),
        .number = RequestGetReferencedEntities_FieldNumber_GroupMembersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestGetReferencedEntities__storage_, groupMembersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = RequestGetReferencedEntities_FieldNumber_GroupsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestGetReferencedEntities__storage_, groupsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetReferencedEntities class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestGetReferencedEntities__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseGetReferencedEntities

@implementation ResponseGetReferencedEntities

@dynamic usersArray, usersArray_Count;
@dynamic groupsArray, groupsArray_Count;
@dynamic messagesArray, messagesArray_Count;

typedef struct ResponseGetReferencedEntities__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *usersArray;
  NSMutableArray *groupsArray;
  NSMutableArray *messagesArray;
} ResponseGetReferencedEntities__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(User),
        .number = ResponseGetReferencedEntities_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseGetReferencedEntities__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Group),
        .number = ResponseGetReferencedEntities_FieldNumber_GroupsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseGetReferencedEntities__storage_, groupsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messagesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(HistoryMessage),
        .number = ResponseGetReferencedEntities_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseGetReferencedEntities__storage_, messagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseGetReferencedEntities class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseGetReferencedEntities__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestGetPartialPeerInfo

@implementation RequestGetPartialPeerInfo

@dynamic usersArray, usersArray_Count;
@dynamic groupsArray, groupsArray_Count;
@dynamic groupMembersArray, groupMembersArray_Count;

typedef struct RequestGetPartialPeerInfo__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *usersArray;
  NSMutableArray *groupsArray;
  NSMutableArray *groupMembersArray;
} RequestGetPartialPeerInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(UserOutPeer),
        .number = RequestGetPartialPeerInfo_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestGetPartialPeerInfo__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = RequestGetPartialPeerInfo_FieldNumber_GroupsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestGetPartialPeerInfo__storage_, groupsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupMembersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupMembersSubset),
        .number = RequestGetPartialPeerInfo_FieldNumber_GroupMembersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestGetPartialPeerInfo__storage_, groupMembersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetPartialPeerInfo class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestGetPartialPeerInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseGetPartialPeerInfo

@implementation ResponseGetPartialPeerInfo

@dynamic usersArray, usersArray_Count;
@dynamic groupsArray, groupsArray_Count;

typedef struct ResponseGetPartialPeerInfo__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *usersArray;
  NSMutableArray *groupsArray;
} ResponseGetPartialPeerInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(UserPartialInfo),
        .number = ResponseGetPartialPeerInfo_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseGetPartialPeerInfo__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupPartialInfo),
        .number = ResponseGetPartialPeerInfo_FieldNumber_GroupsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseGetPartialPeerInfo__storage_, groupsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseGetPartialPeerInfo class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseGetPartialPeerInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateRawUpdate

@implementation UpdateRawUpdate

@dynamic hasType, type;
@dynamic bytes;

typedef struct UpdateRawUpdate__storage_ {
  uint32_t _has_storage_[1];
  GPBStringValue *type;
  NSData *bytes;
} UpdateRawUpdate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = UpdateRawUpdate_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateRawUpdate__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bytes",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateRawUpdate_FieldNumber_Bytes,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateRawUpdate__storage_, bytes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateRawUpdate class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateRawUpdate__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PeersList

@implementation PeersList

@dynamic peersArray, peersArray_Count;

typedef struct PeersList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *peersArray;
} PeersList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = PeersList_FieldNumber_PeersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PeersList__storage_, peersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PeersList class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PeersList__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WeakUpdateCommand

@implementation WeakUpdateCommand

@dynamic commandOneOfCase;
@dynamic changeMyOnline;
@dynamic subscribeToOnlines;
@dynamic unsubscribeFromOnlines;
@dynamic unsubscribeFromAllOnlines;
@dynamic changeMyTyping;
@dynamic subscribeToTypings;
@dynamic unsubscribeFromTypings;
@dynamic unsubscribeFromAllTypings;

typedef struct WeakUpdateCommand__storage_ {
  uint32_t _has_storage_[2];
  WeakUpdateCommand_ChangeMyOnline *changeMyOnline;
  WeakUpdateCommand_SubscribeToOnlines *subscribeToOnlines;
  PeersList *unsubscribeFromOnlines;
  GPBEmpty *unsubscribeFromAllOnlines;
  WeakUpdateCommand_ChangeMyTyping *changeMyTyping;
  PeersList *subscribeToTypings;
  PeersList *unsubscribeFromTypings;
  GPBEmpty *unsubscribeFromAllTypings;
} WeakUpdateCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "changeMyOnline",
        .dataTypeSpecific.clazz = GPBObjCClass(WeakUpdateCommand_ChangeMyOnline),
        .number = WeakUpdateCommand_FieldNumber_ChangeMyOnline,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdateCommand__storage_, changeMyOnline),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "subscribeToOnlines",
        .dataTypeSpecific.clazz = GPBObjCClass(WeakUpdateCommand_SubscribeToOnlines),
        .number = WeakUpdateCommand_FieldNumber_SubscribeToOnlines,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdateCommand__storage_, subscribeToOnlines),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "unsubscribeFromOnlines",
        .dataTypeSpecific.clazz = GPBObjCClass(PeersList),
        .number = WeakUpdateCommand_FieldNumber_UnsubscribeFromOnlines,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdateCommand__storage_, unsubscribeFromOnlines),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "unsubscribeFromAllOnlines",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBEmpty),
        .number = WeakUpdateCommand_FieldNumber_UnsubscribeFromAllOnlines,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdateCommand__storage_, unsubscribeFromAllOnlines),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "changeMyTyping",
        .dataTypeSpecific.clazz = GPBObjCClass(WeakUpdateCommand_ChangeMyTyping),
        .number = WeakUpdateCommand_FieldNumber_ChangeMyTyping,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdateCommand__storage_, changeMyTyping),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "subscribeToTypings",
        .dataTypeSpecific.clazz = GPBObjCClass(PeersList),
        .number = WeakUpdateCommand_FieldNumber_SubscribeToTypings,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdateCommand__storage_, subscribeToTypings),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "unsubscribeFromTypings",
        .dataTypeSpecific.clazz = GPBObjCClass(PeersList),
        .number = WeakUpdateCommand_FieldNumber_UnsubscribeFromTypings,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdateCommand__storage_, unsubscribeFromTypings),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "unsubscribeFromAllTypings",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBEmpty),
        .number = WeakUpdateCommand_FieldNumber_UnsubscribeFromAllTypings,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdateCommand__storage_, unsubscribeFromAllTypings),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WeakUpdateCommand class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WeakUpdateCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "command",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void WeakUpdateCommand_ClearCommandOneOfCase(WeakUpdateCommand *message) {
  GPBDescriptor *descriptor = [WeakUpdateCommand descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - WeakUpdateCommand_ChangeMyOnline

@implementation WeakUpdateCommand_ChangeMyOnline

@dynamic online;
@dynamic timeout;
@dynamic deviceType;

typedef struct WeakUpdateCommand_ChangeMyOnline__storage_ {
  uint32_t _has_storage_[1];
  DeviceType deviceType;
  int64_t timeout;
} WeakUpdateCommand_ChangeMyOnline__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "online",
        .dataTypeSpecific.clazz = Nil,
        .number = WeakUpdateCommand_ChangeMyOnline_FieldNumber_Online,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "timeout",
        .dataTypeSpecific.clazz = Nil,
        .number = WeakUpdateCommand_ChangeMyOnline_FieldNumber_Timeout,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WeakUpdateCommand_ChangeMyOnline__storage_, timeout),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = DeviceType_EnumDescriptor,
        .number = WeakUpdateCommand_ChangeMyOnline_FieldNumber_DeviceType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WeakUpdateCommand_ChangeMyOnline__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WeakUpdateCommand_ChangeMyOnline class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WeakUpdateCommand_ChangeMyOnline__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(WeakUpdateCommand)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WeakUpdateCommand_ChangeMyOnline_DeviceType_RawValue(WeakUpdateCommand_ChangeMyOnline *message) {
  GPBDescriptor *descriptor = [WeakUpdateCommand_ChangeMyOnline descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WeakUpdateCommand_ChangeMyOnline_FieldNumber_DeviceType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetWeakUpdateCommand_ChangeMyOnline_DeviceType_RawValue(WeakUpdateCommand_ChangeMyOnline *message, int32_t value) {
  GPBDescriptor *descriptor = [WeakUpdateCommand_ChangeMyOnline descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WeakUpdateCommand_ChangeMyOnline_FieldNumber_DeviceType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - WeakUpdateCommand_SubscribeToOnlines

@implementation WeakUpdateCommand_SubscribeToOnlines

@dynamic hasPeers, peers;
@dynamic sendUsersId;

typedef struct WeakUpdateCommand_SubscribeToOnlines__storage_ {
  uint32_t _has_storage_[1];
  PeersList *peers;
} WeakUpdateCommand_SubscribeToOnlines__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peers",
        .dataTypeSpecific.clazz = GPBObjCClass(PeersList),
        .number = WeakUpdateCommand_SubscribeToOnlines_FieldNumber_Peers,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WeakUpdateCommand_SubscribeToOnlines__storage_, peers),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sendUsersId",
        .dataTypeSpecific.clazz = Nil,
        .number = WeakUpdateCommand_SubscribeToOnlines_FieldNumber_SendUsersId,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WeakUpdateCommand_SubscribeToOnlines class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WeakUpdateCommand_SubscribeToOnlines__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(WeakUpdateCommand)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WeakUpdateCommand_ChangeMyTyping

@implementation WeakUpdateCommand_ChangeMyTyping

@dynamic hasPeer, peer;
@dynamic type;
@dynamic start;

typedef struct WeakUpdateCommand_ChangeMyTyping__storage_ {
  uint32_t _has_storage_[1];
  TypingType type;
  Peer *peer;
} WeakUpdateCommand_ChangeMyTyping__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = WeakUpdateCommand_ChangeMyTyping_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WeakUpdateCommand_ChangeMyTyping__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = TypingType_EnumDescriptor,
        .number = WeakUpdateCommand_ChangeMyTyping_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WeakUpdateCommand_ChangeMyTyping__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "start",
        .dataTypeSpecific.clazz = Nil,
        .number = WeakUpdateCommand_ChangeMyTyping_FieldNumber_Start,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WeakUpdateCommand_ChangeMyTyping class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WeakUpdateCommand_ChangeMyTyping__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(WeakUpdateCommand)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WeakUpdateCommand_ChangeMyTyping_Type_RawValue(WeakUpdateCommand_ChangeMyTyping *message) {
  GPBDescriptor *descriptor = [WeakUpdateCommand_ChangeMyTyping descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WeakUpdateCommand_ChangeMyTyping_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetWeakUpdateCommand_ChangeMyTyping_Type_RawValue(WeakUpdateCommand_ChangeMyTyping *message, int32_t value) {
  GPBDescriptor *descriptor = [WeakUpdateCommand_ChangeMyTyping descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WeakUpdateCommand_ChangeMyTyping_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - WeakUpdate

@implementation WeakUpdate

@dynamic updateboxOneOfCase;
@dynamic typing;
@dynamic typingStop;
@dynamic userLastSeen;
@dynamic groupOnline;
@dynamic forceReload;
@dynamic userStatusChange;
@dynamic messageReactionUpdate;
@dynamic groupTyping;
@dynamic miniApp;
@dynamic updateContactRegistered;
@dynamic updateContactsAdded;
@dynamic updateContactsAddTaskSuspended;
@dynamic updateContactsRemoved;
@dynamic updateSuggests;
@dynamic updateFeatureFlagChanged;
@dynamic updateDraftsChanged;
@dynamic updateThreadInfos;

typedef struct WeakUpdate__storage_ {
  uint32_t _has_storage_[2];
  UpdateTyping *typing;
  UpdateTypingStop *typingStop;
  UpdateUserLastSeen *userLastSeen;
  UpdateGroupOnline *groupOnline;
  WeakUpdate_UpdateForceReloadState *forceReload;
  UpdateUserStatusChanged *userStatusChange;
  UpdateMessageReactions *messageReactionUpdate;
  UpdateGroupTyping *groupTyping;
  UpdateMiniApp *miniApp;
  UpdateContactRegistered *updateContactRegistered;
  UpdateContactsAdded *updateContactsAdded;
  UpdateContactsAddTaskSuspended *updateContactsAddTaskSuspended;
  UpdateContactsRemoved *updateContactsRemoved;
  UpdateSuggests *updateSuggests;
  UpdateFeatureFlagChanged *updateFeatureFlagChanged;
  UpdateDraftsChanged *updateDraftsChanged;
  UpdateThreadInfos *updateThreadInfos;
} WeakUpdate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "typing",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateTyping),
        .number = WeakUpdate_FieldNumber_Typing,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate__storage_, typing),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "typingStop",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateTypingStop),
        .number = WeakUpdate_FieldNumber_TypingStop,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate__storage_, typingStop),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userLastSeen",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUserLastSeen),
        .number = WeakUpdate_FieldNumber_UserLastSeen,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate__storage_, userLastSeen),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupOnline",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateGroupOnline),
        .number = WeakUpdate_FieldNumber_GroupOnline,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate__storage_, groupOnline),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "forceReload",
        .dataTypeSpecific.clazz = GPBObjCClass(WeakUpdate_UpdateForceReloadState),
        .number = WeakUpdate_FieldNumber_ForceReload,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate__storage_, forceReload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userStatusChange",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateUserStatusChanged),
        .number = WeakUpdate_FieldNumber_UserStatusChange,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate__storage_, userStatusChange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messageReactionUpdate",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateMessageReactions),
        .number = WeakUpdate_FieldNumber_MessageReactionUpdate,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate__storage_, messageReactionUpdate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupTyping",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateGroupTyping),
        .number = WeakUpdate_FieldNumber_GroupTyping,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate__storage_, groupTyping),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "miniApp",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateMiniApp),
        .number = WeakUpdate_FieldNumber_MiniApp,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate__storage_, miniApp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateContactRegistered",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateContactRegistered),
        .number = WeakUpdate_FieldNumber_UpdateContactRegistered,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate__storage_, updateContactRegistered),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateContactsAdded",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateContactsAdded),
        .number = WeakUpdate_FieldNumber_UpdateContactsAdded,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate__storage_, updateContactsAdded),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateContactsAddTaskSuspended",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateContactsAddTaskSuspended),
        .number = WeakUpdate_FieldNumber_UpdateContactsAddTaskSuspended,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate__storage_, updateContactsAddTaskSuspended),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateContactsRemoved",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateContactsRemoved),
        .number = WeakUpdate_FieldNumber_UpdateContactsRemoved,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate__storage_, updateContactsRemoved),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateSuggests",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateSuggests),
        .number = WeakUpdate_FieldNumber_UpdateSuggests,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate__storage_, updateSuggests),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateFeatureFlagChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateFeatureFlagChanged),
        .number = WeakUpdate_FieldNumber_UpdateFeatureFlagChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate__storage_, updateFeatureFlagChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateDraftsChanged",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateDraftsChanged),
        .number = WeakUpdate_FieldNumber_UpdateDraftsChanged,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate__storage_, updateDraftsChanged),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateThreadInfos",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateThreadInfos),
        .number = WeakUpdate_FieldNumber_UpdateThreadInfos,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate__storage_, updateThreadInfos),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WeakUpdate class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WeakUpdate__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "updatebox",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void WeakUpdate_ClearUpdateboxOneOfCase(WeakUpdate *message) {
  GPBDescriptor *descriptor = [WeakUpdate descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - WeakUpdate_UpdateForceReloadState

@implementation WeakUpdate_UpdateForceReloadState

@dynamic fieldsArray, fieldsArray_Count;

typedef struct WeakUpdate_UpdateForceReloadState__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *fieldsArray;
} WeakUpdate_UpdateForceReloadState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fieldsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(WeakUpdate_UpdateForceReloadState_ForceReloadField),
        .number = WeakUpdate_UpdateForceReloadState_FieldNumber_FieldsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WeakUpdate_UpdateForceReloadState__storage_, fieldsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WeakUpdate_UpdateForceReloadState class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WeakUpdate_UpdateForceReloadState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(WeakUpdate)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WeakUpdate_UpdateForceReloadState_ForceReloadField

@implementation WeakUpdate_UpdateForceReloadState_ForceReloadField

@dynamic fieldOneOfCase;
@dynamic reloadDialogs;
@dynamic reloadContacts;
@dynamic reloadHistory;

typedef struct WeakUpdate_UpdateForceReloadState_ForceReloadField__storage_ {
  uint32_t _has_storage_[2];
  GPBEmpty *reloadDialogs;
  GPBEmpty *reloadContacts;
  PeersList *reloadHistory;
} WeakUpdate_UpdateForceReloadState_ForceReloadField__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "reloadDialogs",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBEmpty),
        .number = WeakUpdate_UpdateForceReloadState_ForceReloadField_FieldNumber_ReloadDialogs,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate_UpdateForceReloadState_ForceReloadField__storage_, reloadDialogs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reloadContacts",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBEmpty),
        .number = WeakUpdate_UpdateForceReloadState_ForceReloadField_FieldNumber_ReloadContacts,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate_UpdateForceReloadState_ForceReloadField__storage_, reloadContacts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reloadHistory",
        .dataTypeSpecific.clazz = GPBObjCClass(PeersList),
        .number = WeakUpdate_UpdateForceReloadState_ForceReloadField_FieldNumber_ReloadHistory,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WeakUpdate_UpdateForceReloadState_ForceReloadField__storage_, reloadHistory),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WeakUpdate_UpdateForceReloadState_ForceReloadField class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WeakUpdate_UpdateForceReloadState_ForceReloadField__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "field",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(WeakUpdate_UpdateForceReloadState)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void WeakUpdate_UpdateForceReloadState_ForceReloadField_ClearFieldOneOfCase(WeakUpdate_UpdateForceReloadState_ForceReloadField *message) {
  GPBDescriptor *descriptor = [WeakUpdate_UpdateForceReloadState_ForceReloadField descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - RequestGetState

@implementation RequestGetState


typedef struct RequestGetState__storage_ {
  uint32_t _has_storage_[1];
} RequestGetState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetState class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(RequestGetState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseGetState

@implementation ResponseGetState

@dynamic seq;

typedef struct ResponseGetState__storage_ {
  uint32_t _has_storage_[1];
  uint64_t seq;
} ResponseGetState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seq",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseGetState_FieldNumber_Seq,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseGetState__storage_, seq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseGetState class]
                                     rootClass:[SequenceAndUpdatesRoot class]
                                          file:SequenceAndUpdatesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseGetState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
