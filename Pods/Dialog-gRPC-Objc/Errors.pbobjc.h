// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errors.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Error;
@class MediaError;
@class MediaError_FileSizeExceededError;
@class OperationalError;
@class OperationalError_FlagViolationError;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - ErrorsRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface ErrorsRoot : GPBRootObject
@end

#pragma mark - MediaError

typedef GPB_ENUM(MediaError_FieldNumber) {
  MediaError_FieldNumber_FileSizeExceeded = 1,
};

typedef GPB_ENUM(MediaError_Error_OneOfCase) {
  MediaError_Error_OneOfCase_GPBUnsetOneOfCase = 0,
  MediaError_Error_OneOfCase_FileSizeExceeded = 1,
};

/**
 * / Ошибки связанные с загрузкой и обработкой файлов
 **/
GPB_FINAL @interface MediaError : GPBMessage

@property(nonatomic, readonly) MediaError_Error_OneOfCase errorOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) MediaError_FileSizeExceededError *fileSizeExceeded;

@end

/**
 * Clears whatever value was set for the oneof 'error'.
 **/
void MediaError_ClearErrorOneOfCase(MediaError *message);

#pragma mark - MediaError_FileSizeExceededError

typedef GPB_ENUM(MediaError_FileSizeExceededError_FieldNumber) {
  MediaError_FileSizeExceededError_FieldNumber_MaxFileSize = 1,
};

/**
 * / Ошибка загрузки файла по причине превышения маскимального размера
 **/
GPB_FINAL @interface MediaError_FileSizeExceededError : GPBMessage

/** / Максимальный допустимый размер файла исходя из конфигурации бэкенда */
@property(nonatomic, readwrite) uint32_t maxFileSize;

@end

#pragma mark - OperationalError

typedef GPB_ENUM(OperationalError_FieldNumber) {
  OperationalError_FieldNumber_FlagViolation = 1,
};

typedef GPB_ENUM(OperationalError_Error_OneOfCase) {
  OperationalError_Error_OneOfCase_GPBUnsetOneOfCase = 0,
  OperationalError_Error_OneOfCase_FlagViolation = 1,
};

/**
 * / Ошибки связанные с общим функционированием системы
 **/
GPB_FINAL @interface OperationalError : GPBMessage

@property(nonatomic, readonly) OperationalError_Error_OneOfCase errorOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) OperationalError_FlagViolationError *flagViolation;

@end

/**
 * Clears whatever value was set for the oneof 'error'.
 **/
void OperationalError_ClearErrorOneOfCase(OperationalError *message);

#pragma mark - OperationalError_FlagViolationError

typedef GPB_ENUM(OperationalError_FlagViolationError_FieldNumber) {
  OperationalError_FlagViolationError_FieldNumber_FlagName = 1,
  OperationalError_FlagViolationError_FieldNumber_Value = 2,
  OperationalError_FlagViolationError_FieldNumber_ExpectedValue = 3,
};

/**
 * / Ошибка конфигурационного флага бекенда
 **/
GPB_FINAL @interface OperationalError_FlagViolationError : GPBMessage

/** / Название флага, значение которого не соответствует ожидаемому */
@property(nonatomic, readwrite, copy, null_resettable) NSString *flagName;

/** / Текущее значение флага */
@property(nonatomic, readwrite) BOOL value;

/** / Ожидаемое значение флага */
@property(nonatomic, readwrite) BOOL expectedValue;

@end

#pragma mark - Error

typedef GPB_ENUM(Error_FieldNumber) {
  Error_FieldNumber_Domain = 1,
  Error_FieldNumber_OperationalError = 2,
  Error_FieldNumber_MediaError = 3,
};

typedef GPB_ENUM(Error_Kind_OneOfCase) {
  Error_Kind_OneOfCase_GPBUnsetOneOfCase = 0,
  Error_Kind_OneOfCase_OperationalError = 2,
  Error_Kind_OneOfCase_MediaError = 3,
};

/**
 * / Детали ошибки, прикладывается к некоторым не-OK ответам сервера в трейлер x-error-details в виде сериализованной
 * / протобаф-структуры, уточняя специфику ошибки
 **/
GPB_FINAL @interface Error : GPBMessage

/** / Название бэкенд-подсистемы, которая сгенерировала ошибку (предназначено для ускорения дебага) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *domain;

@property(nonatomic, readonly) Error_Kind_OneOfCase kindOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) OperationalError *operationalError;

@property(nonatomic, readwrite, strong, null_resettable) MediaError *mediaError;

@end

/**
 * Clears whatever value was set for the oneof 'kind'.
 **/
void Error_ClearKindOneOfCase(Error *message);

#pragma mark - ErrorResponse

/**
 * / Тестовый ответ на запрос об ошибке (если в запросе code != 0 -- не будет возвращен)
 **/
GPB_FINAL @interface ErrorResponse : GPBMessage

@end

#pragma mark - ErrorRequest

typedef GPB_ENUM(ErrorRequest_FieldNumber) {
  ErrorRequest_FieldNumber_Code = 1,
  ErrorRequest_FieldNumber_Error = 2,
};

/**
 * / Запрос на генерацию ошибки
 **/
GPB_FINAL @interface ErrorRequest : GPBMessage

/**
 * / Предполагаемый gRPC-код ошибки (https://grpc.github.io/grpc/core/md_doc_statuscodes.html), если == 0, ошибка не будет
 * / сгенерирована
 **/
@property(nonatomic, readwrite) uint32_t code;

/** / Желаемое содержимое деталей об ошибке в трейлерах ответа */
@property(nonatomic, readwrite, strong, null_resettable) Error *error;
/** Test to see if @c error has been set. */
@property(nonatomic, readwrite) BOOL hasError;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
