// Code generated by gRPC proto compiler.  DO NOT EDIT!
// source: authentication.proto

#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
#import "Authentication.pbrpc.h"
#import "Authentication.pbobjc.h"
#import <ProtoRPC/ProtoRPCLegacy.h>
#import <RxLibrary/GRXWriter+Immediate.h>

#import "Empty.pbobjc.h"
#import "Wrappers.pbobjc.h"
#import "Annotations.pbobjc.h"
#import "Definitions.pbobjc.h"
#import "Miscellaneous.pbobjc.h"
#import "Peers.pbobjc.h"
#import "Users.pbobjc.h"
#import "Scalapb.pbobjc.h"

@implementation Authentication

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"dialog"
                 serviceName:@"Authentication"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"dialog"
                 serviceName:@"Authentication"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark StartPhoneAuth(RequestStartPhoneAuth) returns (ResponseStartPhoneAuth)

/**
 * / Метод начала авторизации по телефону
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)startPhoneAuthWithRequest:(RequestStartPhoneAuth *)request handler:(void(^)(ResponseStartPhoneAuth *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToStartPhoneAuthWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод начала авторизации по телефону
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToStartPhoneAuthWithRequest:(RequestStartPhoneAuth *)request handler:(void(^)(ResponseStartPhoneAuth *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"StartPhoneAuth"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseStartPhoneAuth class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод начала авторизации по телефону
 */
- (GRPCUnaryProtoCall *)startPhoneAuthWithMessage:(RequestStartPhoneAuth *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"StartPhoneAuth"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseStartPhoneAuth class]];
}

#pragma mark SendCodeByPhoneCall(RequestSendCodeByPhoneCall) returns (Empty)

/**
 * / Метод посылки телефонного кода активации с помощью звонка
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)sendCodeByPhoneCallWithRequest:(RequestSendCodeByPhoneCall *)request handler:(void(^)(GPBEmpty *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToSendCodeByPhoneCallWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод посылки телефонного кода активации с помощью звонка
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToSendCodeByPhoneCallWithRequest:(RequestSendCodeByPhoneCall *)request handler:(void(^)(GPBEmpty *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"SendCodeByPhoneCall"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[GPBEmpty class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод посылки телефонного кода активации с помощью звонка
 */
- (GRPCUnaryProtoCall *)sendCodeByPhoneCallWithMessage:(RequestSendCodeByPhoneCall *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"SendCodeByPhoneCall"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[GPBEmpty class]];
}

#pragma mark StartEmailAuth(RequestStartEmailAuth) returns (ResponseStartEmailAuth)

/**
 * / Метод начала авторизации по электронной почте
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)startEmailAuthWithRequest:(RequestStartEmailAuth *)request handler:(void(^)(ResponseStartEmailAuth *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToStartEmailAuthWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод начала авторизации по электронной почте
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToStartEmailAuthWithRequest:(RequestStartEmailAuth *)request handler:(void(^)(ResponseStartEmailAuth *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"StartEmailAuth"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseStartEmailAuth class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод начала авторизации по электронной почте
 */
- (GRPCUnaryProtoCall *)startEmailAuthWithMessage:(RequestStartEmailAuth *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"StartEmailAuth"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseStartEmailAuth class]];
}

#pragma mark StartCertificateAuth(RequestStartCertificateAuth) returns (ResponseAuth)

/**
 * / Метод начала авторизации по сертификату
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)startCertificateAuthWithRequest:(RequestStartCertificateAuth *)request handler:(void(^)(ResponseAuth *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToStartCertificateAuthWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод начала авторизации по сертификату
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToStartCertificateAuthWithRequest:(RequestStartCertificateAuth *)request handler:(void(^)(ResponseAuth *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"StartCertificateAuth"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseAuth class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод начала авторизации по сертификату
 */
- (GRPCUnaryProtoCall *)startCertificateAuthWithMessage:(RequestStartCertificateAuth *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"StartCertificateAuth"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseAuth class]];
}

#pragma mark StartTokenAuth(RequestStartTokenAuth) returns (ResponseAuth)

/**
 * / Метод начала авторизации по токену (для ботов)
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)startTokenAuthWithRequest:(RequestStartTokenAuth *)request handler:(void(^)(ResponseAuth *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToStartTokenAuthWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод начала авторизации по токену (для ботов)
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToStartTokenAuthWithRequest:(RequestStartTokenAuth *)request handler:(void(^)(ResponseAuth *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"StartTokenAuth"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseAuth class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод начала авторизации по токену (для ботов)
 */
- (GRPCUnaryProtoCall *)startTokenAuthWithMessage:(RequestStartTokenAuth *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"StartTokenAuth"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseAuth class]];
}

#pragma mark StartUsernameAuth(RequestStartUsernameAuth) returns (ResponseStartUsernameAuth)

/**
 * / Метод начала авторизации по паре логин-пароль
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)startUsernameAuthWithRequest:(RequestStartUsernameAuth *)request handler:(void(^)(ResponseStartUsernameAuth *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToStartUsernameAuthWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод начала авторизации по паре логин-пароль
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToStartUsernameAuthWithRequest:(RequestStartUsernameAuth *)request handler:(void(^)(ResponseStartUsernameAuth *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"StartUsernameAuth"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseStartUsernameAuth class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод начала авторизации по паре логин-пароль
 */
- (GRPCUnaryProtoCall *)startUsernameAuthWithMessage:(RequestStartUsernameAuth *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"StartUsernameAuth"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseStartUsernameAuth class]];
}

#pragma mark ApplyExternalSessionAuth(RequestApplyExternalSessionAuth) returns (ResponseAuth)

/**
 * / Метод начала авторизации переносом авторизованной сессии с внешней доверенной системы
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)applyExternalSessionAuthWithRequest:(RequestApplyExternalSessionAuth *)request handler:(void(^)(ResponseAuth *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToApplyExternalSessionAuthWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод начала авторизации переносом авторизованной сессии с внешней доверенной системы
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToApplyExternalSessionAuthWithRequest:(RequestApplyExternalSessionAuth *)request handler:(void(^)(ResponseAuth *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"ApplyExternalSessionAuth"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseAuth class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод начала авторизации переносом авторизованной сессии с внешней доверенной системы
 */
- (GRPCUnaryProtoCall *)applyExternalSessionAuthWithMessage:(RequestApplyExternalSessionAuth *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"ApplyExternalSessionAuth"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseAuth class]];
}

#pragma mark GetIdToken(RequestGetIdToken) returns (ResponseGetIdToken)

/**
 * / Метод получения токена сессии для внешней системы
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getIdTokenWithRequest:(RequestGetIdToken *)request handler:(void(^)(ResponseGetIdToken *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetIdTokenWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод получения токена сессии для внешней системы
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetIdTokenWithRequest:(RequestGetIdToken *)request handler:(void(^)(ResponseGetIdToken *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetIdToken"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseGetIdToken class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод получения токена сессии для внешней системы
 */
- (GRPCUnaryProtoCall *)getIdTokenWithMessage:(RequestGetIdToken *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetIdToken"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseGetIdToken class]];
}

#pragma mark StartAuthTransaction(RequestStartAuthTransaction) returns (ResponseStartAuthTransaction)

/**
 * / Метод начала обобщенной авторизации
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)startAuthTransactionWithRequest:(RequestStartAuthTransaction *)request handler:(void(^)(ResponseStartAuthTransaction *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToStartAuthTransactionWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод начала обобщенной авторизации
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToStartAuthTransactionWithRequest:(RequestStartAuthTransaction *)request handler:(void(^)(ResponseStartAuthTransaction *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"StartAuthTransaction"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseStartAuthTransaction class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод начала обобщенной авторизации
 */
- (GRPCUnaryProtoCall *)startAuthTransactionWithMessage:(RequestStartAuthTransaction *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"StartAuthTransaction"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseStartAuthTransaction class]];
}

#pragma mark ValidateCode(RequestValidateCode) returns (ResponseAuth)

/**
 * / Методя валидации активационного кода
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)validateCodeWithRequest:(RequestValidateCode *)request handler:(void(^)(ResponseAuth *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToValidateCodeWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Методя валидации активационного кода
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToValidateCodeWithRequest:(RequestValidateCode *)request handler:(void(^)(ResponseAuth *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"ValidateCode"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseAuth class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Методя валидации активационного кода
 */
- (GRPCUnaryProtoCall *)validateCodeWithMessage:(RequestValidateCode *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"ValidateCode"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseAuth class]];
}

#pragma mark ResendCode(RequestResendCode) returns (Empty)

/**
 * / Метод перепосылки активационного кода
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)resendCodeWithRequest:(RequestResendCode *)request handler:(void(^)(GPBEmpty *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToResendCodeWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод перепосылки активационного кода
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToResendCodeWithRequest:(RequestResendCode *)request handler:(void(^)(GPBEmpty *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"ResendCode"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[GPBEmpty class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод перепосылки активационного кода
 */
- (GRPCUnaryProtoCall *)resendCodeWithMessage:(RequestResendCode *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"ResendCode"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[GPBEmpty class]];
}

#pragma mark ValidatePassword(RequestValidatePassword) returns (ResponseAuth)

/**
 * / Метод валидации пароля
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)validatePasswordWithRequest:(RequestValidatePassword *)request handler:(void(^)(ResponseAuth *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToValidatePasswordWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод валидации пароля
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToValidatePasswordWithRequest:(RequestValidatePassword *)request handler:(void(^)(ResponseAuth *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"ValidatePassword"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseAuth class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод валидации пароля
 */
- (GRPCUnaryProtoCall *)validatePasswordWithMessage:(RequestValidatePassword *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"ValidatePassword"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseAuth class]];
}

#pragma mark GetOAuth2Params(RequestGetOAuth2Params) returns (ResponseGetOAuth2Params)

/**
 * / Метод получения параметров OAuth2-платформы
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getOAuth2ParamsWithRequest:(RequestGetOAuth2Params *)request handler:(void(^)(ResponseGetOAuth2Params *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetOAuth2ParamsWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод получения параметров OAuth2-платформы
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetOAuth2ParamsWithRequest:(RequestGetOAuth2Params *)request handler:(void(^)(ResponseGetOAuth2Params *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetOAuth2Params"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseGetOAuth2Params class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод получения параметров OAuth2-платформы
 */
- (GRPCUnaryProtoCall *)getOAuth2ParamsWithMessage:(RequestGetOAuth2Params *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetOAuth2Params"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseGetOAuth2Params class]];
}

#pragma mark CompleteOAuth2(RequestCompleteOAuth2) returns (ResponseAuth)

/**
 * / Метод финализации аутентификации на OAuth2-платформе
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)completeOAuth2WithRequest:(RequestCompleteOAuth2 *)request handler:(void(^)(ResponseAuth *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToCompleteOAuth2WithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод финализации аутентификации на OAuth2-платформе
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToCompleteOAuth2WithRequest:(RequestCompleteOAuth2 *)request handler:(void(^)(ResponseAuth *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"CompleteOAuth2"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseAuth class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод финализации аутентификации на OAuth2-платформе
 */
- (GRPCUnaryProtoCall *)completeOAuth2WithMessage:(RequestCompleteOAuth2 *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"CompleteOAuth2"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseAuth class]];
}

#pragma mark SignUp(RequestSignUp) returns (ResponseAuth)

/**
 * / Метод регистрации пользователя
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)signUpWithRequest:(RequestSignUp *)request handler:(void(^)(ResponseAuth *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToSignUpWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод регистрации пользователя
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToSignUpWithRequest:(RequestSignUp *)request handler:(void(^)(ResponseAuth *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"SignUp"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseAuth class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод регистрации пользователя
 */
- (GRPCUnaryProtoCall *)signUpWithMessage:(RequestSignUp *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"SignUp"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseAuth class]];
}

#pragma mark GetAuthSessions(RequestGetAuthSessions) returns (ResponseGetAuthSessions)

/**
 * / Метод получения авторизованных сессий
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getAuthSessionsWithRequest:(RequestGetAuthSessions *)request handler:(void(^)(ResponseGetAuthSessions *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetAuthSessionsWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод получения авторизованных сессий
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetAuthSessionsWithRequest:(RequestGetAuthSessions *)request handler:(void(^)(ResponseGetAuthSessions *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetAuthSessions"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseGetAuthSessions class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод получения авторизованных сессий
 */
- (GRPCUnaryProtoCall *)getAuthSessionsWithMessage:(RequestGetAuthSessions *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetAuthSessions"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseGetAuthSessions class]];
}

#pragma mark TerminateSession(RequestTerminateSession) returns (Empty)

/**
 * / Метод завершения сессии
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)terminateSessionWithRequest:(RequestTerminateSession *)request handler:(void(^)(GPBEmpty *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToTerminateSessionWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод завершения сессии
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToTerminateSessionWithRequest:(RequestTerminateSession *)request handler:(void(^)(GPBEmpty *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"TerminateSession"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[GPBEmpty class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод завершения сессии
 */
- (GRPCUnaryProtoCall *)terminateSessionWithMessage:(RequestTerminateSession *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"TerminateSession"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[GPBEmpty class]];
}

#pragma mark TerminateAllSessions(RequestTerminateAllSessions) returns (Empty)

/**
 * / Метод завершения всех сессий пользователя кроме текущей
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)terminateAllSessionsWithRequest:(RequestTerminateAllSessions *)request handler:(void(^)(GPBEmpty *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToTerminateAllSessionsWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод завершения всех сессий пользователя кроме текущей
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToTerminateAllSessionsWithRequest:(RequestTerminateAllSessions *)request handler:(void(^)(GPBEmpty *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"TerminateAllSessions"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[GPBEmpty class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод завершения всех сессий пользователя кроме текущей
 */
- (GRPCUnaryProtoCall *)terminateAllSessionsWithMessage:(RequestTerminateAllSessions *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"TerminateAllSessions"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[GPBEmpty class]];
}

#pragma mark SignOut(RequestSignOut) returns (Empty)

/**
 * / Метод завершения текущей сессии
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)signOutWithRequest:(RequestSignOut *)request handler:(void(^)(GPBEmpty *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToSignOutWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод завершения текущей сессии
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToSignOutWithRequest:(RequestSignOut *)request handler:(void(^)(GPBEmpty *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"SignOut"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[GPBEmpty class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод завершения текущей сессии
 */
- (GRPCUnaryProtoCall *)signOutWithMessage:(RequestSignOut *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"SignOut"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[GPBEmpty class]];
}

#pragma mark ChangePassword(RequestChangePassword) returns (Empty)

/**
 * / Мтеод изменения пароля пользователя
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)changePasswordWithRequest:(RequestChangePassword *)request handler:(void(^)(GPBEmpty *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToChangePasswordWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Мтеод изменения пароля пользователя
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToChangePasswordWithRequest:(RequestChangePassword *)request handler:(void(^)(GPBEmpty *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"ChangePassword"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[GPBEmpty class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Мтеод изменения пароля пользователя
 */
- (GRPCUnaryProtoCall *)changePasswordWithMessage:(RequestChangePassword *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"ChangePassword"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[GPBEmpty class]];
}

#pragma mark GetSelf(RequestGetSelf) returns (ResponseGetSelf)

/**
 * / Метод получения структуры текущего пользователя
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getSelfWithRequest:(RequestGetSelf *)request handler:(void(^)(ResponseGetSelf *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetSelfWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * / Метод получения структуры текущего пользователя
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetSelfWithRequest:(RequestGetSelf *)request handler:(void(^)(ResponseGetSelf *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetSelf"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[ResponseGetSelf class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * / Метод получения структуры текущего пользователя
 */
- (GRPCUnaryProtoCall *)getSelfWithMessage:(RequestGetSelf *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetSelf"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[ResponseGetSelf class]];
}

@end
#endif
