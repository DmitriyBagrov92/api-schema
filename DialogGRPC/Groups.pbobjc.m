// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: groups.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Groups.pbobjc.h"
#import "Timestamp.pbobjc.h"
#import "Wrappers.pbobjc.h"
#import "Empty.pbobjc.h"
#import "Annotations.pbobjc.h"
#import "Definitions.pbobjc.h"
#import "Peers.pbobjc.h"
#import "MediaAndFiles.pbobjc.h"
#import "Scalapb.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Avatar);
GPBObjCClassDeclaration(FileLocation);
GPBObjCClassDeclaration(GPBBytesValue);
GPBObjCClassDeclaration(GPBInt32Value);
GPBObjCClassDeclaration(GPBInt64Value);
GPBObjCClassDeclaration(GPBStringValue);
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(Group);
GPBObjCClassDeclaration(GroupData);
GPBObjCClassDeclaration(GroupMemberPermission);
GPBObjCClassDeclaration(GroupOutPeer);
GPBObjCClassDeclaration(Member);
GPBObjCClassDeclaration(UserOutPeer);

#pragma mark - GroupsRoot

@implementation GroupsRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
    [registry addExtensions:[DefinitionsRoot extensionRegistry]];
    [registry addExtensions:[ScalapbRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - GroupsRoot_FileDescriptor

static GPBFileDescriptor *GroupsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"dialog"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum GroupType

GPBEnumDescriptor *GroupType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GroupTypeUnknown\000GroupTypeGroup\000GroupTyp"
        "eChannel\000GroupTypeThread\000";
    static const int32_t values[] = {
        GroupType_GroupTypeUnknown,
        GroupType_GroupTypeGroup,
        GroupType_GroupTypeChannel,
        GroupType_GroupTypeThread,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GroupType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GroupType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GroupType_IsValidValue(int32_t value__) {
  switch (value__) {
    case GroupType_GroupTypeUnknown:
    case GroupType_GroupTypeGroup:
    case GroupType_GroupTypeChannel:
    case GroupType_GroupTypeThread:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum GroupAdminPermission

GPBEnumDescriptor *GroupAdminPermission_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GroupAdminPermissionUnknown\000GroupAdminPe"
        "rmissionEditshortname\000GroupAdminPermissi"
        "onInvite\000GroupAdminPermissionKick\000GroupA"
        "dminPermissionUpdateinfo\000GroupAdminPermi"
        "ssionSetpermissions\000GroupAdminPermission"
        "Editmessage\000GroupAdminPermissionDeleteme"
        "ssage\000GroupAdminPermissionGetintegration"
        "token\000GroupAdminPermissionSendmessage\000Gr"
        "oupAdminPermissionPinmessage\000GroupAdminP"
        "ermissionViewmembers\000GroupAdminPermissio"
        "nLeave\000GroupAdminPermissionTargeting\000Gro"
        "upAdminPermissionDelete\000GroupAdminPermis"
        "sionManageConference\000";
    static const int32_t values[] = {
        GroupAdminPermission_GroupAdminPermissionUnknown,
        GroupAdminPermission_GroupAdminPermissionEditshortname,
        GroupAdminPermission_GroupAdminPermissionInvite,
        GroupAdminPermission_GroupAdminPermissionKick,
        GroupAdminPermission_GroupAdminPermissionUpdateinfo,
        GroupAdminPermission_GroupAdminPermissionSetpermissions,
        GroupAdminPermission_GroupAdminPermissionEditmessage,
        GroupAdminPermission_GroupAdminPermissionDeletemessage,
        GroupAdminPermission_GroupAdminPermissionGetintegrationtoken,
        GroupAdminPermission_GroupAdminPermissionSendmessage,
        GroupAdminPermission_GroupAdminPermissionPinmessage,
        GroupAdminPermission_GroupAdminPermissionViewmembers,
        GroupAdminPermission_GroupAdminPermissionLeave,
        GroupAdminPermission_GroupAdminPermissionTargeting,
        GroupAdminPermission_GroupAdminPermissionDelete,
        GroupAdminPermission_GroupAdminPermissionManageConference,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GroupAdminPermission)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GroupAdminPermission_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GroupAdminPermission_IsValidValue(int32_t value__) {
  switch (value__) {
    case GroupAdminPermission_GroupAdminPermissionUnknown:
    case GroupAdminPermission_GroupAdminPermissionEditshortname:
    case GroupAdminPermission_GroupAdminPermissionInvite:
    case GroupAdminPermission_GroupAdminPermissionKick:
    case GroupAdminPermission_GroupAdminPermissionUpdateinfo:
    case GroupAdminPermission_GroupAdminPermissionSetpermissions:
    case GroupAdminPermission_GroupAdminPermissionEditmessage:
    case GroupAdminPermission_GroupAdminPermissionDeletemessage:
    case GroupAdminPermission_GroupAdminPermissionGetintegrationtoken:
    case GroupAdminPermission_GroupAdminPermissionSendmessage:
    case GroupAdminPermission_GroupAdminPermissionPinmessage:
    case GroupAdminPermission_GroupAdminPermissionViewmembers:
    case GroupAdminPermission_GroupAdminPermissionLeave:
    case GroupAdminPermission_GroupAdminPermissionTargeting:
    case GroupAdminPermission_GroupAdminPermissionDelete:
    case GroupAdminPermission_GroupAdminPermissionManageConference:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Member

@implementation Member

@dynamic userId;
@dynamic invitedAt;
@dynamic permissionsArray, permissionsArray_Count;
@dynamic clock;
@dynamic hasDeletedAt, deletedAt;

typedef struct Member__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  GPBEnumArray *permissionsArray;
  GPBTimestamp *deletedAt;
  int64_t invitedAt;
  int64_t clock;
} Member__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = Member_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Member__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "invitedAt",
        .dataTypeSpecific.clazz = Nil,
        .number = Member_FieldNumber_InvitedAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Member__storage_, invitedAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "permissionsArray",
        .dataTypeSpecific.enumDescFunc = GroupAdminPermission_EnumDescriptor,
        .number = Member_FieldNumber_PermissionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Member__storage_, permissionsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = Nil,
        .number = Member_FieldNumber_Clock,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Member__storage_, clock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "deletedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Member_FieldNumber_DeletedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Member__storage_, deletedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Member class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Member__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Group

@implementation Group

@dynamic id_p;
@dynamic accessHash;
@dynamic hasData_p, data_p;
@dynamic hasSelfMember, selfMember;

typedef struct Group__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  GroupData *data_p;
  Member *selfMember;
  int64_t accessHash;
} Group__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Group_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Group__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accessHash",
        .dataTypeSpecific.clazz = Nil,
        .number = Group_FieldNumber_AccessHash,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Group__storage_, accessHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupData),
        .number = Group_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Group__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "selfMember",
        .dataTypeSpecific.clazz = GPBObjCClass(Member),
        .number = Group_FieldNumber_SelfMember,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Group__storage_, selfMember),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Group class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Group__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupData

@implementation GroupData

@dynamic spaceId;
@dynamic title;
@dynamic hasAvatar, avatar;
@dynamic membersAmount;
@dynamic groupType;
@dynamic ownerUserId;
@dynamic hasCreatedAt, createdAt;
@dynamic hasAbout, about;
@dynamic hasShortname, shortname;
@dynamic basePermissionsArray, basePermissionsArray_Count;
@dynamic clock;
@dynamic hasPinnedAt, pinnedAt;
@dynamic hasConferenceLink, conferenceLink;
@dynamic hasMembersCountLimit, membersCountLimit;
@dynamic hasDeletedAt, deletedAt;

typedef struct GroupData__storage_ {
  uint32_t _has_storage_[1];
  int32_t membersAmount;
  GroupType groupType;
  NSString *spaceId;
  NSString *title;
  Avatar *avatar;
  NSString *ownerUserId;
  GPBTimestamp *createdAt;
  GPBStringValue *about;
  GPBStringValue *shortname;
  GPBEnumArray *basePermissionsArray;
  GPBInt64Value *pinnedAt;
  GPBStringValue *conferenceLink;
  GPBInt32Value *membersCountLimit;
  GPBInt64Value *deletedAt;
  int64_t clock;
} GroupData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spaceId",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupData_FieldNumber_SpaceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupData__storage_, spaceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupData_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GroupData__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.clazz = GPBObjCClass(Avatar),
        .number = GroupData_FieldNumber_Avatar,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GroupData__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "membersAmount",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupData_FieldNumber_MembersAmount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GroupData__storage_, membersAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "groupType",
        .dataTypeSpecific.enumDescFunc = GroupType_EnumDescriptor,
        .number = GroupData_FieldNumber_GroupType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GroupData__storage_, groupType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "ownerUserId",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupData_FieldNumber_OwnerUserId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GroupData__storage_, ownerUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = GroupData_FieldNumber_CreatedAt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GroupData__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "about",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = GroupData_FieldNumber_About,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GroupData__storage_, about),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "shortname",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = GroupData_FieldNumber_Shortname,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GroupData__storage_, shortname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "basePermissionsArray",
        .dataTypeSpecific.enumDescFunc = GroupAdminPermission_EnumDescriptor,
        .number = GroupData_FieldNumber_BasePermissionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GroupData__storage_, basePermissionsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupData_FieldNumber_Clock,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GroupData__storage_, clock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pinnedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBInt64Value),
        .number = GroupData_FieldNumber_PinnedAt,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GroupData__storage_, pinnedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "conferenceLink",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = GroupData_FieldNumber_ConferenceLink,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GroupData__storage_, conferenceLink),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "membersCountLimit",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBInt32Value),
        .number = GroupData_FieldNumber_MembersCountLimit,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(GroupData__storage_, membersCountLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deletedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBInt64Value),
        .number = GroupData_FieldNumber_DeletedAt,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(GroupData__storage_, deletedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupData class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GroupData_GroupType_RawValue(GroupData *message) {
  GPBDescriptor *descriptor = [GroupData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupData_FieldNumber_GroupType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetGroupData_GroupType_RawValue(GroupData *message, int32_t value) {
  GPBDescriptor *descriptor = [GroupData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupData_FieldNumber_GroupType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - GroupPartialInfo

@implementation GroupPartialInfo

@dynamic id_p;
@dynamic accessHash;
@dynamic clock;
@dynamic type;
@dynamic title;
@dynamic hasShortname, shortname;
@dynamic hasAvatar, avatar;
@dynamic hasSelfMember, selfMember;
@dynamic hasPinnedAt, pinnedAt;

typedef struct GroupPartialInfo__storage_ {
  uint32_t _has_storage_[1];
  GroupType type;
  NSString *id_p;
  NSString *title;
  GPBStringValue *shortname;
  Avatar *avatar;
  Member *selfMember;
  GPBInt64Value *pinnedAt;
  int64_t accessHash;
  int64_t clock;
} GroupPartialInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupPartialInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupPartialInfo__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accessHash",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupPartialInfo_FieldNumber_AccessHash,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GroupPartialInfo__storage_, accessHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupPartialInfo_FieldNumber_Clock,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GroupPartialInfo__storage_, clock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = GroupType_EnumDescriptor,
        .number = GroupPartialInfo_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GroupPartialInfo__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupPartialInfo_FieldNumber_Title,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GroupPartialInfo__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shortname",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = GroupPartialInfo_FieldNumber_Shortname,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GroupPartialInfo__storage_, shortname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.clazz = GPBObjCClass(Avatar),
        .number = GroupPartialInfo_FieldNumber_Avatar,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GroupPartialInfo__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "selfMember",
        .dataTypeSpecific.clazz = GPBObjCClass(Member),
        .number = GroupPartialInfo_FieldNumber_SelfMember,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GroupPartialInfo__storage_, selfMember),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pinnedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBInt64Value),
        .number = GroupPartialInfo_FieldNumber_PinnedAt,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GroupPartialInfo__storage_, pinnedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupPartialInfo class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupPartialInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GroupPartialInfo_Type_RawValue(GroupPartialInfo *message) {
  GPBDescriptor *descriptor = [GroupPartialInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupPartialInfo_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetGroupPartialInfo_Type_RawValue(GroupPartialInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [GroupPartialInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupPartialInfo_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - UpdateGroup

@implementation UpdateGroup

@dynamic id_p;
@dynamic hasData_p, data_p;

typedef struct UpdateGroup__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  GroupData *data_p;
} UpdateGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroup_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateGroup__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupData),
        .number = UpdateGroup_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateGroup__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroup class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateGroup__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestLoadMembers

@implementation RequestLoadMembers

@dynamic hasGroup, group;
@dynamic limit;
@dynamic hasNext, next;

typedef struct RequestLoadMembers__storage_ {
  uint32_t _has_storage_[1];
  int32_t limit;
  GroupOutPeer *group;
  GPBBytesValue *next;
} RequestLoadMembers__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "group",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = RequestLoadMembers_FieldNumber_Group,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestLoadMembers__storage_, group),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "limit",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestLoadMembers_FieldNumber_Limit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestLoadMembers__storage_, limit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "next",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBBytesValue),
        .number = RequestLoadMembers_FieldNumber_Next,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestLoadMembers__storage_, next),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestLoadMembers class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestLoadMembers__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseLoadMembers

@implementation ResponseLoadMembers

@dynamic hasCursor, cursor;
@dynamic membersArray, membersArray_Count;

typedef struct ResponseLoadMembers__storage_ {
  uint32_t _has_storage_[1];
  GPBBytesValue *cursor;
  NSMutableArray *membersArray;
} ResponseLoadMembers__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cursor",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBBytesValue),
        .number = ResponseLoadMembers_FieldNumber_Cursor,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseLoadMembers__storage_, cursor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "membersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Member),
        .number = ResponseLoadMembers_FieldNumber_MembersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseLoadMembers__storage_, membersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseLoadMembers class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseLoadMembers__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateGroupTitleChanged

@implementation UpdateGroupTitleChanged

@dynamic groupId;
@dynamic title;

typedef struct UpdateGroupTitleChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSString *title;
} UpdateGroupTitleChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupTitleChanged_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateGroupTitleChanged__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupTitleChanged_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateGroupTitleChanged__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroupTitleChanged class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateGroupTitleChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateGroupAvatarChanged

@implementation UpdateGroupAvatarChanged

@dynamic groupId;
@dynamic hasAvatar, avatar;

typedef struct UpdateGroupAvatarChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  Avatar *avatar;
} UpdateGroupAvatarChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupAvatarChanged_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateGroupAvatarChanged__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.clazz = GPBObjCClass(Avatar),
        .number = UpdateGroupAvatarChanged_FieldNumber_Avatar,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateGroupAvatarChanged__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroupAvatarChanged class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateGroupAvatarChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateGroupAboutChanged

@implementation UpdateGroupAboutChanged

@dynamic groupId;
@dynamic hasAbout, about;

typedef struct UpdateGroupAboutChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  GPBStringValue *about;
} UpdateGroupAboutChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupAboutChanged_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateGroupAboutChanged__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "about",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = UpdateGroupAboutChanged_FieldNumber_About,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateGroupAboutChanged__storage_, about),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroupAboutChanged class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateGroupAboutChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateGroupOwnerChanged

@implementation UpdateGroupOwnerChanged

@dynamic groupId;
@dynamic userId;

typedef struct UpdateGroupOwnerChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSString *userId;
} UpdateGroupOwnerChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupOwnerChanged_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateGroupOwnerChanged__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupOwnerChanged_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateGroupOwnerChanged__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroupOwnerChanged class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateGroupOwnerChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateGroupBasePermissionsChanged

@implementation UpdateGroupBasePermissionsChanged

@dynamic groupId;
@dynamic basePermissionsArray, basePermissionsArray_Count;

typedef struct UpdateGroupBasePermissionsChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  GPBEnumArray *basePermissionsArray;
} UpdateGroupBasePermissionsChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupBasePermissionsChanged_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateGroupBasePermissionsChanged__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "basePermissionsArray",
        .dataTypeSpecific.enumDescFunc = GroupAdminPermission_EnumDescriptor,
        .number = UpdateGroupBasePermissionsChanged_FieldNumber_BasePermissionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateGroupBasePermissionsChanged__storage_, basePermissionsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroupBasePermissionsChanged class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateGroupBasePermissionsChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateGroupMembersUpdated

@implementation UpdateGroupMembersUpdated

@dynamic groupId;
@dynamic membersArray, membersArray_Count;

typedef struct UpdateGroupMembersUpdated__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSMutableArray *membersArray;
} UpdateGroupMembersUpdated__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupMembersUpdated_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateGroupMembersUpdated__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "membersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Member),
        .number = UpdateGroupMembersUpdated_FieldNumber_MembersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateGroupMembersUpdated__storage_, membersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroupMembersUpdated class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateGroupMembersUpdated__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateGroupMemberDiff

@implementation UpdateGroupMemberDiff

@dynamic groupId;
@dynamic removedUsersArray, removedUsersArray_Count;
@dynamic addedMembersArray, addedMembersArray_Count;
@dynamic membersCount;

typedef struct UpdateGroupMemberDiff__storage_ {
  uint32_t _has_storage_[1];
  int32_t membersCount;
  NSString *groupId;
  NSMutableArray *removedUsersArray;
  NSMutableArray *addedMembersArray;
} UpdateGroupMemberDiff__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupMemberDiff_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateGroupMemberDiff__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "removedUsersArray",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupMemberDiff_FieldNumber_RemovedUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateGroupMemberDiff__storage_, removedUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addedMembersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Member),
        .number = UpdateGroupMemberDiff_FieldNumber_AddedMembersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateGroupMemberDiff__storage_, addedMembersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "membersCount",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupMemberDiff_FieldNumber_MembersCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateGroupMemberDiff__storage_, membersCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroupMemberDiff class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateGroupMemberDiff__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateGroupMembersCountChanged

@implementation UpdateGroupMembersCountChanged

@dynamic groupId;
@dynamic membersCount;

typedef struct UpdateGroupMembersCountChanged__storage_ {
  uint32_t _has_storage_[1];
  int32_t membersCount;
  NSString *groupId;
} UpdateGroupMembersCountChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupMembersCountChanged_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateGroupMembersCountChanged__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "membersCount",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupMembersCountChanged_FieldNumber_MembersCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateGroupMembersCountChanged__storage_, membersCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroupMembersCountChanged class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateGroupMembersCountChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestCreateGroup

@implementation RequestCreateGroup

@dynamic rid;
@dynamic hasSpaceId, spaceId;
@dynamic title;
@dynamic usersArray, usersArray_Count;
@dynamic groupType;
@dynamic hasUsername, username;
@dynamic basePermissionsArray, basePermissionsArray_Count;

typedef struct RequestCreateGroup__storage_ {
  uint32_t _has_storage_[1];
  GroupType groupType;
  GPBStringValue *spaceId;
  NSString *title;
  NSMutableArray *usersArray;
  GPBStringValue *username;
  GPBEnumArray *basePermissionsArray;
  int64_t rid;
} RequestCreateGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rid",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestCreateGroup_FieldNumber_Rid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestCreateGroup__storage_, rid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "spaceId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = RequestCreateGroup_FieldNumber_SpaceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestCreateGroup__storage_, spaceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestCreateGroup_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestCreateGroup__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(UserOutPeer),
        .number = RequestCreateGroup_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestCreateGroup__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupType",
        .dataTypeSpecific.enumDescFunc = GroupType_EnumDescriptor,
        .number = RequestCreateGroup_FieldNumber_GroupType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RequestCreateGroup__storage_, groupType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "username",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = RequestCreateGroup_FieldNumber_Username,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RequestCreateGroup__storage_, username),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "basePermissionsArray",
        .dataTypeSpecific.enumDescFunc = GroupAdminPermission_EnumDescriptor,
        .number = RequestCreateGroup_FieldNumber_BasePermissionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestCreateGroup__storage_, basePermissionsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestCreateGroup class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestCreateGroup__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RequestCreateGroup_GroupType_RawValue(RequestCreateGroup *message) {
  GPBDescriptor *descriptor = [RequestCreateGroup descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RequestCreateGroup_FieldNumber_GroupType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetRequestCreateGroup_GroupType_RawValue(RequestCreateGroup *message, int32_t value) {
  GPBDescriptor *descriptor = [RequestCreateGroup descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RequestCreateGroup_FieldNumber_GroupType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - ResponseCreateGroup

@implementation ResponseCreateGroup

@dynamic hasGroup, group;
@dynamic userPeersArray, userPeersArray_Count;

typedef struct ResponseCreateGroup__storage_ {
  uint32_t _has_storage_[1];
  Group *group;
  NSMutableArray *userPeersArray;
} ResponseCreateGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "group",
        .dataTypeSpecific.clazz = GPBObjCClass(Group),
        .number = ResponseCreateGroup_FieldNumber_Group,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseCreateGroup__storage_, group),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userPeersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(UserOutPeer),
        .number = ResponseCreateGroup_FieldNumber_UserPeersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseCreateGroup__storage_, userPeersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseCreateGroup class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseCreateGroup__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestEditGroupTitle

@implementation RequestEditGroupTitle

@dynamic hasGroupPeer, groupPeer;
@dynamic rid;
@dynamic title;

typedef struct RequestEditGroupTitle__storage_ {
  uint32_t _has_storage_[1];
  GroupOutPeer *groupPeer;
  NSString *title;
  int64_t rid;
} RequestEditGroupTitle__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupPeer",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = RequestEditGroupTitle_FieldNumber_GroupPeer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestEditGroupTitle__storage_, groupPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rid",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestEditGroupTitle_FieldNumber_Rid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestEditGroupTitle__storage_, rid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestEditGroupTitle_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestEditGroupTitle__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestEditGroupTitle class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestEditGroupTitle__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestSetGroupShortname

@implementation RequestSetGroupShortname

@dynamic hasPeer, peer;
@dynamic shortname;

typedef struct RequestSetGroupShortname__storage_ {
  uint32_t _has_storage_[1];
  GroupOutPeer *peer;
  NSString *shortname;
} RequestSetGroupShortname__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = RequestSetGroupShortname_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestSetGroupShortname__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "shortname",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestSetGroupShortname_FieldNumber_Shortname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestSetGroupShortname__storage_, shortname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestSetGroupShortname class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestSetGroupShortname__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestEditGroupAvatar

@implementation RequestEditGroupAvatar

@dynamic hasGroupPeer, groupPeer;
@dynamic rid;
@dynamic hasFileLocation, fileLocation;

typedef struct RequestEditGroupAvatar__storage_ {
  uint32_t _has_storage_[1];
  GroupOutPeer *groupPeer;
  FileLocation *fileLocation;
  int64_t rid;
} RequestEditGroupAvatar__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupPeer",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = RequestEditGroupAvatar_FieldNumber_GroupPeer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestEditGroupAvatar__storage_, groupPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rid",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestEditGroupAvatar_FieldNumber_Rid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestEditGroupAvatar__storage_, rid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fileLocation",
        .dataTypeSpecific.clazz = GPBObjCClass(FileLocation),
        .number = RequestEditGroupAvatar_FieldNumber_FileLocation,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestEditGroupAvatar__storage_, fileLocation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestEditGroupAvatar class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestEditGroupAvatar__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestRemoveGroupAvatar

@implementation RequestRemoveGroupAvatar

@dynamic hasGroupPeer, groupPeer;
@dynamic rid;

typedef struct RequestRemoveGroupAvatar__storage_ {
  uint32_t _has_storage_[1];
  GroupOutPeer *groupPeer;
  int64_t rid;
} RequestRemoveGroupAvatar__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupPeer",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = RequestRemoveGroupAvatar_FieldNumber_GroupPeer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestRemoveGroupAvatar__storage_, groupPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rid",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestRemoveGroupAvatar_FieldNumber_Rid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestRemoveGroupAvatar__storage_, rid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestRemoveGroupAvatar class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestRemoveGroupAvatar__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestEditGroupAbout

@implementation RequestEditGroupAbout

@dynamic hasGroupPeer, groupPeer;
@dynamic rid;
@dynamic hasAbout, about;

typedef struct RequestEditGroupAbout__storage_ {
  uint32_t _has_storage_[1];
  GroupOutPeer *groupPeer;
  GPBStringValue *about;
  int64_t rid;
} RequestEditGroupAbout__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupPeer",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = RequestEditGroupAbout_FieldNumber_GroupPeer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestEditGroupAbout__storage_, groupPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rid",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestEditGroupAbout_FieldNumber_Rid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestEditGroupAbout__storage_, rid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "about",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = RequestEditGroupAbout_FieldNumber_About,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestEditGroupAbout__storage_, about),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestEditGroupAbout class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestEditGroupAbout__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestEditGroupBasePermissions

@implementation RequestEditGroupBasePermissions

@dynamic hasGroupPeer, groupPeer;
@dynamic randomId;
@dynamic grantedPermissionsArray, grantedPermissionsArray_Count;
@dynamic revokedPermissionsArray, revokedPermissionsArray_Count;

typedef struct RequestEditGroupBasePermissions__storage_ {
  uint32_t _has_storage_[1];
  GroupOutPeer *groupPeer;
  GPBEnumArray *grantedPermissionsArray;
  GPBEnumArray *revokedPermissionsArray;
  int64_t randomId;
} RequestEditGroupBasePermissions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupPeer",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = RequestEditGroupBasePermissions_FieldNumber_GroupPeer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestEditGroupBasePermissions__storage_, groupPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "randomId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestEditGroupBasePermissions_FieldNumber_RandomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestEditGroupBasePermissions__storage_, randomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "grantedPermissionsArray",
        .dataTypeSpecific.enumDescFunc = GroupAdminPermission_EnumDescriptor,
        .number = RequestEditGroupBasePermissions_FieldNumber_GrantedPermissionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestEditGroupBasePermissions__storage_, grantedPermissionsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "revokedPermissionsArray",
        .dataTypeSpecific.enumDescFunc = GroupAdminPermission_EnumDescriptor,
        .number = RequestEditGroupBasePermissions_FieldNumber_RevokedPermissionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestEditGroupBasePermissions__storage_, revokedPermissionsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestEditGroupBasePermissions class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestEditGroupBasePermissions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestEditMemberPermissions

@implementation RequestEditMemberPermissions

@dynamic hasGroupPeer, groupPeer;
@dynamic hasUserPeer, userPeer;
@dynamic grantedPermissionsArray, grantedPermissionsArray_Count;
@dynamic revokedPermissionsArray, revokedPermissionsArray_Count;

typedef struct RequestEditMemberPermissions__storage_ {
  uint32_t _has_storage_[1];
  GroupOutPeer *groupPeer;
  UserOutPeer *userPeer;
  GPBEnumArray *grantedPermissionsArray;
  GPBEnumArray *revokedPermissionsArray;
} RequestEditMemberPermissions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupPeer",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = RequestEditMemberPermissions_FieldNumber_GroupPeer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestEditMemberPermissions__storage_, groupPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userPeer",
        .dataTypeSpecific.clazz = GPBObjCClass(UserOutPeer),
        .number = RequestEditMemberPermissions_FieldNumber_UserPeer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestEditMemberPermissions__storage_, userPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "grantedPermissionsArray",
        .dataTypeSpecific.enumDescFunc = GroupAdminPermission_EnumDescriptor,
        .number = RequestEditMemberPermissions_FieldNumber_GrantedPermissionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestEditMemberPermissions__storage_, grantedPermissionsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "revokedPermissionsArray",
        .dataTypeSpecific.enumDescFunc = GroupAdminPermission_EnumDescriptor,
        .number = RequestEditMemberPermissions_FieldNumber_RevokedPermissionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestEditMemberPermissions__storage_, revokedPermissionsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestEditMemberPermissions class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestEditMemberPermissions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseMember

@implementation ResponseMember

@dynamic hasMember, member;

typedef struct ResponseMember__storage_ {
  uint32_t _has_storage_[1];
  Member *member;
} ResponseMember__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "member",
        .dataTypeSpecific.clazz = GPBObjCClass(Member),
        .number = ResponseMember_FieldNumber_Member,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseMember__storage_, member),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseMember class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseMember__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestInviteUser

@implementation RequestInviteUser

@dynamic hasGroupPeer, groupPeer;
@dynamic rid;
@dynamic hasUser, user;

typedef struct RequestInviteUser__storage_ {
  uint32_t _has_storage_[1];
  GroupOutPeer *groupPeer;
  UserOutPeer *user;
  int64_t rid;
} RequestInviteUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupPeer",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = RequestInviteUser_FieldNumber_GroupPeer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestInviteUser__storage_, groupPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rid",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestInviteUser_FieldNumber_Rid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestInviteUser__storage_, rid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "user",
        .dataTypeSpecific.clazz = GPBObjCClass(UserOutPeer),
        .number = RequestInviteUser_FieldNumber_User,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestInviteUser__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestInviteUser class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestInviteUser__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestLeaveGroup

@implementation RequestLeaveGroup

@dynamic hasGroupPeer, groupPeer;
@dynamic rid;

typedef struct RequestLeaveGroup__storage_ {
  uint32_t _has_storage_[1];
  GroupOutPeer *groupPeer;
  int64_t rid;
} RequestLeaveGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupPeer",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = RequestLeaveGroup_FieldNumber_GroupPeer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestLeaveGroup__storage_, groupPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rid",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestLeaveGroup_FieldNumber_Rid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestLeaveGroup__storage_, rid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestLeaveGroup class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestLeaveGroup__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestKickUser

@implementation RequestKickUser

@dynamic hasGroupPeer, groupPeer;
@dynamic rid;
@dynamic hasUser, user;

typedef struct RequestKickUser__storage_ {
  uint32_t _has_storage_[1];
  GroupOutPeer *groupPeer;
  UserOutPeer *user;
  int64_t rid;
} RequestKickUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupPeer",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = RequestKickUser_FieldNumber_GroupPeer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestKickUser__storage_, groupPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rid",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestKickUser_FieldNumber_Rid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestKickUser__storage_, rid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "user",
        .dataTypeSpecific.clazz = GPBObjCClass(UserOutPeer),
        .number = RequestKickUser_FieldNumber_User,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestKickUser__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestKickUser class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestKickUser__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestMakeUserAdmin

@implementation RequestMakeUserAdmin

@dynamic hasGroupPeer, groupPeer;
@dynamic hasUserPeer, userPeer;
@dynamic permissionsArray, permissionsArray_Count;

typedef struct RequestMakeUserAdmin__storage_ {
  uint32_t _has_storage_[1];
  GroupOutPeer *groupPeer;
  UserOutPeer *userPeer;
  GPBEnumArray *permissionsArray;
} RequestMakeUserAdmin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupPeer",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = RequestMakeUserAdmin_FieldNumber_GroupPeer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestMakeUserAdmin__storage_, groupPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userPeer",
        .dataTypeSpecific.clazz = GPBObjCClass(UserOutPeer),
        .number = RequestMakeUserAdmin_FieldNumber_UserPeer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestMakeUserAdmin__storage_, userPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "permissionsArray",
        .dataTypeSpecific.enumDescFunc = GroupAdminPermission_EnumDescriptor,
        .number = RequestMakeUserAdmin_FieldNumber_PermissionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestMakeUserAdmin__storage_, permissionsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestMakeUserAdmin class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestMakeUserAdmin__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupMemberPermission

@implementation GroupMemberPermission

@dynamic userId;
@dynamic permissionsArray, permissionsArray_Count;

typedef struct GroupMemberPermission__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  GPBEnumArray *permissionsArray;
} GroupMemberPermission__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupMemberPermission_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupMemberPermission__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "permissionsArray",
        .dataTypeSpecific.enumDescFunc = GroupAdminPermission_EnumDescriptor,
        .number = GroupMemberPermission_FieldNumber_PermissionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GroupMemberPermission__storage_, permissionsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupMemberPermission class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupMemberPermission__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestGetGroupMemberPermissions

@implementation RequestGetGroupMemberPermissions

@dynamic groupId;
@dynamic userIdsArray, userIdsArray_Count;

typedef struct RequestGetGroupMemberPermissions__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSMutableArray *userIdsArray;
} RequestGetGroupMemberPermissions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestGetGroupMemberPermissions_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestGetGroupMemberPermissions__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestGetGroupMemberPermissions_FieldNumber_UserIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestGetGroupMemberPermissions__storage_, userIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetGroupMemberPermissions class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestGetGroupMemberPermissions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseGetGroupMemberPermissions

@implementation ResponseGetGroupMemberPermissions

@dynamic permissionsArray, permissionsArray_Count;

typedef struct ResponseGetGroupMemberPermissions__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *permissionsArray;
} ResponseGetGroupMemberPermissions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "permissionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupMemberPermission),
        .number = ResponseGetGroupMemberPermissions_FieldNumber_PermissionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseGetGroupMemberPermissions__storage_, permissionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseGetGroupMemberPermissions class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseGetGroupMemberPermissions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateGroupMemberPermissionsChanged

@implementation UpdateGroupMemberPermissionsChanged

@dynamic groupId;
@dynamic userId;
@dynamic permissionsArray, permissionsArray_Count;

typedef struct UpdateGroupMemberPermissionsChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSString *userId;
  GPBEnumArray *permissionsArray;
} UpdateGroupMemberPermissionsChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupMemberPermissionsChanged_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateGroupMemberPermissionsChanged__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupMemberPermissionsChanged_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateGroupMemberPermissionsChanged__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "permissionsArray",
        .dataTypeSpecific.enumDescFunc = GroupAdminPermission_EnumDescriptor,
        .number = UpdateGroupMemberPermissionsChanged_FieldNumber_PermissionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateGroupMemberPermissionsChanged__storage_, permissionsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroupMemberPermissionsChanged class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateGroupMemberPermissionsChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestTransferOwnership

@implementation RequestTransferOwnership

@dynamic hasGroupPeer, groupPeer;
@dynamic newOwner;

typedef struct RequestTransferOwnership__storage_ {
  uint32_t _has_storage_[1];
  GroupOutPeer *groupPeer;
  NSString *newOwner;
} RequestTransferOwnership__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupPeer",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = RequestTransferOwnership_FieldNumber_GroupPeer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestTransferOwnership__storage_, groupPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "newOwner",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestTransferOwnership_FieldNumber_NewOwner,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestTransferOwnership__storage_, newOwner),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestTransferOwnership class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestTransferOwnership__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseInviteUrl

@implementation ResponseInviteUrl

@dynamic URL;

typedef struct ResponseInviteUrl__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
} ResponseInviteUrl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseInviteUrl_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseInviteUrl__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseInviteUrl class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseInviteUrl__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestGetGroupInviteUrl

@implementation RequestGetGroupInviteUrl

@dynamic hasGroupPeer, groupPeer;

typedef struct RequestGetGroupInviteUrl__storage_ {
  uint32_t _has_storage_[1];
  GroupOutPeer *groupPeer;
} RequestGetGroupInviteUrl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupPeer",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = RequestGetGroupInviteUrl_FieldNumber_GroupPeer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestGetGroupInviteUrl__storage_, groupPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetGroupInviteUrl class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestGetGroupInviteUrl__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestGetGroupInviteUrlBase

@implementation RequestGetGroupInviteUrlBase


typedef struct RequestGetGroupInviteUrlBase__storage_ {
  uint32_t _has_storage_[1];
} RequestGetGroupInviteUrlBase__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetGroupInviteUrlBase class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(RequestGetGroupInviteUrlBase__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseGetGroupInviteUrlBase

@implementation ResponseGetGroupInviteUrlBase

@dynamic URL;

typedef struct ResponseGetGroupInviteUrlBase__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
} ResponseGetGroupInviteUrlBase__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseGetGroupInviteUrlBase_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseGetGroupInviteUrlBase__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseGetGroupInviteUrlBase class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseGetGroupInviteUrlBase__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestRevokeInviteUrl

@implementation RequestRevokeInviteUrl

@dynamic hasGroupPeer, groupPeer;

typedef struct RequestRevokeInviteUrl__storage_ {
  uint32_t _has_storage_[1];
  GroupOutPeer *groupPeer;
} RequestRevokeInviteUrl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupPeer",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = RequestRevokeInviteUrl_FieldNumber_GroupPeer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestRevokeInviteUrl__storage_, groupPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestRevokeInviteUrl class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestRevokeInviteUrl__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestJoinGroup

@implementation RequestJoinGroup

@dynamic token;

typedef struct RequestJoinGroup__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
} RequestJoinGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestJoinGroup_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestJoinGroup__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestJoinGroup class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestJoinGroup__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseJoinGroup

@implementation ResponseJoinGroup

@dynamic hasGroup, group;
@dynamic userPeersArray, userPeersArray_Count;

typedef struct ResponseJoinGroup__storage_ {
  uint32_t _has_storage_[1];
  Group *group;
  NSMutableArray *userPeersArray;
} ResponseJoinGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "group",
        .dataTypeSpecific.clazz = GPBObjCClass(Group),
        .number = ResponseJoinGroup_FieldNumber_Group,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseJoinGroup__storage_, group),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userPeersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(UserOutPeer),
        .number = ResponseJoinGroup_FieldNumber_UserPeersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseJoinGroup__storage_, userPeersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseJoinGroup class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseJoinGroup__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestJoinGroupByPeer

@implementation RequestJoinGroupByPeer

@dynamic hasPeer, peer;

typedef struct RequestJoinGroupByPeer__storage_ {
  uint32_t _has_storage_[1];
  GroupOutPeer *peer;
} RequestJoinGroupByPeer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupOutPeer),
        .number = RequestJoinGroupByPeer_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestJoinGroupByPeer__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestJoinGroupByPeer class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestJoinGroupByPeer__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestDeleteGroup

@implementation RequestDeleteGroup

@dynamic groupId;

typedef struct RequestDeleteGroup__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
} RequestDeleteGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestDeleteGroup_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestDeleteGroup__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestDeleteGroup class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestDeleteGroup__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestGetGroupPartialInfo

@implementation RequestGetGroupPartialInfo

@dynamic token;

typedef struct RequestGetGroupPartialInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
} RequestGetGroupPartialInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestGetGroupPartialInfo_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestGetGroupPartialInfo__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetGroupPartialInfo class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestGetGroupPartialInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateGroupMemberInvited

@implementation UpdateGroupMemberInvited

@dynamic groupId;
@dynamic hasMember, member;

typedef struct UpdateGroupMemberInvited__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  Member *member;
} UpdateGroupMemberInvited__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupMemberInvited_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateGroupMemberInvited__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "member",
        .dataTypeSpecific.clazz = GPBObjCClass(Member),
        .number = UpdateGroupMemberInvited_FieldNumber_Member,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateGroupMemberInvited__storage_, member),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroupMemberInvited class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateGroupMemberInvited__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateGroupShortnameChanged

@implementation UpdateGroupShortnameChanged

@dynamic groupId;
@dynamic shortname;
@dynamic userId;

typedef struct UpdateGroupShortnameChanged__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSString *shortname;
  NSString *userId;
} UpdateGroupShortnameChanged__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupShortnameChanged_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateGroupShortnameChanged__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shortname",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupShortnameChanged_FieldNumber_Shortname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateGroupShortnameChanged__storage_, shortname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateGroupShortnameChanged_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateGroupShortnameChanged__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroupShortnameChanged class]
                                     rootClass:[GroupsRoot class]
                                          file:GroupsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateGroupShortnameChanged__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
