// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_info.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "DeviceInfo.pbobjc.h"
#import "Wrappers.pbobjc.h"
#import "Empty.pbobjc.h"
#import "Annotations.pbobjc.h"
#import "Definitions.pbobjc.h"
#import "Scalapb.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GPBStringValue);

#pragma mark - DeviceInfoRoot

@implementation DeviceInfoRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
    [registry addExtensions:[DefinitionsRoot extensionRegistry]];
    [registry addExtensions:[ScalapbRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - DeviceInfoRoot_FileDescriptor

static GPBFileDescriptor *DeviceInfoRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"dialog"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PlatformType

GPBEnumDescriptor *PlatformType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PlatformTypeUnknown\000PlatformTypeAndroid\000"
        "PlatformTypeIos\000PlatformTypeWeb\000Platform"
        "TypeClc\000PlatformTypeTests\000";
    static const int32_t values[] = {
        PlatformType_PlatformTypeUnknown,
        PlatformType_PlatformTypeAndroid,
        PlatformType_PlatformTypeIos,
        PlatformType_PlatformTypeWeb,
        PlatformType_PlatformTypeClc,
        PlatformType_PlatformTypeTests,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PlatformType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PlatformType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PlatformType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PlatformType_PlatformTypeUnknown:
    case PlatformType_PlatformTypeAndroid:
    case PlatformType_PlatformTypeIos:
    case PlatformType_PlatformTypeWeb:
    case PlatformType_PlatformTypeClc:
    case PlatformType_PlatformTypeTests:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RequestNotifyAboutDeviceInfo

@implementation RequestNotifyAboutDeviceInfo

@dynamic preferredLanguagesArray, preferredLanguagesArray_Count;
@dynamic hasTimeZone, timeZone;

typedef struct RequestNotifyAboutDeviceInfo__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *preferredLanguagesArray;
  GPBStringValue *timeZone;
} RequestNotifyAboutDeviceInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "preferredLanguagesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestNotifyAboutDeviceInfo_FieldNumber_PreferredLanguagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestNotifyAboutDeviceInfo__storage_, preferredLanguagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeZone",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = RequestNotifyAboutDeviceInfo_FieldNumber_TimeZone,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestNotifyAboutDeviceInfo__storage_, timeZone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestNotifyAboutDeviceInfo class]
                                     rootClass:[DeviceInfoRoot class]
                                          file:DeviceInfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestNotifyAboutDeviceInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClientInfo

@implementation ClientInfo

@dynamic platform;
@dynamic deviceName;
@dynamic appName;
@dynamic hasAppVersion, appVersion;
@dynamic hasSdkVersion, sdkVersion;
@dynamic preferredLanguagesArray, preferredLanguagesArray_Count;
@dynamic hasTimeZone, timeZone;

typedef struct ClientInfo__storage_ {
  uint32_t _has_storage_[1];
  PlatformType platform;
  NSString *deviceName;
  NSString *appName;
  GPBStringValue *appVersion;
  GPBStringValue *sdkVersion;
  NSMutableArray *preferredLanguagesArray;
  GPBStringValue *timeZone;
} ClientInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "platform",
        .dataTypeSpecific.enumDescFunc = PlatformType_EnumDescriptor,
        .number = ClientInfo_FieldNumber_Platform,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClientInfo__storage_, platform),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "deviceName",
        .dataTypeSpecific.clazz = Nil,
        .number = ClientInfo_FieldNumber_DeviceName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ClientInfo__storage_, deviceName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appName",
        .dataTypeSpecific.clazz = Nil,
        .number = ClientInfo_FieldNumber_AppName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ClientInfo__storage_, appName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appVersion",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ClientInfo_FieldNumber_AppVersion,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ClientInfo__storage_, appVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sdkVersion",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ClientInfo_FieldNumber_SdkVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ClientInfo__storage_, sdkVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "preferredLanguagesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ClientInfo_FieldNumber_PreferredLanguagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ClientInfo__storage_, preferredLanguagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeZone",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ClientInfo_FieldNumber_TimeZone,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ClientInfo__storage_, timeZone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClientInfo class]
                                     rootClass:[DeviceInfoRoot class]
                                          file:DeviceInfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClientInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ClientInfo_Platform_RawValue(ClientInfo *message) {
  GPBDescriptor *descriptor = [ClientInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ClientInfo_FieldNumber_Platform];
  return GPBGetMessageRawEnumField(message, field);
}

void SetClientInfo_Platform_RawValue(ClientInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [ClientInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ClientInfo_FieldNumber_Platform];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
