// Code generated by gRPC proto compiler.  DO NOT EDIT!
// source: miniappsregistry.proto

#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
#import "Miniappsregistry.pbrpc.h"
#import "Miniappsregistry.pbobjc.h"
#import <ProtoRPC/ProtoRPCLegacy.h>
#import <RxLibrary/GRXWriter+Immediate.h>

#import "Empty.pbobjc.h"
#import "Definitions.pbobjc.h"

@implementation ClientsMiniAppsRegistry

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"dialog"
                 serviceName:@"ClientsMiniAppsRegistry"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"dialog"
                 serviceName:@"ClientsMiniAppsRegistry"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark FindApp(FindAppRequest) returns (FindAppResponse)

- (void)findAppWithRequest:(FindAppRequest *)request handler:(void(^)(FindAppResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToFindAppWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToFindAppWithRequest:(FindAppRequest *)request handler:(void(^)(FindAppResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"FindApp"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[FindAppResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)findAppWithMessage:(FindAppRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"FindApp"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[FindAppResponse class]];
}

#pragma mark GetApps(GetAppsRequest) returns (GetAppsResponse)

- (void)getAppsWithRequest:(GetAppsRequest *)request handler:(void(^)(GetAppsResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetAppsWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToGetAppsWithRequest:(GetAppsRequest *)request handler:(void(^)(GetAppsResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetApps"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[GetAppsResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)getAppsWithMessage:(GetAppsRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetApps"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[GetAppsResponse class]];
}

#pragma mark GetExtensions(Empty) returns (GetExtensionsResponse)

- (void)getExtensionsWithRequest:(GPBEmpty *)request handler:(void(^)(GetExtensionsResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetExtensionsWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToGetExtensionsWithRequest:(GPBEmpty *)request handler:(void(^)(GetExtensionsResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetExtensions"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[GetExtensionsResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)getExtensionsWithMessage:(GPBEmpty *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetExtensions"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[GetExtensionsResponse class]];
}

#pragma mark IssueAccessToken(IssueAccessTokenRequest) returns (AccessTokenResponse)

- (void)issueAccessTokenWithRequest:(IssueAccessTokenRequest *)request handler:(void(^)(AccessTokenResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToIssueAccessTokenWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToIssueAccessTokenWithRequest:(IssueAccessTokenRequest *)request handler:(void(^)(AccessTokenResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"IssueAccessToken"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[AccessTokenResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)issueAccessTokenWithMessage:(IssueAccessTokenRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"IssueAccessToken"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[AccessTokenResponse class]];
}

@end
#endif
