// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: push_content.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "PushContent.pbobjc.h"
#import "Definitions.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(LocalizableString);
GPBObjCClassDeclaration(PushPeer);
GPBObjCClassDeclaration(UUIDValue);

#pragma mark - PushContentRoot

@implementation PushContentRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[DefinitionsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - PushContentRoot_FileDescriptor

static GPBFileDescriptor *PushContentRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"dialog"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PushPeerType

GPBEnumDescriptor *PushPeerType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PushPeerTypePrivate\000PushPeerTypeGroup\000Pu"
        "shPeerTypeSip\000";
    static const int32_t values[] = {
        PushPeerType_PushPeerTypePrivate,
        PushPeerType_PushPeerTypeGroup,
        PushPeerType_PushPeerTypeSip,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PushPeerType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PushPeerType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PushPeerType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PushPeerType_PushPeerTypePrivate:
    case PushPeerType_PushPeerTypeGroup:
    case PushPeerType_PushPeerTypeSip:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PushEventType

GPBEnumDescriptor *PushEventType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PushEventTypeCreate\000PushEventTypeUpdate\000"
        "PushEventTypeDelete\000";
    static const int32_t values[] = {
        PushEventType_PushEventTypeCreate,
        PushEventType_PushEventTypeUpdate,
        PushEventType_PushEventTypeDelete,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PushEventType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PushEventType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PushEventType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PushEventType_PushEventTypeCreate:
    case PushEventType_PushEventTypeUpdate:
    case PushEventType_PushEventTypeDelete:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - LocalizableString

@implementation LocalizableString

@dynamic locKey;
@dynamic locArgsArray, locArgsArray_Count;

typedef struct LocalizableString__storage_ {
  uint32_t _has_storage_[1];
  NSString *locKey;
  NSMutableArray *locArgsArray;
} LocalizableString__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "locKey",
        .dataTypeSpecific.clazz = Nil,
        .number = LocalizableString_FieldNumber_LocKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LocalizableString__storage_, locKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "locArgsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = LocalizableString_FieldNumber_LocArgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LocalizableString__storage_, locArgsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LocalizableString class]
                                     rootClass:[PushContentRoot class]
                                          file:PushContentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LocalizableString__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PushPeer

@implementation PushPeer

@dynamic type;
@dynamic id_p;
@dynamic strId;

typedef struct PushPeer__storage_ {
  uint32_t _has_storage_[1];
  PushPeerType type;
  NSString *id_p;
  NSString *strId;
} PushPeer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PushPeerType_EnumDescriptor,
        .number = PushPeer_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PushPeer__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = PushPeer_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PushPeer__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "strId",
        .dataTypeSpecific.clazz = Nil,
        .number = PushPeer_FieldNumber_StrId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PushPeer__storage_, strId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PushPeer class]
                                     rootClass:[PushContentRoot class]
                                          file:PushContentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PushPeer__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PushPeer_Type_RawValue(PushPeer *message) {
  GPBDescriptor *descriptor = [PushPeer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PushPeer_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetPushPeer_Type_RawValue(PushPeer *message, int32_t value) {
  GPBDescriptor *descriptor = [PushPeer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PushPeer_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - EncryptedPushContent

@implementation EncryptedPushContent

@dynamic alertBodyOneOfCase;
@dynamic alertTitleOneOfCase;
@dynamic locAlertBody;
@dynamic simpleAlertBody;
@dynamic locAlertTitle;
@dynamic simpleAlertTitle;
@dynamic sound;
@dynamic unreadMessageCounter;
@dynamic hasPeer, peer;
@dynamic hasMessageId, messageId;
@dynamic isRespondable;
@dynamic senderUserId;
@dynamic date;
@dynamic eventType;

typedef struct EncryptedPushContent__storage_ {
  uint32_t _has_storage_[3];
  int32_t unreadMessageCounter;
  PushEventType eventType;
  LocalizableString *locAlertBody;
  NSString *simpleAlertBody;
  LocalizableString *locAlertTitle;
  NSString *simpleAlertTitle;
  NSString *sound;
  PushPeer *peer;
  UUIDValue *messageId;
  NSString *senderUserId;
  int64_t date;
} EncryptedPushContent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "locAlertBody",
        .dataTypeSpecific.clazz = GPBObjCClass(LocalizableString),
        .number = EncryptedPushContent_FieldNumber_LocAlertBody,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(EncryptedPushContent__storage_, locAlertBody),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "simpleAlertBody",
        .dataTypeSpecific.clazz = Nil,
        .number = EncryptedPushContent_FieldNumber_SimpleAlertBody,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(EncryptedPushContent__storage_, simpleAlertBody),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "locAlertTitle",
        .dataTypeSpecific.clazz = GPBObjCClass(LocalizableString),
        .number = EncryptedPushContent_FieldNumber_LocAlertTitle,
        .hasIndex = -2,
        .offset = (uint32_t)offsetof(EncryptedPushContent__storage_, locAlertTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "simpleAlertTitle",
        .dataTypeSpecific.clazz = Nil,
        .number = EncryptedPushContent_FieldNumber_SimpleAlertTitle,
        .hasIndex = -2,
        .offset = (uint32_t)offsetof(EncryptedPushContent__storage_, simpleAlertTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sound",
        .dataTypeSpecific.clazz = Nil,
        .number = EncryptedPushContent_FieldNumber_Sound,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EncryptedPushContent__storage_, sound),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unreadMessageCounter",
        .dataTypeSpecific.clazz = Nil,
        .number = EncryptedPushContent_FieldNumber_UnreadMessageCounter,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EncryptedPushContent__storage_, unreadMessageCounter),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(PushPeer),
        .number = EncryptedPushContent_FieldNumber_Peer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EncryptedPushContent__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = EncryptedPushContent_FieldNumber_MessageId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EncryptedPushContent__storage_, messageId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isRespondable",
        .dataTypeSpecific.clazz = Nil,
        .number = EncryptedPushContent_FieldNumber_IsRespondable,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "senderUserId",
        .dataTypeSpecific.clazz = Nil,
        .number = EncryptedPushContent_FieldNumber_SenderUserId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(EncryptedPushContent__storage_, senderUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "date",
        .dataTypeSpecific.clazz = Nil,
        .number = EncryptedPushContent_FieldNumber_Date,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(EncryptedPushContent__storage_, date),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "eventType",
        .dataTypeSpecific.enumDescFunc = PushEventType_EnumDescriptor,
        .number = EncryptedPushContent_FieldNumber_EventType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(EncryptedPushContent__storage_, eventType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EncryptedPushContent class]
                                     rootClass:[PushContentRoot class]
                                          file:PushContentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EncryptedPushContent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "alertBody",
      "alertTitle",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t EncryptedPushContent_EventType_RawValue(EncryptedPushContent *message) {
  GPBDescriptor *descriptor = [EncryptedPushContent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EncryptedPushContent_FieldNumber_EventType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetEncryptedPushContent_EventType_RawValue(EncryptedPushContent *message, int32_t value) {
  GPBDescriptor *descriptor = [EncryptedPushContent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EncryptedPushContent_FieldNumber_EventType];
  GPBSetMessageRawEnumField(message, field, value);
}

void EncryptedPushContent_ClearAlertBodyOneOfCase(EncryptedPushContent *message) {
  GPBDescriptor *descriptor = [EncryptedPushContent descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
void EncryptedPushContent_ClearAlertTitleOneOfCase(EncryptedPushContent *message) {
  GPBDescriptor *descriptor = [EncryptedPushContent descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:1];
  GPBClearOneof(message, oneof);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
