// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: events.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Event;
@class Event_Invite;
@class Event_Kick;
@class Event_Mention;
@class Event_Reactions;
@class Event_Reactions_Reaction;
@class Event_Reply;
@class Peer;
@class UUIDValue;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum LoadMode

typedef GPB_ENUM(LoadMode) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  LoadMode_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  LoadMode_LoadmodeUnknown = 0,

  /** load from clock to future */
  LoadMode_LoadmodeForward = 1,

  /** load from clock to past */
  LoadMode_LoadmodeBackward = 2,
};

GPBEnumDescriptor *LoadMode_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL LoadMode_IsValidValue(int32_t value);

#pragma mark - EventsRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface EventsRoot : GPBRootObject
@end

#pragma mark - Event

typedef GPB_ENUM(Event_FieldNumber) {
  Event_FieldNumber_Clock = 1,
  Event_FieldNumber_Id_p = 2,
  Event_FieldNumber_Mention = 3,
  Event_FieldNumber_Reactions = 4,
  Event_FieldNumber_Reply = 5,
  Event_FieldNumber_Invite = 6,
  Event_FieldNumber_Kick = 7,
};

typedef GPB_ENUM(Event_Event_OneOfCase) {
  Event_Event_OneOfCase_GPBUnsetOneOfCase = 0,
  Event_Event_OneOfCase_Mention = 3,
  Event_Event_OneOfCase_Reactions = 4,
  Event_Event_OneOfCase_Reply = 5,
  Event_Event_OneOfCase_Invite = 6,
  Event_Event_OneOfCase_Kick = 7,
};

GPB_FINAL @interface Event : GPBMessage

/** time when event happened */
@property(nonatomic, readwrite) int64_t clock;

/** unique id of event (no more than 50 symbols) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readonly) Event_Event_OneOfCase eventOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) Event_Mention *mention;

@property(nonatomic, readwrite, strong, null_resettable) Event_Reactions *reactions;

@property(nonatomic, readwrite, strong, null_resettable) Event_Reply *reply;

@property(nonatomic, readwrite, strong, null_resettable) Event_Invite *invite;

@property(nonatomic, readwrite, strong, null_resettable) Event_Kick *kick;

@end

/**
 * Clears whatever value was set for the oneof 'event'.
 **/
void Event_ClearEventOneOfCase(Event *message);

#pragma mark - Event_Mention

typedef GPB_ENUM(Event_Mention_FieldNumber) {
  Event_Mention_FieldNumber_Peer = 1,
  Event_Mention_FieldNumber_Mid = 2,
  Event_Mention_FieldNumber_User = 3,
};

GPB_FINAL @interface Event_Mention : GPBMessage

/** dialog where mentioned */
@property(nonatomic, readwrite, strong, null_resettable) Peer *peer;
/** Test to see if @c peer has been set. */
@property(nonatomic, readwrite) BOOL hasPeer;

/** id of message where mentioned */
@property(nonatomic, readwrite, strong, null_resettable) UUIDValue *mid;
/** Test to see if @c mid has been set. */
@property(nonatomic, readwrite) BOOL hasMid;

/** mention author */
@property(nonatomic, readwrite) int32_t user;

@end

#pragma mark - Event_Reactions

typedef GPB_ENUM(Event_Reactions_FieldNumber) {
  Event_Reactions_FieldNumber_Peer = 1,
  Event_Reactions_FieldNumber_Mid = 2,
  Event_Reactions_FieldNumber_ReactionsArray = 3,
};

GPB_FINAL @interface Event_Reactions : GPBMessage

/** dialog where mentioned */
@property(nonatomic, readwrite, strong, null_resettable) Peer *peer;
/** Test to see if @c peer has been set. */
@property(nonatomic, readwrite) BOOL hasPeer;

/** id of message that has reactions */
@property(nonatomic, readwrite, strong, null_resettable) UUIDValue *mid;
/** Test to see if @c mid has been set. */
@property(nonatomic, readwrite) BOOL hasMid;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Event_Reactions_Reaction*> *reactionsArray;
/** The number of items in @c reactionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger reactionsArray_Count;

@end

#pragma mark - Event_Reactions_Reaction

typedef GPB_ENUM(Event_Reactions_Reaction_FieldNumber) {
  Event_Reactions_Reaction_FieldNumber_Code = 1,
  Event_Reactions_Reaction_FieldNumber_Users = 2,
};

GPB_FINAL @interface Event_Reactions_Reaction : GPBMessage

/** emoji */
@property(nonatomic, readwrite, copy, null_resettable) NSString *code;

/** userId to time when reaction is set by user */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Int64Dictionary *users;
/** The number of items in @c users without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger users_Count;

@end

#pragma mark - Event_Reply

typedef GPB_ENUM(Event_Reply_FieldNumber) {
  Event_Reply_FieldNumber_Peer = 1,
  Event_Reply_FieldNumber_Mid = 2,
  Event_Reply_FieldNumber_User = 3,
};

GPB_FINAL @interface Event_Reply : GPBMessage

/** dialog where replied */
@property(nonatomic, readwrite, strong, null_resettable) Peer *peer;
/** Test to see if @c peer has been set. */
@property(nonatomic, readwrite) BOOL hasPeer;

/** id of message where replied */
@property(nonatomic, readwrite, strong, null_resettable) UUIDValue *mid;
/** Test to see if @c mid has been set. */
@property(nonatomic, readwrite) BOOL hasMid;

/** message author */
@property(nonatomic, readwrite) int32_t user;

@end

#pragma mark - Event_Invite

typedef GPB_ENUM(Event_Invite_FieldNumber) {
  Event_Invite_FieldNumber_Peer = 1,
  Event_Invite_FieldNumber_User = 2,
};

GPB_FINAL @interface Event_Invite : GPBMessage

/** group */
@property(nonatomic, readwrite, strong, null_resettable) Peer *peer;
/** Test to see if @c peer has been set. */
@property(nonatomic, readwrite) BOOL hasPeer;

/** inviter userId */
@property(nonatomic, readwrite) int32_t user;

@end

#pragma mark - Event_Kick

typedef GPB_ENUM(Event_Kick_FieldNumber) {
  Event_Kick_FieldNumber_Peer = 1,
  Event_Kick_FieldNumber_User = 2,
};

GPB_FINAL @interface Event_Kick : GPBMessage

/** group */
@property(nonatomic, readwrite, strong, null_resettable) Peer *peer;
/** Test to see if @c peer has been set. */
@property(nonatomic, readwrite) BOOL hasPeer;

/** kicker userId */
@property(nonatomic, readwrite) int32_t user;

@end

#pragma mark - UpdateEvent

typedef GPB_ENUM(UpdateEvent_FieldNumber) {
  UpdateEvent_FieldNumber_Event = 1,
  UpdateEvent_FieldNumber_PrevClock = 2,
};

GPB_FINAL @interface UpdateEvent : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Event *event;
/** Test to see if @c event has been set. */
@property(nonatomic, readwrite) BOOL hasEvent;

/** time of previous event */
@property(nonatomic, readwrite) int64_t prevClock;

@end

#pragma mark - LoadEventsRequest

typedef GPB_ENUM(LoadEventsRequest_FieldNumber) {
  LoadEventsRequest_FieldNumber_FromClock = 1,
  LoadEventsRequest_FieldNumber_LoadMode = 2,
  LoadEventsRequest_FieldNumber_Limit = 3,
};

GPB_FINAL @interface LoadEventsRequest : GPBMessage

/** clock to load from */
@property(nonatomic, readwrite) int64_t fromClock;

@property(nonatomic, readwrite) LoadMode loadMode;

/** how much to load */
@property(nonatomic, readwrite) int32_t limit;

@end

/**
 * Fetches the raw value of a @c LoadEventsRequest's @c loadMode property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t LoadEventsRequest_LoadMode_RawValue(LoadEventsRequest *message);
/**
 * Sets the raw value of an @c LoadEventsRequest's @c loadMode property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetLoadEventsRequest_LoadMode_RawValue(LoadEventsRequest *message, int32_t value);

#pragma mark - LoadEventsResponse

typedef GPB_ENUM(LoadEventsResponse_FieldNumber) {
  LoadEventsResponse_FieldNumber_EventsArray = 1,
  LoadEventsResponse_FieldNumber_Clock = 2,
  LoadEventsResponse_FieldNumber_NextAvailable = 3,
};

GPB_FINAL @interface LoadEventsResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Event*> *eventsArray;
/** The number of items in @c eventsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger eventsArray_Count;

/** clock of last event */
@property(nonatomic, readwrite) int64_t clock;

/** is there more to load to requested direction */
@property(nonatomic, readwrite) BOOL nextAvailable;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
