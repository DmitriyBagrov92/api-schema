// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: threads.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class GPBBoolValue;
@class Peer;
@class PeerThread;
@class ThreadInfo;
@class UUIDValue;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - ThreadsRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface ThreadsRoot : GPBRootObject
@end

#pragma mark - ThreadInfo

typedef GPB_ENUM(ThreadInfo_FieldNumber) {
  ThreadInfo_FieldNumber_MessagesCount = 1,
  ThreadInfo_FieldNumber_LatestActiveUserIdsArray = 2,
  ThreadInfo_FieldNumber_LastActivityDate = 3,
  ThreadInfo_FieldNumber_IsFollowing = 5,
};

GPB_FINAL @interface ThreadInfo : GPBMessage

@property(nonatomic, readwrite) uint32_t messagesCount;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *latestActiveUserIdsArray;
/** The number of items in @c latestActiveUserIdsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger latestActiveUserIdsArray_Count;

@property(nonatomic, readwrite) uint64_t lastActivityDate;

/**
 * Если поле пустое, значит информации о фолловинге треда в данный момент нет, и её надо получить другими способами (загрузкой тредов GetThreadInfos, загрузкой истории и тп)
 * Пустым в данный момент будет приходить при получении вик-апдейта UpdateThreadInfos
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBBoolValue *isFollowing;
/** Test to see if @c isFollowing has been set. */
@property(nonatomic, readwrite) BOOL hasIsFollowing;

@end

#pragma mark - RequestGetThreadInfos

typedef GPB_ENUM(RequestGetThreadInfos_FieldNumber) {
  RequestGetThreadInfos_FieldNumber_FromClock = 1,
  RequestGetThreadInfos_FieldNumber_Peer = 2,
};

GPB_FINAL @interface RequestGetThreadInfos : GPBMessage

@property(nonatomic, readwrite) int64_t fromClock;

@property(nonatomic, readwrite, strong, null_resettable) Peer *peer;
/** Test to see if @c peer has been set. */
@property(nonatomic, readwrite) BOOL hasPeer;

@end

#pragma mark - PeerThread

typedef GPB_ENUM(PeerThread_FieldNumber) {
  PeerThread_FieldNumber_ParentMid = 1,
  PeerThread_FieldNumber_Info = 2,
};

GPB_FINAL @interface PeerThread : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) UUIDValue *parentMid;
/** Test to see if @c parentMid has been set. */
@property(nonatomic, readwrite) BOOL hasParentMid;

@property(nonatomic, readwrite, strong, null_resettable) ThreadInfo *info;
/** Test to see if @c info has been set. */
@property(nonatomic, readwrite) BOOL hasInfo;

@end

#pragma mark - ResponseGetThreadInfos

typedef GPB_ENUM(ResponseGetThreadInfos_FieldNumber) {
  ResponseGetThreadInfos_FieldNumber_ThreadsArray = 1,
  ResponseGetThreadInfos_FieldNumber_PeerClock = 2,
  ResponseGetThreadInfos_FieldNumber_NextAvailable = 3,
};

GPB_FINAL @interface ResponseGetThreadInfos : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PeerThread*> *threadsArray;
/** The number of items in @c threadsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger threadsArray_Count;

@property(nonatomic, readwrite) int64_t peerClock;

@property(nonatomic, readwrite) BOOL nextAvailable;

@end

#pragma mark - RequestFollowThread

typedef GPB_ENUM(RequestFollowThread_FieldNumber) {
  RequestFollowThread_FieldNumber_Peer = 1,
};

GPB_FINAL @interface RequestFollowThread : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Peer *peer;
/** Test to see if @c peer has been set. */
@property(nonatomic, readwrite) BOOL hasPeer;

@end

#pragma mark - RequestUnfollowThread

typedef GPB_ENUM(RequestUnfollowThread_FieldNumber) {
  RequestUnfollowThread_FieldNumber_Peer = 1,
};

GPB_FINAL @interface RequestUnfollowThread : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Peer *peer;
/** Test to see if @c peer has been set. */
@property(nonatomic, readwrite) BOOL hasPeer;

@end

#pragma mark - UpdateThreadInfos

typedef GPB_ENUM(UpdateThreadInfos_FieldNumber) {
  UpdateThreadInfos_FieldNumber_Peer = 1,
  UpdateThreadInfos_FieldNumber_InfosArray = 2,
  UpdateThreadInfos_FieldNumber_PeerClock = 3,
  UpdateThreadInfos_FieldNumber_PrevPeerClock = 4,
};

GPB_FINAL @interface UpdateThreadInfos : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Peer *peer;
/** Test to see if @c peer has been set. */
@property(nonatomic, readwrite) BOOL hasPeer;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PeerThread*> *infosArray;
/** The number of items in @c infosArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger infosArray_Count;

@property(nonatomic, readwrite) int64_t peerClock;

@property(nonatomic, readwrite) int64_t prevPeerClock;

@end

#pragma mark - UpdateThreadFollowing

typedef GPB_ENUM(UpdateThreadFollowing_FieldNumber) {
  UpdateThreadFollowing_FieldNumber_Peer = 1,
  UpdateThreadFollowing_FieldNumber_IsFollowing = 2,
};

GPB_FINAL @interface UpdateThreadFollowing : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Peer *peer;
/** Test to see if @c peer has been set. */
@property(nonatomic, readwrite) BOOL hasPeer;

@property(nonatomic, readwrite) BOOL isFollowing;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
