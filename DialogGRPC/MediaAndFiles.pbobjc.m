// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media_and_files.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "MediaAndFiles.pbobjc.h"
#import "Wrappers.pbobjc.h"
#import "Annotations.pbobjc.h"
#import "Definitions.pbobjc.h"
#import "Scalapb.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AvatarImage);
GPBObjCClassDeclaration(FileLocation);
GPBObjCClassDeclaration(FileUrlDescription);
GPBObjCClassDeclaration(FileUrlError);
GPBObjCClassDeclaration(GPBStringValue);
GPBObjCClassDeclaration(HTTPHeader);
GPBObjCClassDeclaration(PredefinedColor);
GPBObjCClassDeclaration(RgbColor);

#pragma mark - MediaAndFilesRoot

@implementation MediaAndFilesRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
    [registry addExtensions:[DefinitionsRoot extensionRegistry]];
    [registry addExtensions:[ScalapbRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - MediaAndFilesRoot_FileDescriptor

static GPBFileDescriptor *MediaAndFilesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"dialog"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum Colors

GPBEnumDescriptor *Colors_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ColorsUnknown\000ColorsRed\000ColorsYellow\000Col"
        "orsGreen\000";
    static const int32_t values[] = {
        Colors_ColorsUnknown,
        Colors_ColorsRed,
        Colors_ColorsYellow,
        Colors_ColorsGreen,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Colors)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Colors_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Colors_IsValidValue(int32_t value__) {
  switch (value__) {
    case Colors_ColorsUnknown:
    case Colors_ColorsRed:
    case Colors_ColorsYellow:
    case Colors_ColorsGreen:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum FileUrlErrorTag

GPBEnumDescriptor *FileUrlErrorTag_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FileURLErrorTagUnknown\000FileURLErrorTagSt"
        "orageError\000FileURLErrorTagStorageForbidd"
        "enError\000";
    static const int32_t values[] = {
        FileUrlErrorTag_FileURLErrorTagUnknown,
        FileUrlErrorTag_FileURLErrorTagStorageError,
        FileUrlErrorTag_FileURLErrorTagStorageForbiddenError,
    };
    static const char *extraTextFormatInfo = "\003\000d\203\345\343\347\000\001d\203\345\343\347\345\000\002d\203\345\343\347\351\345\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(FileUrlErrorTag)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:FileUrlErrorTag_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL FileUrlErrorTag_IsValidValue(int32_t value__) {
  switch (value__) {
    case FileUrlErrorTag_FileURLErrorTagUnknown:
    case FileUrlErrorTag_FileURLErrorTagStorageError:
    case FileUrlErrorTag_FileURLErrorTagStorageForbiddenError:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - FileLocation

@implementation FileLocation

@dynamic fileId;
@dynamic accessHash;

typedef struct FileLocation__storage_ {
  uint32_t _has_storage_[1];
  NSString *fileId;
  int64_t accessHash;
} FileLocation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileId",
        .dataTypeSpecific.clazz = Nil,
        .number = FileLocation_FieldNumber_FileId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FileLocation__storage_, fileId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accessHash",
        .dataTypeSpecific.clazz = Nil,
        .number = FileLocation_FieldNumber_AccessHash,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FileLocation__storage_, accessHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FileLocation class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FileLocation__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ImageLocation

@implementation ImageLocation

@dynamic hasFileLocation, fileLocation;
@dynamic width;
@dynamic height;
@dynamic fileSize;

typedef struct ImageLocation__storage_ {
  uint32_t _has_storage_[1];
  int32_t width;
  int32_t height;
  int32_t fileSize;
  FileLocation *fileLocation;
} ImageLocation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileLocation",
        .dataTypeSpecific.clazz = GPBObjCClass(FileLocation),
        .number = ImageLocation_FieldNumber_FileLocation,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ImageLocation__storage_, fileLocation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "width",
        .dataTypeSpecific.clazz = Nil,
        .number = ImageLocation_FieldNumber_Width,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ImageLocation__storage_, width),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = ImageLocation_FieldNumber_Height,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ImageLocation__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fileSize",
        .dataTypeSpecific.clazz = Nil,
        .number = ImageLocation_FieldNumber_FileSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ImageLocation__storage_, fileSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ImageLocation class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ImageLocation__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AudioLocation

@implementation AudioLocation

@dynamic hasFileLocation, fileLocation;
@dynamic durationSeconds;
@dynamic mimeType;
@dynamic fileSizeBytes;

typedef struct AudioLocation__storage_ {
  uint32_t _has_storage_[1];
  int32_t durationSeconds;
  int32_t fileSizeBytes;
  FileLocation *fileLocation;
  NSString *mimeType;
} AudioLocation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileLocation",
        .dataTypeSpecific.clazz = GPBObjCClass(FileLocation),
        .number = AudioLocation_FieldNumber_FileLocation,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AudioLocation__storage_, fileLocation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "durationSeconds",
        .dataTypeSpecific.clazz = Nil,
        .number = AudioLocation_FieldNumber_DurationSeconds,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AudioLocation__storage_, durationSeconds),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mimeType",
        .dataTypeSpecific.clazz = Nil,
        .number = AudioLocation_FieldNumber_MimeType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AudioLocation__storage_, mimeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileSizeBytes",
        .dataTypeSpecific.clazz = Nil,
        .number = AudioLocation_FieldNumber_FileSizeBytes,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AudioLocation__storage_, fileSizeBytes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AudioLocation class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AudioLocation__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VideoLocation

@implementation VideoLocation

@dynamic hasFileLocation, fileLocation;
@dynamic durationSeconds;
@dynamic mimeType;
@dynamic fileSizeBytes;

typedef struct VideoLocation__storage_ {
  uint32_t _has_storage_[1];
  int32_t durationSeconds;
  int32_t fileSizeBytes;
  FileLocation *fileLocation;
  NSString *mimeType;
} VideoLocation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileLocation",
        .dataTypeSpecific.clazz = GPBObjCClass(FileLocation),
        .number = VideoLocation_FieldNumber_FileLocation,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VideoLocation__storage_, fileLocation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "durationSeconds",
        .dataTypeSpecific.clazz = Nil,
        .number = VideoLocation_FieldNumber_DurationSeconds,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VideoLocation__storage_, durationSeconds),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mimeType",
        .dataTypeSpecific.clazz = Nil,
        .number = VideoLocation_FieldNumber_MimeType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VideoLocation__storage_, mimeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileSizeBytes",
        .dataTypeSpecific.clazz = Nil,
        .number = VideoLocation_FieldNumber_FileSizeBytes,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VideoLocation__storage_, fileSizeBytes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VideoLocation class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VideoLocation__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AvatarImage

@implementation AvatarImage

@dynamic hasFileLocation, fileLocation;
@dynamic width;
@dynamic height;
@dynamic fileSizeBytes;

typedef struct AvatarImage__storage_ {
  uint32_t _has_storage_[1];
  int32_t width;
  int32_t height;
  int32_t fileSizeBytes;
  FileLocation *fileLocation;
} AvatarImage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileLocation",
        .dataTypeSpecific.clazz = GPBObjCClass(FileLocation),
        .number = AvatarImage_FieldNumber_FileLocation,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AvatarImage__storage_, fileLocation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "width",
        .dataTypeSpecific.clazz = Nil,
        .number = AvatarImage_FieldNumber_Width,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AvatarImage__storage_, width),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = AvatarImage_FieldNumber_Height,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AvatarImage__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fileSizeBytes",
        .dataTypeSpecific.clazz = Nil,
        .number = AvatarImage_FieldNumber_FileSizeBytes,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AvatarImage__storage_, fileSizeBytes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AvatarImage class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AvatarImage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Avatar

@implementation Avatar

@dynamic hasSmallImage, smallImage;
@dynamic hasLargeImage, largeImage;
@dynamic hasFullImage, fullImage;

typedef struct Avatar__storage_ {
  uint32_t _has_storage_[1];
  AvatarImage *smallImage;
  AvatarImage *largeImage;
  AvatarImage *fullImage;
} Avatar__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "smallImage",
        .dataTypeSpecific.clazz = GPBObjCClass(AvatarImage),
        .number = Avatar_FieldNumber_SmallImage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Avatar__storage_, smallImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "largeImage",
        .dataTypeSpecific.clazz = GPBObjCClass(AvatarImage),
        .number = Avatar_FieldNumber_LargeImage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Avatar__storage_, largeImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fullImage",
        .dataTypeSpecific.clazz = GPBObjCClass(AvatarImage),
        .number = Avatar_FieldNumber_FullImage,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Avatar__storage_, fullImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Avatar class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Avatar__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FastThumb

@implementation FastThumb

@dynamic w;
@dynamic h;
@dynamic thumb;

typedef struct FastThumb__storage_ {
  uint32_t _has_storage_[1];
  int32_t w;
  int32_t h;
  NSData *thumb;
} FastThumb__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "w",
        .dataTypeSpecific.clazz = Nil,
        .number = FastThumb_FieldNumber_W,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FastThumb__storage_, w),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "h",
        .dataTypeSpecific.clazz = Nil,
        .number = FastThumb_FieldNumber_H,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FastThumb__storage_, h),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "thumb",
        .dataTypeSpecific.clazz = Nil,
        .number = FastThumb_FieldNumber_Thumb,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FastThumb__storage_, thumb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FastThumb class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FastThumb__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Color

@implementation Color

@dynamic bodyOneOfCase;
@dynamic rgb;
@dynamic predefined;

typedef struct Color__storage_ {
  uint32_t _has_storage_[2];
  RgbColor *rgb;
  PredefinedColor *predefined;
} Color__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rgb",
        .dataTypeSpecific.clazz = GPBObjCClass(RgbColor),
        .number = Color_FieldNumber_Rgb,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Color__storage_, rgb),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "predefined",
        .dataTypeSpecific.clazz = GPBObjCClass(PredefinedColor),
        .number = Color_FieldNumber_Predefined,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Color__storage_, predefined),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Color class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Color__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "body",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Color_ClearBodyOneOfCase(Color *message) {
  GPBDescriptor *descriptor = [Color descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - RgbColor

@implementation RgbColor

@dynamic rgb;

typedef struct RgbColor__storage_ {
  uint32_t _has_storage_[1];
  int32_t rgb;
} RgbColor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rgb",
        .dataTypeSpecific.clazz = Nil,
        .number = RgbColor_FieldNumber_Rgb,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RgbColor__storage_, rgb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RgbColor class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RgbColor__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PredefinedColor

@implementation PredefinedColor

@dynamic color;

typedef struct PredefinedColor__storage_ {
  uint32_t _has_storage_[1];
  Colors color;
} PredefinedColor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "color",
        .dataTypeSpecific.enumDescFunc = Colors_EnumDescriptor,
        .number = PredefinedColor_FieldNumber_Color,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PredefinedColor__storage_, color),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PredefinedColor class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PredefinedColor__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PredefinedColor_Color_RawValue(PredefinedColor *message) {
  GPBDescriptor *descriptor = [PredefinedColor descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PredefinedColor_FieldNumber_Color];
  return GPBGetMessageRawEnumField(message, field);
}

void SetPredefinedColor_Color_RawValue(PredefinedColor *message, int32_t value) {
  GPBDescriptor *descriptor = [PredefinedColor descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PredefinedColor_FieldNumber_Color];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - HTTPHeader

@implementation HTTPHeader

@dynamic key;
@dynamic value;

typedef struct HTTPHeader__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  NSString *value;
} HTTPHeader__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.clazz = Nil,
        .number = HTTPHeader_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HTTPHeader__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = Nil,
        .number = HTTPHeader_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HTTPHeader__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HTTPHeader class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HTTPHeader__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FileUrlDescription

@implementation FileUrlDescription

@dynamic fileId;
@dynamic URL;
@dynamic timeout;
@dynamic hasUnsignedURL, unsignedURL;
@dynamic unsignedURLHeadersArray, unsignedURLHeadersArray_Count;
@dynamic md5Hash;

typedef struct FileUrlDescription__storage_ {
  uint32_t _has_storage_[1];
  int32_t timeout;
  NSString *fileId;
  NSString *URL;
  GPBStringValue *unsignedURL;
  NSMutableArray *unsignedURLHeadersArray;
  NSData *md5Hash;
} FileUrlDescription__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileId",
        .dataTypeSpecific.clazz = Nil,
        .number = FileUrlDescription_FieldNumber_FileId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FileUrlDescription__storage_, fileId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.clazz = Nil,
        .number = FileUrlDescription_FieldNumber_URL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FileUrlDescription__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeout",
        .dataTypeSpecific.clazz = Nil,
        .number = FileUrlDescription_FieldNumber_Timeout,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FileUrlDescription__storage_, timeout),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "unsignedURL",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = FileUrlDescription_FieldNumber_UnsignedURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FileUrlDescription__storage_, unsignedURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "unsignedURLHeadersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(HTTPHeader),
        .number = FileUrlDescription_FieldNumber_UnsignedURLHeadersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FileUrlDescription__storage_, unsignedURLHeadersArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "md5Hash",
        .dataTypeSpecific.clazz = Nil,
        .number = FileUrlDescription_FieldNumber_Md5Hash,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(FileUrlDescription__storage_, md5Hash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FileUrlDescription class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FileUrlDescription__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002!!!\000\004\010\241!!\000\005\000unsigned_url_headers\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FileUrlError

@implementation FileUrlError

@dynamic fileId;
@dynamic tag;
@dynamic reason;
@dynamic retryable;

typedef struct FileUrlError__storage_ {
  uint32_t _has_storage_[1];
  FileUrlErrorTag tag;
  NSString *reason;
  int64_t fileId;
} FileUrlError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileId",
        .dataTypeSpecific.clazz = Nil,
        .number = FileUrlError_FieldNumber_FileId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FileUrlError__storage_, fileId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tag",
        .dataTypeSpecific.enumDescFunc = FileUrlErrorTag_EnumDescriptor,
        .number = FileUrlError_FieldNumber_Tag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FileUrlError__storage_, tag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "reason",
        .dataTypeSpecific.clazz = Nil,
        .number = FileUrlError_FieldNumber_Reason,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FileUrlError__storage_, reason),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "retryable",
        .dataTypeSpecific.clazz = Nil,
        .number = FileUrlError_FieldNumber_Retryable,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FileUrlError class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FileUrlError__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t FileUrlError_Tag_RawValue(FileUrlError *message) {
  GPBDescriptor *descriptor = [FileUrlError descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FileUrlError_FieldNumber_Tag];
  return GPBGetMessageRawEnumField(message, field);
}

void SetFileUrlError_Tag_RawValue(FileUrlError *message, int32_t value) {
  GPBDescriptor *descriptor = [FileUrlError descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FileUrlError_FieldNumber_Tag];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - RequestGetFileUrl

@implementation RequestGetFileUrl

@dynamic hasFile, file;

typedef struct RequestGetFileUrl__storage_ {
  uint32_t _has_storage_[1];
  FileLocation *file;
} RequestGetFileUrl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "file",
        .dataTypeSpecific.clazz = GPBObjCClass(FileLocation),
        .number = RequestGetFileUrl_FieldNumber_File,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestGetFileUrl__storage_, file),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetFileUrl class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestGetFileUrl__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseGetFileUrl

@implementation ResponseGetFileUrl

@dynamic URL;
@dynamic timeoutSeconds;
@dynamic hasUnsignedURL, unsignedURL;
@dynamic unsignedURLHeadersArray, unsignedURLHeadersArray_Count;
@dynamic md5Hash;

typedef struct ResponseGetFileUrl__storage_ {
  uint32_t _has_storage_[1];
  int32_t timeoutSeconds;
  NSString *URL;
  GPBStringValue *unsignedURL;
  NSMutableArray *unsignedURLHeadersArray;
  NSData *md5Hash;
} ResponseGetFileUrl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseGetFileUrl_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseGetFileUrl__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeoutSeconds",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseGetFileUrl_FieldNumber_TimeoutSeconds,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ResponseGetFileUrl__storage_, timeoutSeconds),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "unsignedURL",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ResponseGetFileUrl_FieldNumber_UnsignedURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ResponseGetFileUrl__storage_, unsignedURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "unsignedURLHeadersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(HTTPHeader),
        .number = ResponseGetFileUrl_FieldNumber_UnsignedURLHeadersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseGetFileUrl__storage_, unsignedURLHeadersArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "md5Hash",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseGetFileUrl_FieldNumber_Md5Hash,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ResponseGetFileUrl__storage_, md5Hash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseGetFileUrl class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseGetFileUrl__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001!!!\000\003\010\241!!\000\004\000unsigned_url_headers\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestGetFileUrls

@implementation RequestGetFileUrls

@dynamic filesArray, filesArray_Count;

typedef struct RequestGetFileUrls__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *filesArray;
} RequestGetFileUrls__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "filesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(FileLocation),
        .number = RequestGetFileUrls_FieldNumber_FilesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestGetFileUrls__storage_, filesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetFileUrls class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestGetFileUrls__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseGetFileUrls

@implementation ResponseGetFileUrls

@dynamic fileUrlsArray, fileUrlsArray_Count;
@dynamic errorsArray, errorsArray_Count;

typedef struct ResponseGetFileUrls__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *fileUrlsArray;
  NSMutableArray *errorsArray;
} ResponseGetFileUrls__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileUrlsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(FileUrlDescription),
        .number = ResponseGetFileUrls_FieldNumber_FileUrlsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseGetFileUrls__storage_, fileUrlsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "errorsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(FileUrlError),
        .number = ResponseGetFileUrls_FieldNumber_ErrorsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseGetFileUrls__storage_, errorsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseGetFileUrls class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseGetFileUrls__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestGetFileUrlBuilder

@implementation RequestGetFileUrlBuilder

@dynamic supportedSignatureAlgorithmsArray, supportedSignatureAlgorithmsArray_Count;

typedef struct RequestGetFileUrlBuilder__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *supportedSignatureAlgorithmsArray;
} RequestGetFileUrlBuilder__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "supportedSignatureAlgorithmsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestGetFileUrlBuilder_FieldNumber_SupportedSignatureAlgorithmsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestGetFileUrlBuilder__storage_, supportedSignatureAlgorithmsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetFileUrlBuilder class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestGetFileUrlBuilder__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseGetFileUrlBuilder

@implementation ResponseGetFileUrlBuilder

@dynamic baseURL;
@dynamic algo;
@dynamic seed;
@dynamic signatureSecret;
@dynamic timeout;

typedef struct ResponseGetFileUrlBuilder__storage_ {
  uint32_t _has_storage_[1];
  int32_t timeout;
  NSString *baseURL;
  NSString *algo;
  NSData *signatureSecret;
  NSString *seed;
} ResponseGetFileUrlBuilder__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseURL",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseGetFileUrlBuilder_FieldNumber_BaseURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseGetFileUrlBuilder__storage_, baseURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "algo",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseGetFileUrlBuilder_FieldNumber_Algo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ResponseGetFileUrlBuilder__storage_, algo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signatureSecret",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseGetFileUrlBuilder_FieldNumber_SignatureSecret,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ResponseGetFileUrlBuilder__storage_, signatureSecret),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "timeout",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseGetFileUrlBuilder_FieldNumber_Timeout,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ResponseGetFileUrlBuilder__storage_, timeout),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "seed",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseGetFileUrlBuilder_FieldNumber_Seed,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ResponseGetFileUrlBuilder__storage_, seed),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseGetFileUrlBuilder class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseGetFileUrlBuilder__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestGetFileUploadUrl

@implementation RequestGetFileUploadUrl

@dynamic expectedSize;

typedef struct RequestGetFileUploadUrl__storage_ {
  uint32_t _has_storage_[1];
  int32_t expectedSize;
} RequestGetFileUploadUrl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "expectedSize",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestGetFileUploadUrl_FieldNumber_ExpectedSize,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestGetFileUploadUrl__storage_, expectedSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetFileUploadUrl class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestGetFileUploadUrl__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseGetFileUploadUrl

@implementation ResponseGetFileUploadUrl

@dynamic uploadKey;

typedef struct ResponseGetFileUploadUrl__storage_ {
  uint32_t _has_storage_[1];
  NSData *uploadKey;
} ResponseGetFileUploadUrl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uploadKey",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseGetFileUploadUrl_FieldNumber_UploadKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseGetFileUploadUrl__storage_, uploadKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseGetFileUploadUrl class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseGetFileUploadUrl__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestCommitFileUpload

@implementation RequestCommitFileUpload

@dynamic uploadKey;
@dynamic fileName;
@dynamic md5Hash;

typedef struct RequestCommitFileUpload__storage_ {
  uint32_t _has_storage_[1];
  NSData *uploadKey;
  NSString *fileName;
  NSData *md5Hash;
} RequestCommitFileUpload__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uploadKey",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestCommitFileUpload_FieldNumber_UploadKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestCommitFileUpload__storage_, uploadKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "fileName",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestCommitFileUpload_FieldNumber_FileName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestCommitFileUpload__storage_, fileName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "md5Hash",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestCommitFileUpload_FieldNumber_Md5Hash,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestCommitFileUpload__storage_, md5Hash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestCommitFileUpload class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestCommitFileUpload__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseCommitFileUpload

@implementation ResponseCommitFileUpload

@dynamic hasUploadedFileLocation, uploadedFileLocation;

typedef struct ResponseCommitFileUpload__storage_ {
  uint32_t _has_storage_[1];
  FileLocation *uploadedFileLocation;
} ResponseCommitFileUpload__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uploadedFileLocation",
        .dataTypeSpecific.clazz = GPBObjCClass(FileLocation),
        .number = ResponseCommitFileUpload_FieldNumber_UploadedFileLocation,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseCommitFileUpload__storage_, uploadedFileLocation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseCommitFileUpload class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseCommitFileUpload__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestGetFileUploadPartUrl

@implementation RequestGetFileUploadPartUrl

@dynamic partNumber;
@dynamic partSize;
@dynamic uploadKey;

typedef struct RequestGetFileUploadPartUrl__storage_ {
  uint32_t _has_storage_[1];
  int32_t partNumber;
  int32_t partSize;
  NSData *uploadKey;
} RequestGetFileUploadPartUrl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "partNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestGetFileUploadPartUrl_FieldNumber_PartNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestGetFileUploadPartUrl__storage_, partNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "partSize",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestGetFileUploadPartUrl_FieldNumber_PartSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestGetFileUploadPartUrl__storage_, partSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "uploadKey",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestGetFileUploadPartUrl_FieldNumber_UploadKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestGetFileUploadPartUrl__storage_, uploadKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestGetFileUploadPartUrl class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestGetFileUploadPartUrl__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseGetFileUploadPartUrl

@implementation ResponseGetFileUploadPartUrl

@dynamic URL;

typedef struct ResponseGetFileUploadPartUrl__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
} ResponseGetFileUploadPartUrl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.clazz = Nil,
        .number = ResponseGetFileUploadPartUrl_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseGetFileUploadPartUrl__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseGetFileUploadPartUrl class]
                                     rootClass:[MediaAndFilesRoot class]
                                          file:MediaAndFilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseGetFileUploadPartUrl__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
