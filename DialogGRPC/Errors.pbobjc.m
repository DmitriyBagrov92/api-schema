// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errors.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Errors.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Error);
GPBObjCClassDeclaration(MediaError);
GPBObjCClassDeclaration(MediaError_FileSizeExceededError);
GPBObjCClassDeclaration(OperationalError);
GPBObjCClassDeclaration(OperationalError_FlagViolationError);

#pragma mark - ErrorsRoot

@implementation ErrorsRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ErrorsRoot_FileDescriptor

static GPBFileDescriptor *ErrorsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"dialog"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MediaError

@implementation MediaError

@dynamic errorOneOfCase;
@dynamic fileSizeExceeded;

typedef struct MediaError__storage_ {
  uint32_t _has_storage_[2];
  MediaError_FileSizeExceededError *fileSizeExceeded;
} MediaError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileSizeExceeded",
        .dataTypeSpecific.clazz = GPBObjCClass(MediaError_FileSizeExceededError),
        .number = MediaError_FieldNumber_FileSizeExceeded,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(MediaError__storage_, fileSizeExceeded),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MediaError class]
                                     rootClass:[ErrorsRoot class]
                                          file:ErrorsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MediaError__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "error",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void MediaError_ClearErrorOneOfCase(MediaError *message) {
  GPBDescriptor *descriptor = [MediaError descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - MediaError_FileSizeExceededError

@implementation MediaError_FileSizeExceededError

@dynamic maxFileSize;

typedef struct MediaError_FileSizeExceededError__storage_ {
  uint32_t _has_storage_[1];
  uint32_t maxFileSize;
} MediaError_FileSizeExceededError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "maxFileSize",
        .dataTypeSpecific.clazz = Nil,
        .number = MediaError_FileSizeExceededError_FieldNumber_MaxFileSize,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MediaError_FileSizeExceededError__storage_, maxFileSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MediaError_FileSizeExceededError class]
                                     rootClass:[ErrorsRoot class]
                                          file:ErrorsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MediaError_FileSizeExceededError__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(MediaError)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OperationalError

@implementation OperationalError

@dynamic errorOneOfCase;
@dynamic flagViolation;

typedef struct OperationalError__storage_ {
  uint32_t _has_storage_[2];
  OperationalError_FlagViolationError *flagViolation;
} OperationalError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "flagViolation",
        .dataTypeSpecific.clazz = GPBObjCClass(OperationalError_FlagViolationError),
        .number = OperationalError_FieldNumber_FlagViolation,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(OperationalError__storage_, flagViolation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OperationalError class]
                                     rootClass:[ErrorsRoot class]
                                          file:ErrorsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OperationalError__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "error",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void OperationalError_ClearErrorOneOfCase(OperationalError *message) {
  GPBDescriptor *descriptor = [OperationalError descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - OperationalError_FlagViolationError

@implementation OperationalError_FlagViolationError

@dynamic flagName;
@dynamic value;
@dynamic expectedValue;

typedef struct OperationalError_FlagViolationError__storage_ {
  uint32_t _has_storage_[1];
  NSString *flagName;
} OperationalError_FlagViolationError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "flagName",
        .dataTypeSpecific.clazz = Nil,
        .number = OperationalError_FlagViolationError_FieldNumber_FlagName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OperationalError_FlagViolationError__storage_, flagName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = Nil,
        .number = OperationalError_FlagViolationError_FieldNumber_Value,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "expectedValue",
        .dataTypeSpecific.clazz = Nil,
        .number = OperationalError_FlagViolationError_FieldNumber_ExpectedValue,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OperationalError_FlagViolationError class]
                                     rootClass:[ErrorsRoot class]
                                          file:ErrorsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OperationalError_FlagViolationError__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(OperationalError)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Error

@implementation Error

@dynamic kindOneOfCase;
@dynamic domain;
@dynamic operationalError;
@dynamic mediaError;

typedef struct Error__storage_ {
  uint32_t _has_storage_[2];
  NSString *domain;
  OperationalError *operationalError;
  MediaError *mediaError;
} Error__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "domain",
        .dataTypeSpecific.clazz = Nil,
        .number = Error_FieldNumber_Domain,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Error__storage_, domain),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "operationalError",
        .dataTypeSpecific.clazz = GPBObjCClass(OperationalError),
        .number = Error_FieldNumber_OperationalError,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Error__storage_, operationalError),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mediaError",
        .dataTypeSpecific.clazz = GPBObjCClass(MediaError),
        .number = Error_FieldNumber_MediaError,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Error__storage_, mediaError),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Error class]
                                     rootClass:[ErrorsRoot class]
                                          file:ErrorsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Error__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "kind",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Error_ClearKindOneOfCase(Error *message) {
  GPBDescriptor *descriptor = [Error descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - ErrorResponse

@implementation ErrorResponse


typedef struct ErrorResponse__storage_ {
  uint32_t _has_storage_[1];
} ErrorResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ErrorResponse class]
                                     rootClass:[ErrorsRoot class]
                                          file:ErrorsRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(ErrorResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ErrorRequest

@implementation ErrorRequest

@dynamic code;
@dynamic hasError, error;

typedef struct ErrorRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t code;
  Error *error;
} ErrorRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = ErrorRequest_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ErrorRequest__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(Error),
        .number = ErrorRequest_FieldNumber_Error,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ErrorRequest__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ErrorRequest class]
                                     rootClass:[ErrorsRoot class]
                                          file:ErrorsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ErrorRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
