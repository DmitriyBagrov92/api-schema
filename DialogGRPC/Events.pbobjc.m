// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: events.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Events.pbobjc.h"
#import "Annotations.pbobjc.h"
#import "Peers.pbobjc.h"
#import "Definitions.pbobjc.h"
#import "Messaging.pbobjc.h"
#import "Scalapb.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Event);
GPBObjCClassDeclaration(Event_Invite);
GPBObjCClassDeclaration(Event_Kick);
GPBObjCClassDeclaration(Event_Mention);
GPBObjCClassDeclaration(Event_Reactions);
GPBObjCClassDeclaration(Event_Reactions_Reaction);
GPBObjCClassDeclaration(Event_Reply);
GPBObjCClassDeclaration(Peer);
GPBObjCClassDeclaration(UUIDValue);

#pragma mark - EventsRoot

@implementation EventsRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
    [registry addExtensions:[DefinitionsRoot extensionRegistry]];
    [registry addExtensions:[ScalapbRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - EventsRoot_FileDescriptor

static GPBFileDescriptor *EventsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"dialog"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Event

@implementation Event

@dynamic eventOneOfCase;
@dynamic clock;
@dynamic id_p;
@dynamic mention;
@dynamic reactions;
@dynamic reply;
@dynamic invite;
@dynamic kick;

typedef struct Event__storage_ {
  uint32_t _has_storage_[2];
  NSString *id_p;
  Event_Mention *mention;
  Event_Reactions *reactions;
  Event_Reply *reply;
  Event_Invite *invite;
  Event_Kick *kick;
  int64_t clock;
} Event__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clock",
        .dataTypeSpecific.clazz = Nil,
        .number = Event_FieldNumber_Clock,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Event__storage_, clock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Event_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Event__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mention",
        .dataTypeSpecific.clazz = GPBObjCClass(Event_Mention),
        .number = Event_FieldNumber_Mention,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Event__storage_, mention),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reactions",
        .dataTypeSpecific.clazz = GPBObjCClass(Event_Reactions),
        .number = Event_FieldNumber_Reactions,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Event__storage_, reactions),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reply",
        .dataTypeSpecific.clazz = GPBObjCClass(Event_Reply),
        .number = Event_FieldNumber_Reply,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Event__storage_, reply),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "invite",
        .dataTypeSpecific.clazz = GPBObjCClass(Event_Invite),
        .number = Event_FieldNumber_Invite,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Event__storage_, invite),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "kick",
        .dataTypeSpecific.clazz = GPBObjCClass(Event_Kick),
        .number = Event_FieldNumber_Kick,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Event__storage_, kick),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Event class]
                                     rootClass:[EventsRoot class]
                                          file:EventsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Event__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "event",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Event_ClearEventOneOfCase(Event *message) {
  GPBDescriptor *descriptor = [Event descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Event_Mention

@implementation Event_Mention

@dynamic hasPeer, peer;
@dynamic hasMid, mid;
@dynamic userId;

typedef struct Event_Mention__storage_ {
  uint32_t _has_storage_[1];
  Peer *peer;
  UUIDValue *mid;
  NSString *userId;
} Event_Mention__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = Event_Mention_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Event_Mention__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = Event_Mention_FieldNumber_Mid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Event_Mention__storage_, mid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = Event_Mention_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Event_Mention__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Event_Mention class]
                                     rootClass:[EventsRoot class]
                                          file:EventsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Event_Mention__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Event)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Event_Reactions

@implementation Event_Reactions

@dynamic hasPeer, peer;
@dynamic hasMid, mid;
@dynamic reactionsArray, reactionsArray_Count;

typedef struct Event_Reactions__storage_ {
  uint32_t _has_storage_[1];
  Peer *peer;
  UUIDValue *mid;
  NSMutableArray *reactionsArray;
} Event_Reactions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = Event_Reactions_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Event_Reactions__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = Event_Reactions_FieldNumber_Mid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Event_Reactions__storage_, mid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reactionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Event_Reactions_Reaction),
        .number = Event_Reactions_FieldNumber_ReactionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Event_Reactions__storage_, reactionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Event_Reactions class]
                                     rootClass:[EventsRoot class]
                                          file:EventsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Event_Reactions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Event)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Event_Reactions_Reaction

@implementation Event_Reactions_Reaction

@dynamic code;
@dynamic userIds, userIds_Count;

typedef struct Event_Reactions_Reaction__storage_ {
  uint32_t _has_storage_[1];
  NSString *code;
  GPBStringInt64Dictionary *userIds;
} Event_Reactions_Reaction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = Event_Reactions_Reaction_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Event_Reactions_Reaction__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userIds",
        .dataTypeSpecific.clazz = Nil,
        .number = Event_Reactions_Reaction_FieldNumber_UserIds,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Event_Reactions_Reaction__storage_, userIds),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Event_Reactions_Reaction class]
                                     rootClass:[EventsRoot class]
                                          file:EventsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Event_Reactions_Reaction__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Event_Reactions)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Event_Reply

@implementation Event_Reply

@dynamic hasPeer, peer;
@dynamic hasMid, mid;
@dynamic userId;

typedef struct Event_Reply__storage_ {
  uint32_t _has_storage_[1];
  Peer *peer;
  UUIDValue *mid;
  NSString *userId;
} Event_Reply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = Event_Reply_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Event_Reply__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUIDValue),
        .number = Event_Reply_FieldNumber_Mid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Event_Reply__storage_, mid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = Event_Reply_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Event_Reply__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Event_Reply class]
                                     rootClass:[EventsRoot class]
                                          file:EventsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Event_Reply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Event)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Event_Invite

@implementation Event_Invite

@dynamic hasPeer, peer;
@dynamic userId;

typedef struct Event_Invite__storage_ {
  uint32_t _has_storage_[1];
  Peer *peer;
  NSString *userId;
} Event_Invite__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = Event_Invite_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Event_Invite__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = Event_Invite_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Event_Invite__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Event_Invite class]
                                     rootClass:[EventsRoot class]
                                          file:EventsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Event_Invite__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Event)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Event_Kick

@implementation Event_Kick

@dynamic hasPeer, peer;
@dynamic userId;

typedef struct Event_Kick__storage_ {
  uint32_t _has_storage_[1];
  Peer *peer;
  NSString *userId;
} Event_Kick__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = Event_Kick_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Event_Kick__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = Event_Kick_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Event_Kick__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Event_Kick class]
                                     rootClass:[EventsRoot class]
                                          file:EventsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Event_Kick__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Event)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateEvent

@implementation UpdateEvent

@dynamic hasEvent, event;
@dynamic prevClock;

typedef struct UpdateEvent__storage_ {
  uint32_t _has_storage_[1];
  Event *event;
  int64_t prevClock;
} UpdateEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "event",
        .dataTypeSpecific.clazz = GPBObjCClass(Event),
        .number = UpdateEvent_FieldNumber_Event,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateEvent__storage_, event),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "prevClock",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateEvent_FieldNumber_PrevClock,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateEvent__storage_, prevClock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateEvent class]
                                     rootClass:[EventsRoot class]
                                          file:EventsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateEvent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LoadEventsRequest

@implementation LoadEventsRequest

@dynamic fromClock;
@dynamic loadMode;
@dynamic limit;

typedef struct LoadEventsRequest__storage_ {
  uint32_t _has_storage_[1];
  ListLoadMode loadMode;
  int32_t limit;
  int64_t fromClock;
} LoadEventsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromClock",
        .dataTypeSpecific.clazz = Nil,
        .number = LoadEventsRequest_FieldNumber_FromClock,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LoadEventsRequest__storage_, fromClock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "loadMode",
        .dataTypeSpecific.enumDescFunc = ListLoadMode_EnumDescriptor,
        .number = LoadEventsRequest_FieldNumber_LoadMode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LoadEventsRequest__storage_, loadMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "limit",
        .dataTypeSpecific.clazz = Nil,
        .number = LoadEventsRequest_FieldNumber_Limit,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LoadEventsRequest__storage_, limit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LoadEventsRequest class]
                                     rootClass:[EventsRoot class]
                                          file:EventsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LoadEventsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t LoadEventsRequest_LoadMode_RawValue(LoadEventsRequest *message) {
  GPBDescriptor *descriptor = [LoadEventsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LoadEventsRequest_FieldNumber_LoadMode];
  return GPBGetMessageRawEnumField(message, field);
}

void SetLoadEventsRequest_LoadMode_RawValue(LoadEventsRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [LoadEventsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LoadEventsRequest_FieldNumber_LoadMode];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - LoadEventsResponse

@implementation LoadEventsResponse

@dynamic eventsArray, eventsArray_Count;
@dynamic clock;
@dynamic nextAvailable;

typedef struct LoadEventsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *eventsArray;
  int64_t clock;
} LoadEventsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "eventsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Event),
        .number = LoadEventsResponse_FieldNumber_EventsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LoadEventsResponse__storage_, eventsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = Nil,
        .number = LoadEventsResponse_FieldNumber_Clock,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LoadEventsResponse__storage_, clock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nextAvailable",
        .dataTypeSpecific.clazz = Nil,
        .number = LoadEventsResponse_FieldNumber_NextAvailable,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LoadEventsResponse class]
                                     rootClass:[EventsRoot class]
                                          file:EventsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LoadEventsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
