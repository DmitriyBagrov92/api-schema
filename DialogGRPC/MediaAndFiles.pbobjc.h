// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media_and_files.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class AvatarImage;
@class FileLocation;
@class FileUrlDescription;
@class FileUrlError;
@class GPBStringValue;
@class HTTPHeader;
@class PredefinedColor;
@class RgbColor;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Colors

/** / Набор вариантов цветов */
typedef GPB_ENUM(Colors) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Colors_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Colors_ColorsUnknown = 0,

  /** Красный */
  Colors_ColorsRed = 1,

  /** Желтый */
  Colors_ColorsYellow = 2,

  /** Зелёный */
  Colors_ColorsGreen = 3,
};

GPBEnumDescriptor *Colors_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Colors_IsValidValue(int32_t value);

#pragma mark - Enum FileUrlErrorTag

/** / Набор ошибок при операциях с файловым URL */
typedef GPB_ENUM(FileUrlErrorTag) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  FileUrlErrorTag_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  FileUrlErrorTag_FileURLErrorTagUnknown = 0,

  /** / Ошибка хранилища */
  FileUrlErrorTag_FileURLErrorTagStorageError = 1,

  /** / Ошибка доступа в хранилище */
  FileUrlErrorTag_FileURLErrorTagStorageForbiddenError = 2,
};

GPBEnumDescriptor *FileUrlErrorTag_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL FileUrlErrorTag_IsValidValue(int32_t value);

#pragma mark - MediaAndFilesRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface MediaAndFilesRoot : GPBRootObject
@end

#pragma mark - FileLocation

typedef GPB_ENUM(FileLocation_FieldNumber) {
  FileLocation_FieldNumber_FileId = 1,
  FileLocation_FieldNumber_AccessHash = 2,
};

/**
 * / Координаты файла
 **/
GPB_FINAL @interface FileLocation : GPBMessage

/** / Идентификатор файла */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fileId;

/** / Ключ доступа к файлу */
@property(nonatomic, readwrite) int64_t accessHash;

@end

#pragma mark - ImageLocation

typedef GPB_ENUM(ImageLocation_FieldNumber) {
  ImageLocation_FieldNumber_FileLocation = 1,
  ImageLocation_FieldNumber_Width = 2,
  ImageLocation_FieldNumber_Height = 3,
  ImageLocation_FieldNumber_FileSize = 4,
};

/**
 * / Координаты изображения
 **/
GPB_FINAL @interface ImageLocation : GPBMessage

/** / Координаты файла с изображением */
@property(nonatomic, readwrite, strong, null_resettable) FileLocation *fileLocation;
/** Test to see if @c fileLocation has been set. */
@property(nonatomic, readwrite) BOOL hasFileLocation;

/** / Ширина изображения в пикселях */
@property(nonatomic, readwrite) int32_t width;

/** / Высота изображения в пикселях */
@property(nonatomic, readwrite) int32_t height;

/** / Размер файла с изображением в байтах */
@property(nonatomic, readwrite) int32_t fileSize;

@end

#pragma mark - AudioLocation

typedef GPB_ENUM(AudioLocation_FieldNumber) {
  AudioLocation_FieldNumber_FileLocation = 1,
  AudioLocation_FieldNumber_DurationSeconds = 2,
  AudioLocation_FieldNumber_MimeType = 3,
  AudioLocation_FieldNumber_FileSizeBytes = 4,
};

/**
 * / Координаты аудио-файла
 **/
GPB_FINAL @interface AudioLocation : GPBMessage

/** / Координаты файла с аудио */
@property(nonatomic, readwrite, strong, null_resettable) FileLocation *fileLocation;
/** Test to see if @c fileLocation has been set. */
@property(nonatomic, readwrite) BOOL hasFileLocation;

/** / Длительность аудио-файла в секундах */
@property(nonatomic, readwrite) int32_t durationSeconds;

/** / MIME-тип аудио-файла */
@property(nonatomic, readwrite, copy, null_resettable) NSString *mimeType;

/** / Размер аудио-файла в байтах */
@property(nonatomic, readwrite) int32_t fileSizeBytes;

@end

#pragma mark - AvatarImage

typedef GPB_ENUM(AvatarImage_FieldNumber) {
  AvatarImage_FieldNumber_FileLocation = 1,
  AvatarImage_FieldNumber_Width = 2,
  AvatarImage_FieldNumber_Height = 3,
  AvatarImage_FieldNumber_FileSizeBytes = 4,
};

/**
 * / Структура изображения-аватара
 **/
GPB_FINAL @interface AvatarImage : GPBMessage

/** / Координаты файла с аватаром */
@property(nonatomic, readwrite, strong, null_resettable) FileLocation *fileLocation;
/** Test to see if @c fileLocation has been set. */
@property(nonatomic, readwrite) BOOL hasFileLocation;

/** / Ширина изображения в пикселях */
@property(nonatomic, readwrite) int32_t width;

/** / Высота изображения в пикселях */
@property(nonatomic, readwrite) int32_t height;

/** / Размер изображения в байтах */
@property(nonatomic, readwrite) int32_t fileSizeBytes;

@end

#pragma mark - Avatar

typedef GPB_ENUM(Avatar_FieldNumber) {
  Avatar_FieldNumber_SmallImage = 1,
  Avatar_FieldNumber_LargeImage = 2,
  Avatar_FieldNumber_FullImage = 3,
};

/**
 * / Структура автара
 **/
GPB_FINAL @interface Avatar : GPBMessage

/** / Изображение-аватар в размере 100x100 */
@property(nonatomic, readwrite, strong, null_resettable) AvatarImage *smallImage;
/** Test to see if @c smallImage has been set. */
@property(nonatomic, readwrite) BOOL hasSmallImage;

/** / Изображение-аватар в размере 200x200 */
@property(nonatomic, readwrite, strong, null_resettable) AvatarImage *largeImage;
/** Test to see if @c largeImage has been set. */
@property(nonatomic, readwrite) BOOL hasLargeImage;

/** / Оригинальное изображение-аватар */
@property(nonatomic, readwrite, strong, null_resettable) AvatarImage *fullImage;
/** Test to see if @c fullImage has been set. */
@property(nonatomic, readwrite) BOOL hasFullImage;

@end

#pragma mark - FastThumb

typedef GPB_ENUM(FastThumb_FieldNumber) {
  FastThumb_FieldNumber_W = 1,
  FastThumb_FieldNumber_H = 2,
  FastThumb_FieldNumber_Thumb = 3,
};

/**
 * / Структура для быстрого предпросмотра изображений, должна содержать изображние размером не более 90x90 пикселей и быть сжатой в JPEG с минимальным качеством
 **/
GPB_FINAL @interface FastThumb : GPBMessage

/** / Ширина изображения-предпросмотра в пикселях */
@property(nonatomic, readwrite) int32_t w;

/** / Высота изображения-предпросмотра в пикселях */
@property(nonatomic, readwrite) int32_t h;

/** / Байты, представляющие собой изображение в формате JPEG */
@property(nonatomic, readwrite, copy, null_resettable) NSData *thumb;

@end

#pragma mark - Color

typedef GPB_ENUM(Color_FieldNumber) {
  Color_FieldNumber_Rgb = 1,
  Color_FieldNumber_Predefined = 2,
};

typedef GPB_ENUM(Color_Body_OneOfCase) {
  Color_Body_OneOfCase_GPBUnsetOneOfCase = 0,
  Color_Body_OneOfCase_Rgb = 1,
  Color_Body_OneOfCase_Predefined = 2,
};

/**
 * / Структура цвета
 **/
GPB_FINAL @interface Color : GPBMessage

@property(nonatomic, readonly) Color_Body_OneOfCase bodyOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) RgbColor *rgb;

@property(nonatomic, readwrite, strong, null_resettable) PredefinedColor *predefined;

@end

/**
 * Clears whatever value was set for the oneof 'body'.
 **/
void Color_ClearBodyOneOfCase(Color *message);

#pragma mark - RgbColor

typedef GPB_ENUM(RgbColor_FieldNumber) {
  RgbColor_FieldNumber_Rgb = 1,
};

/**
 * / Структура цвета в формате RGB
 **/
GPB_FINAL @interface RgbColor : GPBMessage

/** / Представление цвета в 8-битном формате RGBa (по 8 бит на цвет + альфа канал) */
@property(nonatomic, readwrite) int32_t rgb;

@end

#pragma mark - PredefinedColor

typedef GPB_ENUM(PredefinedColor_FieldNumber) {
  PredefinedColor_FieldNumber_Color = 1,
};

/**
 * / Структура предпоределенного цвета
 **/
GPB_FINAL @interface PredefinedColor : GPBMessage

/** / Цвет */
@property(nonatomic, readwrite) Colors color;

@end

/**
 * Fetches the raw value of a @c PredefinedColor's @c color property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t PredefinedColor_Color_RawValue(PredefinedColor *message);
/**
 * Sets the raw value of an @c PredefinedColor's @c color property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPredefinedColor_Color_RawValue(PredefinedColor *message, int32_t value);

#pragma mark - HTTPHeader

typedef GPB_ENUM(HTTPHeader_FieldNumber) {
  HTTPHeader_FieldNumber_Key = 1,
  HTTPHeader_FieldNumber_Value = 2,
};

/**
 * / HTTP-заголовок
 **/
GPB_FINAL @interface HTTPHeader : GPBMessage

/** / Наименование заголовка */
@property(nonatomic, readwrite, copy, null_resettable) NSString *key;

/** / Значение заголовка */
@property(nonatomic, readwrite, copy, null_resettable) NSString *value;

@end

#pragma mark - FileUrlDescription

typedef GPB_ENUM(FileUrlDescription_FieldNumber) {
  FileUrlDescription_FieldNumber_FileId = 1,
  FileUrlDescription_FieldNumber_URL = 2,
  FileUrlDescription_FieldNumber_Timeout = 3,
  FileUrlDescription_FieldNumber_UnsignedURL = 4,
  FileUrlDescription_FieldNumber_UnsignedURLHeadersArray = 5,
  FileUrlDescription_FieldNumber_Md5Hash = 6,
};

/**
 * / Структура URL файла
 **/
GPB_FINAL @interface FileUrlDescription : GPBMessage

/** / Идентификатор файла */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fileId;

/** / URL по котором файл доступен для скачивания */
@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;

/** / Время жизни URL в секундах с момента получения этой структуры */
@property(nonatomic, readwrite) int32_t timeout;

/** / Неподписанный URL файла */
@property(nonatomic, readwrite, strong, null_resettable) GPBStringValue *unsignedURL;
/** Test to see if @c unsignedURL has been set. */
@property(nonatomic, readwrite) BOOL hasUnsignedURL;

/** / HTTP-заголовки, которые необходимо предоставить для скачивания файла по неподписанному URL */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<HTTPHeader*> *unsignedURLHeadersArray;
/** The number of items in @c unsignedURLHeadersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger unsignedURLHeadersArray_Count;

/** / MD5-хэш содержимого файла */
@property(nonatomic, readwrite, copy, null_resettable) NSData *md5Hash;

@end

#pragma mark - FileUrlError

typedef GPB_ENUM(FileUrlError_FieldNumber) {
  FileUrlError_FieldNumber_FileId = 1,
  FileUrlError_FieldNumber_Tag = 2,
  FileUrlError_FieldNumber_Reason = 3,
  FileUrlError_FieldNumber_Retryable = 4,
};

/**
 * / Ошибка операции с файлом по URL
 **/
GPB_FINAL @interface FileUrlError : GPBMessage

/** / Идентификатор файла */
@property(nonatomic, readwrite) int64_t fileId;

/** / Предпопределенная ошибка */
@property(nonatomic, readwrite) FileUrlErrorTag tag;

/** / Расширенное описание ошибки */
@property(nonatomic, readwrite, copy, null_resettable) NSString *reason;

/** / Флаг возможности повторение запроса приведшего к данной ошибке */
@property(nonatomic, readwrite) BOOL retryable;

@end

/**
 * Fetches the raw value of a @c FileUrlError's @c tag property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t FileUrlError_Tag_RawValue(FileUrlError *message);
/**
 * Sets the raw value of an @c FileUrlError's @c tag property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetFileUrlError_Tag_RawValue(FileUrlError *message, int32_t value);

#pragma mark - RequestGetFileUrl

typedef GPB_ENUM(RequestGetFileUrl_FieldNumber) {
  RequestGetFileUrl_FieldNumber_File = 1,
};

/**
 * / Запрос на получение URL файла
 **/
GPB_FINAL @interface RequestGetFileUrl : GPBMessage

/** / Координаты файла */
@property(nonatomic, readwrite, strong, null_resettable) FileLocation *file;
/** Test to see if @c file has been set. */
@property(nonatomic, readwrite) BOOL hasFile;

@end

#pragma mark - ResponseGetFileUrl

typedef GPB_ENUM(ResponseGetFileUrl_FieldNumber) {
  ResponseGetFileUrl_FieldNumber_URL = 1,
  ResponseGetFileUrl_FieldNumber_TimeoutSeconds = 2,
  ResponseGetFileUrl_FieldNumber_UnsignedURL = 3,
  ResponseGetFileUrl_FieldNumber_UnsignedURLHeadersArray = 4,
  ResponseGetFileUrl_FieldNumber_Md5Hash = 5,
};

/**
 * / Ответ на запрос на получение URL файла
 **/
GPB_FINAL @interface ResponseGetFileUrl : GPBMessage

/** / URL файла */
@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;

/** / Время жизни URL в секундах с момента получения URL */
@property(nonatomic, readwrite) int32_t timeoutSeconds;

/** / Неподписанный URL файла */
@property(nonatomic, readwrite, strong, null_resettable) GPBStringValue *unsignedURL;
/** Test to see if @c unsignedURL has been set. */
@property(nonatomic, readwrite) BOOL hasUnsignedURL;

/** / HTTP-заголовки, которые необходимо предоставить для скачивания файла по неподписанному URL */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<HTTPHeader*> *unsignedURLHeadersArray;
/** The number of items in @c unsignedURLHeadersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger unsignedURLHeadersArray_Count;

/** / MD5-хэш файла */
@property(nonatomic, readwrite, copy, null_resettable) NSData *md5Hash;

@end

#pragma mark - RequestGetFileUrls

typedef GPB_ENUM(RequestGetFileUrls_FieldNumber) {
  RequestGetFileUrls_FieldNumber_FilesArray = 1,
};

/**
 * / Запрос на получение URL набора файлов
 **/
GPB_FINAL @interface RequestGetFileUrls : GPBMessage

/** / Список координат файлов */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<FileLocation*> *filesArray;
/** The number of items in @c filesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger filesArray_Count;

@end

#pragma mark - ResponseGetFileUrls

typedef GPB_ENUM(ResponseGetFileUrls_FieldNumber) {
  ResponseGetFileUrls_FieldNumber_FileUrlsArray = 1,
  ResponseGetFileUrls_FieldNumber_ErrorsArray = 2,
};

/**
 * / Ответ на запрос на получение URL набора файлов
 **/
GPB_FINAL @interface ResponseGetFileUrls : GPBMessage

/** / Список структур с URL файлов */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<FileUrlDescription*> *fileUrlsArray;
/** The number of items in @c fileUrlsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger fileUrlsArray_Count;

/** / Список ошибок получения URL */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<FileUrlError*> *errorsArray;
/** The number of items in @c errorsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger errorsArray_Count;

@end

#pragma mark - RequestGetFileUrlBuilder

typedef GPB_ENUM(RequestGetFileUrlBuilder_FieldNumber) {
  RequestGetFileUrlBuilder_FieldNumber_SupportedSignatureAlgorithmsArray = 1,
};

/**
 * / deprecated
 **/
GPB_FINAL @interface RequestGetFileUrlBuilder : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *supportedSignatureAlgorithmsArray;
/** The number of items in @c supportedSignatureAlgorithmsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger supportedSignatureAlgorithmsArray_Count;

@end

#pragma mark - ResponseGetFileUrlBuilder

typedef GPB_ENUM(ResponseGetFileUrlBuilder_FieldNumber) {
  ResponseGetFileUrlBuilder_FieldNumber_BaseURL = 1,
  ResponseGetFileUrlBuilder_FieldNumber_Algo = 2,
  ResponseGetFileUrlBuilder_FieldNumber_SignatureSecret = 3,
  ResponseGetFileUrlBuilder_FieldNumber_Timeout = 4,
  ResponseGetFileUrlBuilder_FieldNumber_Seed = 5,
};

/**
 * / deprecated
 **/
GPB_FINAL @interface ResponseGetFileUrlBuilder : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *baseURL;

@property(nonatomic, readwrite, copy, null_resettable) NSString *algo;

@property(nonatomic, readwrite, copy, null_resettable) NSString *seed;

@property(nonatomic, readwrite, copy, null_resettable) NSData *signatureSecret;

@property(nonatomic, readwrite) int32_t timeout;

@end

#pragma mark - RequestGetFileUploadUrl

typedef GPB_ENUM(RequestGetFileUploadUrl_FieldNumber) {
  RequestGetFileUploadUrl_FieldNumber_ExpectedSize = 1,
};

/**
 * / Запрос на получение URL для загрузки файла
 **/
GPB_FINAL @interface RequestGetFileUploadUrl : GPBMessage

/** / Ожидаемый размер файла в байтах */
@property(nonatomic, readwrite) int32_t expectedSize;

@end

#pragma mark - ResponseGetFileUploadUrl

typedef GPB_ENUM(ResponseGetFileUploadUrl_FieldNumber) {
  ResponseGetFileUploadUrl_FieldNumber_UploadKey = 2,
};

/**
 * / Ответ на запрос на получение URL для загрузки файла
 **/
GPB_FINAL @interface ResponseGetFileUploadUrl : GPBMessage

/** / Ключ загрузки */
@property(nonatomic, readwrite, copy, null_resettable) NSData *uploadKey;

@end

#pragma mark - RequestCommitFileUpload

typedef GPB_ENUM(RequestCommitFileUpload_FieldNumber) {
  RequestCommitFileUpload_FieldNumber_UploadKey = 1,
  RequestCommitFileUpload_FieldNumber_FileName = 2,
  RequestCommitFileUpload_FieldNumber_Md5Hash = 3,
};

/**
 * / Запрос на завершение загрузки файла
 **/
GPB_FINAL @interface RequestCommitFileUpload : GPBMessage

/** / Ключ загрузки */
@property(nonatomic, readwrite, copy, null_resettable) NSData *uploadKey;

/** / Имя файла */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fileName;

/** / MD5-хэш файла */
@property(nonatomic, readwrite, copy, null_resettable) NSData *md5Hash;

@end

#pragma mark - ResponseCommitFileUpload

typedef GPB_ENUM(ResponseCommitFileUpload_FieldNumber) {
  ResponseCommitFileUpload_FieldNumber_UploadedFileLocation = 1,
};

/**
 * / Ответ на запрос на завершение загрузки файла
 **/
GPB_FINAL @interface ResponseCommitFileUpload : GPBMessage

/** / Координаты загруженного файла */
@property(nonatomic, readwrite, strong, null_resettable) FileLocation *uploadedFileLocation;
/** Test to see if @c uploadedFileLocation has been set. */
@property(nonatomic, readwrite) BOOL hasUploadedFileLocation;

@end

#pragma mark - RequestGetFileUploadPartUrl

typedef GPB_ENUM(RequestGetFileUploadPartUrl_FieldNumber) {
  RequestGetFileUploadPartUrl_FieldNumber_PartNumber = 1,
  RequestGetFileUploadPartUrl_FieldNumber_PartSize = 2,
  RequestGetFileUploadPartUrl_FieldNumber_UploadKey = 3,
};

/**
 * / Запрос на загрузку части файла
 **/
GPB_FINAL @interface RequestGetFileUploadPartUrl : GPBMessage

/** / Порядковый номер части файла */
@property(nonatomic, readwrite) int32_t partNumber;

/** / Размер части файла в байтах */
@property(nonatomic, readwrite) int32_t partSize;

/** / Ключ загрузки */
@property(nonatomic, readwrite, copy, null_resettable) NSData *uploadKey;

@end

#pragma mark - ResponseGetFileUploadPartUrl

typedef GPB_ENUM(ResponseGetFileUploadPartUrl_FieldNumber) {
  ResponseGetFileUploadPartUrl_FieldNumber_URL = 1,
};

/**
 * / Ответ на запрос на загрузку части файла
 **/
GPB_FINAL @interface ResponseGetFileUploadPartUrl : GPBMessage

/** / URL для загрузки */
@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
