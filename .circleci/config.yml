# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1

git_config: &git_config
  name: configure git bot
  command: |
    git config user.name "$GITHUB_BOT_USERNAME"
    git config user.email "$GITHUB_BOT_EMAIL"
    git remote set-url origin https://${GITHUB_BOT_TOKEN}@github.com/dialogs/api-schema.git

executors:
  java-executor:
    docker:
      - image: circleci/openjdk:8-jdk
    environment:
      JVM_OPTS: -Xmx3200m
    working_directory: ~/code
  sbt-executor:
    docker:
      - image: circleci/openjdk:8-jdk
    environment:
      SBT_OPTS: -Xmx6g
      SCALA_VERSION: 2.13.1
    working_directory: ~/code/scala
  python-executor:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/code

jobs:
  git-version-publish:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - run:
          <<: *git_config
      - run: npm ci
      - run: GH_TOKEN=$GITHUB_BOT_TOKEN NPM_TOKEN=$NPM_AUTH_TOKEN npx semantic-release -p @semantic-release/release-notes-generator,@semantic-release/github,@semantic-release/npm

  docs-build:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install protobuf-compiler
            go get -u github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc
      - run:
          name: Generate documentation
          command: |
            mkdir -p docs
            protoc -I./proto -I./include --plugin=protoc-gen-doc="$GOPATH/bin/protoc-gen-doc" --doc_out=./docs --doc_opt=markdown,readme.md ./proto/*.proto
      - persist_to_workspace:
          root: .
          paths:
            - docs
  docs-publish:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          <<: *git_config
      - run:
          name: Deploy gh-pages
          command: npx gh-pages@2.0.1 -d docs
  java-build:
    executor: java-executor
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Build
          command: ./gradlew build
      - save_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
          paths:
            - ~/.gradle
  java-publish:
    executor: java-executor
    steps:
      - checkout
      - run:
          <<: *git_config
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Release
          command: echo -ne '\n\n' | ./gradlew bintrayUpload
  python-build:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: build python
          command: |
            pip3 install --user grpcio grpcio-tools
            mkdir -p dialog_api
            python3 -m grpc_tools.protoc \
                    -I`pwd`/proto \
                    -I`pwd`/include \
                    --python_out=`pwd`/dialog_api \
                    --grpc_python_out=`pwd`/dialog_api \
                    `pwd`/proto/*.proto \
                    `pwd`/include/scalapb/scalapb.proto
            sed -i 's/^\(import.*_pb2\)/from . \1/' dialog_api/*.py
            sed -i -e "s/from scalapb/from .scalapb/g" dialog_api/*.py
      - persist_to_workspace:
          root: .
          paths:
            - dialog_api
  python-publish:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: configure pypi
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = __token__" >> ~/.pypirc
            echo -e "password = $PYPI_TOKEN" >> ~/.pypirc
      - run:
          name: install dependencies
          command: |
            python3 -m pip install --user twine
            python3 -m pip install --upgrade setuptools wheel
      - run:
          name: bunlde
          command: python3 setup.py sdist bdist_wheel
      - run:
          name: publish
          command: python3 -m twine upload ./dist/*
  npm-build:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - run: npm ci
      - run: npm run prepare
  sbt-build:
    executor: sbt-executor
    steps:
      - checkout:
          path: ~/code
      - restore_cache:
          key: v1-sbt-cache-{{ checksum "build.sbt" }}
      - run: sbt compile
      - save_cache:
          key: v1-sbt-cache-{{ checksum "build.sbt" }}
          paths: ['~/.sbt', '~/.ivy2/cache', '~/.m2']
  sbt-publish:
    executor: sbt-executor
    steps:
      - checkout:
          path: ~/code
      - run: sbt publish

workflows:
  version: 2
  git-version-publish:
    jobs:
      - npm-build
      - sbt-build
      - docs-build
      - java-build
      - python-build
      - git-version-publish:
          requires:
            - npm-build
            - sbt-build
            - docs-build
            - java-build
            - python-build
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
  build-publish:
    jobs:
      - npm-build
      - sbt-build
      - sbt-publish:
          requires:
            - sbt-build
          filters:
            tags:
              only: /^v.+$/
            branches:
              ignore: /.*/
      - java-build
      - java-publish:
          requires:
            - java-build
          filters:
            tags:
              only: /^v.+$/
            branches:
              ignore: /.*/
      - python-build
      - python-publish:
          requires:
            - python-build
          filters:
            tags:
              only: /^v.+$/
            branches:
              ignore: /.*/
      - docs-build
      - docs-publish:
          requires:
            - docs-build
          filters:
            tags:
              only: /^v.+$/
            branches:
              ignore: /.*/
